
H562-ACU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013994  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08013be4  08013be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d28  08013d28  0001509c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013d28  08013d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d30  08013d30  0001509c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d30  08013d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013d34  08013d34  00014d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08013d38  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007084  2000009c  08013dd4  0001509c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007120  08013dd4  00015120  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001509c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030121  00000000  00000000  000150d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b94  00000000  00000000  000451f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021a8  00000000  00000000  0004bd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000196c  00000000  00000000  0004df30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000363aa  00000000  00000000  0004f89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003320c  00000000  00000000  00085c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00150761  00000000  00000000  000b8e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002095b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e58  00000000  00000000  002095f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fa  00000000  00000000  00212450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000009c 	.word	0x2000009c
 800026c:	00000000 	.word	0x00000000
 8000270:	08013bcc 	.word	0x08013bcc

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200000a0 	.word	0x200000a0
 800028c:	08013bcc 	.word	0x08013bcc

08000290 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000290:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000296:	4917      	ldr	r1, [pc, #92]	@ (80002f4 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000298:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 800029c:	4816      	ldr	r0, [pc, #88]	@ (80002f8 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029e:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002a0:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a4:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a6:	4815      	ldr	r0, [pc, #84]	@ (80002fc <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a8:	4912      	ldr	r1, [pc, #72]	@ (80002f4 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002aa:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002ac:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002b2:	4913      	ldr	r1, [pc, #76]	@ (8000300 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002ba:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002bc:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002c0:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c4:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c8:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002cc:	490d      	ldr	r1, [pc, #52]	@ (8000304 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ce:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_BadHandler>

080002d8 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d8:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002de:	4770      	bx	lr

080002e0 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002e0:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002e2:	f000 f897 	bl	8000414 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ea:	4770      	bx	lr

080002ec <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_NMIHandler>

080002f0 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f4:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f8:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002fc:	200069a0 	.word	0x200069a0
    LDR     r1, =SYSTICK_CYCLES
 8000300:	0003d08f 	.word	0x0003d08f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000304:	40ff0000 	.word	0x40ff0000

08000308 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000308:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800030c:	4a2d      	ldr	r2, [pc, #180]	@ (80003c4 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030e:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000310:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000314:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000318:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 800031c:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000322:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000326:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 800032a:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032e:	f3bf 8f6f 	isb	sy

08000332 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000332:	e7fe      	b.n	8000332 <__tx_wait_here>

08000334 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	4824      	ldr	r0, [pc, #144]	@ (80003c8 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000336:	4a25      	ldr	r2, [pc, #148]	@ (80003cc <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000338:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 800033c:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033e:	b191      	cbz	r1, 8000366 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000340:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000342:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000346:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800034a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034e:	d101      	bne.n	8000354 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000350:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000354 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000354:	4c1e      	ldr	r4, [pc, #120]	@ (80003d0 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000356:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800035a:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035e:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000360:	b10d      	cbz	r5, 8000366 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000362:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000364:	6023      	str	r3, [r4, #0]

08000366 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000366:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000368:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800036a:	b1d1      	cbz	r1, 80003a2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 800036c:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036e:	b662      	cpsie	i

08000370 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000370:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000372:	4c17      	ldr	r4, [pc, #92]	@ (80003d0 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000374:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000376:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800037a:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 800037c:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000382:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000386:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800038a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000392:	d101      	bne.n	8000398 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000394:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000398 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000398:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800039c:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003a0:	4770      	bx	lr

080003a2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003a2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a8:	b909      	cbnz	r1, 80003ae <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003aa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003ac:	e7f9      	b.n	80003a2 <__tx_ts_wait>

080003ae <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003ae:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003b2:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b6:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003ba:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003bc:	e7d8      	b.n	8000370 <__tx_ts_restore>
 80003be:	bf00      	nop

080003c0 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003c0:	4770      	bx	lr
 80003c2:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c4:	20006a3c 	.word	0x20006a3c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c8:	200069a4 	.word	0x200069a4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003cc:	200069a8 	.word	0x200069a8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003d0:	20006fa8 	.word	0x20006fa8

080003d4 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d4:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d6:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003da:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003de:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003e2:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e4:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e8:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ea:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003ec:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ee:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003f0:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003f2:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f4:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f6:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f8:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003fa:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 8000400:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000406:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000408:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 800040a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040e:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000410:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000412:	4770      	bx	lr

08000414 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000414:	4922      	ldr	r1, [pc, #136]	@ (80004a0 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000416:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000418:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 800041c:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041e:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000420:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000422:	b13a      	cbz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000424:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000428:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800042a:	b91a      	cbnz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800042c:	4b1e      	ldr	r3, [pc, #120]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000432:	6018      	str	r0, [r3, #0]

08000434 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000434:	491d      	ldr	r1, [pc, #116]	@ (80004ac <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000436:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000438:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800043a:	b122      	cbz	r2, 8000446 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	4b1c      	ldr	r3, [pc, #112]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043e:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000442:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000444:	e008      	b.n	8000458 <__tx_timer_done>

08000446 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000446:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 800044c:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044e:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000450:	d101      	bne.n	8000456 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000452:	4b19      	ldr	r3, [pc, #100]	@ (80004b8 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000454:	6818      	ldr	r0, [r3, #0]

08000456 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000456:	6008      	str	r0, [r1, #0]

08000458 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800045a:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 800045c:	b912      	cbnz	r2, 8000464 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045e:	4914      	ldr	r1, [pc, #80]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000462:	b1c8      	cbz	r0, 8000498 <__tx_timer_nothing_expired>

08000464 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000464:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000466:	4912      	ldr	r1, [pc, #72]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000468:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800046a:	b108      	cbz	r0, 8000470 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800046c:	f011 fb02 	bl	8011a74 <_tx_timer_expiration_process>

08000470 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000470:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000472:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000474:	b172      	cbz	r2, 8000494 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000476:	f011 f9e1 	bl	801183c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800047a:	4810      	ldr	r0, [pc, #64]	@ (80004bc <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800047c:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047e:	b949      	cbnz	r1, 8000494 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000480:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000482:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000484:	4a0f      	ldr	r2, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000486:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000488:	480f      	ldr	r0, [pc, #60]	@ (80004c8 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800048a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000490:	d000      	beq.n	8000494 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000492:	6002      	str	r2, [r0, #0]

08000494 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000494:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000498 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000498:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800049c:	4770      	bx	lr
 800049e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004a0:	20006a48 	.word	0x20006a48
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a4:	20006fa8 	.word	0x20006fa8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a8:	20006a4c 	.word	0x20006a4c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004ac:	20006ad8 	.word	0x20006ad8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b0:	20006adc 	.word	0x20006adc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b4:	20006ad4 	.word	0x20006ad4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b8:	20006ad0 	.word	0x20006ad0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004bc:	20006a3c 	.word	0x20006a3c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004c0:	200069a4 	.word	0x200069a4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c4:	200069a8 	.word	0x200069a8
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c8:	e000ed04 	.word	0xe000ed04

080004cc <__aeabi_drsub>:
 80004cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e002      	b.n	80004d8 <__adddf3>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dsub>:
 80004d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d8 <__adddf3>:
 80004d8:	b530      	push	{r4, r5, lr}
 80004da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	bf1f      	itttt	ne
 80004ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004fe:	f000 80e2 	beq.w	80006c6 <__adddf3+0x1ee>
 8000502:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000506:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800050a:	bfb8      	it	lt
 800050c:	426d      	neglt	r5, r5
 800050e:	dd0c      	ble.n	800052a <__adddf3+0x52>
 8000510:	442c      	add	r4, r5
 8000512:	ea80 0202 	eor.w	r2, r0, r2
 8000516:	ea81 0303 	eor.w	r3, r1, r3
 800051a:	ea82 0000 	eor.w	r0, r2, r0
 800051e:	ea83 0101 	eor.w	r1, r3, r1
 8000522:	ea80 0202 	eor.w	r2, r0, r2
 8000526:	ea81 0303 	eor.w	r3, r1, r3
 800052a:	2d36      	cmp	r5, #54	@ 0x36
 800052c:	bf88      	it	hi
 800052e:	bd30      	pophi	{r4, r5, pc}
 8000530:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000534:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000538:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800053c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000540:	d002      	beq.n	8000548 <__adddf3+0x70>
 8000542:	4240      	negs	r0, r0
 8000544:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000548:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800054c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000550:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000554:	d002      	beq.n	800055c <__adddf3+0x84>
 8000556:	4252      	negs	r2, r2
 8000558:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800055c:	ea94 0f05 	teq	r4, r5
 8000560:	f000 80a7 	beq.w	80006b2 <__adddf3+0x1da>
 8000564:	f1a4 0401 	sub.w	r4, r4, #1
 8000568:	f1d5 0e20 	rsbs	lr, r5, #32
 800056c:	db0d      	blt.n	800058a <__adddf3+0xb2>
 800056e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000572:	fa22 f205 	lsr.w	r2, r2, r5
 8000576:	1880      	adds	r0, r0, r2
 8000578:	f141 0100 	adc.w	r1, r1, #0
 800057c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000580:	1880      	adds	r0, r0, r2
 8000582:	fa43 f305 	asr.w	r3, r3, r5
 8000586:	4159      	adcs	r1, r3
 8000588:	e00e      	b.n	80005a8 <__adddf3+0xd0>
 800058a:	f1a5 0520 	sub.w	r5, r5, #32
 800058e:	f10e 0e20 	add.w	lr, lr, #32
 8000592:	2a01      	cmp	r2, #1
 8000594:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000598:	bf28      	it	cs
 800059a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800059e:	fa43 f305 	asr.w	r3, r3, r5
 80005a2:	18c0      	adds	r0, r0, r3
 80005a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	d507      	bpl.n	80005be <__adddf3+0xe6>
 80005ae:	f04f 0e00 	mov.w	lr, #0
 80005b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80005be:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005c2:	d31b      	bcc.n	80005fc <__adddf3+0x124>
 80005c4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c8:	d30c      	bcc.n	80005e4 <__adddf3+0x10c>
 80005ca:	0849      	lsrs	r1, r1, #1
 80005cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005d4:	f104 0401 	add.w	r4, r4, #1
 80005d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005dc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e0:	f080 809a 	bcs.w	8000718 <__adddf3+0x240>
 80005e4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	ea41 0105 	orr.w	r1, r1, r5
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000600:	4140      	adcs	r0, r0
 8000602:	eb41 0101 	adc.w	r1, r1, r1
 8000606:	3c01      	subs	r4, #1
 8000608:	bf28      	it	cs
 800060a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800060e:	d2e9      	bcs.n	80005e4 <__adddf3+0x10c>
 8000610:	f091 0f00 	teq	r1, #0
 8000614:	bf04      	itt	eq
 8000616:	4601      	moveq	r1, r0
 8000618:	2000      	moveq	r0, #0
 800061a:	fab1 f381 	clz	r3, r1
 800061e:	bf08      	it	eq
 8000620:	3320      	addeq	r3, #32
 8000622:	f1a3 030b 	sub.w	r3, r3, #11
 8000626:	f1b3 0220 	subs.w	r2, r3, #32
 800062a:	da0c      	bge.n	8000646 <__adddf3+0x16e>
 800062c:	320c      	adds	r2, #12
 800062e:	dd08      	ble.n	8000642 <__adddf3+0x16a>
 8000630:	f102 0c14 	add.w	ip, r2, #20
 8000634:	f1c2 020c 	rsb	r2, r2, #12
 8000638:	fa01 f00c 	lsl.w	r0, r1, ip
 800063c:	fa21 f102 	lsr.w	r1, r1, r2
 8000640:	e00c      	b.n	800065c <__adddf3+0x184>
 8000642:	f102 0214 	add.w	r2, r2, #20
 8000646:	bfd8      	it	le
 8000648:	f1c2 0c20 	rsble	ip, r2, #32
 800064c:	fa01 f102 	lsl.w	r1, r1, r2
 8000650:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000654:	bfdc      	itt	le
 8000656:	ea41 010c 	orrle.w	r1, r1, ip
 800065a:	4090      	lslle	r0, r2
 800065c:	1ae4      	subs	r4, r4, r3
 800065e:	bfa2      	ittt	ge
 8000660:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000664:	4329      	orrge	r1, r5
 8000666:	bd30      	popge	{r4, r5, pc}
 8000668:	ea6f 0404 	mvn.w	r4, r4
 800066c:	3c1f      	subs	r4, #31
 800066e:	da1c      	bge.n	80006aa <__adddf3+0x1d2>
 8000670:	340c      	adds	r4, #12
 8000672:	dc0e      	bgt.n	8000692 <__adddf3+0x1ba>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0220 	rsb	r2, r4, #32
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f302 	lsl.w	r3, r1, r2
 8000684:	ea40 0003 	orr.w	r0, r0, r3
 8000688:	fa21 f304 	lsr.w	r3, r1, r4
 800068c:	ea45 0103 	orr.w	r1, r5, r3
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	f1c4 040c 	rsb	r4, r4, #12
 8000696:	f1c4 0220 	rsb	r2, r4, #32
 800069a:	fa20 f002 	lsr.w	r0, r0, r2
 800069e:	fa01 f304 	lsl.w	r3, r1, r4
 80006a2:	ea40 0003 	orr.w	r0, r0, r3
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	fa21 f004 	lsr.w	r0, r1, r4
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	f094 0f00 	teq	r4, #0
 80006b6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006ba:	bf06      	itte	eq
 80006bc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c0:	3401      	addeq	r4, #1
 80006c2:	3d01      	subne	r5, #1
 80006c4:	e74e      	b.n	8000564 <__adddf3+0x8c>
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf18      	it	ne
 80006cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d0:	d029      	beq.n	8000726 <__adddf3+0x24e>
 80006d2:	ea94 0f05 	teq	r4, r5
 80006d6:	bf08      	it	eq
 80006d8:	ea90 0f02 	teqeq	r0, r2
 80006dc:	d005      	beq.n	80006ea <__adddf3+0x212>
 80006de:	ea54 0c00 	orrs.w	ip, r4, r0
 80006e2:	bf04      	itt	eq
 80006e4:	4619      	moveq	r1, r3
 80006e6:	4610      	moveq	r0, r2
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	ea91 0f03 	teq	r1, r3
 80006ee:	bf1e      	ittt	ne
 80006f0:	2100      	movne	r1, #0
 80006f2:	2000      	movne	r0, #0
 80006f4:	bd30      	popne	{r4, r5, pc}
 80006f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006fa:	d105      	bne.n	8000708 <__adddf3+0x230>
 80006fc:	0040      	lsls	r0, r0, #1
 80006fe:	4149      	adcs	r1, r1
 8000700:	bf28      	it	cs
 8000702:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd30      	pop	{r4, r5, pc}
 8000708:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800070c:	bf3c      	itt	cc
 800070e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000712:	bd30      	popcc	{r4, r5, pc}
 8000714:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000718:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd30      	pop	{r4, r5, pc}
 8000726:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800072a:	bf1a      	itte	ne
 800072c:	4619      	movne	r1, r3
 800072e:	4610      	movne	r0, r2
 8000730:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000734:	bf1c      	itt	ne
 8000736:	460b      	movne	r3, r1
 8000738:	4602      	movne	r2, r0
 800073a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800073e:	bf06      	itte	eq
 8000740:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000744:	ea91 0f03 	teqeq	r1, r3
 8000748:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	bf00      	nop

08000750 <__aeabi_ui2d>:
 8000750:	f090 0f00 	teq	r0, #0
 8000754:	bf04      	itt	eq
 8000756:	2100      	moveq	r1, #0
 8000758:	4770      	bxeq	lr
 800075a:	b530      	push	{r4, r5, lr}
 800075c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000760:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000764:	f04f 0500 	mov.w	r5, #0
 8000768:	f04f 0100 	mov.w	r1, #0
 800076c:	e750      	b.n	8000610 <__adddf3+0x138>
 800076e:	bf00      	nop

08000770 <__aeabi_i2d>:
 8000770:	f090 0f00 	teq	r0, #0
 8000774:	bf04      	itt	eq
 8000776:	2100      	moveq	r1, #0
 8000778:	4770      	bxeq	lr
 800077a:	b530      	push	{r4, r5, lr}
 800077c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000780:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000784:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000788:	bf48      	it	mi
 800078a:	4240      	negmi	r0, r0
 800078c:	f04f 0100 	mov.w	r1, #0
 8000790:	e73e      	b.n	8000610 <__adddf3+0x138>
 8000792:	bf00      	nop

08000794 <__aeabi_f2d>:
 8000794:	0042      	lsls	r2, r0, #1
 8000796:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007a2:	bf1f      	itttt	ne
 80007a4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007ac:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b0:	4770      	bxne	lr
 80007b2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007b6:	bf08      	it	eq
 80007b8:	4770      	bxeq	lr
 80007ba:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007be:	bf04      	itt	eq
 80007c0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007c4:	4770      	bxeq	lr
 80007c6:	b530      	push	{r4, r5, lr}
 80007c8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007d4:	e71c      	b.n	8000610 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_ul2d>:
 80007d8:	ea50 0201 	orrs.w	r2, r0, r1
 80007dc:	bf08      	it	eq
 80007de:	4770      	bxeq	lr
 80007e0:	b530      	push	{r4, r5, lr}
 80007e2:	f04f 0500 	mov.w	r5, #0
 80007e6:	e00a      	b.n	80007fe <__aeabi_l2d+0x16>

080007e8 <__aeabi_l2d>:
 80007e8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ec:	bf08      	it	eq
 80007ee:	4770      	bxeq	lr
 80007f0:	b530      	push	{r4, r5, lr}
 80007f2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007f6:	d502      	bpl.n	80007fe <__aeabi_l2d+0x16>
 80007f8:	4240      	negs	r0, r0
 80007fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fe:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000802:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000806:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800080a:	f43f aed8 	beq.w	80005be <__adddf3+0xe6>
 800080e:	f04f 0203 	mov.w	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000826:	f1c2 0320 	rsb	r3, r2, #32
 800082a:	fa00 fc03 	lsl.w	ip, r0, r3
 800082e:	fa20 f002 	lsr.w	r0, r0, r2
 8000832:	fa01 fe03 	lsl.w	lr, r1, r3
 8000836:	ea40 000e 	orr.w	r0, r0, lr
 800083a:	fa21 f102 	lsr.w	r1, r1, r2
 800083e:	4414      	add	r4, r2
 8000840:	e6bd      	b.n	80005be <__adddf3+0xe6>
 8000842:	bf00      	nop

08000844 <__aeabi_dmul>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8de 	bleq	8000a20 <__aeabi_dmul+0x1dc>
 8000864:	442c      	add	r4, r5
 8000866:	ea81 0603 	eor.w	r6, r1, r3
 800086a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800086e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000872:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000876:	bf18      	it	ne
 8000878:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800087c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000880:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000884:	d038      	beq.n	80008f8 <__aeabi_dmul+0xb4>
 8000886:	fba0 ce02 	umull	ip, lr, r0, r2
 800088a:	f04f 0500 	mov.w	r5, #0
 800088e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000892:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000896:	fbe0 e503 	umlal	lr, r5, r0, r3
 800089a:	f04f 0600 	mov.w	r6, #0
 800089e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008a2:	f09c 0f00 	teq	ip, #0
 80008a6:	bf18      	it	ne
 80008a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80008ac:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80008b0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80008b4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80008b8:	d204      	bcs.n	80008c4 <__aeabi_dmul+0x80>
 80008ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008be:	416d      	adcs	r5, r5
 80008c0:	eb46 0606 	adc.w	r6, r6, r6
 80008c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008d8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008dc:	bf88      	it	hi
 80008de:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e2:	d81e      	bhi.n	8000922 <__aeabi_dmul+0xde>
 80008e4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80008e8:	bf08      	it	eq
 80008ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80008fc:	ea46 0101 	orr.w	r1, r6, r1
 8000900:	ea40 0002 	orr.w	r0, r0, r2
 8000904:	ea81 0103 	eor.w	r1, r1, r3
 8000908:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	f300 80ab 	bgt.w	8000a7c <__aeabi_dmul+0x238>
 8000926:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800092a:	bfde      	ittt	le
 800092c:	2000      	movle	r0, #0
 800092e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000932:	bd70      	pople	{r4, r5, r6, pc}
 8000934:	f1c4 0400 	rsb	r4, r4, #0
 8000938:	3c20      	subs	r4, #32
 800093a:	da35      	bge.n	80009a8 <__aeabi_dmul+0x164>
 800093c:	340c      	adds	r4, #12
 800093e:	dc1b      	bgt.n	8000978 <__aeabi_dmul+0x134>
 8000940:	f104 0414 	add.w	r4, r4, #20
 8000944:	f1c4 0520 	rsb	r5, r4, #32
 8000948:	fa00 f305 	lsl.w	r3, r0, r5
 800094c:	fa20 f004 	lsr.w	r0, r0, r4
 8000950:	fa01 f205 	lsl.w	r2, r1, r5
 8000954:	ea40 0002 	orr.w	r0, r0, r2
 8000958:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800095c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000960:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000964:	fa21 f604 	lsr.w	r6, r1, r4
 8000968:	eb42 0106 	adc.w	r1, r2, r6
 800096c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000970:	bf08      	it	eq
 8000972:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f1c4 040c 	rsb	r4, r4, #12
 800097c:	f1c4 0520 	rsb	r5, r4, #32
 8000980:	fa00 f304 	lsl.w	r3, r0, r4
 8000984:	fa20 f005 	lsr.w	r0, r0, r5
 8000988:	fa01 f204 	lsl.w	r2, r1, r4
 800098c:	ea40 0002 	orr.w	r0, r0, r2
 8000990:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000994:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000998:	f141 0100 	adc.w	r1, r1, #0
 800099c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a0:	bf08      	it	eq
 80009a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f1c4 0520 	rsb	r5, r4, #32
 80009ac:	fa00 f205 	lsl.w	r2, r0, r5
 80009b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80009b4:	fa20 f304 	lsr.w	r3, r0, r4
 80009b8:	fa01 f205 	lsl.w	r2, r1, r5
 80009bc:	ea43 0302 	orr.w	r3, r3, r2
 80009c0:	fa21 f004 	lsr.w	r0, r1, r4
 80009c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80009c8:	fa21 f204 	lsr.w	r2, r1, r4
 80009cc:	ea20 0002 	bic.w	r0, r0, r2
 80009d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009d8:	bf08      	it	eq
 80009da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f094 0f00 	teq	r4, #0
 80009e4:	d10f      	bne.n	8000a06 <__aeabi_dmul+0x1c2>
 80009e6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80009ea:	0040      	lsls	r0, r0, #1
 80009ec:	eb41 0101 	adc.w	r1, r1, r1
 80009f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009f4:	bf08      	it	eq
 80009f6:	3c01      	subeq	r4, #1
 80009f8:	d0f7      	beq.n	80009ea <__aeabi_dmul+0x1a6>
 80009fa:	ea41 0106 	orr.w	r1, r1, r6
 80009fe:	f095 0f00 	teq	r5, #0
 8000a02:	bf18      	it	ne
 8000a04:	4770      	bxne	lr
 8000a06:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	eb43 0303 	adc.w	r3, r3, r3
 8000a10:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000a14:	bf08      	it	eq
 8000a16:	3d01      	subeq	r5, #1
 8000a18:	d0f7      	beq.n	8000a0a <__aeabi_dmul+0x1c6>
 8000a1a:	ea43 0306 	orr.w	r3, r3, r6
 8000a1e:	4770      	bx	lr
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a28:	bf18      	it	ne
 8000a2a:	ea95 0f0c 	teqne	r5, ip
 8000a2e:	d00c      	beq.n	8000a4a <__aeabi_dmul+0x206>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	d1d1      	bne.n	80009e0 <__aeabi_dmul+0x19c>
 8000a3c:	ea81 0103 	eor.w	r1, r1, r3
 8000a40:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	bd70      	pop	{r4, r5, r6, pc}
 8000a4a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a4e:	bf06      	itte	eq
 8000a50:	4610      	moveq	r0, r2
 8000a52:	4619      	moveq	r1, r3
 8000a54:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a58:	d019      	beq.n	8000a8e <__aeabi_dmul+0x24a>
 8000a5a:	ea94 0f0c 	teq	r4, ip
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dmul+0x222>
 8000a60:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a64:	d113      	bne.n	8000a8e <__aeabi_dmul+0x24a>
 8000a66:	ea95 0f0c 	teq	r5, ip
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_dmul+0x234>
 8000a6c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a70:	bf1c      	itt	ne
 8000a72:	4610      	movne	r0, r2
 8000a74:	4619      	movne	r1, r3
 8000a76:	d10a      	bne.n	8000a8e <__aeabi_dmul+0x24a>
 8000a78:	ea81 0103 	eor.w	r1, r1, r3
 8000a7c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000a80:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000a84:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
 8000a8e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000a92:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000a96:	bd70      	pop	{r4, r5, r6, pc}

08000a98 <__aeabi_ddiv>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a9e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000aa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aa6:	bf1d      	ittte	ne
 8000aa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000aac:	ea94 0f0c 	teqne	r4, ip
 8000ab0:	ea95 0f0c 	teqne	r5, ip
 8000ab4:	f000 f8a7 	bleq	8000c06 <__aeabi_ddiv+0x16e>
 8000ab8:	eba4 0405 	sub.w	r4, r4, r5
 8000abc:	ea81 0e03 	eor.w	lr, r1, r3
 8000ac0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ac4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ac8:	f000 8088 	beq.w	8000bdc <__aeabi_ddiv+0x144>
 8000acc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ad0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000ad4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000ad8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000adc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ae0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000ae4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000ae8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000aec:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000af0:	429d      	cmp	r5, r3
 8000af2:	bf08      	it	eq
 8000af4:	4296      	cmpeq	r6, r2
 8000af6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000afa:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000afe:	d202      	bcs.n	8000b06 <__aeabi_ddiv+0x6e>
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b06:	1ab6      	subs	r6, r6, r2
 8000b08:	eb65 0503 	sbc.w	r5, r5, r3
 8000b0c:	085b      	lsrs	r3, r3, #1
 8000b0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b12:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000b16:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000b1a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b1e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b22:	bf22      	ittt	cs
 8000b24:	1ab6      	subcs	r6, r6, r2
 8000b26:	4675      	movcs	r5, lr
 8000b28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b32:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b36:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b3a:	bf22      	ittt	cs
 8000b3c:	1ab6      	subcs	r6, r6, r2
 8000b3e:	4675      	movcs	r5, lr
 8000b40:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b44:	085b      	lsrs	r3, r3, #1
 8000b46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b52:	bf22      	ittt	cs
 8000b54:	1ab6      	subcs	r6, r6, r2
 8000b56:	4675      	movcs	r5, lr
 8000b58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b5c:	085b      	lsrs	r3, r3, #1
 8000b5e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b62:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b66:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b6a:	bf22      	ittt	cs
 8000b6c:	1ab6      	subcs	r6, r6, r2
 8000b6e:	4675      	movcs	r5, lr
 8000b70:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b74:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b78:	d018      	beq.n	8000bac <__aeabi_ddiv+0x114>
 8000b7a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b7e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b82:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b8a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b8e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b92:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b96:	d1c0      	bne.n	8000b1a <__aeabi_ddiv+0x82>
 8000b98:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000b9c:	d10b      	bne.n	8000bb6 <__aeabi_ddiv+0x11e>
 8000b9e:	ea41 0100 	orr.w	r1, r1, r0
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000baa:	e7b6      	b.n	8000b1a <__aeabi_ddiv+0x82>
 8000bac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000bb0:	bf04      	itt	eq
 8000bb2:	4301      	orreq	r1, r0
 8000bb4:	2000      	moveq	r0, #0
 8000bb6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000bba:	bf88      	it	hi
 8000bbc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000bc0:	f63f aeaf 	bhi.w	8000922 <__aeabi_dmul+0xde>
 8000bc4:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bc8:	bf04      	itt	eq
 8000bca:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bd2:	f150 0000 	adcs.w	r0, r0, #0
 8000bd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bda:	bd70      	pop	{r4, r5, r6, pc}
 8000bdc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000be0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000be4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000be8:	bfc2      	ittt	gt
 8000bea:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000bee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bf2:	bd70      	popgt	{r4, r5, r6, pc}
 8000bf4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf8:	f04f 0e00 	mov.w	lr, #0
 8000bfc:	3c01      	subs	r4, #1
 8000bfe:	e690      	b.n	8000922 <__aeabi_dmul+0xde>
 8000c00:	ea45 0e06 	orr.w	lr, r5, r6
 8000c04:	e68d      	b.n	8000922 <__aeabi_dmul+0xde>
 8000c06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c0a:	ea94 0f0c 	teq	r4, ip
 8000c0e:	bf08      	it	eq
 8000c10:	ea95 0f0c 	teqeq	r5, ip
 8000c14:	f43f af3b 	beq.w	8000a8e <__aeabi_dmul+0x24a>
 8000c18:	ea94 0f0c 	teq	r4, ip
 8000c1c:	d10a      	bne.n	8000c34 <__aeabi_ddiv+0x19c>
 8000c1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c22:	f47f af34 	bne.w	8000a8e <__aeabi_dmul+0x24a>
 8000c26:	ea95 0f0c 	teq	r5, ip
 8000c2a:	f47f af25 	bne.w	8000a78 <__aeabi_dmul+0x234>
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	e72c      	b.n	8000a8e <__aeabi_dmul+0x24a>
 8000c34:	ea95 0f0c 	teq	r5, ip
 8000c38:	d106      	bne.n	8000c48 <__aeabi_ddiv+0x1b0>
 8000c3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c3e:	f43f aefd 	beq.w	8000a3c <__aeabi_dmul+0x1f8>
 8000c42:	4610      	mov	r0, r2
 8000c44:	4619      	mov	r1, r3
 8000c46:	e722      	b.n	8000a8e <__aeabi_dmul+0x24a>
 8000c48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c4c:	bf18      	it	ne
 8000c4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c52:	f47f aec5 	bne.w	80009e0 <__aeabi_dmul+0x19c>
 8000c56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c5a:	f47f af0d 	bne.w	8000a78 <__aeabi_dmul+0x234>
 8000c5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c62:	f47f aeeb 	bne.w	8000a3c <__aeabi_dmul+0x1f8>
 8000c66:	e712      	b.n	8000a8e <__aeabi_dmul+0x24a>

08000c68 <__aeabi_d2f>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c70:	bf24      	itt	cs
 8000c72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_d2f+0x30>
 8000c7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c9c:	d121      	bne.n	8000ce2 <__aeabi_d2f+0x7a>
 8000c9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ca2:	bfbc      	itt	lt
 8000ca4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ca8:	4770      	bxlt	lr
 8000caa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000cae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb2:	f1c2 0218 	rsb	r2, r2, #24
 8000cb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc2:	bf18      	it	ne
 8000cc4:	f040 0001 	orrne.w	r0, r0, #1
 8000cc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ccc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd4:	ea40 000c 	orr.w	r0, r0, ip
 8000cd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce0:	e7cc      	b.n	8000c7c <__aeabi_d2f+0x14>
 8000ce2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce6:	d107      	bne.n	8000cf8 <__aeabi_d2f+0x90>
 8000ce8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cec:	bf1e      	ittt	ne
 8000cee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cf2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cf6:	4770      	bxne	lr
 8000cf8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__aeabi_uldivmod>:
 8000d08:	b953      	cbnz	r3, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0a:	b94a      	cbnz	r2, 8000d20 <__aeabi_uldivmod+0x18>
 8000d0c:	2900      	cmp	r1, #0
 8000d0e:	bf08      	it	eq
 8000d10:	2800      	cmpeq	r0, #0
 8000d12:	bf1c      	itt	ne
 8000d14:	f04f 31ff 	movne.w	r1, #4294967295
 8000d18:	f04f 30ff 	movne.w	r0, #4294967295
 8000d1c:	f000 b9b0 	b.w	8001080 <__aeabi_idiv0>
 8000d20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d28:	f000 f806 	bl	8000d38 <__udivmoddi4>
 8000d2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d34:	b004      	add	sp, #16
 8000d36:	4770      	bx	lr

08000d38 <__udivmoddi4>:
 8000d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d3c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d3e:	4688      	mov	r8, r1
 8000d40:	4604      	mov	r4, r0
 8000d42:	468e      	mov	lr, r1
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d14a      	bne.n	8000dde <__udivmoddi4+0xa6>
 8000d48:	428a      	cmp	r2, r1
 8000d4a:	4617      	mov	r7, r2
 8000d4c:	d95f      	bls.n	8000e0e <__udivmoddi4+0xd6>
 8000d4e:	fab2 f682 	clz	r6, r2
 8000d52:	b14e      	cbz	r6, 8000d68 <__udivmoddi4+0x30>
 8000d54:	f1c6 0320 	rsb	r3, r6, #32
 8000d58:	fa01 fe06 	lsl.w	lr, r1, r6
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	40b4      	lsls	r4, r6
 8000d60:	fa20 f303 	lsr.w	r3, r0, r3
 8000d64:	ea43 0e0e 	orr.w	lr, r3, lr
 8000d68:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d6c:	fa1f fc87 	uxth.w	ip, r7
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fbbe f1f8 	udiv	r1, lr, r8
 8000d76:	fb08 ee11 	mls	lr, r8, r1, lr
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x5e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x5c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 8154 	bhi.w	800103c <__udivmoddi4+0x304>
 8000d94:	4601      	mov	r1, r0
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	b2a2      	uxth	r2, r4
 8000d9a:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9e:	fb08 3310 	mls	r3, r8, r0, r3
 8000da2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000da6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000daa:	4594      	cmp	ip, r2
 8000dac:	d90b      	bls.n	8000dc6 <__udivmoddi4+0x8e>
 8000dae:	18ba      	adds	r2, r7, r2
 8000db0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db4:	bf2c      	ite	cs
 8000db6:	2401      	movcs	r4, #1
 8000db8:	2400      	movcc	r4, #0
 8000dba:	4594      	cmp	ip, r2
 8000dbc:	d902      	bls.n	8000dc4 <__udivmoddi4+0x8c>
 8000dbe:	2c00      	cmp	r4, #0
 8000dc0:	f000 813f 	beq.w	8001042 <__udivmoddi4+0x30a>
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dca:	eba2 020c 	sub.w	r2, r2, ip
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa2>
 8000dd2:	40f2      	lsrs	r2, r6
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c5 2300 	strd	r2, r3, [r5]
 8000dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xb6>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb0>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa2>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d14e      	bne.n	8000e94 <__udivmoddi4+0x15c>
 8000df6:	4543      	cmp	r3, r8
 8000df8:	f0c0 8112 	bcc.w	8001020 <__udivmoddi4+0x2e8>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f240 810f 	bls.w	8001020 <__udivmoddi4+0x2e8>
 8000e02:	4608      	mov	r0, r1
 8000e04:	2d00      	cmp	r5, #0
 8000e06:	d0e8      	beq.n	8000dda <__udivmoddi4+0xa2>
 8000e08:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0c:	e7e5      	b.n	8000dda <__udivmoddi4+0xa2>
 8000e0e:	2a00      	cmp	r2, #0
 8000e10:	f000 80ac 	beq.w	8000f6c <__udivmoddi4+0x234>
 8000e14:	fab2 f682 	clz	r6, r2
 8000e18:	2e00      	cmp	r6, #0
 8000e1a:	f040 80bb 	bne.w	8000f94 <__udivmoddi4+0x25c>
 8000e1e:	1a8b      	subs	r3, r1, r2
 8000e20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e24:	b2bc      	uxth	r4, r7
 8000e26:	2101      	movs	r1, #1
 8000e28:	0c02      	lsrs	r2, r0, #16
 8000e2a:	b280      	uxth	r0, r0
 8000e2c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e34:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000e38:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d90e      	bls.n	8000e5e <__udivmoddi4+0x126>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e46:	bf2c      	ite	cs
 8000e48:	f04f 0901 	movcs.w	r9, #1
 8000e4c:	f04f 0900 	movcc.w	r9, #0
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d903      	bls.n	8000e5c <__udivmoddi4+0x124>
 8000e54:	f1b9 0f00 	cmp.w	r9, #0
 8000e58:	f000 80ec 	beq.w	8001034 <__udivmoddi4+0x2fc>
 8000e5c:	46c4      	mov	ip, r8
 8000e5e:	1a9b      	subs	r3, r3, r2
 8000e60:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e64:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e68:	fb04 f408 	mul.w	r4, r4, r8
 8000e6c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000e70:	4294      	cmp	r4, r2
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x154>
 8000e74:	18ba      	adds	r2, r7, r2
 8000e76:	f108 33ff 	add.w	r3, r8, #4294967295
 8000e7a:	bf2c      	ite	cs
 8000e7c:	2001      	movcs	r0, #1
 8000e7e:	2000      	movcc	r0, #0
 8000e80:	4294      	cmp	r4, r2
 8000e82:	d902      	bls.n	8000e8a <__udivmoddi4+0x152>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	f000 80d1 	beq.w	800102c <__udivmoddi4+0x2f4>
 8000e8a:	4698      	mov	r8, r3
 8000e8c:	1b12      	subs	r2, r2, r4
 8000e8e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000e92:	e79d      	b.n	8000dd0 <__udivmoddi4+0x98>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa08 f401 	lsl.w	r4, r8, r1
 8000e9e:	fa00 f901 	lsl.w	r9, r0, r1
 8000ea2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ea6:	fa28 f806 	lsr.w	r8, r8, r6
 8000eaa:	408a      	lsls	r2, r1
 8000eac:	431f      	orrs	r7, r3
 8000eae:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	4323      	orrs	r3, r4
 8000eb6:	fa1f fc87 	uxth.w	ip, r7
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fbb8 fef0 	udiv	lr, r8, r0
 8000ec0:	fb00 881e 	mls	r8, r0, lr, r8
 8000ec4:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ec8:	fb0e f80c 	mul.w	r8, lr, ip
 8000ecc:	45a0      	cmp	r8, r4
 8000ece:	d90e      	bls.n	8000eee <__udivmoddi4+0x1b6>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ed6:	bf2c      	ite	cs
 8000ed8:	f04f 0b01 	movcs.w	fp, #1
 8000edc:	f04f 0b00 	movcc.w	fp, #0
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	d903      	bls.n	8000eec <__udivmoddi4+0x1b4>
 8000ee4:	f1bb 0f00 	cmp.w	fp, #0
 8000ee8:	f000 80b8 	beq.w	800105c <__udivmoddi4+0x324>
 8000eec:	46d6      	mov	lr, sl
 8000eee:	eba4 0408 	sub.w	r4, r4, r8
 8000ef2:	fa1f f883 	uxth.w	r8, r3
 8000ef6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000efa:	fb00 4413 	mls	r4, r0, r3, r4
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000f06:	45a4      	cmp	ip, r4
 8000f08:	d90e      	bls.n	8000f28 <__udivmoddi4+0x1f0>
 8000f0a:	193c      	adds	r4, r7, r4
 8000f0c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f10:	bf2c      	ite	cs
 8000f12:	f04f 0801 	movcs.w	r8, #1
 8000f16:	f04f 0800 	movcc.w	r8, #0
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d903      	bls.n	8000f26 <__udivmoddi4+0x1ee>
 8000f1e:	f1b8 0f00 	cmp.w	r8, #0
 8000f22:	f000 809f 	beq.w	8001064 <__udivmoddi4+0x32c>
 8000f26:	4603      	mov	r3, r0
 8000f28:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2c:	eba4 040c 	sub.w	r4, r4, ip
 8000f30:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f34:	4564      	cmp	r4, ip
 8000f36:	4673      	mov	r3, lr
 8000f38:	46e0      	mov	r8, ip
 8000f3a:	d302      	bcc.n	8000f42 <__udivmoddi4+0x20a>
 8000f3c:	d107      	bne.n	8000f4e <__udivmoddi4+0x216>
 8000f3e:	45f1      	cmp	r9, lr
 8000f40:	d205      	bcs.n	8000f4e <__udivmoddi4+0x216>
 8000f42:	ebbe 0302 	subs.w	r3, lr, r2
 8000f46:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	46e0      	mov	r8, ip
 8000f4e:	b15d      	cbz	r5, 8000f68 <__udivmoddi4+0x230>
 8000f50:	ebb9 0203 	subs.w	r2, r9, r3
 8000f54:	eb64 0408 	sbc.w	r4, r4, r8
 8000f58:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5c:	fa22 f301 	lsr.w	r3, r2, r1
 8000f60:	40cc      	lsrs	r4, r1
 8000f62:	431e      	orrs	r6, r3
 8000f64:	e9c5 6400 	strd	r6, r4, [r5]
 8000f68:	2100      	movs	r1, #0
 8000f6a:	e736      	b.n	8000dda <__udivmoddi4+0xa2>
 8000f6c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f70:	0c01      	lsrs	r1, r0, #16
 8000f72:	4614      	mov	r4, r2
 8000f74:	b280      	uxth	r0, r0
 8000f76:	4696      	mov	lr, r2
 8000f78:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f7c:	2620      	movs	r6, #32
 8000f7e:	4690      	mov	r8, r2
 8000f80:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000f84:	4610      	mov	r0, r2
 8000f86:	fbb1 f1f2 	udiv	r1, r1, r2
 8000f8a:	eba3 0308 	sub.w	r3, r3, r8
 8000f8e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f92:	e74b      	b.n	8000e2c <__udivmoddi4+0xf4>
 8000f94:	40b7      	lsls	r7, r6
 8000f96:	f1c6 0320 	rsb	r3, r6, #32
 8000f9a:	fa01 f206 	lsl.w	r2, r1, r6
 8000f9e:	fa21 f803 	lsr.w	r8, r1, r3
 8000fa2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fa6:	fa20 f303 	lsr.w	r3, r0, r3
 8000faa:	b2bc      	uxth	r4, r7
 8000fac:	40b0      	lsls	r0, r6
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	0c02      	lsrs	r2, r0, #16
 8000fb2:	0c19      	lsrs	r1, r3, #16
 8000fb4:	b280      	uxth	r0, r0
 8000fb6:	fbb8 f9fe 	udiv	r9, r8, lr
 8000fba:	fb0e 8819 	mls	r8, lr, r9, r8
 8000fbe:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	4588      	cmp	r8, r1
 8000fc8:	d951      	bls.n	800106e <__udivmoddi4+0x336>
 8000fca:	1879      	adds	r1, r7, r1
 8000fcc:	f109 3cff 	add.w	ip, r9, #4294967295
 8000fd0:	bf2c      	ite	cs
 8000fd2:	f04f 0a01 	movcs.w	sl, #1
 8000fd6:	f04f 0a00 	movcc.w	sl, #0
 8000fda:	4588      	cmp	r8, r1
 8000fdc:	d902      	bls.n	8000fe4 <__udivmoddi4+0x2ac>
 8000fde:	f1ba 0f00 	cmp.w	sl, #0
 8000fe2:	d031      	beq.n	8001048 <__udivmoddi4+0x310>
 8000fe4:	eba1 0108 	sub.w	r1, r1, r8
 8000fe8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fec:	fb09 f804 	mul.w	r8, r9, r4
 8000ff0:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ffa:	4543      	cmp	r3, r8
 8000ffc:	d235      	bcs.n	800106a <__udivmoddi4+0x332>
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	f109 31ff 	add.w	r1, r9, #4294967295
 8001004:	bf2c      	ite	cs
 8001006:	f04f 0a01 	movcs.w	sl, #1
 800100a:	f04f 0a00 	movcc.w	sl, #0
 800100e:	4543      	cmp	r3, r8
 8001010:	d2bb      	bcs.n	8000f8a <__udivmoddi4+0x252>
 8001012:	f1ba 0f00 	cmp.w	sl, #0
 8001016:	d1b8      	bne.n	8000f8a <__udivmoddi4+0x252>
 8001018:	f1a9 0102 	sub.w	r1, r9, #2
 800101c:	443b      	add	r3, r7
 800101e:	e7b4      	b.n	8000f8a <__udivmoddi4+0x252>
 8001020:	1a84      	subs	r4, r0, r2
 8001022:	eb68 0203 	sbc.w	r2, r8, r3
 8001026:	2001      	movs	r0, #1
 8001028:	4696      	mov	lr, r2
 800102a:	e6eb      	b.n	8000e04 <__udivmoddi4+0xcc>
 800102c:	443a      	add	r2, r7
 800102e:	f1a8 0802 	sub.w	r8, r8, #2
 8001032:	e72b      	b.n	8000e8c <__udivmoddi4+0x154>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	443b      	add	r3, r7
 800103a:	e710      	b.n	8000e5e <__udivmoddi4+0x126>
 800103c:	3902      	subs	r1, #2
 800103e:	443b      	add	r3, r7
 8001040:	e6a9      	b.n	8000d96 <__udivmoddi4+0x5e>
 8001042:	443a      	add	r2, r7
 8001044:	3802      	subs	r0, #2
 8001046:	e6be      	b.n	8000dc6 <__udivmoddi4+0x8e>
 8001048:	eba7 0808 	sub.w	r8, r7, r8
 800104c:	f1a9 0c02 	sub.w	ip, r9, #2
 8001050:	4441      	add	r1, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c9      	b.n	8000ff0 <__udivmoddi4+0x2b8>
 800105c:	f1ae 0e02 	sub.w	lr, lr, #2
 8001060:	443c      	add	r4, r7
 8001062:	e744      	b.n	8000eee <__udivmoddi4+0x1b6>
 8001064:	3b02      	subs	r3, #2
 8001066:	443c      	add	r4, r7
 8001068:	e75e      	b.n	8000f28 <__udivmoddi4+0x1f0>
 800106a:	4649      	mov	r1, r9
 800106c:	e78d      	b.n	8000f8a <__udivmoddi4+0x252>
 800106e:	eba1 0108 	sub.w	r1, r1, r8
 8001072:	46cc      	mov	ip, r9
 8001074:	fbb1 f9fe 	udiv	r9, r1, lr
 8001078:	fb09 f804 	mul.w	r8, r9, r4
 800107c:	e7b8      	b.n	8000ff0 <__udivmoddi4+0x2b8>
 800107e:	bf00      	nop

08001080 <__aeabi_idiv0>:
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af02      	add	r7, sp, #8
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001090:	2334      	movs	r3, #52	@ 0x34
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001098:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <tx_application_define+0x44>)
 800109a:	490c      	ldr	r1, [pc, #48]	@ (80010cc <tx_application_define+0x48>)
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <tx_application_define+0x4c>)
 800109e:	f011 fb69 	bl	8012774 <_txe_byte_pool_create>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10a      	bne.n	80010be <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <tx_application_define+0x4c>)
 80010aa:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80010ac:	68b8      	ldr	r0, [r7, #8]
 80010ae:	f000 f811 	bl	80010d4 <App_ThreadX_Init>
 80010b2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80010ba:	bf00      	nop
 80010bc:	e7fd      	b.n	80010ba <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000b8 	.word	0x200000b8
 80010cc:	08013be4 	.word	0x08013be4
 80010d0:	200028b8 	.word	0x200028b8

080010d4 <App_ThreadX_Init>:
/**
 * @brief  Application ThreadX Initialization.
 * @param memory_ptr: memory pointer
 * @retval int
 */
UINT App_ThreadX_Init(VOID *memory_ptr) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	@ 0x30
 80010d8:	af08      	add	r7, sp, #32
 80010da:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */

  tx_trace_enable(&trace_buf, TRACE_BUF_SIZE, 30);
 80010e0:	221e      	movs	r2, #30
 80010e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e6:	483b      	ldr	r0, [pc, #236]	@ (80011d4 <App_ThreadX_Init+0x100>)
 80010e8:	f010 fefa 	bl	8011ee0 <_tx_trace_enable>

  /* Create ThreadOne.  */
  tx_thread_create(&QuickShifter_handler, "QuickShifter", QuickShifter_entry, 0x1234, QuickShifter_stack,
 80010ec:	23b0      	movs	r3, #176	@ 0xb0
 80010ee:	9306      	str	r3, [sp, #24]
 80010f0:	2301      	movs	r3, #1
 80010f2:	9305      	str	r3, [sp, #20]
 80010f4:	2301      	movs	r3, #1
 80010f6:	9304      	str	r3, [sp, #16]
 80010f8:	230a      	movs	r3, #10
 80010fa:	9303      	str	r3, [sp, #12]
 80010fc:	230a      	movs	r3, #10
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	4b34      	ldr	r3, [pc, #208]	@ (80011d8 <App_ThreadX_Init+0x104>)
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	f241 2334 	movw	r3, #4660	@ 0x1234
 800110e:	4a33      	ldr	r2, [pc, #204]	@ (80011dc <App_ThreadX_Init+0x108>)
 8001110:	4933      	ldr	r1, [pc, #204]	@ (80011e0 <App_ThreadX_Init+0x10c>)
 8001112:	4834      	ldr	r0, [pc, #208]	@ (80011e4 <App_ThreadX_Init+0x110>)
 8001114:	f011 fbce 	bl	80128b4 <_txe_thread_create>
                   THREAD_STACK_SIZE, 10, 10, 1, TX_AUTO_START);
  tx_thread_create(&DriveByWire_handler, "DriveByWire", DriveByWire_entry, 0x1234, DriveByWire_stack, THREAD_STACK_SIZE,
 8001118:	23b0      	movs	r3, #176	@ 0xb0
 800111a:	9306      	str	r3, [sp, #24]
 800111c:	2300      	movs	r3, #0
 800111e:	9305      	str	r3, [sp, #20]
 8001120:	2301      	movs	r3, #1
 8001122:	9304      	str	r3, [sp, #16]
 8001124:	230a      	movs	r3, #10
 8001126:	9303      	str	r3, [sp, #12]
 8001128:	230a      	movs	r3, #10
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <App_ThreadX_Init+0x114>)
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	f241 2334 	movw	r3, #4660	@ 0x1234
 800113a:	4a2c      	ldr	r2, [pc, #176]	@ (80011ec <App_ThreadX_Init+0x118>)
 800113c:	492c      	ldr	r1, [pc, #176]	@ (80011f0 <App_ThreadX_Init+0x11c>)
 800113e:	482d      	ldr	r0, [pc, #180]	@ (80011f4 <App_ThreadX_Init+0x120>)
 8001140:	f011 fbb8 	bl	80128b4 <_txe_thread_create>
                   10, 10, 1, TX_DONT_START);
  tx_thread_create(&Gps_handler, "Gps", Gps_entry, 0x1234, Gps_stack, THREAD_STACK_SIZE, 9, 10, 1, TX_DONT_START);
 8001144:	23b0      	movs	r3, #176	@ 0xb0
 8001146:	9306      	str	r3, [sp, #24]
 8001148:	2300      	movs	r3, #0
 800114a:	9305      	str	r3, [sp, #20]
 800114c:	2301      	movs	r3, #1
 800114e:	9304      	str	r3, [sp, #16]
 8001150:	230a      	movs	r3, #10
 8001152:	9303      	str	r3, [sp, #12]
 8001154:	2309      	movs	r3, #9
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	4b26      	ldr	r3, [pc, #152]	@ (80011f8 <App_ThreadX_Init+0x124>)
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	f241 2334 	movw	r3, #4660	@ 0x1234
 8001166:	4a25      	ldr	r2, [pc, #148]	@ (80011fc <App_ThreadX_Init+0x128>)
 8001168:	4925      	ldr	r1, [pc, #148]	@ (8001200 <App_ThreadX_Init+0x12c>)
 800116a:	4826      	ldr	r0, [pc, #152]	@ (8001204 <App_ThreadX_Init+0x130>)
 800116c:	f011 fba2 	bl	80128b4 <_txe_thread_create>
  tx_thread_create(&DisplayUpdate_handler, "DisplayUpdate", DisplayUpdate_entry, 0x1234, DisplayUpdate_stack,
 8001170:	23b0      	movs	r3, #176	@ 0xb0
 8001172:	9306      	str	r3, [sp, #24]
 8001174:	2300      	movs	r3, #0
 8001176:	9305      	str	r3, [sp, #20]
 8001178:	2301      	movs	r3, #1
 800117a:	9304      	str	r3, [sp, #16]
 800117c:	230a      	movs	r3, #10
 800117e:	9303      	str	r3, [sp, #12]
 8001180:	2308      	movs	r3, #8
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <App_ThreadX_Init+0x134>)
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	f241 2334 	movw	r3, #4660	@ 0x1234
 8001192:	4a1e      	ldr	r2, [pc, #120]	@ (800120c <App_ThreadX_Init+0x138>)
 8001194:	491e      	ldr	r1, [pc, #120]	@ (8001210 <App_ThreadX_Init+0x13c>)
 8001196:	481f      	ldr	r0, [pc, #124]	@ (8001214 <App_ThreadX_Init+0x140>)
 8001198:	f011 fb8c 	bl	80128b4 <_txe_thread_create>
                   THREAD_STACK_SIZE, 8, 10, 1, TX_DONT_START);
  tx_thread_create(&SteeringLeds_handler, "SteeringLeds", SteeringLeds_entry, 0x1234, SteeringLeds_stack,
 800119c:	23b0      	movs	r3, #176	@ 0xb0
 800119e:	9306      	str	r3, [sp, #24]
 80011a0:	2300      	movs	r3, #0
 80011a2:	9305      	str	r3, [sp, #20]
 80011a4:	2301      	movs	r3, #1
 80011a6:	9304      	str	r3, [sp, #16]
 80011a8:	230a      	movs	r3, #10
 80011aa:	9303      	str	r3, [sp, #12]
 80011ac:	2307      	movs	r3, #7
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <App_ThreadX_Init+0x144>)
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	f241 2334 	movw	r3, #4660	@ 0x1234
 80011be:	4a17      	ldr	r2, [pc, #92]	@ (800121c <App_ThreadX_Init+0x148>)
 80011c0:	4917      	ldr	r1, [pc, #92]	@ (8001220 <App_ThreadX_Init+0x14c>)
 80011c2:	4818      	ldr	r0, [pc, #96]	@ (8001224 <App_ThreadX_Init+0x150>)
 80011c4:	f011 fb76 	bl	80128b4 <_txe_thread_create>
                   THREAD_STACK_SIZE, 7, 10, 1, TX_DONT_START);
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80011c8:	68fb      	ldr	r3, [r7, #12]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000405c 	.word	0x2000405c
 80011d8:	200028ec 	.word	0x200028ec
 80011dc:	08001271 	.word	0x08001271
 80011e0:	08013bf8 	.word	0x08013bf8
 80011e4:	20003cec 	.word	0x20003cec
 80011e8:	200030ec 	.word	0x200030ec
 80011ec:	08001379 	.word	0x08001379
 80011f0:	08013c08 	.word	0x08013c08
 80011f4:	20003e4c 	.word	0x20003e4c
 80011f8:	200034ec 	.word	0x200034ec
 80011fc:	080013d5 	.word	0x080013d5
 8001200:	08013c14 	.word	0x08013c14
 8001204:	20003efc 	.word	0x20003efc
 8001208:	200038ec 	.word	0x200038ec
 800120c:	080013e5 	.word	0x080013e5
 8001210:	08013c18 	.word	0x08013c18
 8001214:	20003fac 	.word	0x20003fac
 8001218:	20002cec 	.word	0x20002cec
 800121c:	08001281 	.word	0x08001281
 8001220:	08013c28 	.word	0x08013c28
 8001224:	20003d9c 	.word	0x20003d9c

08001228 <MX_ThreadX_Init>:
/**
 * @brief  Function that implements the kernel's initialization.
 * @param  None
 * @retval None
 */
void MX_ThreadX_Init(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Before_Kernel_Start */
  HAL_TIM_Base_Start_IT(&htim4);
 800122c:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_ThreadX_Init+0x1c>)
 800122e:	f00b fd67 	bl	800cd00 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buf, ADC_BUF_LEN);
 8001232:	2296      	movs	r2, #150	@ 0x96
 8001234:	4904      	ldr	r1, [pc, #16]	@ (8001248 <MX_ThreadX_Init+0x20>)
 8001236:	4805      	ldr	r0, [pc, #20]	@ (800124c <MX_ThreadX_Init+0x24>)
 8001238:	f002 ff62 	bl	8004100 <HAL_ADC_Start_DMA>

  /* USER CODE END Before_Kernel_Start */

  tx_kernel_enter();
 800123c:	f00f faf0 	bl	8010820 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN Kernel_Start_Error */

  /* USER CODE END Kernel_Start_Error */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20005d2c 	.word	0x20005d2c
 8001248:	2000637c 	.word	0x2000637c
 800124c:	20005b60 	.word	0x20005b60

08001250 <dbw_update_sensors>:
  tx_thread_sleep(MS_TO_TICKS(3));
  shifter.position = shifter_getPosition(instShifter);
  loadCell.val = loadCell_getVal(instLoadCell);
}

void dbw_update_sensors() {
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  throttle.position = throttleGetPosition();
 8001254:	f000 f942 	bl	80014dc <throttleGetPosition>
 8001258:	eef0 7a40 	vmov.f32	s15, s0
 800125c:	4b03      	ldr	r3, [pc, #12]	@ (800126c <dbw_update_sensors+0x1c>)
 800125e:	edc3 7a01 	vstr	s15, [r3, #4]
  tx_thread_sleep(MS_TO_TICKS(4));
 8001262:	2004      	movs	r0, #4
 8001264:	f00f fd12 	bl	8010c8c <_tx_thread_sleep>
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20005060 	.word	0x20005060

08001270 <QuickShifter_entry>:

/////////////// TASKS ////////////////

VOID QuickShifter_entry(ULONG intial_input) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
#define ignitionCutTime MS_TO_TICKS(100)
  while (1) {
    tx_thread_sleep(MS_TO_TICKS(100));
 8001278:	2064      	movs	r0, #100	@ 0x64
 800127a:	f00f fd07 	bl	8010c8c <_tx_thread_sleep>
 800127e:	e7fb      	b.n	8001278 <QuickShifter_entry+0x8>

08001280 <SteeringLeds_entry>:
qs_update_sensors(&shifterFilter);
*/
  //}
}

VOID SteeringLeds_entry(ULONG intial_input) {
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  ledInit();
 8001288:	f001 f918 	bl	80024bc <ledInit>

  // LEDs startup animation
  tx_thread_sleep(MS_TO_TICKS(100));
 800128c:	2064      	movs	r0, #100	@ 0x64
 800128e:	f00f fcfd 	bl	8010c8c <_tx_thread_sleep>
  // Loop through the LEDs from 0 to 10
  for (int i = 0; i < 11; i++) {
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	e025      	b.n	80012e4 <SteeringLeds_entry+0x64>
    ledSetColor(i, colors[i][0], colors[i][1], colors[i][2]);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	b2d8      	uxtb	r0, r3
 800129c:	4932      	ldr	r1, [pc, #200]	@ (8001368 <SteeringLeds_entry+0xe8>)
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	7819      	ldrb	r1, [r3, #0]
 80012aa:	4c2f      	ldr	r4, [pc, #188]	@ (8001368 <SteeringLeds_entry+0xe8>)
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	4423      	add	r3, r4
 80012b6:	3301      	adds	r3, #1
 80012b8:	781c      	ldrb	r4, [r3, #0]
 80012ba:	4d2b      	ldr	r5, [pc, #172]	@ (8001368 <SteeringLeds_entry+0xe8>)
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	442b      	add	r3, r5
 80012c6:	3302      	adds	r3, #2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4622      	mov	r2, r4
 80012cc:	f001 f98c 	bl	80025e8 <ledSetColor>
    ledSend(0.4);
 80012d0:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 800136c <SteeringLeds_entry+0xec>
 80012d4:	f001 f9b6 	bl	8002644 <ledSend>
    tx_thread_sleep(MS_TO_TICKS(100));
 80012d8:	2064      	movs	r0, #100	@ 0x64
 80012da:	f00f fcd7 	bl	8010c8c <_tx_thread_sleep>
  for (int i = 0; i < 11; i++) {
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3301      	adds	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b0a      	cmp	r3, #10
 80012e8:	ddd6      	ble.n	8001298 <SteeringLeds_entry+0x18>
  }

  tx_thread_sleep(MS_TO_TICKS(500));
 80012ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012ee:	f00f fccd 	bl	8010c8c <_tx_thread_sleep>

  for (float i = 0.4; i >= 0; i -= 0.0025) {
 80012f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001370 <SteeringLeds_entry+0xf0>)
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	e016      	b.n	8001326 <SteeringLeds_entry+0xa6>
    ledSend(i);
 80012f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80012fc:	f001 f9a2 	bl	8002644 <ledSend>
    tx_thread_sleep(MS_TO_TICKS(5));
 8001300:	2005      	movs	r0, #5
 8001302:	f00f fcc3 	bl	8010c8c <_tx_thread_sleep>
  for (float i = 0.4; i >= 0; i -= 0.0025) {
 8001306:	68b8      	ldr	r0, [r7, #8]
 8001308:	f7ff fa44 	bl	8000794 <__aeabi_f2d>
 800130c:	a314      	add	r3, pc, #80	@ (adr r3, 8001360 <SteeringLeds_entry+0xe0>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff f8df 	bl	80004d4 <__aeabi_dsub>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fca3 	bl	8000c68 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	edd7 7a02 	vldr	s15, [r7, #8]
 800132a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	dae1      	bge.n	80012f8 <SteeringLeds_entry+0x78>
  }

  while (1) {
    if (dataSent == false) {
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <SteeringLeds_entry+0xf4>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f083 0301 	eor.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <SteeringLeds_entry+0xd4>
      ledUpdate();
 8001342:	f001 f9f9 	bl	8002738 <ledUpdate>
      ledSend(0.4);
 8001346:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800136c <SteeringLeds_entry+0xec>
 800134a:	f001 f97b 	bl	8002644 <ledSend>
      dataSent = true;
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <SteeringLeds_entry+0xf4>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
    }
    tx_thread_sleep(MS_TO_TICKS(16));
 8001354:	2010      	movs	r0, #16
 8001356:	f00f fc99 	bl	8010c8c <_tx_thread_sleep>
    if (dataSent == false) {
 800135a:	e7eb      	b.n	8001334 <SteeringLeds_entry+0xb4>
 800135c:	f3af 8000 	nop.w
 8001360:	47ae147b 	.word	0x47ae147b
 8001364:	3f647ae1 	.word	0x3f647ae1
 8001368:	20000018 	.word	0x20000018
 800136c:	3ecccccd 	.word	0x3ecccccd
 8001370:	3ecccccd 	.word	0x3ecccccd
 8001374:	20000039 	.word	0x20000039

08001378 <DriveByWire_entry>:
  }
}

VOID DriveByWire_entry(ULONG intial_input) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  initThrottle();
 8001380:	f000 f838 	bl	80013f4 <initThrottle>

  tx_thread_sleep(MS_TO_TICKS(250));
 8001384:	20fa      	movs	r0, #250	@ 0xfa
 8001386:	f00f fc81 	bl	8010c8c <_tx_thread_sleep>

  throttleCalibrate();
 800138a:	f000 f8d9 	bl	8001540 <throttleCalibrate>

  tx_thread_suspend(&SteeringLeds_handler);
 800138e:	480c      	ldr	r0, [pc, #48]	@ (80013c0 <DriveByWire_entry+0x48>)
 8001390:	f011 fb82 	bl	8012a98 <_txe_thread_suspend>
  tx_thread_suspend(&Gps_handler);
 8001394:	480b      	ldr	r0, [pc, #44]	@ (80013c4 <DriveByWire_entry+0x4c>)
 8001396:	f011 fb7f 	bl	8012a98 <_txe_thread_suspend>
  tx_thread_suspend(&DisplayUpdate_handler);
 800139a:	480b      	ldr	r0, [pc, #44]	@ (80013c8 <DriveByWire_entry+0x50>)
 800139c:	f011 fb7c 	bl	8012a98 <_txe_thread_suspend>

  stepperCalibrate();
 80013a0:	f000 f9a4 	bl	80016ec <stepperCalibrate>
  stim_start(&throttleTimer);
 80013a4:	4809      	ldr	r0, [pc, #36]	@ (80013cc <DriveByWire_entry+0x54>)
 80013a6:	f001 f87b 	bl	80024a0 <stim_start>

  while (1) {
    // throttleTryRecalibrate();
    throttleBodySetPosition(throttle.position);
 80013aa:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <DriveByWire_entry+0x58>)
 80013ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80013b0:	eeb0 0a67 	vmov.f32	s0, s15
 80013b4:	f000 f984 	bl	80016c0 <throttleBodySetPosition>
    dbw_update_sensors();
 80013b8:	f7ff ff4a 	bl	8001250 <dbw_update_sensors>
    throttleBodySetPosition(throttle.position);
 80013bc:	bf00      	nop
 80013be:	e7f4      	b.n	80013aa <DriveByWire_entry+0x32>
 80013c0:	20003d9c 	.word	0x20003d9c
 80013c4:	20003efc 	.word	0x20003efc
 80013c8:	20003fac 	.word	0x20003fac
 80013cc:	2000505c 	.word	0x2000505c
 80013d0:	20005060 	.word	0x20005060

080013d4 <Gps_entry>:
  }
}

VOID Gps_entry(ULONG intial_input) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  // vTaskDelay(tickDelay100);
  // HAL_UARTEx_ReceiveToIdle_DMA(&huart3, gpsBuf, 1000);

  while (1) {
    // GNSS_GetPVTData(&GNSS_Handle);
    tx_thread_sleep(MS_TO_TICKS(100));
 80013dc:	2064      	movs	r0, #100	@ 0x64
 80013de:	f00f fc55 	bl	8010c8c <_tx_thread_sleep>
 80013e2:	e7fb      	b.n	80013dc <Gps_entry+0x8>

080013e4 <DisplayUpdate_entry>:
    // latitude = GNSS_Handle.fLat;  // Latitude in decimal degrees
    // longitude = GNSS_Handle.fLon; // Longitude in decimal degrees
  }
}

VOID DisplayUpdate_entry(ULONG intial_input) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  // HAL_UARTEx_ReceiveToIdle_DMA(&huart4, (uint8_t *)displayBuf, 10);

  while (1) {
    tx_thread_sleep(MS_TO_TICKS(100));
 80013ec:	2064      	movs	r0, #100	@ 0x64
 80013ee:	f00f fc4d 	bl	8010c8c <_tx_thread_sleep>
 80013f2:	e7fb      	b.n	80013ec <DisplayUpdate_entry+0x8>

080013f4 <initThrottle>:

uint16_t stepperPosition = 0;
float Tps = 0.0f;
uint32_t stepPwmData[400];

void initThrottle() {
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
  throttle.rawPosition = 0;
 80013fa:	4b14      	ldr	r3, [pc, #80]	@ (800144c <initThrottle+0x58>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	801a      	strh	r2, [r3, #0]
  throttle.position = 0.0f;
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <initThrottle+0x58>)
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
  throttle.calibratedPosition = 0;
 8001408:	4b10      	ldr	r3, [pc, #64]	@ (800144c <initThrottle+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	805a      	strh	r2, [r3, #2]

  for (uint16_t i = 0; i < TOTAL_STEP_COUNT; i++) {
 800140e:	2300      	movs	r3, #0
 8001410:	80fb      	strh	r3, [r7, #6]
 8001412:	e007      	b.n	8001424 <initThrottle+0x30>
    stepPwmData[i] = 50;
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4a0e      	ldr	r2, [pc, #56]	@ (8001450 <initThrottle+0x5c>)
 8001418:	2132      	movs	r1, #50	@ 0x32
 800141a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint16_t i = 0; i < TOTAL_STEP_COUNT; i++) {
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	3301      	adds	r3, #1
 8001422:	80fb      	strh	r3, [r7, #6]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001454 <initThrottle+0x60>
 8001432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143a:	d4eb      	bmi.n	8001414 <initThrottle+0x20>
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20005060 	.word	0x20005060
 8001450:	20005070 	.word	0x20005070
 8001454:	43a238e4 	.word	0x43a238e4

08001458 <throttleNormalizePosition>:

// Throttle pedal //

float throttleNormalizePosition(uint16_t adcAverage) {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  if (adcAverage < throttle.calibratedPosition) {
 8001462:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <throttleNormalizePosition+0x7c>)
 8001464:	885b      	ldrh	r3, [r3, #2]
 8001466:	88fa      	ldrh	r2, [r7, #6]
 8001468:	429a      	cmp	r2, r3
 800146a:	d203      	bcs.n	8001474 <throttleNormalizePosition+0x1c>
    adcAverage = throttle.calibratedPosition;
 800146c:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <throttleNormalizePosition+0x7c>)
 800146e:	885b      	ldrh	r3, [r3, #2]
 8001470:	80fb      	strh	r3, [r7, #6]
 8001472:	e012      	b.n	800149a <throttleNormalizePosition+0x42>
  } else if (adcAverage > THROTTLE_PEDAL_MAX) {
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80014d8 <throttleNormalizePosition+0x80>
 8001482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148a:	dd06      	ble.n	800149a <throttleNormalizePosition+0x42>
    adcAverage = THROTTLE_PEDAL_MAX;
 800148c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80014d8 <throttleNormalizePosition+0x80>
 8001490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001494:	ee17 3a90 	vmov	r3, s15
 8001498:	80fb      	strh	r3, [r7, #6]
  }

  return (adcAverage - throttle.calibratedPosition) / (THROTTLE_PEDAL_MAX - throttle.calibratedPosition);
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	4a0d      	ldr	r2, [pc, #52]	@ (80014d4 <throttleNormalizePosition+0x7c>)
 800149e:	8852      	ldrh	r2, [r2, #2]
 80014a0:	1a9b      	subs	r3, r3, r2
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014aa:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80014d8 <throttleNormalizePosition+0x80>
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <throttleNormalizePosition+0x7c>)
 80014b0:	885b      	ldrh	r3, [r3, #2]
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014c2:	eef0 7a66 	vmov.f32	s15, s13
}
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	20005060 	.word	0x20005060
 80014d8:	456d8000 	.word	0x456d8000

080014dc <throttleGetPosition>:

float throttleGetPosition() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
  uint32_t adcAverage = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]

  // Step by 3 to get indices 0, 3, 6, etc.
  for (uint16_t i = 0; i < ADC_BUF_LEN; i += 3) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	807b      	strh	r3, [r7, #2]
 80014ea:	e00a      	b.n	8001502 <throttleGetPosition+0x26>
    adcAverage += adc_buf[i];
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	4a11      	ldr	r2, [pc, #68]	@ (8001534 <throttleGetPosition+0x58>)
 80014f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f4:	461a      	mov	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	607b      	str	r3, [r7, #4]
  for (uint16_t i = 0; i < ADC_BUF_LEN; i += 3) {
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	3303      	adds	r3, #3
 8001500:	807b      	strh	r3, [r7, #2]
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	2b95      	cmp	r3, #149	@ 0x95
 8001506:	d9f1      	bls.n	80014ec <throttleGetPosition+0x10>
  }

  adcAverage /= (ADC_BUF_LEN / 3);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a0b      	ldr	r2, [pc, #44]	@ (8001538 <throttleGetPosition+0x5c>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	607b      	str	r3, [r7, #4]

  throttle.rawPosition = adcAverage; // debug
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	b29a      	uxth	r2, r3
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <throttleGetPosition+0x60>)
 800151a:	801a      	strh	r2, [r3, #0]
  return throttleNormalizePosition((uint16_t)adcAverage);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	b29b      	uxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff99 	bl	8001458 <throttleNormalizePosition>
 8001526:	eef0 7a40 	vmov.f32	s15, s0
}
 800152a:	eeb0 0a67 	vmov.f32	s0, s15
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000637c 	.word	0x2000637c
 8001538:	51eb851f 	.word	0x51eb851f
 800153c:	20005060 	.word	0x20005060

08001540 <throttleCalibrate>:

void throttleCalibrate() {
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  throttle.position = throttleGetPosition();
 8001544:	f7ff ffca 	bl	80014dc <throttleGetPosition>
 8001548:	eef0 7a40 	vmov.f32	s15, s0
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <throttleCalibrate+0x38>)
 800154e:	edc3 7a01 	vstr	s15, [r3, #4]
  throttle.calibratedPosition = throttle.rawPosition + THROTTLE_PEDAL_DEADZONE;
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <throttleCalibrate+0x38>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001562:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800156a:	ee17 3a90 	vmov	r3, s15
 800156e:	b29a      	uxth	r2, r3
 8001570:	4b01      	ldr	r3, [pc, #4]	@ (8001578 <throttleCalibrate+0x38>)
 8001572:	805a      	strh	r2, [r3, #2]
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20005060 	.word	0x20005060

0800157c <absf>:
    ;
}

// get absolute value //

float absf(float value) {
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	ed87 0a01 	vstr	s0, [r7, #4]
  if (value < 0) {
 8001586:	edd7 7a01 	vldr	s15, [r7, #4]
 800158a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	d505      	bpl.n	80015a0 <absf+0x24>
    value = value * -1;
 8001594:	edd7 7a01 	vldr	s15, [r7, #4]
 8001598:	eef1 7a67 	vneg.f32	s15, s15
 800159c:	edc7 7a01 	vstr	s15, [r7, #4]
  }
  return value;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	ee07 3a90 	vmov	s15, r3
}
 80015a6:	eeb0 0a67 	vmov.f32	s0, s15
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <stepperSetDirection>:

// Stepper //

void stepperSetDirection(RotationDirection dir) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(StepperDir_GPIO_Port, StepperDir_Pin, (uint8_t)dir);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	461a      	mov	r2, r3
 80015c2:	2104      	movs	r1, #4
 80015c4:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <stepperSetDirection+0x20>)
 80015c6:	f005 f981 	bl	80068cc <HAL_GPIO_WritePin>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	42020400 	.word	0x42020400

080015d8 <stepperRotateToStep>:

void stepperRotateToStep(float newPos) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	ed87 0a01 	vstr	s0, [r7, #4]
  float stepsDelta = roundf(newPos - stepperPosition);
 80015e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <stepperRotateToStep+0xb8>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80015f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f6:	eeb0 0a67 	vmov.f32	s0, s15
 80015fa:	f011 ff7d 	bl	80134f8 <roundf>
 80015fe:	ed87 0a04 	vstr	s0, [r7, #16]
  uint16_t stepCount = absf(stepsDelta);
 8001602:	ed97 0a04 	vldr	s0, [r7, #16]
 8001606:	f7ff ffb9 	bl	800157c <absf>
 800160a:	eef0 7a40 	vmov.f32	s15, s0
 800160e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001612:	ee17 3a90 	vmov	r3, s15
 8001616:	81fb      	strh	r3, [r7, #14]

  if (stepCount != 0) {
 8001618:	89fb      	ldrh	r3, [r7, #14]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d034      	beq.n	8001688 <stepperRotateToStep+0xb0>
    RotationDirection direction;
    if (stepsDelta > 0) {
 800161e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	dd02      	ble.n	8001632 <stepperRotateToStep+0x5a>
      direction = CCW;
 800162c:	2301      	movs	r3, #1
 800162e:	75fb      	strb	r3, [r7, #23]
 8001630:	e001      	b.n	8001636 <stepperRotateToStep+0x5e>
    } else {
      direction = CW;
 8001632:	2300      	movs	r3, #0
 8001634:	75fb      	strb	r3, [r7, #23]
    }
    stepperSetDirection(direction);
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ffbb 	bl	80015b4 <stepperSetDirection>

    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)stepPwmData, stepCount);
 800163e:	89fb      	ldrh	r3, [r7, #14]
 8001640:	4a14      	ldr	r2, [pc, #80]	@ (8001694 <stepperRotateToStep+0xbc>)
 8001642:	210c      	movs	r1, #12
 8001644:	4814      	ldr	r0, [pc, #80]	@ (8001698 <stepperRotateToStep+0xc0>)
 8001646:	f00b fc61 	bl	800cf0c <HAL_TIM_PWM_Start_DMA>
    // vTaskSuspend(DriveByWire_Handler);

    if (direction == CCW) {
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d107      	bne.n	8001660 <stepperRotateToStep+0x88>
      stepperPosition += stepCount;
 8001650:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <stepperRotateToStep+0xb8>)
 8001652:	881a      	ldrh	r2, [r3, #0]
 8001654:	89fb      	ldrh	r3, [r7, #14]
 8001656:	4413      	add	r3, r2
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <stepperRotateToStep+0xb8>)
 800165c:	801a      	strh	r2, [r3, #0]
 800165e:	e006      	b.n	800166e <stepperRotateToStep+0x96>
    } else {
      stepperPosition -= stepCount;
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <stepperRotateToStep+0xb8>)
 8001662:	881a      	ldrh	r2, [r3, #0]
 8001664:	89fb      	ldrh	r3, [r7, #14]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	b29a      	uxth	r2, r3
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <stepperRotateToStep+0xb8>)
 800166c:	801a      	strh	r2, [r3, #0]
    }

    Tps = stepperPosition / TOTAL_STEP_COUNT;
 800166e:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <stepperRotateToStep+0xb8>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800167a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800169c <stepperRotateToStep+0xc4>
 800167e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <stepperRotateToStep+0xc8>)
 8001684:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20005068 	.word	0x20005068
 8001694:	20005070 	.word	0x20005070
 8001698:	20005ce0 	.word	0x20005ce0
 800169c:	43a238e4 	.word	0x43a238e4
 80016a0:	2000506c 	.word	0x2000506c

080016a4 <stepperStep>:

// speed 0.0 to 1.0
void stepperStep() {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)stepPwmData, 5);
 80016a8:	2305      	movs	r3, #5
 80016aa:	4a03      	ldr	r2, [pc, #12]	@ (80016b8 <stepperStep+0x14>)
 80016ac:	210c      	movs	r1, #12
 80016ae:	4803      	ldr	r0, [pc, #12]	@ (80016bc <stepperStep+0x18>)
 80016b0:	f00b fc2c 	bl	800cf0c <HAL_TIM_PWM_Start_DMA>
  // vTaskSuspend(DriveByWire_Handler);
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20005070 	.word	0x20005070
 80016bc:	20005ce0 	.word	0x20005ce0

080016c0 <throttleBodySetPosition>:

void throttleBodySetPosition(float pos) { stepperRotateToStep(pos * TOTAL_STEP_COUNT); }
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80016ca:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80016e8 <throttleBodySetPosition+0x28>
 80016ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	f7ff ff7d 	bl	80015d8 <stepperRotateToStep>
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	43a238e4 	.word	0x43a238e4

080016ec <stepperCalibrate>:

void stepperCalibrate() {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

  while (HAL_GPIO_ReadPin(ThrottleCalibration_GPIO_Port, ThrottleCalibration_Pin) != GPIO_PIN_RESET) {
 80016f0:	e004      	b.n	80016fc <stepperCalibrate+0x10>
    stepperSetDirection(CCW);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7ff ff5e 	bl	80015b4 <stepperSetDirection>
    stepperStep();
 80016f8:	f7ff ffd4 	bl	80016a4 <stepperStep>
  while (HAL_GPIO_ReadPin(ThrottleCalibration_GPIO_Port, ThrottleCalibration_Pin) != GPIO_PIN_RESET) {
 80016fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001700:	4807      	ldr	r0, [pc, #28]	@ (8001720 <stepperCalibrate+0x34>)
 8001702:	f005 f8cb 	bl	800689c <HAL_GPIO_ReadPin>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f2      	bne.n	80016f2 <stepperCalibrate+0x6>
    // vTaskDelay(20);
  }
  // vTaskDelay(50);
  stepperPosition = 92;
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <stepperCalibrate+0x38>)
 800170e:	225c      	movs	r2, #92	@ 0x5c
 8001710:	801a      	strh	r2, [r3, #0]

  throttleBodySetPosition(0.0);
 8001712:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001728 <stepperCalibrate+0x3c>
 8001716:	f7ff ffd3 	bl	80016c0 <throttleBodySetPosition>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	42020000 	.word	0x42020000
 8001724:	20005068 	.word	0x20005068
 8001728:	00000000 	.word	0x00000000

0800172c <error_throw>:
int8_t head = -1;
int8_t tail = -1;
int8_t slots_left = QUEUE_LEN;

// the message should be <  MSG_MAX_LEN
char *error_throw() {
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  if (slots_left == 0) {
 8001730:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <error_throw+0x78>)
 8001732:	f993 3000 	ldrsb.w	r3, [r3]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10a      	bne.n	8001750 <error_throw+0x24>
    return _error_queue[head];
 800173a:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <error_throw+0x7c>)
 800173c:	f993 3000 	ldrsb.w	r3, [r3]
 8001740:	461a      	mov	r2, r3
 8001742:	4613      	mov	r3, r2
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	1a9b      	subs	r3, r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4a18      	ldr	r2, [pc, #96]	@ (80017ac <error_throw+0x80>)
 800174c:	4413      	add	r3, r2
 800174e:	e023      	b.n	8001798 <error_throw+0x6c>
  }
  if (head == QUEUE_LEN - 1) {
 8001750:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <error_throw+0x7c>)
 8001752:	f993 3000 	ldrsb.w	r3, [r3]
 8001756:	2b13      	cmp	r3, #19
 8001758:	d102      	bne.n	8001760 <error_throw+0x34>
    head = -1;
 800175a:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <error_throw+0x7c>)
 800175c:	22ff      	movs	r2, #255	@ 0xff
 800175e:	701a      	strb	r2, [r3, #0]
  }
  slots_left--;
 8001760:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <error_throw+0x78>)
 8001762:	f993 3000 	ldrsb.w	r3, [r3]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	b2db      	uxtb	r3, r3
 800176c:	b25a      	sxtb	r2, r3
 800176e:	4b0d      	ldr	r3, [pc, #52]	@ (80017a4 <error_throw+0x78>)
 8001770:	701a      	strb	r2, [r3, #0]
  head++;
 8001772:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <error_throw+0x7c>)
 8001774:	f993 3000 	ldrsb.w	r3, [r3]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	3301      	adds	r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	b25a      	sxtb	r2, r3
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <error_throw+0x7c>)
 8001782:	701a      	strb	r2, [r3, #0]
  return _error_queue[head];
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <error_throw+0x7c>)
 8001786:	f993 3000 	ldrsb.w	r3, [r3]
 800178a:	461a      	mov	r2, r3
 800178c:	4613      	mov	r3, r2
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4a05      	ldr	r2, [pc, #20]	@ (80017ac <error_throw+0x80>)
 8001796:	4413      	add	r3, r2
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000001 	.word	0x20000001
 80017a8:	20000000 	.word	0x20000000
 80017ac:	200056b0 	.word	0x200056b0

080017b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  loadCell.idx = 0;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <main+0x78>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
  loadCell.pending_samples = 0;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <main+0x78>)
 80017be:	2200      	movs	r2, #0
 80017c0:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c4:	f002 f89a 	bl	80038fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c8:	f000 f838 	bl	800183c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017cc:	f000 fccc 	bl	8002168 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80017d0:	f000 f938 	bl	8001a44 <MX_GPDMA1_Init>
  MX_GPDMA2_Init();
 80017d4:	f000 f97e 	bl	8001ad4 <MX_GPDMA2_Init>
  MX_ICACHE_Init();
 80017d8:	f000 f9e4 	bl	8001ba4 <MX_ICACHE_Init>
  MX_I2C1_Init();
 80017dc:	f000 f9a2 	bl	8001b24 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80017e0:	f000 fbde 	bl	8001fa0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80017e4:	f000 fc28 	bl	8002038 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80017e8:	f000 fc72 	bl	80020d0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80017ec:	f000 f898 	bl	8001920 <MX_ADC1_Init>
  MX_TIM3_Init();
 80017f0:	f000 fa3a 	bl	8001c68 <MX_TIM3_Init>
  MX_TIM8_Init();
 80017f4:	f000 fb06 	bl	8001e04 <MX_TIM8_Init>
  MX_TIM12_Init();
 80017f8:	f000 fb98 	bl	8001f2c <MX_TIM12_Init>
  MX_TIM4_Init();
 80017fc:	f000 fa8e 	bl	8001d1c <MX_TIM4_Init>
  MX_TIM2_Init();
 8001800:	f000 f9e4 	bl	8001bcc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buf_usart1, USART1_RX_BUF_LEN);
 8001804:	2264      	movs	r2, #100	@ 0x64
 8001806:	4909      	ldr	r1, [pc, #36]	@ (800182c <main+0x7c>)
 8001808:	4809      	ldr	r0, [pc, #36]	@ (8001830 <main+0x80>)
 800180a:	f00e fdf1 	bl	80103f0 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UART_Transmit_DMA(&huart1, tx_buf_usart1, USART1_TX_BUF_LEN);
 800180e:	2202      	movs	r2, #2
 8001810:	4908      	ldr	r1, [pc, #32]	@ (8001834 <main+0x84>)
 8001812:	4807      	ldr	r0, [pc, #28]	@ (8001830 <main+0x80>)
 8001814:	f00d fa6c 	bl	800ecf0 <HAL_UART_Transmit_DMA>

  HAL_TIM_Base_Start(&htim2);
 8001818:	4807      	ldr	r0, [pc, #28]	@ (8001838 <main+0x88>)
 800181a:	f00b f9cb 	bl	800cbb4 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800181e:	f7ff fd03 	bl	8001228 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001822:	bf00      	nop
 8001824:	e7fd      	b.n	8001822 <main+0x72>
 8001826:	bf00      	nop
 8001828:	200064b0 	.word	0x200064b0
 800182c:	20006314 	.word	0x20006314
 8001830:	20005f00 	.word	0x20005f00
 8001834:	20000004 	.word	0x20000004
 8001838:	20005c94 	.word	0x20005c94

0800183c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b09c      	sub	sp, #112	@ 0x70
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	2250      	movs	r2, #80	@ 0x50
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f011 f964 	bl	8012b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
 8001860:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001862:	4b2d      	ldr	r3, [pc, #180]	@ (8001918 <SystemClock_Config+0xdc>)
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	4a2c      	ldr	r2, [pc, #176]	@ (8001918 <SystemClock_Config+0xdc>)
 8001868:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800186c:	6113      	str	r3, [r2, #16]
 800186e:	4b2a      	ldr	r3, [pc, #168]	@ (8001918 <SystemClock_Config+0xdc>)
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]

  while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800187a:	bf00      	nop
 800187c:	4b26      	ldr	r3, [pc, #152]	@ (8001918 <SystemClock_Config+0xdc>)
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b08      	cmp	r3, #8
 8001886:	d1f9      	bne.n	800187c <SystemClock_Config+0x40>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001888:	2301      	movs	r3, #1
 800188a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800188c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001892:	2302      	movs	r3, #2
 8001894:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001896:	2303      	movs	r3, #3
 8001898:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800189a:	2301      	movs	r3, #1
 800189c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 800189e:	233e      	movs	r3, #62	@ 0x3e
 80018a0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80018a2:	2302      	movs	r3, #2
 80018a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018a6:	2302      	movs	r3, #2
 80018a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018aa:	2302      	movs	r3, #2
 80018ac:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80018ae:	230c      	movs	r3, #12
 80018b0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80018b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018bc:	f107 0320 	add.w	r3, r7, #32
 80018c0:	4618      	mov	r0, r3
 80018c2:	f005 f98d 	bl	8006be0 <HAL_RCC_OscConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0x94>
    Error_Handler();
 80018cc:	f000 fde2 	bl	8002494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType =
 80018d0:	231f      	movs	r3, #31
 80018d2:	60bb      	str	r3, [r7, #8]
      RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d4:	2303      	movs	r3, #3
 80018d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	2105      	movs	r1, #5
 80018ee:	4618      	mov	r0, r3
 80018f0:	f005 fdae 	bl	8007450 <HAL_RCC_ClockConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0xc2>
    Error_Handler();
 80018fa:	f000 fdcb 	bl	8002494 <Error_Handler>
  }

  /** Configure the programming delay
   */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80018fe:	4b07      	ldr	r3, [pc, #28]	@ (800191c <SystemClock_Config+0xe0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001906:	4a05      	ldr	r2, [pc, #20]	@ (800191c <SystemClock_Config+0xe0>)
 8001908:	f043 0320 	orr.w	r3, r3, #32
 800190c:	6013      	str	r3, [r2, #0]
}
 800190e:	bf00      	nop
 8001910:	3770      	adds	r7, #112	@ 0x70
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	44020800 	.word	0x44020800
 800191c:	40022000 	.word	0x40022000

08001920 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001926:	463b      	mov	r3, r7
 8001928:	2220      	movs	r2, #32
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f011 f8f3 	bl	8012b18 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
   */
  hadc1.Instance = ADC1;
 8001932:	4b3e      	ldr	r3, [pc, #248]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 8001934:	4a3e      	ldr	r2, [pc, #248]	@ (8001a30 <MX_ADC1_Init+0x110>)
 8001936:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001938:	4b3c      	ldr	r3, [pc, #240]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 800193a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800193e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001940:	4b3a      	ldr	r3, [pc, #232]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 8001942:	2200      	movs	r2, #0
 8001944:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001946:	4b39      	ldr	r3, [pc, #228]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 8001948:	2200      	movs	r2, #0
 800194a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800194c:	4b37      	ldr	r3, [pc, #220]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 800194e:	2201      	movs	r2, #1
 8001950:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001952:	4b36      	ldr	r3, [pc, #216]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 8001954:	2204      	movs	r2, #4
 8001956:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001958:	4b34      	ldr	r3, [pc, #208]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 800195a:	2200      	movs	r2, #0
 800195c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800195e:	4b33      	ldr	r3, [pc, #204]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 8001960:	2200      	movs	r2, #0
 8001962:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001964:	4b31      	ldr	r3, [pc, #196]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 8001966:	2203      	movs	r2, #3
 8001968:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800196a:	4b30      	ldr	r3, [pc, #192]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 3;
 8001972:	4b2e      	ldr	r3, [pc, #184]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 8001974:	2203      	movs	r2, #3
 8001976:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8001978:	4b2c      	ldr	r3, [pc, #176]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 800197a:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 800197e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001980:	4b2a      	ldr	r3, [pc, #168]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 8001982:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001986:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001988:	4b28      	ldr	r3, [pc, #160]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001990:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 8001992:	2200      	movs	r2, #0
 8001994:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001996:	4b25      	ldr	r3, [pc, #148]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 8001998:	2200      	movs	r2, #0
 800199a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800199c:	4b23      	ldr	r3, [pc, #140]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80019a4:	4821      	ldr	r0, [pc, #132]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 80019a6:	f002 fa57 	bl	8003e58 <HAL_ADC_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_ADC1_Init+0x94>
    Error_Handler();
 80019b0:	f000 fd70 	bl	8002494 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_10;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <MX_ADC1_Init+0x114>)
 80019b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019b8:	2306      	movs	r3, #6
 80019ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80019bc:	2307      	movs	r3, #7
 80019be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019c0:	237f      	movs	r3, #127	@ 0x7f
 80019c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019c4:	2304      	movs	r3, #4
 80019c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019cc:	463b      	mov	r3, r7
 80019ce:	4619      	mov	r1, r3
 80019d0:	4816      	ldr	r0, [pc, #88]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 80019d2:	f002 fef7 	bl	80047c4 <HAL_ADC_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_ADC1_Init+0xc0>
    Error_Handler();
 80019dc:	f000 fd5a 	bl	8002494 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_11;
 80019e0:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <MX_ADC1_Init+0x118>)
 80019e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019e4:	230c      	movs	r3, #12
 80019e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019e8:	463b      	mov	r3, r7
 80019ea:	4619      	mov	r1, r3
 80019ec:	480f      	ldr	r0, [pc, #60]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 80019ee:	f002 fee9 	bl	80047c4 <HAL_ADC_ConfigChannel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ADC1_Init+0xdc>
    Error_Handler();
 80019f8:	f000 fd4c 	bl	8002494 <Error_Handler>
  }

  /** Configure Regular Channel
   */
  sConfig.Channel = ADC_CHANNEL_12;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <MX_ADC1_Init+0x11c>)
 80019fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a00:	2312      	movs	r3, #18
 8001a02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001a04:	463b      	mov	r3, r7
 8001a06:	4619      	mov	r1, r3
 8001a08:	4808      	ldr	r0, [pc, #32]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 8001a0a:	f002 fedb 	bl	80047c4 <HAL_ADC_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_ADC1_Init+0xf8>
    Error_Handler();
 8001a14:	f000 fd3e 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC_NBR_CONVERSION = hadc1.Init.NbrOfConversion;
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <MX_ADC1_Init+0x10c>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <MX_ADC1_Init+0x120>)
 8001a20:	701a      	strb	r2, [r3, #0]
  /* USER CODE END ADC1_Init 2 */
}
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20005b60 	.word	0x20005b60
 8001a30:	42028000 	.word	0x42028000
 8001a34:	2a000400 	.word	0x2a000400
 8001a38:	2e300800 	.word	0x2e300800
 8001a3c:	32601000 	.word	0x32601000
 8001a40:	20006378 	.word	0x20006378

08001a44 <MX_GPDMA1_Init>:
/**
 * @brief GPDMA1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPDMA1_Init(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001a4a:	4b21      	ldr	r3, [pc, #132]	@ (8001ad0 <MX_GPDMA1_Init+0x8c>)
 8001a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a50:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad0 <MX_GPDMA1_Init+0x8c>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <MX_GPDMA1_Init+0x8c>)
 8001a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	607b      	str	r3, [r7, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
  HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	201b      	movs	r0, #27
 8001a6e:	f003 fcb9 	bl	80053e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001a72:	201b      	movs	r0, #27
 8001a74:	f003 fcd0 	bl	8005418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	201c      	movs	r0, #28
 8001a7e:	f003 fcb1 	bl	80053e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001a82:	201c      	movs	r0, #28
 8001a84:	f003 fcc8 	bl	8005418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	201d      	movs	r0, #29
 8001a8e:	f003 fca9 	bl	80053e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8001a92:	201d      	movs	r0, #29
 8001a94:	f003 fcc0 	bl	8005418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	201e      	movs	r0, #30
 8001a9e:	f003 fca1 	bl	80053e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001aa2:	201e      	movs	r0, #30
 8001aa4:	f003 fcb8 	bl	8005418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	201f      	movs	r0, #31
 8001aae:	f003 fc99 	bl	80053e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 8001ab2:	201f      	movs	r0, #31
 8001ab4:	f003 fcb0 	bl	8005418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2100      	movs	r1, #0
 8001abc:	2020      	movs	r0, #32
 8001abe:	f003 fc91 	bl	80053e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 8001ac2:	2020      	movs	r0, #32
 8001ac4:	f003 fca8 	bl	8005418 <HAL_NVIC_EnableIRQ>

  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	44020c00 	.word	0x44020c00

08001ad4 <MX_GPDMA2_Init>:
/**
 * @brief GPDMA2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPDMA2_Init(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Init 0 */

  /* USER CODE END GPDMA2_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA2_CLK_ENABLE();
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <MX_GPDMA2_Init+0x4c>)
 8001adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b20 <MX_GPDMA2_Init+0x4c>)
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001aea:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <MX_GPDMA2_Init+0x4c>)
 8001aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]

  /* GPDMA2 interrupt Init */
  HAL_NVIC_SetPriority(GPDMA2_Channel0_IRQn, 0, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	205a      	movs	r0, #90	@ 0x5a
 8001afe:	f003 fc71 	bl	80053e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA2_Channel0_IRQn);
 8001b02:	205a      	movs	r0, #90	@ 0x5a
 8001b04:	f003 fc88 	bl	8005418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(GPDMA2_Channel1_IRQn, 0, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	205b      	movs	r0, #91	@ 0x5b
 8001b0e:	f003 fc69 	bl	80053e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA2_Channel1_IRQn);
 8001b12:	205b      	movs	r0, #91	@ 0x5b
 8001b14:	f003 fc80 	bl	8005418 <HAL_NVIC_EnableIRQ>

  /* USER CODE END GPDMA2_Init 1 */
  /* USER CODE BEGIN GPDMA2_Init 2 */

  /* USER CODE END GPDMA2_Init 2 */
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	44020c00 	.word	0x44020c00

08001b24 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <MX_I2C1_Init+0x74>)
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b9c <MX_I2C1_Init+0x78>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <MX_I2C1_Init+0x74>)
 8001b30:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba0 <MX_I2C1_Init+0x7c>)
 8001b32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b34:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <MX_I2C1_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b3a:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <MX_I2C1_Init+0x74>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <MX_I2C1_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b46:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <MX_I2C1_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <MX_I2C1_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b52:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <MX_I2C1_Init+0x74>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <MX_I2C1_Init+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001b5e:	480e      	ldr	r0, [pc, #56]	@ (8001b98 <MX_I2C1_Init+0x74>)
 8001b60:	f004 fecc 	bl	80068fc <HAL_I2C_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_I2C1_Init+0x4a>
    Error_Handler();
 8001b6a:	f000 fc93 	bl	8002494 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4809      	ldr	r0, [pc, #36]	@ (8001b98 <MX_I2C1_Init+0x74>)
 8001b72:	f004 ff5e 	bl	8006a32 <HAL_I2CEx_ConfigAnalogFilter>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C1_Init+0x5c>
    Error_Handler();
 8001b7c:	f000 fc8a 	bl	8002494 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001b80:	2100      	movs	r1, #0
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_I2C1_Init+0x74>)
 8001b84:	f004 ffa0 	bl	8006ac8 <HAL_I2CEx_ConfigDigitalFilter>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_I2C1_Init+0x6e>
    Error_Handler();
 8001b8e:	f000 fc81 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20005c40 	.word	0x20005c40
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	60808cd3 	.word	0x60808cd3

08001ba4 <MX_ICACHE_Init>:
/**
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
   */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK) {
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f004 ffd9 	bl	8006b60 <HAL_ICACHE_ConfigAssociativityMode>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_ICACHE_Init+0x14>
    Error_Handler();
 8001bb4:	f000 fc6e 	bl	8002494 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK) {
 8001bb8:	f004 fff2 	bl	8006ba0 <HAL_ICACHE_Enable>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_ICACHE_Init+0x22>
    Error_Handler();
 8001bc2:	f000 fc67 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bea:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <MX_TIM2_Init+0x98>)
 8001bec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bf0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 250 - 1;
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c64 <MX_TIM2_Init+0x98>)
 8001bf4:	22f9      	movs	r2, #249	@ 0xf9
 8001bf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <MX_TIM2_Init+0x98>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <MX_TIM2_Init+0x98>)
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <MX_TIM2_Init+0x98>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <MX_TIM2_Init+0x98>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001c12:	4814      	ldr	r0, [pc, #80]	@ (8001c64 <MX_TIM2_Init+0x98>)
 8001c14:	f00a ff76 	bl	800cb04 <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM2_Init+0x56>
    Error_Handler();
 8001c1e:	f000 fc39 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480d      	ldr	r0, [pc, #52]	@ (8001c64 <MX_TIM2_Init+0x98>)
 8001c30:	f00b fe56 	bl	800d8e0 <HAL_TIM_ConfigClockSource>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM2_Init+0x72>
    Error_Handler();
 8001c3a:	f000 fc2b 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4806      	ldr	r0, [pc, #24]	@ (8001c64 <MX_TIM2_Init+0x98>)
 8001c4c:	f00c fe50 	bl	800e8f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0x8e>
    Error_Handler();
 8001c56:	f000 fc1d 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8001c5a:	bf00      	nop
 8001c5c:	3720      	adds	r7, #32
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20005c94 	.word	0x20005c94

08001c68 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	@ 0x28
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
 8001c88:	615a      	str	r2, [r3, #20]
 8001c8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c8c:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001c8e:	4a22      	ldr	r2, [pc, #136]	@ (8001d18 <MX_TIM3_Init+0xb0>)
 8001c90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c92:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001ca0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ca4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001cb2:	4818      	ldr	r0, [pc, #96]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001cb4:	f00b f8d2 	bl	800ce5c <HAL_TIM_PWM_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM3_Init+0x5a>
    Error_Handler();
 8001cbe:	f000 fbe9 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4810      	ldr	r0, [pc, #64]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001cd2:	f00c fe0d 	bl	800e8f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM3_Init+0x78>
    Error_Handler();
 8001cdc:	f000 fbda 	bl	8002494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce0:	2360      	movs	r3, #96	@ 0x60
 8001ce2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4807      	ldr	r0, [pc, #28]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001cf8:	f00b fcde 	bl	800d6b8 <HAL_TIM_PWM_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM3_Init+0x9e>
    Error_Handler();
 8001d02:	f000 fbc7 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d06:	4803      	ldr	r0, [pc, #12]	@ (8001d14 <MX_TIM3_Init+0xac>)
 8001d08:	f001 f858 	bl	8002dbc <HAL_TIM_MspPostInit>
}
 8001d0c:	bf00      	nop
 8001d0e:	3728      	adds	r7, #40	@ 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20005ce0 	.word	0x20005ce0
 8001d18:	40000400 	.word	0x40000400

08001d1c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08e      	sub	sp, #56	@ 0x38
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
 8001d48:	611a      	str	r2, [r3, #16]
 8001d4a:	615a      	str	r2, [r3, #20]
 8001d4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dfc <MX_TIM4_Init+0xe0>)
 8001d50:	4a2b      	ldr	r2, [pc, #172]	@ (8001e00 <MX_TIM4_Init+0xe4>)
 8001d52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 25000 - 1;
 8001d54:	4b29      	ldr	r3, [pc, #164]	@ (8001dfc <MX_TIM4_Init+0xe0>)
 8001d56:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001d5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5c:	4b27      	ldr	r3, [pc, #156]	@ (8001dfc <MX_TIM4_Init+0xe0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8001d62:	4b26      	ldr	r3, [pc, #152]	@ (8001dfc <MX_TIM4_Init+0xe0>)
 8001d64:	2209      	movs	r2, #9
 8001d66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d68:	4b24      	ldr	r3, [pc, #144]	@ (8001dfc <MX_TIM4_Init+0xe0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6e:	4b23      	ldr	r3, [pc, #140]	@ (8001dfc <MX_TIM4_Init+0xe0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001d74:	4821      	ldr	r0, [pc, #132]	@ (8001dfc <MX_TIM4_Init+0xe0>)
 8001d76:	f00a fec5 	bl	800cb04 <HAL_TIM_Base_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM4_Init+0x68>
    Error_Handler();
 8001d80:	f000 fb88 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001d8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	481a      	ldr	r0, [pc, #104]	@ (8001dfc <MX_TIM4_Init+0xe0>)
 8001d92:	f00b fda5 	bl	800d8e0 <HAL_TIM_ConfigClockSource>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM4_Init+0x84>
    Error_Handler();
 8001d9c:	f000 fb7a 	bl	8002494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001da0:	4816      	ldr	r0, [pc, #88]	@ (8001dfc <MX_TIM4_Init+0xe0>)
 8001da2:	f00b f85b 	bl	800ce5c <HAL_TIM_PWM_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM4_Init+0x94>
    Error_Handler();
 8001dac:	f000 fb72 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001db0:	2320      	movs	r3, #32
 8001db2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480f      	ldr	r0, [pc, #60]	@ (8001dfc <MX_TIM4_Init+0xe0>)
 8001dc0:	f00c fd96 	bl	800e8f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM4_Init+0xb2>
    Error_Handler();
 8001dca:	f000 fb63 	bl	8002494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dce:	2360      	movs	r3, #96	@ 0x60
 8001dd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001dde:	463b      	mov	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <MX_TIM4_Init+0xe0>)
 8001de6:	f00b fc67 	bl	800d6b8 <HAL_TIM_PWM_ConfigChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM4_Init+0xd8>
    Error_Handler();
 8001df0:	f000 fb50 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 8001df4:	bf00      	nop
 8001df6:	3738      	adds	r7, #56	@ 0x38
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20005d2c 	.word	0x20005d2c
 8001e00:	40000800 	.word	0x40000800

08001e04 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b098      	sub	sp, #96	@ 0x60
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
 8001e24:	611a      	str	r2, [r3, #16]
 8001e26:	615a      	str	r2, [r3, #20]
 8001e28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2234      	movs	r2, #52	@ 0x34
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f010 fe71 	bl	8012b18 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e36:	4b3b      	ldr	r3, [pc, #236]	@ (8001f24 <MX_TIM8_Init+0x120>)
 8001e38:	4a3b      	ldr	r2, [pc, #236]	@ (8001f28 <MX_TIM8_Init+0x124>)
 8001e3a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e3c:	4b39      	ldr	r3, [pc, #228]	@ (8001f24 <MX_TIM8_Init+0x120>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e42:	4b38      	ldr	r3, [pc, #224]	@ (8001f24 <MX_TIM8_Init+0x120>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001e48:	4b36      	ldr	r3, [pc, #216]	@ (8001f24 <MX_TIM8_Init+0x120>)
 8001e4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e4e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e50:	4b34      	ldr	r3, [pc, #208]	@ (8001f24 <MX_TIM8_Init+0x120>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e56:	4b33      	ldr	r3, [pc, #204]	@ (8001f24 <MX_TIM8_Init+0x120>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b31      	ldr	r3, [pc, #196]	@ (8001f24 <MX_TIM8_Init+0x120>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001e62:	4830      	ldr	r0, [pc, #192]	@ (8001f24 <MX_TIM8_Init+0x120>)
 8001e64:	f00a fffa 	bl	800ce5c <HAL_TIM_PWM_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM8_Init+0x6e>
    Error_Handler();
 8001e6e:	f000 fb11 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8001e7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e82:	4619      	mov	r1, r3
 8001e84:	4827      	ldr	r0, [pc, #156]	@ (8001f24 <MX_TIM8_Init+0x120>)
 8001e86:	f00c fd33 	bl	800e8f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM8_Init+0x90>
    Error_Handler();
 8001e90:	f000 fb00 	bl	8002494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e94:	2360      	movs	r3, #96	@ 0x60
 8001e96:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eac:	2300      	movs	r3, #0
 8001eae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8001eb0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	481a      	ldr	r0, [pc, #104]	@ (8001f24 <MX_TIM8_Init+0x120>)
 8001eba:	f00b fbfd 	bl	800d6b8 <HAL_TIM_PWM_ConfigChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM8_Init+0xc4>
    Error_Handler();
 8001ec4:	f000 fae6 	bl	8002494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001edc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ee0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001eee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4807      	ldr	r0, [pc, #28]	@ (8001f24 <MX_TIM8_Init+0x120>)
 8001f06:	f00c fdc3 	bl	800ea90 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM8_Init+0x110>
    Error_Handler();
 8001f10:	f000 fac0 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001f14:	4803      	ldr	r0, [pc, #12]	@ (8001f24 <MX_TIM8_Init+0x120>)
 8001f16:	f000 ff51 	bl	8002dbc <HAL_TIM_MspPostInit>
}
 8001f1a:	bf00      	nop
 8001f1c:	3760      	adds	r7, #96	@ 0x60
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20005d78 	.word	0x20005d78
 8001f28:	40013400 	.word	0x40013400

08001f2c <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f32:	463b      	mov	r3, r7
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <MX_TIM12_Init+0x6c>)
 8001f40:	4a16      	ldr	r2, [pc, #88]	@ (8001f9c <MX_TIM12_Init+0x70>)
 8001f42:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001f44:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <MX_TIM12_Init+0x6c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4a:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <MX_TIM12_Init+0x6c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001f50:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <MX_TIM12_Init+0x6c>)
 8001f52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f56:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <MX_TIM12_Init+0x6c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_TIM12_Init+0x6c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 8001f64:	480c      	ldr	r0, [pc, #48]	@ (8001f98 <MX_TIM12_Init+0x6c>)
 8001f66:	f00a fdcd 	bl	800cb04 <HAL_TIM_Base_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM12_Init+0x48>
    Error_Handler();
 8001f70:	f000 fa90 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f78:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4806      	ldr	r0, [pc, #24]	@ (8001f98 <MX_TIM12_Init+0x6c>)
 8001f80:	f00b fcae 	bl	800d8e0 <HAL_TIM_ConfigClockSource>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM12_Init+0x62>
    Error_Handler();
 8001f8a:	f000 fa83 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20005dc4 	.word	0x20005dc4
 8001f9c:	40001800 	.word	0x40001800

08001fa0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fa4:	4b22      	ldr	r3, [pc, #136]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fa6:	4a23      	ldr	r2, [pc, #140]	@ (8002034 <MX_USART1_UART_Init+0x94>)
 8001fa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001faa:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fca:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd0:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fd6:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fdc:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe2:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001fe8:	4811      	ldr	r0, [pc, #68]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001fea:	f00c fe31 	bl	800ec50 <HAL_UART_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_USART1_UART_Init+0x58>
    Error_Handler();
 8001ff4:	f000 fa4e 	bl	8002494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	480d      	ldr	r0, [pc, #52]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 8001ffc:	f00e f97c 	bl	80102f8 <HAL_UARTEx_SetTxFifoThreshold>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USART1_UART_Init+0x6a>
    Error_Handler();
 8002006:	f000 fa45 	bl	8002494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 800200a:	2100      	movs	r1, #0
 800200c:	4808      	ldr	r0, [pc, #32]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 800200e:	f00e f9b1 	bl	8010374 <HAL_UARTEx_SetRxFifoThreshold>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_USART1_UART_Init+0x7c>
    Error_Handler();
 8002018:	f000 fa3c 	bl	8002494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 800201c:	4804      	ldr	r0, [pc, #16]	@ (8002030 <MX_USART1_UART_Init+0x90>)
 800201e:	f00e f932 	bl	8010286 <HAL_UARTEx_DisableFifoMode>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_USART1_UART_Init+0x8c>
    Error_Handler();
 8002028:	f000 fa34 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	20005f00 	.word	0x20005f00
 8002034:	40013800 	.word	0x40013800

08002038 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800203c:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 800203e:	4a23      	ldr	r2, [pc, #140]	@ (80020cc <MX_USART2_UART_Init+0x94>)
 8002040:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002042:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 8002044:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002048:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800204a:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002050:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002056:	4b1c      	ldr	r3, [pc, #112]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800205c:	4b1a      	ldr	r3, [pc, #104]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 800205e:	220c      	movs	r2, #12
 8002060:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002062:	4b19      	ldr	r3, [pc, #100]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 8002064:	2200      	movs	r2, #0
 8002066:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002068:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 800206a:	2200      	movs	r2, #0
 800206c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800206e:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 8002070:	2200      	movs	r2, #0
 8002072:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002074:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 8002076:	2200      	movs	r2, #0
 8002078:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800207a:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 800207c:	2200      	movs	r2, #0
 800207e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002080:	4811      	ldr	r0, [pc, #68]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 8002082:	f00c fde5 	bl	800ec50 <HAL_UART_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_USART2_UART_Init+0x58>
    Error_Handler();
 800208c:	f000 fa02 	bl	8002494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8002090:	2100      	movs	r1, #0
 8002092:	480d      	ldr	r0, [pc, #52]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 8002094:	f00e f930 	bl	80102f8 <HAL_UARTEx_SetTxFifoThreshold>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_USART2_UART_Init+0x6a>
    Error_Handler();
 800209e:	f000 f9f9 	bl	8002494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80020a2:	2100      	movs	r1, #0
 80020a4:	4808      	ldr	r0, [pc, #32]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 80020a6:	f00e f965 	bl	8010374 <HAL_UARTEx_SetRxFifoThreshold>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_USART2_UART_Init+0x7c>
    Error_Handler();
 80020b0:	f000 f9f0 	bl	8002494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 80020b4:	4804      	ldr	r0, [pc, #16]	@ (80020c8 <MX_USART2_UART_Init+0x90>)
 80020b6:	f00e f8e6 	bl	8010286 <HAL_UARTEx_DisableFifoMode>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_USART2_UART_Init+0x8c>
    Error_Handler();
 80020c0:	f000 f9e8 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20005f94 	.word	0x20005f94
 80020cc:	40004400 	.word	0x40004400

080020d0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020d4:	4b22      	ldr	r3, [pc, #136]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 80020d6:	4a23      	ldr	r2, [pc, #140]	@ (8002164 <MX_USART3_UART_Init+0x94>)
 80020d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020da:	4b21      	ldr	r3, [pc, #132]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 80020dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 80020f6:	220c      	movs	r2, #12
 80020f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020fa:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002100:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002106:	4b16      	ldr	r3, [pc, #88]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800210c:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002112:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 8002114:	2200      	movs	r2, #0
 8002116:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK) {
 8002118:	4811      	ldr	r0, [pc, #68]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 800211a:	f00c fd99 	bl	800ec50 <HAL_UART_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_USART3_UART_Init+0x58>
    Error_Handler();
 8002124:	f000 f9b6 	bl	8002494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8002128:	2100      	movs	r1, #0
 800212a:	480d      	ldr	r0, [pc, #52]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 800212c:	f00e f8e4 	bl	80102f8 <HAL_UARTEx_SetTxFifoThreshold>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_USART3_UART_Init+0x6a>
    Error_Handler();
 8002136:	f000 f9ad 	bl	8002494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 800213a:	2100      	movs	r1, #0
 800213c:	4808      	ldr	r0, [pc, #32]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 800213e:	f00e f919 	bl	8010374 <HAL_UARTEx_SetRxFifoThreshold>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_USART3_UART_Init+0x7c>
    Error_Handler();
 8002148:	f000 f9a4 	bl	8002494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 800214c:	4804      	ldr	r0, [pc, #16]	@ (8002160 <MX_USART3_UART_Init+0x90>)
 800214e:	f00e f89a 	bl	8010286 <HAL_UARTEx_DisableFifoMode>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_USART3_UART_Init+0x8c>
    Error_Handler();
 8002158:	f000 f99c 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20006028 	.word	0x20006028
 8002164:	40004800 	.word	0x40004800

08002168 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	@ 0x28
 800216c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800217e:	4b5a      	ldr	r3, [pc, #360]	@ (80022e8 <MX_GPIO_Init+0x180>)
 8002180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002184:	4a58      	ldr	r2, [pc, #352]	@ (80022e8 <MX_GPIO_Init+0x180>)
 8002186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800218a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800218e:	4b56      	ldr	r3, [pc, #344]	@ (80022e8 <MX_GPIO_Init+0x180>)
 8002190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800219c:	4b52      	ldr	r3, [pc, #328]	@ (80022e8 <MX_GPIO_Init+0x180>)
 800219e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a2:	4a51      	ldr	r2, [pc, #324]	@ (80022e8 <MX_GPIO_Init+0x180>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021ac:	4b4e      	ldr	r3, [pc, #312]	@ (80022e8 <MX_GPIO_Init+0x180>)
 80021ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ba:	4b4b      	ldr	r3, [pc, #300]	@ (80022e8 <MX_GPIO_Init+0x180>)
 80021bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021c0:	4a49      	ldr	r2, [pc, #292]	@ (80022e8 <MX_GPIO_Init+0x180>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021ca:	4b47      	ldr	r3, [pc, #284]	@ (80022e8 <MX_GPIO_Init+0x180>)
 80021cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d8:	4b43      	ldr	r3, [pc, #268]	@ (80022e8 <MX_GPIO_Init+0x180>)
 80021da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021de:	4a42      	ldr	r2, [pc, #264]	@ (80022e8 <MX_GPIO_Init+0x180>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021e8:	4b3f      	ldr	r3, [pc, #252]	@ (80022e8 <MX_GPIO_Init+0x180>)
 80021ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	607b      	str	r3, [r7, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f6:	4b3c      	ldr	r3, [pc, #240]	@ (80022e8 <MX_GPIO_Init+0x180>)
 80021f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021fc:	4a3a      	ldr	r2, [pc, #232]	@ (80022e8 <MX_GPIO_Init+0x180>)
 80021fe:	f043 0308 	orr.w	r3, r3, #8
 8002202:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002206:	4b38      	ldr	r3, [pc, #224]	@ (80022e8 <MX_GPIO_Init+0x180>)
 8002208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperDir_GPIO_Port, StepperDir_Pin, GPIO_PIN_RESET);
 8002214:	2200      	movs	r2, #0
 8002216:	2104      	movs	r1, #4
 8002218:	4834      	ldr	r0, [pc, #208]	@ (80022ec <MX_GPIO_Init+0x184>)
 800221a:	f004 fb57 	bl	80068cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ClutchOut_GPIO_Port, ClutchOut_Pin, GPIO_PIN_RESET);
 800221e:	2200      	movs	r2, #0
 8002220:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002224:	4832      	ldr	r0, [pc, #200]	@ (80022f0 <MX_GPIO_Init+0x188>)
 8002226:	f004 fb51 	bl	80068cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EcuStep_Pin TwoStepButton_Pin Gear4_Pin GearN_Pin */
  GPIO_InitStruct.Pin = EcuStep_Pin | TwoStepButton_Pin | Gear4_Pin | GearN_Pin;
 800222a:	f44f 53d1 	mov.w	r3, #6688	@ 0x1a20
 800222e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	482d      	ldr	r0, [pc, #180]	@ (80022f4 <MX_GPIO_Init+0x18c>)
 8002240:	f004 f9ce 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EcuDir_Pin Gear3_Pin */
  GPIO_InitStruct.Pin = EcuDir_Pin | Gear3_Pin;
 8002244:	2311      	movs	r3, #17
 8002246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4825      	ldr	r0, [pc, #148]	@ (80022ec <MX_GPIO_Init+0x184>)
 8002258:	f004 f9c2 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : StepperDir_Pin */
  GPIO_InitStruct.Pin = StepperDir_Pin;
 800225c:	2304      	movs	r3, #4
 800225e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	2301      	movs	r3, #1
 8002262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(StepperDir_GPIO_Port, &GPIO_InitStruct);
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4619      	mov	r1, r3
 8002272:	481e      	ldr	r0, [pc, #120]	@ (80022ec <MX_GPIO_Init+0x184>)
 8002274:	f004 f9b4 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ThrottleCalibration_Pin */
  GPIO_InitStruct.Pin = ThrottleCalibration_Pin;
 8002278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800227c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ThrottleCalibration_GPIO_Port, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4818      	ldr	r0, [pc, #96]	@ (80022f0 <MX_GPIO_Init+0x188>)
 800228e:	f004 f9a7 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ClutchOut_Pin */
  GPIO_InitStruct.Pin = ClutchOut_Pin;
 8002292:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ClutchOut_GPIO_Port, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	4811      	ldr	r0, [pc, #68]	@ (80022f0 <MX_GPIO_Init+0x188>)
 80022ac:	f004 f998 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Gear2_Pin */
  GPIO_InitStruct.Pin = Gear2_Pin;
 80022b0:	2304      	movs	r3, #4
 80022b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Gear2_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	480d      	ldr	r0, [pc, #52]	@ (80022f8 <MX_GPIO_Init+0x190>)
 80022c4:	f004 f98c 	bl	80065e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Gear1_Pin */
  GPIO_InitStruct.Pin = Gear1_Pin;
 80022c8:	2308      	movs	r3, #8
 80022ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <MX_GPIO_Init+0x194>)
 80022ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Gear1_GPIO_Port, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	4804      	ldr	r0, [pc, #16]	@ (80022ec <MX_GPIO_Init+0x184>)
 80022dc:	f004 f980 	bl	80065e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80022e0:	bf00      	nop
 80022e2:	3728      	adds	r7, #40	@ 0x28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	44020c00 	.word	0x44020c00
 80022ec:	42020400 	.word	0x42020400
 80022f0:	42020000 	.word	0x42020000
 80022f4:	42020800 	.word	0x42020800
 80022f8:	42020c00 	.word	0x42020c00
 80022fc:	10110000 	.word	0x10110000

08002300 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]

  if (huart->Instance == USART1) {
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0b      	ldr	r2, [pc, #44]	@ (8002340 <HAL_UARTEx_RxEventCallback+0x40>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d10f      	bne.n	8002336 <HAL_UARTEx_RxEventCallback+0x36>
    switch (HAL_UARTEx_GetRxEventType(huart)) {
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f00e f8be 	bl	8010498 <HAL_UARTEx_GetRxEventType>
 800231c:	4603      	mov	r3, r0
 800231e:	2b02      	cmp	r3, #2
 8002320:	d109      	bne.n	8002336 <HAL_UARTEx_RxEventCallback+0x36>
    case HAL_UART_RXEVENT_IDLE:
      returnval = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buf_usart1, USART1_RX_BUF_LEN);
 8002322:	2264      	movs	r2, #100	@ 0x64
 8002324:	4907      	ldr	r1, [pc, #28]	@ (8002344 <HAL_UARTEx_RxEventCallback+0x44>)
 8002326:	4808      	ldr	r0, [pc, #32]	@ (8002348 <HAL_UARTEx_RxEventCallback+0x48>)
 8002328:	f00e f862 	bl	80103f0 <HAL_UARTEx_ReceiveToIdle_DMA>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_UARTEx_RxEventCallback+0x4c>)
 8002332:	701a      	strb	r2, [r3, #0]
      break;
 8002334:	bf00      	nop
    }
  }
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40013800 	.word	0x40013800
 8002344:	20006314 	.word	0x20006314
 8002348:	20005f00 	.word	0x20005f00
 800234c:	200064ac 	.word	0x200064ac

08002350 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0b      	ldr	r2, [pc, #44]	@ (800238c <HAL_UART_ErrorCallback+0x3c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d110      	bne.n	8002384 <HAL_UART_ErrorCallback+0x34>
    uint8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buf_usart1, USART1_RX_BUF_LEN);
 8002362:	2264      	movs	r2, #100	@ 0x64
 8002364:	490a      	ldr	r1, [pc, #40]	@ (8002390 <HAL_UART_ErrorCallback+0x40>)
 8002366:	480b      	ldr	r0, [pc, #44]	@ (8002394 <HAL_UART_ErrorCallback+0x44>)
 8002368:	f00e f842 	bl	80103f0 <HAL_UARTEx_ReceiveToIdle_DMA>
 800236c:	4603      	mov	r3, r0
 800236e:	73fb      	strb	r3, [r7, #15]
    static const char *err_code[] = {"OK", "ERROR", "BUSY", "TIMEOUT"};
    sprintf(error_throw(), "USART1rx errored out, restarted with code: HAL_%s", err_code[status]);
 8002370:	f7ff f9dc 	bl	800172c <error_throw>
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	4a08      	ldr	r2, [pc, #32]	@ (8002398 <HAL_UART_ErrorCallback+0x48>)
 8002378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237c:	461a      	mov	r2, r3
 800237e:	4907      	ldr	r1, [pc, #28]	@ (800239c <HAL_UART_ErrorCallback+0x4c>)
 8002380:	f010 fba8 	bl	8012ad4 <siprintf>
  }
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40013800 	.word	0x40013800
 8002390:	20006314 	.word	0x20006314
 8002394:	20005f00 	.word	0x20005f00
 8002398:	20000008 	.word	0x20000008
 800239c:	08013c38 	.word	0x08013c38

080023a0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buf, ADC_BUF_LEN); }
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	2296      	movs	r2, #150	@ 0x96
 80023aa:	4904      	ldr	r1, [pc, #16]	@ (80023bc <HAL_ADC_ConvCpltCallback+0x1c>)
 80023ac:	4804      	ldr	r0, [pc, #16]	@ (80023c0 <HAL_ADC_ConvCpltCallback+0x20>)
 80023ae:	f001 fea7 	bl	8004100 <HAL_ADC_Start_DMA>
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000637c 	.word	0x2000637c
 80023c0:	20005b60 	.word	0x20005b60

080023c4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  static uint8_t NAU_counter = 0;
  static uint8_t speeduino_counter = 0;

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a28      	ldr	r2, [pc, #160]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d102      	bne.n	80023dc <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80023d6:	f001 fab9 	bl	800394c <HAL_IncTick>
      HAL_UART_Transmit_DMA(&huart1, tx_buf_usart1, USART1_TX_BUF_LEN);
    }
  }

  /* USER CODE END Callback 1 */
}
 80023da:	e047      	b.n	800246c <HAL_TIM_PeriodElapsedCallback+0xa8>
    pending_samples++;
 80023dc:	4b26      	ldr	r3, [pc, #152]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	3301      	adds	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	4b24      	ldr	r3, [pc, #144]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80023e6:	801a      	strh	r2, [r3, #0]
    NAU_counter++;
 80023e8:	4b24      	ldr	r3, [pc, #144]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b22      	ldr	r3, [pc, #136]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80023f2:	701a      	strb	r2, [r3, #0]
    speeduino_counter++;
 80023f4:	4b22      	ldr	r3, [pc, #136]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80023fe:	701a      	strb	r2, [r3, #0]
    if (NAU_counter > 2) {
 8002400:	4b1e      	ldr	r3, [pc, #120]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d925      	bls.n	8002454 <HAL_TIM_PeriodElapsedCallback+0x90>
      TIM2->CNT = 0;
 8002408:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800240c:	2200      	movs	r2, #0
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24
      if (loadCell.idx > LOADCELL_BUF_LEN - 1) {
 8002410:	4b1c      	ldr	r3, [pc, #112]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002412:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002416:	2b63      	cmp	r3, #99	@ 0x63
 8002418:	d903      	bls.n	8002422 <HAL_TIM_PeriodElapsedCallback+0x5e>
        loadCell.idx = 0;
 800241a:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
      loadCell.idx++;
 8002422:	4b18      	ldr	r3, [pc, #96]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002424:	f893 3190 	ldrb.w	r3, [r3, #400]	@ 0x190
 8002428:	3301      	adds	r3, #1
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800242e:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
      loadCell.pending_samples++;
 8002432:	4b14      	ldr	r3, [pc, #80]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002434:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8002438:	3301      	adds	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800243e:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192
      NAU_counter = 0;
 8002442:	4b0e      	ldr	r3, [pc, #56]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
      exec_time = TIM2->CNT;
 8002448:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800244c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b0d      	ldr	r3, [pc, #52]	@ (8002488 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002452:	701a      	strb	r2, [r3, #0]
    if (speeduino_counter == 15) {
 8002454:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b0f      	cmp	r3, #15
 800245a:	d107      	bne.n	800246c <HAL_TIM_PeriodElapsedCallback+0xa8>
      speeduino_counter = 0;
 800245c:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, tx_buf_usart1, USART1_TX_BUF_LEN);
 8002462:	2202      	movs	r2, #2
 8002464:	4909      	ldr	r1, [pc, #36]	@ (800248c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002466:	480a      	ldr	r0, [pc, #40]	@ (8002490 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002468:	f00c fc42 	bl	800ecf0 <HAL_UART_Transmit_DMA>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40001000 	.word	0x40001000
 8002478:	200064aa 	.word	0x200064aa
 800247c:	200064ad 	.word	0x200064ad
 8002480:	200064ae 	.word	0x200064ae
 8002484:	200064b0 	.word	0x200064b0
 8002488:	200064a8 	.word	0x200064a8
 800248c:	20000004 	.word	0x20000004
 8002490:	20005f00 	.word	0x20005f00

08002494 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002498:	b672      	cpsid	i
}
 800249a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <Error_Handler+0x8>

080024a0 <stim_start>:
#include "software_timer.h"
#include "stm32h5xx_hal.h"

void stim_start(stim *inst) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  inst->start_tick = HAL_GetTick();
 80024a8:	f001 fa64 	bl	8003974 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <ledInit>:
// Storing the LED data
#define MAX_LED 11
uint8_t LED_Data[MAX_LED][4]; // before brightness correction
uint8_t LED_Mod[MAX_LED][4];  // after brightness correction

void ledInit() {
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
  for (int i = 0; i < 11; ++i) {
 80024c2:	2300      	movs	r3, #0
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	e01b      	b.n	8002500 <ledInit+0x44>
    for (int j = 0; j < 4; ++j) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	e012      	b.n	80024f4 <ledInit+0x38>
      LED_Data[i][j] = 0;
 80024ce:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <ledInit+0x58>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	441a      	add	r2, r3
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	4413      	add	r3, r2
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
      LED_Mod[i][j] = 0;
 80024de:	4a0e      	ldr	r2, [pc, #56]	@ (8002518 <ledInit+0x5c>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	441a      	add	r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	4413      	add	r3, r2
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 4; ++j) {
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	dde9      	ble.n	80024ce <ledInit+0x12>
  for (int i = 0; i < 11; ++i) {
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3301      	adds	r3, #1
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b0a      	cmp	r3, #10
 8002504:	dde0      	ble.n	80024c8 <ledInit+0xc>
    }
  }
}
 8002506:	bf00      	nop
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	2000664c 	.word	0x2000664c
 8002518:	20006678 	.word	0x20006678

0800251c <ledSetBrightness>:

void ledSetBrightness(const float brightness) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	ed87 0a01 	vstr	s0, [r7, #4]
  float gammaBrightness = powf(brightness, 2.2);
 8002526:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 80025dc <ledSetBrightness+0xc0>
 800252a:	ed97 0a01 	vldr	s0, [r7, #4]
 800252e:	f010 ff82 	bl	8013436 <powf>
 8002532:	ed87 0a05 	vstr	s0, [r7, #20]

  if (gammaBrightness > 1)
 8002536:	edd7 7a05 	vldr	s15, [r7, #20]
 800253a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800253e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002546:	dd03      	ble.n	8002550 <ledSetBrightness+0x34>
    gammaBrightness = 1;
 8002548:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e009      	b.n	8002564 <ledSetBrightness+0x48>
  else if (gammaBrightness < 0)
 8002550:	edd7 7a05 	vldr	s15, [r7, #20]
 8002554:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	d502      	bpl.n	8002564 <ledSetBrightness+0x48>
    gammaBrightness = 0;
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < MAX_LED; i++) {
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	e030      	b.n	80025cc <ledSetBrightness+0xb0>
    LED_Mod[i][0] = LED_Data[i][0];
 800256a:	4a1d      	ldr	r2, [pc, #116]	@ (80025e0 <ledSetBrightness+0xc4>)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8002572:	4a1c      	ldr	r2, [pc, #112]	@ (80025e4 <ledSetBrightness+0xc8>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    for (int j = 1; j < 4; j++) {
 800257a:	2301      	movs	r3, #1
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	e01f      	b.n	80025c0 <ledSetBrightness+0xa4>
      LED_Mod[i][j] = (LED_Data[i][j]) * gammaBrightness;
 8002580:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <ledSetBrightness+0xc4>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	441a      	add	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4413      	add	r3, r2
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	ee07 3a90 	vmov	s15, r3
 8002592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002596:	edd7 7a05 	vldr	s15, [r7, #20]
 800259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025a2:	edc7 7a00 	vstr	s15, [r7]
 80025a6:	783b      	ldrb	r3, [r7, #0]
 80025a8:	b2d9      	uxtb	r1, r3
 80025aa:	4a0e      	ldr	r2, [pc, #56]	@ (80025e4 <ledSetBrightness+0xc8>)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	441a      	add	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4413      	add	r3, r2
 80025b6:	460a      	mov	r2, r1
 80025b8:	701a      	strb	r2, [r3, #0]
    for (int j = 1; j < 4; j++) {
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	3301      	adds	r3, #1
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	dddc      	ble.n	8002580 <ledSetBrightness+0x64>
  for (int i = 0; i < MAX_LED; i++) {
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	3301      	adds	r3, #1
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	2b0a      	cmp	r3, #10
 80025d0:	ddcb      	ble.n	800256a <ledSetBrightness+0x4e>
    }
  }
}
 80025d2:	bf00      	nop
 80025d4:	bf00      	nop
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	400ccccd 	.word	0x400ccccd
 80025e0:	2000664c 	.word	0x2000664c
 80025e4:	20006678 	.word	0x20006678

080025e8 <ledSetColor>:

void ledSetColor(const uint8_t LEDnum, const uint8_t red, const uint8_t green,
                 const uint8_t blue) {
 80025e8:	b490      	push	{r4, r7}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4604      	mov	r4, r0
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	4603      	mov	r3, r0
 80025fc:	71bb      	strb	r3, [r7, #6]
 80025fe:	460b      	mov	r3, r1
 8002600:	717b      	strb	r3, [r7, #5]
 8002602:	4613      	mov	r3, r2
 8002604:	713b      	strb	r3, [r7, #4]
  LED_Data[LEDnum][0] = LEDnum;
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	490d      	ldr	r1, [pc, #52]	@ (8002640 <ledSetColor+0x58>)
 800260a:	79fa      	ldrb	r2, [r7, #7]
 800260c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
  LED_Data[LEDnum][1] = green;
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	4a0b      	ldr	r2, [pc, #44]	@ (8002640 <ledSetColor+0x58>)
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	797a      	ldrb	r2, [r7, #5]
 800261a:	705a      	strb	r2, [r3, #1]
  LED_Data[LEDnum][2] = red;
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	4a08      	ldr	r2, [pc, #32]	@ (8002640 <ledSetColor+0x58>)
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	79ba      	ldrb	r2, [r7, #6]
 8002626:	709a      	strb	r2, [r3, #2]
  LED_Data[LEDnum][3] = blue;
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	4a05      	ldr	r2, [pc, #20]	@ (8002640 <ledSetColor+0x58>)
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	793a      	ldrb	r2, [r7, #4]
 8002632:	70da      	strb	r2, [r3, #3]
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bc90      	pop	{r4, r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	2000664c 	.word	0x2000664c

08002644 <ledSend>:

// Convert and send the data to DMA
uint16_t pwmData[(24 * MAX_LED) + 50];

void ledSend(const float brightness) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	ed87 0a01 	vstr	s0, [r7, #4]
  ledSetBrightness(brightness);
 800264e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002652:	f7ff ff63 	bl	800251c <ledSetBrightness>

  uint32_t color, index = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]

  for (int i = 0; i < MAX_LED; i++) {
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	e036      	b.n	80026ce <ledSend+0x8a>
    color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
 8002660:	4a30      	ldr	r2, [pc, #192]	@ (8002724 <ledSend+0xe0>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	785b      	ldrb	r3, [r3, #1]
 800266a:	041a      	lsls	r2, r3, #16
 800266c:	492d      	ldr	r1, [pc, #180]	@ (8002724 <ledSend+0xe0>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	789b      	ldrb	r3, [r3, #2]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	431a      	orrs	r2, r3
 800267a:	492a      	ldr	r1, [pc, #168]	@ (8002724 <ledSend+0xe0>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	78db      	ldrb	r3, [r3, #3]
 8002684:	4313      	orrs	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
    for (int i = 23; i >= 0; i--) {
 8002688:	2317      	movs	r3, #23
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	e019      	b.n	80026c2 <ledSend+0x7e>
      if (color & (1 << i)) {
 800268e:	2201      	movs	r2, #1
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <ledSend+0x68>
        pwmData[index] = 76; // 112*0.68
 80026a0:	4a21      	ldr	r2, [pc, #132]	@ (8002728 <ledSend+0xe4>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	214c      	movs	r1, #76	@ 0x4c
 80026a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80026aa:	e004      	b.n	80026b6 <ledSend+0x72>
      }

      else
        pwmData[index] = 36; // 112-76
 80026ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002728 <ledSend+0xe4>)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	2124      	movs	r1, #36	@ 0x24
 80026b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      index++;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3301      	adds	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
    for (int i = 23; i >= 0; i--) {
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	3b01      	subs	r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	dae2      	bge.n	800268e <ledSend+0x4a>
  for (int i = 0; i < MAX_LED; i++) {
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b0a      	cmp	r3, #10
 80026d2:	ddc5      	ble.n	8002660 <ledSend+0x1c>
    }
  }

  for (int i = 0; i < 50; i++) {
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	e00a      	b.n	80026f0 <ledSend+0xac>
    pwmData[index] = 0;
 80026da:	4a13      	ldr	r2, [pc, #76]	@ (8002728 <ledSend+0xe4>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2100      	movs	r1, #0
 80026e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    index++;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3301      	adds	r3, #1
 80026e8:	61fb      	str	r3, [r7, #28]
  for (int i = 0; i < 50; i++) {
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	3301      	adds	r3, #1
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b31      	cmp	r3, #49	@ 0x31
 80026f4:	ddf1      	ble.n	80026da <ledSend+0x96>
  }

  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3, (uint32_t *)pwmData, index);
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002728 <ledSend+0xe4>)
 80026fc:	2108      	movs	r1, #8
 80026fe:	480b      	ldr	r0, [pc, #44]	@ (800272c <ledSend+0xe8>)
 8002700:	f00a fc04 	bl	800cf0c <HAL_TIM_PWM_Start_DMA>
  while (!ledDataSentFlag)
 8002704:	bf00      	nop
 8002706:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <ledSend+0xec>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	f083 0301 	eor.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f8      	bne.n	8002706 <ledSend+0xc2>
    ;
  ledDataSentFlag = false;
 8002714:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <ledSend+0xec>)
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
}
 800271a:	bf00      	nop
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20006678 	.word	0x20006678
 8002728:	200066a4 	.word	0x200066a4
 800272c:	20005ce0 	.word	0x20005ce0
 8002730:	20006648 	.word	0x20006648
 8002734:	00000000 	.word	0x00000000

08002738 <ledUpdate>:

// Update Leds (Rpm calculations)
void ledUpdate() {
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
#define MAX_RPM 4300 // (9300-5000)

  uint16_t num_on = roundf(((rpm - 4300.0) * MAX_LED) /
 800273e:	4b36      	ldr	r3, [pc, #216]	@ (8002818 <ledUpdate+0xe0>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe f814 	bl	8000770 <__aeabi_i2d>
 8002748:	a331      	add	r3, pc, #196	@ (adr r3, 8002810 <ledUpdate+0xd8>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fd fec1 	bl	80004d4 <__aeabi_dsub>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	4b2f      	ldr	r3, [pc, #188]	@ (800281c <ledUpdate+0xe4>)
 8002760:	f7fe f870 	bl	8000844 <__aeabi_dmul>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	a328      	add	r3, pc, #160	@ (adr r3, 8002810 <ledUpdate+0xd8>)
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	f7fe f991 	bl	8000a98 <__aeabi_ddiv>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	f7fe fa73 	bl	8000c68 <__aeabi_d2f>
 8002782:	4603      	mov	r3, r0
 8002784:	ee00 3a10 	vmov	s0, r3
 8002788:	f010 feb6 	bl	80134f8 <roundf>
 800278c:	eef0 7a40 	vmov.f32	s15, s0
 8002790:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002794:	ee17 3a90 	vmov	r3, s15
 8002798:	80fb      	strh	r3, [r7, #6]
                           MAX_RPM); // RPM-5000 because MAX_RPM=10000-5000

  if (num_on < 0 || num_on > 11) {
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	2b0b      	cmp	r3, #11
 800279e:	d901      	bls.n	80027a4 <ledUpdate+0x6c>
    num_on = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	80fb      	strh	r3, [r7, #6]
  }
  // Loop through the LEDs from 0 to 10
  for (int i = 0; i < 11; i++) {
 80027a4:	2300      	movs	r3, #0
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	e02a      	b.n	8002800 <ledUpdate+0xc8>
    // If the LED index is less than the input, turn it on with the predefined
    // color
    if (i < num_on) {
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	da1c      	bge.n	80027ec <ledUpdate+0xb4>
      ledSetColor(i, colors[i][0], colors[i][1], colors[i][2]);
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	b2d8      	uxtb	r0, r3
 80027b6:	491a      	ldr	r1, [pc, #104]	@ (8002820 <ledUpdate+0xe8>)
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	4613      	mov	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4413      	add	r3, r2
 80027c0:	440b      	add	r3, r1
 80027c2:	7819      	ldrb	r1, [r3, #0]
 80027c4:	4c16      	ldr	r4, [pc, #88]	@ (8002820 <ledUpdate+0xe8>)
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	4423      	add	r3, r4
 80027d0:	3301      	adds	r3, #1
 80027d2:	781c      	ldrb	r4, [r3, #0]
 80027d4:	4d12      	ldr	r5, [pc, #72]	@ (8002820 <ledUpdate+0xe8>)
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	442b      	add	r3, r5
 80027e0:	3302      	adds	r3, #2
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4622      	mov	r2, r4
 80027e6:	f7ff feff 	bl	80025e8 <ledSetColor>
 80027ea:	e006      	b.n	80027fa <ledUpdate+0xc2>
    }
    // Otherwise, turn it off by setting the color to 0
    else {
      ledSetColor(i, 0, 0, 0);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2d8      	uxtb	r0, r3
 80027f0:	2300      	movs	r3, #0
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	f7ff fef7 	bl	80025e8 <ledSetColor>
  for (int i = 0; i < 11; i++) {
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	2b0a      	cmp	r3, #10
 8002804:	ddd1      	ble.n	80027aa <ledUpdate+0x72>
    }
  }
}
 8002806:	bf00      	nop
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bdb0      	pop	{r4, r5, r7, pc}
 8002810:	00000000 	.word	0x00000000
 8002814:	40b0cc00 	.word	0x40b0cc00
 8002818:	2000664a 	.word	0x2000664a
 800281c:	40260000 	.word	0x40260000
 8002820:	20000018 	.word	0x20000018

08002824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002828:	f004 f9ca 	bl	8006bc0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0cc      	sub	sp, #304	@ 0x130
 8002834:	af00      	add	r7, sp, #0
 8002836:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800283a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800283e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002850:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002854:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002858:	4618      	mov	r0, r3
 800285a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800285e:	461a      	mov	r2, r3
 8002860:	2100      	movs	r1, #0
 8002862:	f010 f959 	bl	8012b18 <memset>
  if(hadc->Instance==ADC1)
 8002866:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800286a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a79      	ldr	r2, [pc, #484]	@ (8002a58 <HAL_ADC_MspInit+0x228>)
 8002874:	4293      	cmp	r3, r2
 8002876:	f040 80e9 	bne.w	8002a4c <HAL_ADC_MspInit+0x21c>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800287a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800287e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002882:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_HSE;
 800288e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002892:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002896:	2203      	movs	r2, #3
 8002898:	609a      	str	r2, [r3, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800289a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800289e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028a2:	2201      	movs	r2, #1
 80028a4:	60da      	str	r2, [r3, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 80028a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80028aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028ae:	2219      	movs	r2, #25
 80028b0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80028b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80028b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028ba:	2202      	movs	r2, #2
 80028bc:	615a      	str	r2, [r3, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80028be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80028c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028c6:	2202      	movs	r2, #2
 80028c8:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80028ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80028ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028d2:	2202      	movs	r2, #2
 80028d4:	61da      	str	r2, [r3, #28]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_3;
 80028d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80028da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028de:	220c      	movs	r2, #12
 80028e0:	621a      	str	r2, [r3, #32]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 80028e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80028e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028ea:	2200      	movs	r2, #0
 80028ec:	625a      	str	r2, [r3, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80028ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80028f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80028f6:	2200      	movs	r2, #0
 80028f8:	629a      	str	r2, [r3, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 80028fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80028fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002902:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002906:	62da      	str	r2, [r3, #44]	@ 0x2c
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2R;
 8002908:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800290c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002910:	2202      	movs	r2, #2
 8002912:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	4618      	mov	r0, r3
 800291c:	f005 f912 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002926:	f7ff fdb5 	bl	8002494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800292a:	4b4c      	ldr	r3, [pc, #304]	@ (8002a5c <HAL_ADC_MspInit+0x22c>)
 800292c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002930:	4a4a      	ldr	r2, [pc, #296]	@ (8002a5c <HAL_ADC_MspInit+0x22c>)
 8002932:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002936:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800293a:	4b48      	ldr	r3, [pc, #288]	@ (8002a5c <HAL_ADC_MspInit+0x22c>)
 800293c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002940:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8002944:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002948:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002952:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002956:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002958:	4b40      	ldr	r3, [pc, #256]	@ (8002a5c <HAL_ADC_MspInit+0x22c>)
 800295a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800295e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a5c <HAL_ADC_MspInit+0x22c>)
 8002960:	f043 0304 	orr.w	r3, r3, #4
 8002964:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002968:	4b3c      	ldr	r3, [pc, #240]	@ (8002a5c <HAL_ADC_MspInit+0x22c>)
 800296a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800296e:	f003 0204 	and.w	r2, r3, #4
 8002972:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002976:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002980:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002984:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PC1     ------> ADC1_INP11
    PC2     ------> ADC1_INP12
    */
    GPIO_InitStruct.Pin = ThrottlePos_Pin|ClutchPos_Pin|ShifterPos_Pin;
 8002986:	2307      	movs	r3, #7
 8002988:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800298c:	2303      	movs	r3, #3
 800298e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002992:	2300      	movs	r3, #0
 8002994:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002998:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800299c:	4619      	mov	r1, r3
 800299e:	4830      	ldr	r0, [pc, #192]	@ (8002a60 <HAL_ADC_MspInit+0x230>)
 80029a0:	f003 fe1e 	bl	80065e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 80029a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029a6:	4a30      	ldr	r2, [pc, #192]	@ (8002a68 <HAL_ADC_MspInit+0x238>)
 80029a8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC1;
 80029aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80029b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 80029bc:	4b29      	ldr	r3, [pc, #164]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 80029c2:	4b28      	ldr	r3, [pc, #160]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029c4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80029c8:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 80029ca:	4b26      	ldr	r3, [pc, #152]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 80029d0:	4b24      	ldr	r3, [pc, #144]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80029d6:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80029d8:	4b22      	ldr	r3, [pc, #136]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029da:	2200      	movs	r2, #0
 80029dc:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 80029de:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 80029e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80029ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80029f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 80029f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 80029fe:	4819      	ldr	r0, [pc, #100]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 8002a00:	f002 fd70 	bl	80054e4 <HAL_DMA_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_ADC_MspInit+0x1de>
    {
      Error_Handler();
 8002a0a:	f7ff fd43 	bl	8002494 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8002a0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002a12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a12      	ldr	r2, [pc, #72]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 8002a1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002a1c:	4a11      	ldr	r2, [pc, #68]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 8002a1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002a22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002a2a:	2110      	movs	r1, #16
 8002a2c:	480d      	ldr	r0, [pc, #52]	@ (8002a64 <HAL_ADC_MspInit+0x234>)
 8002a2e:	f003 f907 	bl	8005c40 <HAL_DMA_ConfigChannelAttributes>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_ADC_MspInit+0x20c>
    {
      Error_Handler();
 8002a38:	f7ff fd2c 	bl	8002494 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2025      	movs	r0, #37	@ 0x25
 8002a42:	f002 fccf 	bl	80053e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002a46:	2025      	movs	r0, #37	@ 0x25
 8002a48:	f002 fce6 	bl	8005418 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002a4c:	bf00      	nop
 8002a4e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	42028000 	.word	0x42028000
 8002a5c:	44020c00 	.word	0x44020c00
 8002a60:	42020800 	.word	0x42020800
 8002a64:	20005bc8 	.word	0x20005bc8
 8002a68:	40020150 	.word	0x40020150

08002a6c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0cc      	sub	sp, #304	@ 0x130
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002a76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002a7a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002a90:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002a94:	4618      	mov	r0, r3
 8002a96:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	f010 f83b 	bl	8012b18 <memset>
  if(hi2c->Instance==I2C1)
 8002aa2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002aa6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a33      	ldr	r2, [pc, #204]	@ (8002b7c <HAL_I2C_MspInit+0x110>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d15d      	bne.n	8002b70 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ab4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ab8:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002abc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ac8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002acc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ad6:	f107 0310 	add.w	r3, r7, #16
 8002ada:	4618      	mov	r0, r3
 8002adc:	f005 f832 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8002ae6:	f7ff fcd5 	bl	8002494 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	4b25      	ldr	r3, [pc, #148]	@ (8002b80 <HAL_I2C_MspInit+0x114>)
 8002aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002af0:	4a23      	ldr	r2, [pc, #140]	@ (8002b80 <HAL_I2C_MspInit+0x114>)
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002afa:	4b21      	ldr	r3, [pc, #132]	@ (8002b80 <HAL_I2C_MspInit+0x114>)
 8002afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b00:	f003 0202 	and.w	r2, r3, #2
 8002b04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002b08:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002b12:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002b16:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b18:	23c0      	movs	r3, #192	@ 0xc0
 8002b1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1e:	2312      	movs	r3, #18
 8002b20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b30:	2304      	movs	r3, #4
 8002b32:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b36:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4811      	ldr	r0, [pc, #68]	@ (8002b84 <HAL_I2C_MspInit+0x118>)
 8002b3e:	f003 fd4f 	bl	80065e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b42:	4b0f      	ldr	r3, [pc, #60]	@ (8002b80 <HAL_I2C_MspInit+0x114>)
 8002b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b48:	4a0d      	ldr	r2, [pc, #52]	@ (8002b80 <HAL_I2C_MspInit+0x114>)
 8002b4a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b4e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b52:	4b0b      	ldr	r3, [pc, #44]	@ (8002b80 <HAL_I2C_MspInit+0x114>)
 8002b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b58:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002b5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002b60:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002b6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002b6e:	681b      	ldr	r3, [r3, #0]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002b70:	bf00      	nop
 8002b72:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40005400 	.word	0x40005400
 8002b80:	44020c00 	.word	0x44020c00
 8002b84:	42020400 	.word	0x42020400

08002b88 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b98:	d10f      	bne.n	8002bba <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b9a:	4b22      	ldr	r3, [pc, #136]	@ (8002c24 <HAL_TIM_Base_MspInit+0x9c>)
 8002b9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ba0:	4a20      	ldr	r2, [pc, #128]	@ (8002c24 <HAL_TIM_Base_MspInit+0x9c>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002baa:	4b1e      	ldr	r3, [pc, #120]	@ (8002c24 <HAL_TIM_Base_MspInit+0x9c>)
 8002bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002bb8:	e030      	b.n	8002c1c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM4)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002c28 <HAL_TIM_Base_MspInit+0xa0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d117      	bne.n	8002bf4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bc4:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <HAL_TIM_Base_MspInit+0x9c>)
 8002bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bca:	4a16      	ldr	r2, [pc, #88]	@ (8002c24 <HAL_TIM_Base_MspInit+0x9c>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002bd4:	4b13      	ldr	r3, [pc, #76]	@ (8002c24 <HAL_TIM_Base_MspInit+0x9c>)
 8002bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	613b      	str	r3, [r7, #16]
 8002be0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2100      	movs	r1, #0
 8002be6:	202f      	movs	r0, #47	@ 0x2f
 8002be8:	f002 fbfc 	bl	80053e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bec:	202f      	movs	r0, #47	@ 0x2f
 8002bee:	f002 fc13 	bl	8005418 <HAL_NVIC_EnableIRQ>
}
 8002bf2:	e013      	b.n	8002c1c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM12)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8002c2c <HAL_TIM_Base_MspInit+0xa4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002bfe:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <HAL_TIM_Base_MspInit+0x9c>)
 8002c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c04:	4a07      	ldr	r2, [pc, #28]	@ (8002c24 <HAL_TIM_Base_MspInit+0x9c>)
 8002c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c0a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002c0e:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <HAL_TIM_Base_MspInit+0x9c>)
 8002c10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	44020c00 	.word	0x44020c00
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40001800 	.word	0x40001800

08002c30 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a58      	ldr	r2, [pc, #352]	@ (8002da0 <HAL_TIM_PWM_MspInit+0x170>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d152      	bne.n	8002ce8 <HAL_TIM_PWM_MspInit+0xb8>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c42:	4b58      	ldr	r3, [pc, #352]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x174>)
 8002c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c48:	4a56      	ldr	r2, [pc, #344]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x174>)
 8002c4a:	f043 0302 	orr.w	r3, r3, #2
 8002c4e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002c52:	4b54      	ldr	r3, [pc, #336]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x174>)
 8002c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* GPDMA2_REQUEST_TIM3_CH4 Init */
    handle_GPDMA2_Channel0.Instance = GPDMA2_Channel0;
 8002c60:	4b51      	ldr	r3, [pc, #324]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002c62:	4a52      	ldr	r2, [pc, #328]	@ (8002dac <HAL_TIM_PWM_MspInit+0x17c>)
 8002c64:	601a      	str	r2, [r3, #0]
    handle_GPDMA2_Channel0.Init.Request = GPDMA2_REQUEST_TIM3_CH4;
 8002c66:	4b50      	ldr	r3, [pc, #320]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002c68:	2250      	movs	r2, #80	@ 0x50
 8002c6a:	605a      	str	r2, [r3, #4]
    handle_GPDMA2_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002c6c:	4b4e      	ldr	r3, [pc, #312]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
    handle_GPDMA2_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c72:	4b4d      	ldr	r3, [pc, #308]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002c74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c78:	60da      	str	r2, [r3, #12]
    handle_GPDMA2_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	611a      	str	r2, [r3, #16]
    handle_GPDMA2_Channel0.Init.DestInc = DMA_DINC_FIXED;
 8002c80:	4b49      	ldr	r3, [pc, #292]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	615a      	str	r2, [r3, #20]
    handle_GPDMA2_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002c86:	4b48      	ldr	r3, [pc, #288]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
    handle_GPDMA2_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002c8c:	4b46      	ldr	r3, [pc, #280]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
    handle_GPDMA2_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002c92:	4b45      	ldr	r3, [pc, #276]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	621a      	str	r2, [r3, #32]
    handle_GPDMA2_Channel0.Init.SrcBurstLength = 1;
 8002c98:	4b43      	ldr	r3, [pc, #268]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA2_Channel0.Init.DestBurstLength = 1;
 8002c9e:	4b42      	ldr	r3, [pc, #264]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA2_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT0;
 8002ca4:	4b40      	ldr	r3, [pc, #256]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002ca6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002caa:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA2_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002cac:	4b3e      	ldr	r3, [pc, #248]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA2_Channel0.Init.Mode = DMA_NORMAL;
 8002cb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA2_Channel0) != HAL_OK)
 8002cb8:	483b      	ldr	r0, [pc, #236]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002cba:	f002 fc13 	bl	80054e4 <HAL_DMA_Init>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 8002cc4:	f7ff fbe6 	bl	8002494 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC4], handle_GPDMA2_Channel0);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a37      	ldr	r2, [pc, #220]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002ccc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cce:	4a36      	ldr	r2, [pc, #216]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA2_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002cd4:	2110      	movs	r1, #16
 8002cd6:	4834      	ldr	r0, [pc, #208]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x178>)
 8002cd8:	f002 ffb2 	bl	8005c40 <HAL_DMA_ConfigChannelAttributes>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d059      	beq.n	8002d96 <HAL_TIM_PWM_MspInit+0x166>
    {
      Error_Handler();
 8002ce2:	f7ff fbd7 	bl	8002494 <Error_Handler>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ce6:	e056      	b.n	8002d96 <HAL_TIM_PWM_MspInit+0x166>
  else if(htim_pwm->Instance==TIM8)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a30      	ldr	r2, [pc, #192]	@ (8002db0 <HAL_TIM_PWM_MspInit+0x180>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d151      	bne.n	8002d96 <HAL_TIM_PWM_MspInit+0x166>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x174>)
 8002cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x174>)
 8002cfa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cfe:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002d02:	4b28      	ldr	r3, [pc, #160]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x174>)
 8002d04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
    handle_GPDMA2_Channel1.Instance = GPDMA2_Channel1;
 8002d10:	4b28      	ldr	r3, [pc, #160]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d12:	4a29      	ldr	r2, [pc, #164]	@ (8002db8 <HAL_TIM_PWM_MspInit+0x188>)
 8002d14:	601a      	str	r2, [r3, #0]
    handle_GPDMA2_Channel1.Init.Request = GPDMA2_REQUEST_TIM8_CH3;
 8002d16:	4b27      	ldr	r3, [pc, #156]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d18:	2243      	movs	r2, #67	@ 0x43
 8002d1a:	605a      	str	r2, [r3, #4]
    handle_GPDMA2_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002d1c:	4b25      	ldr	r3, [pc, #148]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
    handle_GPDMA2_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d22:	4b24      	ldr	r3, [pc, #144]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d28:	60da      	str	r2, [r3, #12]
    handle_GPDMA2_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002d2a:	4b22      	ldr	r3, [pc, #136]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	611a      	str	r2, [r3, #16]
    handle_GPDMA2_Channel1.Init.DestInc = DMA_DINC_FIXED;
 8002d30:	4b20      	ldr	r3, [pc, #128]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	615a      	str	r2, [r3, #20]
    handle_GPDMA2_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002d36:	4b1f      	ldr	r3, [pc, #124]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
    handle_GPDMA2_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
    handle_GPDMA2_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002d42:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	621a      	str	r2, [r3, #32]
    handle_GPDMA2_Channel1.Init.SrcBurstLength = 1;
 8002d48:	4b1a      	ldr	r3, [pc, #104]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA2_Channel1.Init.DestBurstLength = 1;
 8002d4e:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA2_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT0;
 8002d54:	4b17      	ldr	r3, [pc, #92]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA2_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002d5c:	4b15      	ldr	r3, [pc, #84]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA2_Channel1.Init.Mode = DMA_NORMAL;
 8002d62:	4b14      	ldr	r3, [pc, #80]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA2_Channel1) != HAL_OK)
 8002d68:	4812      	ldr	r0, [pc, #72]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d6a:	f002 fbbb 	bl	80054e4 <HAL_DMA_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_TIM_PWM_MspInit+0x148>
      Error_Handler();
 8002d74:	f7ff fb8e 	bl	8002494 <Error_Handler>
    __HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC3], handle_GPDMA2_Channel1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA2_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002d84:	2110      	movs	r1, #16
 8002d86:	480b      	ldr	r0, [pc, #44]	@ (8002db4 <HAL_TIM_PWM_MspInit+0x184>)
 8002d88:	f002 ff5a 	bl	8005c40 <HAL_DMA_ConfigChannelAttributes>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_TIM_PWM_MspInit+0x166>
      Error_Handler();
 8002d92:	f7ff fb7f 	bl	8002494 <Error_Handler>
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40000400 	.word	0x40000400
 8002da4:	44020c00 	.word	0x44020c00
 8002da8:	20005e10 	.word	0x20005e10
 8002dac:	40021050 	.word	0x40021050
 8002db0:	40013400 	.word	0x40013400
 8002db4:	20005e88 	.word	0x20005e88
 8002db8:	400210d0 	.word	0x400210d0

08002dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	@ 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a25      	ldr	r2, [pc, #148]	@ (8002e70 <HAL_TIM_MspPostInit+0xb4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d11f      	bne.n	8002e1e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dde:	4b25      	ldr	r3, [pc, #148]	@ (8002e74 <HAL_TIM_MspPostInit+0xb8>)
 8002de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002de4:	4a23      	ldr	r2, [pc, #140]	@ (8002e74 <HAL_TIM_MspPostInit+0xb8>)
 8002de6:	f043 0302 	orr.w	r3, r3, #2
 8002dea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dee:	4b21      	ldr	r3, [pc, #132]	@ (8002e74 <HAL_TIM_MspPostInit+0xb8>)
 8002df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	4619      	mov	r1, r3
 8002e16:	4818      	ldr	r0, [pc, #96]	@ (8002e78 <HAL_TIM_MspPostInit+0xbc>)
 8002e18:	f003 fbe2 	bl	80065e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002e1c:	e024      	b.n	8002e68 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a16      	ldr	r2, [pc, #88]	@ (8002e7c <HAL_TIM_MspPostInit+0xc0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d11f      	bne.n	8002e68 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e28:	4b12      	ldr	r3, [pc, #72]	@ (8002e74 <HAL_TIM_MspPostInit+0xb8>)
 8002e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e2e:	4a11      	ldr	r2, [pc, #68]	@ (8002e74 <HAL_TIM_MspPostInit+0xb8>)
 8002e30:	f043 0304 	orr.w	r3, r3, #4
 8002e34:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e38:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <HAL_TIM_MspPostInit+0xb8>)
 8002e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e54:	2300      	movs	r3, #0
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4619      	mov	r1, r3
 8002e62:	4807      	ldr	r0, [pc, #28]	@ (8002e80 <HAL_TIM_MspPostInit+0xc4>)
 8002e64:	f003 fbbc 	bl	80065e0 <HAL_GPIO_Init>
}
 8002e68:	bf00      	nop
 8002e6a:	3728      	adds	r7, #40	@ 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40000400 	.word	0x40000400
 8002e74:	44020c00 	.word	0x44020c00
 8002e78:	42020400 	.word	0x42020400
 8002e7c:	40013400 	.word	0x40013400
 8002e80:	42020800 	.word	0x42020800

08002e84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b0d2      	sub	sp, #328	@ 0x148
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002e8e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002e92:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ea4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002ea8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002eac:	4618      	mov	r0, r3
 8002eae:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	f00f fe2f 	bl	8012b18 <memset>
  if(huart->Instance==USART1)
 8002eba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002ebe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a81      	ldr	r2, [pc, #516]	@ (80030cc <HAL_UART_MspInit+0x248>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	f040 810d 	bne.w	80030e8 <HAL_UART_MspInit+0x264>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ece:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002ed2:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002ed6:	f04f 0201 	mov.w	r2, #1
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ee2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002ee6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002eea:	2200      	movs	r2, #0
 8002eec:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f004 fe26 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8002efe:	f7ff fac9 	bl	8002494 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f02:	4b73      	ldr	r3, [pc, #460]	@ (80030d0 <HAL_UART_MspInit+0x24c>)
 8002f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f08:	4a71      	ldr	r2, [pc, #452]	@ (80030d0 <HAL_UART_MspInit+0x24c>)
 8002f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f0e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002f12:	4b6f      	ldr	r3, [pc, #444]	@ (80030d0 <HAL_UART_MspInit+0x24c>)
 8002f14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f18:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002f1c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002f20:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002f2a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f2e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f30:	4b67      	ldr	r3, [pc, #412]	@ (80030d0 <HAL_UART_MspInit+0x24c>)
 8002f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f36:	4a66      	ldr	r2, [pc, #408]	@ (80030d0 <HAL_UART_MspInit+0x24c>)
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f40:	4b63      	ldr	r3, [pc, #396]	@ (80030d0 <HAL_UART_MspInit+0x24c>)
 8002f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f46:	f003 0202 	and.w	r2, r3, #2
 8002f4a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002f4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002f58:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f5c:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002f5e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002f62:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f66:	2302      	movs	r3, #2
 8002f68:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002f78:	2304      	movs	r3, #4
 8002f7a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7e:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8002f82:	4619      	mov	r1, r3
 8002f84:	4853      	ldr	r0, [pc, #332]	@ (80030d4 <HAL_UART_MspInit+0x250>)
 8002f86:	f003 fb2b 	bl	80065e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8002f8a:	4b53      	ldr	r3, [pc, #332]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002f8c:	4a53      	ldr	r2, [pc, #332]	@ (80030dc <HAL_UART_MspInit+0x258>)
 8002f8e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_USART1_TX;
 8002f90:	4b51      	ldr	r3, [pc, #324]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002f92:	2216      	movs	r2, #22
 8002f94:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002f96:	4b50      	ldr	r3, [pc, #320]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f9c:	4b4e      	ldr	r3, [pc, #312]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002f9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fa2:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 8002fa4:	4b4c      	ldr	r3, [pc, #304]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 8002faa:	4b4b      	ldr	r3, [pc, #300]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8002fb0:	4b49      	ldr	r3, [pc, #292]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8002fb6:	4b48      	ldr	r3, [pc, #288]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002fbc:	4b46      	ldr	r3, [pc, #280]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8002fc2:	4b45      	ldr	r3, [pc, #276]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 8002fc8:	4b43      	ldr	r3, [pc, #268]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT0;
 8002fce:	4b42      	ldr	r3, [pc, #264]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002fd0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002fd4:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002fd6:	4b40      	ldr	r3, [pc, #256]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8002fdc:	4b3e      	ldr	r3, [pc, #248]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002fe2:	483d      	ldr	r0, [pc, #244]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002fe4:	f002 fa7e 	bl	80054e4 <HAL_DMA_Init>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 8002fee:	f7ff fa51 	bl	8002494 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel1);
 8002ff2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002ff6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a36      	ldr	r2, [pc, #216]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8002ffe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003000:	4a35      	ldr	r2, [pc, #212]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8003002:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003006:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800300e:	2110      	movs	r1, #16
 8003010:	4831      	ldr	r0, [pc, #196]	@ (80030d8 <HAL_UART_MspInit+0x254>)
 8003012:	f002 fe15 	bl	8005c40 <HAL_DMA_ConfigChannelAttributes>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_UART_MspInit+0x19c>
    {
      Error_Handler();
 800301c:	f7ff fa3a 	bl	8002494 <Error_Handler>
    }

    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8003020:	4b2f      	ldr	r3, [pc, #188]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 8003022:	4a30      	ldr	r2, [pc, #192]	@ (80030e4 <HAL_UART_MspInit+0x260>)
 8003024:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8003026:	4b2e      	ldr	r3, [pc, #184]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 8003028:	2215      	movs	r2, #21
 800302a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800302c:	4b2c      	ldr	r3, [pc, #176]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003032:	4b2b      	ldr	r3, [pc, #172]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 8003034:	2200      	movs	r2, #0
 8003036:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8003038:	4b29      	ldr	r3, [pc, #164]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 800303e:	4b28      	ldr	r3, [pc, #160]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 8003040:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003044:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8003046:	4b26      	ldr	r3, [pc, #152]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800304c:	4b24      	ldr	r3, [pc, #144]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8003052:	4b23      	ldr	r3, [pc, #140]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 8003054:	2200      	movs	r2, #0
 8003056:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8003058:	4b21      	ldr	r3, [pc, #132]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 800305a:	2201      	movs	r2, #1
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 800305e:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 8003060:	2201      	movs	r2, #1
 8003062:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8003064:	4b1e      	ldr	r3, [pc, #120]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 8003066:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800306a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800306c:	4b1c      	ldr	r3, [pc, #112]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 800306e:	2200      	movs	r2, #0
 8003070:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8003072:	4b1b      	ldr	r3, [pc, #108]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 8003074:	2200      	movs	r2, #0
 8003076:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8003078:	4819      	ldr	r0, [pc, #100]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 800307a:	f002 fa33 	bl	80054e4 <HAL_DMA_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_UART_MspInit+0x204>
    {
      Error_Handler();
 8003084:	f7ff fa06 	bl	8002494 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel0);
 8003088:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800308c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a13      	ldr	r2, [pc, #76]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 8003094:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003098:	4a11      	ldr	r2, [pc, #68]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 800309a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800309e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80030a6:	2110      	movs	r1, #16
 80030a8:	480d      	ldr	r0, [pc, #52]	@ (80030e0 <HAL_UART_MspInit+0x25c>)
 80030aa:	f002 fdc9 	bl	8005c40 <HAL_DMA_ConfigChannelAttributes>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_UART_MspInit+0x234>
    {
      Error_Handler();
 80030b4:	f7ff f9ee 	bl	8002494 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030b8:	2200      	movs	r2, #0
 80030ba:	2100      	movs	r1, #0
 80030bc:	203a      	movs	r0, #58	@ 0x3a
 80030be:	f002 f991 	bl	80053e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030c2:	203a      	movs	r0, #58	@ 0x3a
 80030c4:	f002 f9a8 	bl	8005418 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80030c8:	e20c      	b.n	80034e4 <HAL_UART_MspInit+0x660>
 80030ca:	bf00      	nop
 80030cc:	40013800 	.word	0x40013800
 80030d0:	44020c00 	.word	0x44020c00
 80030d4:	42020400 	.word	0x42020400
 80030d8:	200060bc 	.word	0x200060bc
 80030dc:	400200d0 	.word	0x400200d0
 80030e0:	20006134 	.word	0x20006134
 80030e4:	40020050 	.word	0x40020050
  else if(huart->Instance==USART2)
 80030e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80030ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a80      	ldr	r2, [pc, #512]	@ (80032f8 <HAL_UART_MspInit+0x474>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	f040 810c 	bne.w	8003314 <HAL_UART_MspInit+0x490>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80030fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003100:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003104:	f04f 0202 	mov.w	r2, #2
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003110:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003114:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003118:	2200      	movs	r2, #0
 800311a:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800311c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003120:	4618      	mov	r0, r3
 8003122:	f004 fd0f 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 800312c:	f7ff f9b2 	bl	8002494 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003130:	4b72      	ldr	r3, [pc, #456]	@ (80032fc <HAL_UART_MspInit+0x478>)
 8003132:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003136:	4a71      	ldr	r2, [pc, #452]	@ (80032fc <HAL_UART_MspInit+0x478>)
 8003138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800313c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003140:	4b6e      	ldr	r3, [pc, #440]	@ (80032fc <HAL_UART_MspInit+0x478>)
 8003142:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003146:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 800314a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800314e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003158:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800315c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315e:	4b67      	ldr	r3, [pc, #412]	@ (80032fc <HAL_UART_MspInit+0x478>)
 8003160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003164:	4a65      	ldr	r2, [pc, #404]	@ (80032fc <HAL_UART_MspInit+0x478>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800316e:	4b63      	ldr	r3, [pc, #396]	@ (80032fc <HAL_UART_MspInit+0x478>)
 8003170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003174:	f003 0201 	and.w	r2, r3, #1
 8003178:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800317c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003186:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800318a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800318c:	230c      	movs	r3, #12
 800318e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031a4:	2307      	movs	r3, #7
 80031a6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031aa:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80031ae:	4619      	mov	r1, r3
 80031b0:	4853      	ldr	r0, [pc, #332]	@ (8003300 <HAL_UART_MspInit+0x47c>)
 80031b2:	f003 fa15 	bl	80065e0 <HAL_GPIO_Init>
    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 80031b6:	4b53      	ldr	r3, [pc, #332]	@ (8003304 <HAL_UART_MspInit+0x480>)
 80031b8:	4a53      	ldr	r2, [pc, #332]	@ (8003308 <HAL_UART_MspInit+0x484>)
 80031ba:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.Init.Request = GPDMA1_REQUEST_USART2_TX;
 80031bc:	4b51      	ldr	r3, [pc, #324]	@ (8003304 <HAL_UART_MspInit+0x480>)
 80031be:	2218      	movs	r2, #24
 80031c0:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel5.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80031c2:	4b50      	ldr	r3, [pc, #320]	@ (8003304 <HAL_UART_MspInit+0x480>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel5.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003304 <HAL_UART_MspInit+0x480>)
 80031ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031ce:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel5.Init.SrcInc = DMA_SINC_INCREMENTED;
 80031d0:	4b4c      	ldr	r3, [pc, #304]	@ (8003304 <HAL_UART_MspInit+0x480>)
 80031d2:	2208      	movs	r2, #8
 80031d4:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel5.Init.DestInc = DMA_DINC_FIXED;
 80031d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003304 <HAL_UART_MspInit+0x480>)
 80031d8:	2200      	movs	r2, #0
 80031da:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel5.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80031dc:	4b49      	ldr	r3, [pc, #292]	@ (8003304 <HAL_UART_MspInit+0x480>)
 80031de:	2200      	movs	r2, #0
 80031e0:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel5.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80031e2:	4b48      	ldr	r3, [pc, #288]	@ (8003304 <HAL_UART_MspInit+0x480>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel5.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80031e8:	4b46      	ldr	r3, [pc, #280]	@ (8003304 <HAL_UART_MspInit+0x480>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel5.Init.SrcBurstLength = 1;
 80031ee:	4b45      	ldr	r3, [pc, #276]	@ (8003304 <HAL_UART_MspInit+0x480>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel5.Init.DestBurstLength = 1;
 80031f4:	4b43      	ldr	r3, [pc, #268]	@ (8003304 <HAL_UART_MspInit+0x480>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel5.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT0;
 80031fa:	4b42      	ldr	r3, [pc, #264]	@ (8003304 <HAL_UART_MspInit+0x480>)
 80031fc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003200:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel5.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003202:	4b40      	ldr	r3, [pc, #256]	@ (8003304 <HAL_UART_MspInit+0x480>)
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel5.Init.Mode = DMA_NORMAL;
 8003208:	4b3e      	ldr	r3, [pc, #248]	@ (8003304 <HAL_UART_MspInit+0x480>)
 800320a:	2200      	movs	r2, #0
 800320c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 800320e:	483d      	ldr	r0, [pc, #244]	@ (8003304 <HAL_UART_MspInit+0x480>)
 8003210:	f002 f968 	bl	80054e4 <HAL_DMA_Init>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_UART_MspInit+0x39a>
      Error_Handler();
 800321a:	f7ff f93b 	bl	8002494 <Error_Handler>
    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel5);
 800321e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003222:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a36      	ldr	r2, [pc, #216]	@ (8003304 <HAL_UART_MspInit+0x480>)
 800322a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800322c:	4a35      	ldr	r2, [pc, #212]	@ (8003304 <HAL_UART_MspInit+0x480>)
 800322e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003232:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 800323a:	2110      	movs	r1, #16
 800323c:	4831      	ldr	r0, [pc, #196]	@ (8003304 <HAL_UART_MspInit+0x480>)
 800323e:	f002 fcff 	bl	8005c40 <HAL_DMA_ConfigChannelAttributes>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_UART_MspInit+0x3c8>
      Error_Handler();
 8003248:	f7ff f924 	bl	8002494 <Error_Handler>
    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 800324c:	4b2f      	ldr	r3, [pc, #188]	@ (800330c <HAL_UART_MspInit+0x488>)
 800324e:	4a30      	ldr	r2, [pc, #192]	@ (8003310 <HAL_UART_MspInit+0x48c>)
 8003250:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.Init.Request = GPDMA1_REQUEST_USART2_RX;
 8003252:	4b2e      	ldr	r3, [pc, #184]	@ (800330c <HAL_UART_MspInit+0x488>)
 8003254:	2217      	movs	r2, #23
 8003256:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel4.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003258:	4b2c      	ldr	r3, [pc, #176]	@ (800330c <HAL_UART_MspInit+0x488>)
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800325e:	4b2b      	ldr	r3, [pc, #172]	@ (800330c <HAL_UART_MspInit+0x488>)
 8003260:	2200      	movs	r2, #0
 8003262:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel4.Init.SrcInc = DMA_SINC_FIXED;
 8003264:	4b29      	ldr	r3, [pc, #164]	@ (800330c <HAL_UART_MspInit+0x488>)
 8003266:	2200      	movs	r2, #0
 8003268:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel4.Init.DestInc = DMA_DINC_INCREMENTED;
 800326a:	4b28      	ldr	r3, [pc, #160]	@ (800330c <HAL_UART_MspInit+0x488>)
 800326c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003270:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel4.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8003272:	4b26      	ldr	r3, [pc, #152]	@ (800330c <HAL_UART_MspInit+0x488>)
 8003274:	2200      	movs	r2, #0
 8003276:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel4.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8003278:	4b24      	ldr	r3, [pc, #144]	@ (800330c <HAL_UART_MspInit+0x488>)
 800327a:	2200      	movs	r2, #0
 800327c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel4.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800327e:	4b23      	ldr	r3, [pc, #140]	@ (800330c <HAL_UART_MspInit+0x488>)
 8003280:	2200      	movs	r2, #0
 8003282:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel4.Init.SrcBurstLength = 1;
 8003284:	4b21      	ldr	r3, [pc, #132]	@ (800330c <HAL_UART_MspInit+0x488>)
 8003286:	2201      	movs	r2, #1
 8003288:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel4.Init.DestBurstLength = 1;
 800328a:	4b20      	ldr	r3, [pc, #128]	@ (800330c <HAL_UART_MspInit+0x488>)
 800328c:	2201      	movs	r2, #1
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel4.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8003290:	4b1e      	ldr	r3, [pc, #120]	@ (800330c <HAL_UART_MspInit+0x488>)
 8003292:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003296:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel4.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003298:	4b1c      	ldr	r3, [pc, #112]	@ (800330c <HAL_UART_MspInit+0x488>)
 800329a:	2200      	movs	r2, #0
 800329c:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel4.Init.Mode = DMA_NORMAL;
 800329e:	4b1b      	ldr	r3, [pc, #108]	@ (800330c <HAL_UART_MspInit+0x488>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 80032a4:	4819      	ldr	r0, [pc, #100]	@ (800330c <HAL_UART_MspInit+0x488>)
 80032a6:	f002 f91d 	bl	80054e4 <HAL_DMA_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_UART_MspInit+0x430>
      Error_Handler();
 80032b0:	f7ff f8f0 	bl	8002494 <Error_Handler>
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel4);
 80032b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80032b8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a13      	ldr	r2, [pc, #76]	@ (800330c <HAL_UART_MspInit+0x488>)
 80032c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80032c4:	4a11      	ldr	r2, [pc, #68]	@ (800330c <HAL_UART_MspInit+0x488>)
 80032c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80032ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 80032d2:	2110      	movs	r1, #16
 80032d4:	480d      	ldr	r0, [pc, #52]	@ (800330c <HAL_UART_MspInit+0x488>)
 80032d6:	f002 fcb3 	bl	8005c40 <HAL_DMA_ConfigChannelAttributes>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <HAL_UART_MspInit+0x460>
      Error_Handler();
 80032e0:	f7ff f8d8 	bl	8002494 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2100      	movs	r1, #0
 80032e8:	203b      	movs	r0, #59	@ 0x3b
 80032ea:	f002 f87b 	bl	80053e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032ee:	203b      	movs	r0, #59	@ 0x3b
 80032f0:	f002 f892 	bl	8005418 <HAL_NVIC_EnableIRQ>
}
 80032f4:	e0f6      	b.n	80034e4 <HAL_UART_MspInit+0x660>
 80032f6:	bf00      	nop
 80032f8:	40004400 	.word	0x40004400
 80032fc:	44020c00 	.word	0x44020c00
 8003300:	42020000 	.word	0x42020000
 8003304:	200061ac 	.word	0x200061ac
 8003308:	400202d0 	.word	0x400202d0
 800330c:	20006224 	.word	0x20006224
 8003310:	40020250 	.word	0x40020250
  else if(huart->Instance==USART3)
 8003314:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003318:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a73      	ldr	r2, [pc, #460]	@ (80034f0 <HAL_UART_MspInit+0x66c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	f040 80de 	bne.w	80034e4 <HAL_UART_MspInit+0x660>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003328:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800332c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003330:	f04f 0204 	mov.w	r2, #4
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800333c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003340:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003344:	2200      	movs	r2, #0
 8003346:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003348:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800334c:	4618      	mov	r0, r3
 800334e:	f004 fbf9 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_UART_MspInit+0x4d8>
      Error_Handler();
 8003358:	f7ff f89c 	bl	8002494 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800335c:	4b65      	ldr	r3, [pc, #404]	@ (80034f4 <HAL_UART_MspInit+0x670>)
 800335e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003362:	4a64      	ldr	r2, [pc, #400]	@ (80034f4 <HAL_UART_MspInit+0x670>)
 8003364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003368:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800336c:	4b61      	ldr	r3, [pc, #388]	@ (80034f4 <HAL_UART_MspInit+0x670>)
 800336e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003372:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8003376:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800337a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003384:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003388:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800338a:	4b5a      	ldr	r3, [pc, #360]	@ (80034f4 <HAL_UART_MspInit+0x670>)
 800338c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003390:	4a58      	ldr	r2, [pc, #352]	@ (80034f4 <HAL_UART_MspInit+0x670>)
 8003392:	f043 0304 	orr.w	r3, r3, #4
 8003396:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800339a:	4b56      	ldr	r3, [pc, #344]	@ (80034f4 <HAL_UART_MspInit+0x670>)
 800339c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033a0:	f003 0204 	and.w	r2, r3, #4
 80033a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80033a8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80033b2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80033b6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b8:	4b4e      	ldr	r3, [pc, #312]	@ (80034f4 <HAL_UART_MspInit+0x670>)
 80033ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033be:	4a4d      	ldr	r2, [pc, #308]	@ (80034f4 <HAL_UART_MspInit+0x670>)
 80033c0:	f043 0302 	orr.w	r3, r3, #2
 80033c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80033c8:	4b4a      	ldr	r3, [pc, #296]	@ (80034f4 <HAL_UART_MspInit+0x670>)
 80033ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033ce:	f003 0202 	and.w	r2, r3, #2
 80033d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80033d6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80033e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80033e4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033e6:	2310      	movs	r3, #16
 80033e8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
 80033ee:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033fe:	2307      	movs	r3, #7
 8003400:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003404:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003408:	4619      	mov	r1, r3
 800340a:	483b      	ldr	r0, [pc, #236]	@ (80034f8 <HAL_UART_MspInit+0x674>)
 800340c:	f003 f8e8 	bl	80065e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003414:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	2302      	movs	r3, #2
 800341a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800342a:	2307      	movs	r3, #7
 800342c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003430:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003434:	4619      	mov	r1, r3
 8003436:	4831      	ldr	r0, [pc, #196]	@ (80034fc <HAL_UART_MspInit+0x678>)
 8003438:	f003 f8d2 	bl	80065e0 <HAL_GPIO_Init>
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 800343c:	4b30      	ldr	r3, [pc, #192]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 800343e:	4a31      	ldr	r2, [pc, #196]	@ (8003504 <HAL_UART_MspInit+0x680>)
 8003440:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_USART3_RX;
 8003442:	4b2f      	ldr	r3, [pc, #188]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 8003444:	2219      	movs	r2, #25
 8003446:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003448:	4b2d      	ldr	r3, [pc, #180]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800344e:	4b2c      	ldr	r3, [pc, #176]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 8003450:	2200      	movs	r2, #0
 8003452:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_FIXED;
 8003454:	4b2a      	ldr	r3, [pc, #168]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_INCREMENTED;
 800345a:	4b29      	ldr	r3, [pc, #164]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 800345c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003460:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8003462:	4b27      	ldr	r3, [pc, #156]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 8003464:	2200      	movs	r2, #0
 8003466:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8003468:	4b25      	ldr	r3, [pc, #148]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 800346a:	2200      	movs	r2, #0
 800346c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800346e:	4b24      	ldr	r3, [pc, #144]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 8003470:	2200      	movs	r2, #0
 8003472:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8003474:	4b22      	ldr	r3, [pc, #136]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 8003476:	2201      	movs	r2, #1
 8003478:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 800347a:	4b21      	ldr	r3, [pc, #132]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 800347c:	2201      	movs	r2, #1
 800347e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8003480:	4b1f      	ldr	r3, [pc, #124]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 8003482:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003486:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003488:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 800348e:	4b1c      	ldr	r3, [pc, #112]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 8003490:	2200      	movs	r2, #0
 8003492:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8003494:	481a      	ldr	r0, [pc, #104]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 8003496:	f002 f825 	bl	80054e4 <HAL_DMA_Init>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_UART_MspInit+0x620>
      Error_Handler();
 80034a0:	f7fe fff8 	bl	8002494 <Error_Handler>
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel3);
 80034a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80034a8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 80034b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80034b4:	4a12      	ldr	r2, [pc, #72]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 80034b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80034ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80034c2:	2110      	movs	r1, #16
 80034c4:	480e      	ldr	r0, [pc, #56]	@ (8003500 <HAL_UART_MspInit+0x67c>)
 80034c6:	f002 fbbb 	bl	8005c40 <HAL_DMA_ConfigChannelAttributes>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_UART_MspInit+0x650>
      Error_Handler();
 80034d0:	f7fe ffe0 	bl	8002494 <Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80034d4:	2200      	movs	r2, #0
 80034d6:	2100      	movs	r1, #0
 80034d8:	203c      	movs	r0, #60	@ 0x3c
 80034da:	f001 ff83 	bl	80053e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034de:	203c      	movs	r0, #60	@ 0x3c
 80034e0:	f001 ff9a 	bl	8005418 <HAL_NVIC_EnableIRQ>
}
 80034e4:	bf00      	nop
 80034e6:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40004800 	.word	0x40004800
 80034f4:	44020c00 	.word	0x44020c00
 80034f8:	42020800 	.word	0x42020800
 80034fc:	42020400 	.word	0x42020400
 8003500:	2000629c 	.word	0x2000629c
 8003504:	400201d0 	.word	0x400201d0

08003508 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08e      	sub	sp, #56	@ 0x38
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003510:	4b33      	ldr	r3, [pc, #204]	@ (80035e0 <HAL_InitTick+0xd8>)
 8003512:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003516:	4a32      	ldr	r2, [pc, #200]	@ (80035e0 <HAL_InitTick+0xd8>)
 8003518:	f043 0310 	orr.w	r3, r3, #16
 800351c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003520:	4b2f      	ldr	r3, [pc, #188]	@ (80035e0 <HAL_InitTick+0xd8>)
 8003522:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800352e:	f107 020c 	add.w	r2, r7, #12
 8003532:	f107 0310 	add.w	r3, r7, #16
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f004 facb 	bl	8007ad4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d103      	bne.n	8003550 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003548:	f004 fa82 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800354c:	6378      	str	r0, [r7, #52]	@ 0x34
 800354e:	e004      	b.n	800355a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003550:	f004 fa7e 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 8003554:	4603      	mov	r3, r0
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 800355a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	4a21      	ldr	r2, [pc, #132]	@ (80035e4 <HAL_InitTick+0xdc>)
 8003560:	fba2 2303 	umull	r2, r3, r2, r3
 8003564:	09db      	lsrs	r3, r3, #7
 8003566:	3b01      	subs	r3, #1
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800356a:	4b1f      	ldr	r3, [pc, #124]	@ (80035e8 <HAL_InitTick+0xe0>)
 800356c:	4a1f      	ldr	r2, [pc, #124]	@ (80035ec <HAL_InitTick+0xe4>)
 800356e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8003570:	4b1d      	ldr	r3, [pc, #116]	@ (80035e8 <HAL_InitTick+0xe0>)
 8003572:	2263      	movs	r2, #99	@ 0x63
 8003574:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003576:	4a1c      	ldr	r2, [pc, #112]	@ (80035e8 <HAL_InitTick+0xe0>)
 8003578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800357c:	4b1a      	ldr	r3, [pc, #104]	@ (80035e8 <HAL_InitTick+0xe0>)
 800357e:	2200      	movs	r2, #0
 8003580:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003582:	4b19      	ldr	r3, [pc, #100]	@ (80035e8 <HAL_InitTick+0xe0>)
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8003588:	4817      	ldr	r0, [pc, #92]	@ (80035e8 <HAL_InitTick+0xe0>)
 800358a:	f009 fabb 	bl	800cb04 <HAL_TIM_Base_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003594:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003598:	2b00      	cmp	r3, #0
 800359a:	d118      	bne.n	80035ce <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800359c:	4812      	ldr	r0, [pc, #72]	@ (80035e8 <HAL_InitTick+0xe0>)
 800359e:	f009 fbaf 	bl	800cd00 <HAL_TIM_Base_Start_IT>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80035a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10e      	bne.n	80035ce <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b0f      	cmp	r3, #15
 80035b4:	d808      	bhi.n	80035c8 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80035b6:	2200      	movs	r2, #0
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	2031      	movs	r0, #49	@ 0x31
 80035bc:	f001 ff12 	bl	80053e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035c0:	4a0b      	ldr	r2, [pc, #44]	@ (80035f0 <HAL_InitTick+0xe8>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e002      	b.n	80035ce <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80035ce:	2031      	movs	r0, #49	@ 0x31
 80035d0:	f001 ff22 	bl	8005418 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 80035d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3738      	adds	r7, #56	@ 0x38
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	44020c00 	.word	0x44020c00
 80035e4:	0a7c5ac5 	.word	0x0a7c5ac5
 80035e8:	20006918 	.word	0x20006918
 80035ec:	40001000 	.word	0x40001000
 80035f0:	20000040 	.word	0x20000040

080035f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035f8:	bf00      	nop
 80035fa:	e7fd      	b.n	80035f8 <NMI_Handler+0x4>

080035fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003600:	bf00      	nop
 8003602:	e7fd      	b.n	8003600 <HardFault_Handler+0x4>

08003604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003608:	bf00      	nop
 800360a:	e7fd      	b.n	8003608 <MemManage_Handler+0x4>

0800360c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003610:	bf00      	nop
 8003612:	e7fd      	b.n	8003610 <BusFault_Handler+0x4>

08003614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003618:	bf00      	nop
 800361a:	e7fd      	b.n	8003618 <UsageFault_Handler+0x4>

0800361c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8003630:	4802      	ldr	r0, [pc, #8]	@ (800363c <GPDMA1_Channel0_IRQHandler+0x10>)
 8003632:	f002 f9a4 	bl	800597e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20006134 	.word	0x20006134

08003640 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8003644:	4802      	ldr	r0, [pc, #8]	@ (8003650 <GPDMA1_Channel1_IRQHandler+0x10>)
 8003646:	f002 f99a 	bl	800597e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	200060bc 	.word	0x200060bc

08003654 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8003658:	4802      	ldr	r0, [pc, #8]	@ (8003664 <GPDMA1_Channel2_IRQHandler+0x10>)
 800365a:	f002 f990 	bl	800597e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20005bc8 	.word	0x20005bc8

08003668 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 800366c:	4802      	ldr	r0, [pc, #8]	@ (8003678 <GPDMA1_Channel3_IRQHandler+0x10>)
 800366e:	f002 f986 	bl	800597e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	2000629c 	.word	0x2000629c

0800367c <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8003680:	4802      	ldr	r0, [pc, #8]	@ (800368c <GPDMA1_Channel4_IRQHandler+0x10>)
 8003682:	f002 f97c 	bl	800597e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20006224 	.word	0x20006224

08003690 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8003694:	4802      	ldr	r0, [pc, #8]	@ (80036a0 <GPDMA1_Channel5_IRQHandler+0x10>)
 8003696:	f002 f972 	bl	800597e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 800369a:	bf00      	nop
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200061ac 	.word	0x200061ac

080036a4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80036a8:	4802      	ldr	r0, [pc, #8]	@ (80036b4 <ADC1_IRQHandler+0x10>)
 80036aa:	f000 fe53 	bl	8004354 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20005b60 	.word	0x20005b60

080036b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80036bc:	4802      	ldr	r0, [pc, #8]	@ (80036c8 <TIM4_IRQHandler+0x10>)
 80036be:	f009 feab 	bl	800d418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20005d2c 	.word	0x20005d2c

080036cc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036d0:	4802      	ldr	r0, [pc, #8]	@ (80036dc <TIM6_IRQHandler+0x10>)
 80036d2:	f009 fea1 	bl	800d418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20006918 	.word	0x20006918

080036e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036e4:	4802      	ldr	r0, [pc, #8]	@ (80036f0 <USART1_IRQHandler+0x10>)
 80036e6:	f00b fbcb 	bl	800ee80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20005f00 	.word	0x20005f00

080036f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036f8:	4802      	ldr	r0, [pc, #8]	@ (8003704 <USART2_IRQHandler+0x10>)
 80036fa:	f00b fbc1 	bl	800ee80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20005f94 	.word	0x20005f94

08003708 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800370c:	4802      	ldr	r0, [pc, #8]	@ (8003718 <USART3_IRQHandler+0x10>)
 800370e:	f00b fbb7 	bl	800ee80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20006028 	.word	0x20006028

0800371c <GPDMA2_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA2 Channel 0 global interrupt.
  */
void GPDMA2_Channel0_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Channel0_IRQn 0 */

  /* USER CODE END GPDMA2_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA2_Channel0);
 8003720:	4802      	ldr	r0, [pc, #8]	@ (800372c <GPDMA2_Channel0_IRQHandler+0x10>)
 8003722:	f002 f92c 	bl	800597e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA2_Channel0_IRQn 1 */

  /* USER CODE END GPDMA2_Channel0_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20005e10 	.word	0x20005e10

08003730 <GPDMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA2 Channel 1 global interrupt.
  */
void GPDMA2_Channel1_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Channel1_IRQn 0 */

  /* USER CODE END GPDMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA2_Channel1);
 8003734:	4802      	ldr	r0, [pc, #8]	@ (8003740 <GPDMA2_Channel1_IRQHandler+0x10>)
 8003736:	f002 f922 	bl	800597e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA2_Channel1_IRQn 1 */

  /* USER CODE END GPDMA2_Channel1_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20005e88 	.word	0x20005e88

08003744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800374c:	4a14      	ldr	r2, [pc, #80]	@ (80037a0 <_sbrk+0x5c>)
 800374e:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <_sbrk+0x60>)
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003758:	4b13      	ldr	r3, [pc, #76]	@ (80037a8 <_sbrk+0x64>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003760:	4b11      	ldr	r3, [pc, #68]	@ (80037a8 <_sbrk+0x64>)
 8003762:	4a12      	ldr	r2, [pc, #72]	@ (80037ac <_sbrk+0x68>)
 8003764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003766:	4b10      	ldr	r3, [pc, #64]	@ (80037a8 <_sbrk+0x64>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	429a      	cmp	r2, r3
 8003772:	d207      	bcs.n	8003784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003774:	f00f f9d8 	bl	8012b28 <__errno>
 8003778:	4603      	mov	r3, r0
 800377a:	220c      	movs	r2, #12
 800377c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800377e:	f04f 33ff 	mov.w	r3, #4294967295
 8003782:	e009      	b.n	8003798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003784:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <_sbrk+0x64>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800378a:	4b07      	ldr	r3, [pc, #28]	@ (80037a8 <_sbrk+0x64>)
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4413      	add	r3, r2
 8003792:	4a05      	ldr	r2, [pc, #20]	@ (80037a8 <_sbrk+0x64>)
 8003794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003796:	68fb      	ldr	r3, [r7, #12]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	200a0000 	.word	0x200a0000
 80037a4:	00000400 	.word	0x00000400
 80037a8:	20006964 	.word	0x20006964
 80037ac:	20007120 	.word	0x20007120

080037b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80037b6:	4b35      	ldr	r3, [pc, #212]	@ (800388c <SystemInit+0xdc>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037bc:	4a33      	ldr	r2, [pc, #204]	@ (800388c <SystemInit+0xdc>)
 80037be:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037c2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80037c6:	4b32      	ldr	r3, [pc, #200]	@ (8003890 <SystemInit+0xe0>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80037cc:	4b30      	ldr	r3, [pc, #192]	@ (8003890 <SystemInit+0xe0>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80037d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003890 <SystemInit+0xe0>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80037d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003890 <SystemInit+0xe0>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	492c      	ldr	r1, [pc, #176]	@ (8003890 <SystemInit+0xe0>)
 80037de:	4b2d      	ldr	r3, [pc, #180]	@ (8003894 <SystemInit+0xe4>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80037e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003890 <SystemInit+0xe0>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80037ea:	4b29      	ldr	r3, [pc, #164]	@ (8003890 <SystemInit+0xe0>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80037f0:	4b27      	ldr	r3, [pc, #156]	@ (8003890 <SystemInit+0xe0>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80037f6:	4b26      	ldr	r3, [pc, #152]	@ (8003890 <SystemInit+0xe0>)
 80037f8:	4a27      	ldr	r2, [pc, #156]	@ (8003898 <SystemInit+0xe8>)
 80037fa:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80037fc:	4b24      	ldr	r3, [pc, #144]	@ (8003890 <SystemInit+0xe0>)
 80037fe:	2200      	movs	r2, #0
 8003800:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8003802:	4b23      	ldr	r3, [pc, #140]	@ (8003890 <SystemInit+0xe0>)
 8003804:	4a24      	ldr	r2, [pc, #144]	@ (8003898 <SystemInit+0xe8>)
 8003806:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8003808:	4b21      	ldr	r3, [pc, #132]	@ (8003890 <SystemInit+0xe0>)
 800380a:	2200      	movs	r2, #0
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800380e:	4b20      	ldr	r3, [pc, #128]	@ (8003890 <SystemInit+0xe0>)
 8003810:	4a21      	ldr	r2, [pc, #132]	@ (8003898 <SystemInit+0xe8>)
 8003812:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8003814:	4b1e      	ldr	r3, [pc, #120]	@ (8003890 <SystemInit+0xe0>)
 8003816:	2200      	movs	r2, #0
 8003818:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800381a:	4b1d      	ldr	r3, [pc, #116]	@ (8003890 <SystemInit+0xe0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <SystemInit+0xe0>)
 8003820:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003824:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003826:	4b1a      	ldr	r3, [pc, #104]	@ (8003890 <SystemInit+0xe0>)
 8003828:	2200      	movs	r2, #0
 800382a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800382c:	4b17      	ldr	r3, [pc, #92]	@ (800388c <SystemInit+0xdc>)
 800382e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003832:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8003834:	4b19      	ldr	r3, [pc, #100]	@ (800389c <SystemInit+0xec>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800383c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8003844:	d003      	beq.n	800384e <SystemInit+0x9e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800384c:	d117      	bne.n	800387e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800384e:	4b13      	ldr	r3, [pc, #76]	@ (800389c <SystemInit+0xec>)
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800385a:	4b10      	ldr	r3, [pc, #64]	@ (800389c <SystemInit+0xec>)
 800385c:	4a10      	ldr	r2, [pc, #64]	@ (80038a0 <SystemInit+0xf0>)
 800385e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8003860:	4b0e      	ldr	r3, [pc, #56]	@ (800389c <SystemInit+0xec>)
 8003862:	4a10      	ldr	r2, [pc, #64]	@ (80038a4 <SystemInit+0xf4>)
 8003864:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8003866:	4b0d      	ldr	r3, [pc, #52]	@ (800389c <SystemInit+0xec>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	4a0c      	ldr	r2, [pc, #48]	@ (800389c <SystemInit+0xec>)
 800386c:	f043 0302 	orr.w	r3, r3, #2
 8003870:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8003872:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <SystemInit+0xec>)
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	4a09      	ldr	r2, [pc, #36]	@ (800389c <SystemInit+0xec>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	61d3      	str	r3, [r2, #28]
  }
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	e000ed00 	.word	0xe000ed00
 8003890:	44020c00 	.word	0x44020c00
 8003894:	eae2eae3 	.word	0xeae2eae3
 8003898:	01010280 	.word	0x01010280
 800389c:	40022000 	.word	0x40022000
 80038a0:	08192a3b 	.word	0x08192a3b
 80038a4:	4c5d6e7f 	.word	0x4c5d6e7f

080038a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80038a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038e0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80038ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80038ae:	e003      	b.n	80038b8 <LoopCopyDataInit>

080038b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80038b0:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80038b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80038b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80038b6:	3104      	adds	r1, #4

080038b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80038b8:	480b      	ldr	r0, [pc, #44]	@ (80038e8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80038ba:	4b0c      	ldr	r3, [pc, #48]	@ (80038ec <LoopForever+0xe>)
	adds	r2, r0, r1
 80038bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80038be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80038c0:	d3f6      	bcc.n	80038b0 <CopyDataInit>
	ldr	r2, =_sbss
 80038c2:	4a0b      	ldr	r2, [pc, #44]	@ (80038f0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80038c4:	e002      	b.n	80038cc <LoopFillZerobss>

080038c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80038c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80038c8:	f842 3b04 	str.w	r3, [r2], #4

080038cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80038cc:	4b09      	ldr	r3, [pc, #36]	@ (80038f4 <LoopForever+0x16>)
	cmp	r2, r3
 80038ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80038d0:	d3f9      	bcc.n	80038c6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038d2:	f7ff ff6d 	bl	80037b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038d6:	f00f f92d 	bl	8012b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038da:	f7fd ff69 	bl	80017b0 <main>

080038de <LoopForever>:

LoopForever:
    b LoopForever
 80038de:	e7fe      	b.n	80038de <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80038e0:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80038e4:	08013d38 	.word	0x08013d38
	ldr	r0, =_sdata
 80038e8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80038ec:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 80038f0:	2000009c 	.word	0x2000009c
	ldr	r3, = _ebss
 80038f4:	20007120 	.word	0x20007120

080038f8 <ADC2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80038f8:	e7fe      	b.n	80038f8 <ADC2_IRQHandler>
	...

080038fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003900:	2003      	movs	r0, #3
 8003902:	f001 fd64 	bl	80053ce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003906:	f003 ff5b 	bl	80077c0 <HAL_RCC_GetSysClockFreq>
 800390a:	4602      	mov	r2, r0
 800390c:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <HAL_Init+0x44>)
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	490b      	ldr	r1, [pc, #44]	@ (8003944 <HAL_Init+0x48>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
 800391c:	4a0a      	ldr	r2, [pc, #40]	@ (8003948 <HAL_Init+0x4c>)
 800391e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003920:	2004      	movs	r0, #4
 8003922:	f001 fd87 	bl	8005434 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003926:	200f      	movs	r0, #15
 8003928:	f7ff fdee 	bl	8003508 <HAL_InitTick>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e002      	b.n	800393c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003936:	f7fe ff75 	bl	8002824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	44020c00 	.word	0x44020c00
 8003944:	08013c9c 	.word	0x08013c9c
 8003948:	2000003c 	.word	0x2000003c

0800394c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003950:	4b06      	ldr	r3, [pc, #24]	@ (800396c <HAL_IncTick+0x20>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	4b06      	ldr	r3, [pc, #24]	@ (8003970 <HAL_IncTick+0x24>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4413      	add	r3, r2
 800395c:	4a04      	ldr	r2, [pc, #16]	@ (8003970 <HAL_IncTick+0x24>)
 800395e:	6013      	str	r3, [r2, #0]
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000044 	.word	0x20000044
 8003970:	20006968 	.word	0x20006968

08003974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return uwTick;
 8003978:	4b03      	ldr	r3, [pc, #12]	@ (8003988 <HAL_GetTick+0x14>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20006968 	.word	0x20006968

0800398c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	609a      	str	r2, [r3, #8]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003a02:	f043 0201 	orr.w	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8003a20:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <LL_ADC_EnableChannel0_GPIO+0x24>)
 8003a22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003a26:	4a05      	ldr	r2, [pc, #20]	@ (8003a3c <LL_ADC_EnableChannel0_GPIO+0x24>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	42028000 	.word	0x42028000

08003a40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3360      	adds	r3, #96	@ 0x60
 8003a52:	461a      	mov	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b08      	ldr	r3, [pc, #32]	@ (8003a84 <LL_ADC_SetOffset+0x44>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a78:	bf00      	nop
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	03fff000 	.word	0x03fff000

08003a88 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3360      	adds	r3, #96	@ 0x60
 8003a96:	461a      	mov	r2, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3360      	adds	r3, #96	@ 0x60
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003ade:	bf00      	nop
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b087      	sub	sp, #28
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3360      	adds	r3, #96	@ 0x60
 8003afa:	461a      	mov	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003b14:	bf00      	nop
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3360      	adds	r3, #96	@ 0x60
 8003b30:	461a      	mov	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	615a      	str	r2, [r3, #20]
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b087      	sub	sp, #28
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	60f8      	str	r0, [r7, #12]
 8003baa:	60b9      	str	r1, [r7, #8]
 8003bac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3330      	adds	r3, #48	@ 0x30
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	4413      	add	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	211f      	movs	r1, #31
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	0e9b      	lsrs	r3, r3, #26
 8003bda:	f003 011f 	and.w	r1, r3, #31
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	431a      	orrs	r2, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c06:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	461a      	mov	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	0e5b      	lsrs	r3, r3, #25
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	4413      	add	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	0d1b      	lsrs	r3, r3, #20
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	2107      	movs	r1, #7
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	401a      	ands	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	0d1b      	lsrs	r3, r3, #20
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	431a      	orrs	r2, r3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c90:	43db      	mvns	r3, r3
 8003c92:	401a      	ands	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f003 0318 	and.w	r3, r3, #24
 8003c9a:	4908      	ldr	r1, [pc, #32]	@ (8003cbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c9c:	40d9      	lsrs	r1, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	400b      	ands	r3, r1
 8003ca2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	000fffff 	.word	0x000fffff

08003cc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003d08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6093      	str	r3, [r2, #8]
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d30:	d101      	bne.n	8003d36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003d54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d80:	d101      	bne.n	8003d86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003da4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003da8:	f043 0201 	orr.w	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <LL_ADC_IsEnabled+0x18>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <LL_ADC_IsEnabled+0x1a>
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003df2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003df6:	f043 0204 	orr.w	r2, r3, #4
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d101      	bne.n	8003e22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d101      	bne.n	8003e48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e58:	b590      	push	{r4, r7, lr}
 8003e5a:	b089      	sub	sp, #36	@ 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e136      	b.n	80040e0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7fe fcd5 	bl	8002830 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ff3f 	bl	8003d1c <LL_ADC_IsDeepPowerDownEnabled>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d004      	beq.n	8003eae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff ff25 	bl	8003cf8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff ff5a 	bl	8003d6c <LL_ADC_IsInternalRegulatorEnabled>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d115      	bne.n	8003eea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff ff3e 	bl	8003d44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ec8:	4b87      	ldr	r3, [pc, #540]	@ (80040e8 <HAL_ADC_Init+0x290>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	4a87      	ldr	r2, [pc, #540]	@ (80040ec <HAL_ADC_Init+0x294>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003edc:	e002      	b.n	8003ee4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f9      	bne.n	8003ede <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7ff ff3c 	bl	8003d6c <LL_ADC_IsInternalRegulatorEnabled>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10d      	bne.n	8003f16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efe:	f043 0210 	orr.w	r2, r3, #16
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f0a:	f043 0201 	orr.w	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7ff ff75 	bl	8003e0a <LL_ADC_REG_IsConversionOngoing>
 8003f20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f040 80cf 	bne.w	80040ce <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f040 80cb 	bne.w	80040ce <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003f40:	f043 0202 	orr.w	r2, r3, #2
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff35 	bl	8003dbc <LL_ADC_IsEnabled>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d110      	bne.n	8003f7a <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f58:	4865      	ldr	r0, [pc, #404]	@ (80040f0 <HAL_ADC_Init+0x298>)
 8003f5a:	f7ff ff2f 	bl	8003dbc <LL_ADC_IsEnabled>
 8003f5e:	4604      	mov	r4, r0
 8003f60:	4864      	ldr	r0, [pc, #400]	@ (80040f4 <HAL_ADC_Init+0x29c>)
 8003f62:	f7ff ff2b 	bl	8003dbc <LL_ADC_IsEnabled>
 8003f66:	4603      	mov	r3, r0
 8003f68:	4323      	orrs	r3, r4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d105      	bne.n	8003f7a <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4619      	mov	r1, r3
 8003f74:	4860      	ldr	r0, [pc, #384]	@ (80040f8 <HAL_ADC_Init+0x2a0>)
 8003f76:	f7ff fd09 	bl	800398c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	7e5b      	ldrb	r3, [r3, #25]
 8003f7e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f84:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003f8a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003f90:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f98:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d106      	bne.n	8003fb6 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	3b01      	subs	r3, #1
 8003fae:	045b      	lsls	r3, r3, #17
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	4b48      	ldr	r3, [pc, #288]	@ (80040fc <HAL_ADC_Init+0x2a4>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	69b9      	ldr	r1, [r7, #24]
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff ff15 	bl	8003e30 <LL_ADC_INJ_IsConversionOngoing>
 8004006:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d13d      	bne.n	800408a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d13a      	bne.n	800408a <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	7e1b      	ldrb	r3, [r3, #24]
 8004018:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004020:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004030:	f023 0302 	bic.w	r3, r3, #2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	69b9      	ldr	r1, [r7, #24]
 800403a:	430b      	orrs	r3, r1
 800403c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004044:	2b01      	cmp	r3, #1
 8004046:	d118      	bne.n	800407a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004052:	f023 0304 	bic.w	r3, r3, #4
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800405e:	4311      	orrs	r1, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004064:	4311      	orrs	r1, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800406a:	430a      	orrs	r2, r1
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	611a      	str	r2, [r3, #16]
 8004078:	e007      	b.n	800408a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10c      	bne.n	80040ac <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004098:	f023 010f 	bic.w	r1, r3, #15
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	1e5a      	subs	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80040aa:	e007      	b.n	80040bc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 020f 	bic.w	r2, r2, #15
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	f023 0303 	bic.w	r3, r3, #3
 80040c4:	f043 0201 	orr.w	r2, r3, #1
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80040cc:	e007      	b.n	80040de <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	f043 0210 	orr.w	r2, r3, #16
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80040de:	7ffb      	ldrb	r3, [r7, #31]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3724      	adds	r7, #36	@ 0x24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd90      	pop	{r4, r7, pc}
 80040e8:	2000003c 	.word	0x2000003c
 80040ec:	053e2d63 	.word	0x053e2d63
 80040f0:	42028000 	.word	0x42028000
 80040f4:	42028100 	.word	0x42028100
 80040f8:	42028300 	.word	0x42028300
 80040fc:	fff04007 	.word	0xfff04007

08004100 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b0a2      	sub	sp, #136	@ 0x88
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800410c:	488b      	ldr	r0, [pc, #556]	@ (800433c <HAL_ADC_Start_DMA+0x23c>)
 800410e:	f7ff fdd7 	bl	8003cc0 <LL_ADC_GetMultimode>
 8004112:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fe76 	bl	8003e0a <LL_ADC_REG_IsConversionOngoing>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	f040 8101 	bne.w	8004328 <HAL_ADC_Start_DMA+0x228>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_ADC_Start_DMA+0x34>
 8004130:	2302      	movs	r3, #2
 8004132:	e0fe      	b.n	8004332 <HAL_ADC_Start_DMA+0x232>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800413c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d006      	beq.n	8004150 <HAL_ADC_Start_DMA+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004142:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004144:	2b05      	cmp	r3, #5
 8004146:	d003      	beq.n	8004150 <HAL_ADC_Start_DMA+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004148:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800414a:	2b09      	cmp	r3, #9
 800414c:	f040 80e4 	bne.w	8004318 <HAL_ADC_Start_DMA+0x218>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 ff47 	bl	8004fe4 <ADC_Enable>
 8004156:	4603      	mov	r3, r0
 8004158:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800415c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004160:	2b00      	cmp	r3, #0
 8004162:	f040 80d4 	bne.w	800430e <HAL_ADC_Start_DMA+0x20e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a70      	ldr	r2, [pc, #448]	@ (8004340 <HAL_ADC_Start_DMA+0x240>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d002      	beq.n	800418a <HAL_ADC_Start_DMA+0x8a>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	e000      	b.n	800418c <HAL_ADC_Start_DMA+0x8c>
 800418a:	4b6e      	ldr	r3, [pc, #440]	@ (8004344 <HAL_ADC_Start_DMA+0x244>)
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	4293      	cmp	r3, r2
 8004192:	d002      	beq.n	800419a <HAL_ADC_Start_DMA+0x9a>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004194:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d105      	bne.n	80041a6 <HAL_ADC_Start_DMA+0xa6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d006      	beq.n	80041c0 <HAL_ADC_Start_DMA+0xc0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b6:	f023 0206 	bic.w	r2, r3, #6
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80041be:	e002      	b.n	80041c6 <HAL_ADC_Start_DMA+0xc6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ca:	4a5f      	ldr	r2, [pc, #380]	@ (8004348 <HAL_ADC_Start_DMA+0x248>)
 80041cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d2:	4a5e      	ldr	r2, [pc, #376]	@ (800434c <HAL_ADC_Start_DMA+0x24c>)
 80041d4:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041da:	4a5d      	ldr	r2, [pc, #372]	@ (8004350 <HAL_ADC_Start_DMA+0x250>)
 80041dc:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	221c      	movs	r2, #28
 80041e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0210 	orr.w	r2, r2, #16
 80041fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	60da      	str	r2, [r3, #12]

        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004218:	2b00      	cmp	r3, #0
 800421a:	d04d      	beq.n	80042b8 <HAL_ADC_Start_DMA+0x1b8>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004222:	2b00      	cmp	r3, #0
 8004224:	d046      	beq.n	80042b4 <HAL_ADC_Start_DMA+0x1b4>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d040      	beq.n	80042b4 <HAL_ADC_Start_DMA+0x1b4>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	f107 0310 	add.w	r3, r7, #16
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f002 f87d 	bl	8006340 <HAL_DMAEx_List_GetNodeConfig>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_ADC_Start_DMA+0x150>
            {
              return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e070      	b.n	8004332 <HAL_ADC_Start_DMA+0x232>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004252:	2b02      	cmp	r3, #2
 8004254:	d104      	bne.n	8004260 <HAL_ADC_Start_DMA+0x160>
            {
              /* Word -> Bytes */
              length_bytes = Length * 4U;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800425e:	e00a      	b.n	8004276 <HAL_ADC_Start_DMA+0x176>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	2b01      	cmp	r3, #1
 8004264:	d104      	bne.n	8004270 <HAL_ADC_Start_DMA+0x170>
            {
              /* Halfword -> Bytes */
              length_bytes = Length * 2U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800426e:	e002      	b.n	8004276 <HAL_ADC_Start_DMA+0x176>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              length_bytes = Length;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)length_bytes;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004282:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800429a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 ffb0 	bl	800620c <HAL_DMAEx_List_Start_IT>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80042b2:	e026      	b.n	8004302 <HAL_ADC_Start_DMA+0x202>
          }
          else
          {
            return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e03c      	b.n	8004332 <HAL_ADC_Start_DMA+0x232>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d104      	bne.n	80042cc <HAL_ADC_Start_DMA+0x1cc>
          {
            /* Word -> Bytes */
            length_bytes = Length * 4U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042ca:	e00c      	b.n	80042e6 <HAL_ADC_Start_DMA+0x1e6>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d104      	bne.n	80042e0 <HAL_ADC_Start_DMA+0x1e0>
          {
            /* Halfword -> Bytes */
            length_bytes = Length * 2U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042de:	e002      	b.n	80042e6 <HAL_ADC_Start_DMA+0x1e6>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            length_bytes = Length;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          /* Start the DMA channel */
          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3340      	adds	r3, #64	@ 0x40
 80042f0:	4619      	mov	r1, r3
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80042f8:	f001 fa36 	bl	8005768 <HAL_DMA_Start_IT>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fd6b 	bl	8003de2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800430c:	e00f      	b.n	800432e <HAL_ADC_Start_DMA+0x22e>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8004316:	e00a      	b.n	800432e <HAL_ADC_Start_DMA+0x22e>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004326:	e002      	b.n	800432e <HAL_ADC_Start_DMA+0x22e>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004328:	2302      	movs	r3, #2
 800432a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  /* Return function status */
  return tmp_hal_status;
 800432e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004332:	4618      	mov	r0, r3
 8004334:	3788      	adds	r7, #136	@ 0x88
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	42028300 	.word	0x42028300
 8004340:	42028100 	.word	0x42028100
 8004344:	42028000 	.word	0x42028000
 8004348:	080050e9 	.word	0x080050e9
 800434c:	080051c1 	.word	0x080051c1
 8004350:	080051dd 	.word	0x080051dd

08004354 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08a      	sub	sp, #40	@ 0x28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800435c:	2300      	movs	r3, #0
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004370:	4882      	ldr	r0, [pc, #520]	@ (800457c <HAL_ADC_IRQHandler+0x228>)
 8004372:	f7ff fca5 	bl	8003cc0 <LL_ADC_GetMultimode>
 8004376:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d017      	beq.n	80043b2 <HAL_ADC_IRQHandler+0x5e>
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d012      	beq.n	80043b2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	d105      	bne.n	80043a4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 ff5b 	bl	8005260 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2202      	movs	r2, #2
 80043b0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d004      	beq.n	80043c6 <HAL_ADC_IRQHandler+0x72>
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8083 	beq.w	80044d8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d07d      	beq.n	80044d8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fbbf 	bl	8003b7c <LL_ADC_REG_IsTriggerSourceSWStart>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d062      	beq.n	80044ca <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a5d      	ldr	r2, [pc, #372]	@ (8004580 <HAL_ADC_IRQHandler+0x22c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d002      	beq.n	8004414 <HAL_ADC_IRQHandler+0xc0>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	e000      	b.n	8004416 <HAL_ADC_IRQHandler+0xc2>
 8004414:	4b5b      	ldr	r3, [pc, #364]	@ (8004584 <HAL_ADC_IRQHandler+0x230>)
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	4293      	cmp	r3, r2
 800441c:	d008      	beq.n	8004430 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2b05      	cmp	r3, #5
 8004428:	d002      	beq.n	8004430 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b09      	cmp	r3, #9
 800442e:	d104      	bne.n	800443a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	623b      	str	r3, [r7, #32]
 8004438:	e00c      	b.n	8004454 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a50      	ldr	r2, [pc, #320]	@ (8004580 <HAL_ADC_IRQHandler+0x22c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d002      	beq.n	800444a <HAL_ADC_IRQHandler+0xf6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	e000      	b.n	800444c <HAL_ADC_IRQHandler+0xf8>
 800444a:	4b4e      	ldr	r3, [pc, #312]	@ (8004584 <HAL_ADC_IRQHandler+0x230>)
 800444c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d135      	bne.n	80044ca <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b08      	cmp	r3, #8
 800446a:	d12e      	bne.n	80044ca <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fcca 	bl	8003e0a <LL_ADC_REG_IsConversionOngoing>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d11a      	bne.n	80044b2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 020c 	bic.w	r2, r2, #12
 800448a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004490:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d112      	bne.n	80044ca <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a8:	f043 0201 	orr.w	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80044b0:	e00b      	b.n	80044ca <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b6:	f043 0210 	orr.w	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c2:	f043 0201 	orr.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fd ff68 	bl	80023a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	220c      	movs	r2, #12
 80044d6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d004      	beq.n	80044ec <HAL_ADC_IRQHandler+0x198>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 809f 	beq.w	8004636 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8099 	beq.w	8004636 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b00      	cmp	r3, #0
 800450e:	d105      	bne.n	800451c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004514:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fb6a 	bl	8003bfa <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004526:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fb25 	bl	8003b7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004532:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a11      	ldr	r2, [pc, #68]	@ (8004580 <HAL_ADC_IRQHandler+0x22c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d002      	beq.n	8004544 <HAL_ADC_IRQHandler+0x1f0>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	e000      	b.n	8004546 <HAL_ADC_IRQHandler+0x1f2>
 8004544:	4b0f      	ldr	r3, [pc, #60]	@ (8004584 <HAL_ADC_IRQHandler+0x230>)
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	4293      	cmp	r3, r2
 800454c:	d008      	beq.n	8004560 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b06      	cmp	r3, #6
 8004558:	d002      	beq.n	8004560 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b07      	cmp	r3, #7
 800455e:	d104      	bne.n	800456a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	e013      	b.n	8004592 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a04      	ldr	r2, [pc, #16]	@ (8004580 <HAL_ADC_IRQHandler+0x22c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_ADC_IRQHandler+0x234>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	e007      	b.n	800458a <HAL_ADC_IRQHandler+0x236>
 800457a:	bf00      	nop
 800457c:	42028300 	.word	0x42028300
 8004580:	42028100 	.word	0x42028100
 8004584:	42028000 	.word	0x42028000
 8004588:	4b7d      	ldr	r3, [pc, #500]	@ (8004780 <HAL_ADC_IRQHandler+0x42c>)
 800458a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d047      	beq.n	8004628 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_ADC_IRQHandler+0x25e>
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d03f      	beq.n	8004628 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d13a      	bne.n	8004628 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045bc:	2b40      	cmp	r3, #64	@ 0x40
 80045be:	d133      	bne.n	8004628 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d12e      	bne.n	8004628 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fc2e 	bl	8003e30 <LL_ADC_INJ_IsConversionOngoing>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d11a      	bne.n	8004610 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045e8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d112      	bne.n	8004628 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004606:	f043 0201 	orr.w	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	659a      	str	r2, [r3, #88]	@ 0x58
 800460e:	e00b      	b.n	8004628 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004614:	f043 0210 	orr.w	r2, r3, #16
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004620:	f043 0201 	orr.w	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fdf1 	bl	8005210 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2260      	movs	r2, #96	@ 0x60
 8004634:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	d011      	beq.n	8004664 <HAL_ADC_IRQHandler+0x310>
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00c      	beq.n	8004664 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f8a0 	bl	800479c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2280      	movs	r2, #128	@ 0x80
 8004662:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d012      	beq.n	8004694 <HAL_ADC_IRQHandler+0x340>
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00d      	beq.n	8004694 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fdd7 	bl	8005238 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004692:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800469a:	2b00      	cmp	r3, #0
 800469c:	d012      	beq.n	80046c4 <HAL_ADC_IRQHandler+0x370>
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00d      	beq.n	80046c4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fdc9 	bl	800524c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d036      	beq.n	800473c <HAL_ADC_IRQHandler+0x3e8>
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d031      	beq.n	800473c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d102      	bne.n	80046e6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80046e0:	2301      	movs	r3, #1
 80046e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e4:	e014      	b.n	8004710 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80046ec:	4825      	ldr	r0, [pc, #148]	@ (8004784 <HAL_ADC_IRQHandler+0x430>)
 80046ee:	f7ff faf5 	bl	8003cdc <LL_ADC_GetMultiDMATransfer>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00b      	beq.n	8004710 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80046f8:	2301      	movs	r3, #1
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046fc:	e008      	b.n	8004710 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 800470c:	2301      	movs	r3, #1
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	2b01      	cmp	r3, #1
 8004714:	d10e      	bne.n	8004734 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800471a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004726:	f043 0202 	orr.w	r2, r3, #2
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f83e 	bl	80047b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2210      	movs	r2, #16
 800473a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004742:	2b00      	cmp	r3, #0
 8004744:	d018      	beq.n	8004778 <HAL_ADC_IRQHandler+0x424>
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d013      	beq.n	8004778 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004754:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004760:	f043 0208 	orr.w	r2, r3, #8
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004770:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fd56 	bl	8005224 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004778:	bf00      	nop
 800477a:	3728      	adds	r7, #40	@ 0x28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	42028000 	.word	0x42028000
 8004784:	42028300 	.word	0x42028300

08004788 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b0b6      	sub	sp, #216	@ 0xd8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x22>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e3e6      	b.n	8004fb4 <HAL_ADC_ConfigChannel+0x7f0>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fb09 	bl	8003e0a <LL_ADC_REG_IsConversionOngoing>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f040 83cb 	bne.w	8004f96 <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d009      	beq.n	800481c <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4ab0      	ldr	r2, [pc, #704]	@ (8004ad0 <HAL_ADC_ConfigChannel+0x30c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d109      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x62>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	4aaf      	ldr	r2, [pc, #700]	@ (8004ad4 <HAL_ADC_ConfigChannel+0x310>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d104      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff f8f9 	bl	8003a18 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	f7ff f9b5 	bl	8003ba2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fae4 	bl	8003e0a <LL_ADC_REG_IsConversionOngoing>
 8004842:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff faf0 	bl	8003e30 <LL_ADC_INJ_IsConversionOngoing>
 8004850:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004854:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004858:	2b00      	cmp	r3, #0
 800485a:	f040 81dd 	bne.w	8004c18 <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800485e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004862:	2b00      	cmp	r3, #0
 8004864:	f040 81d8 	bne.w	8004c18 <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004870:	d10f      	bne.n	8004892 <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2200      	movs	r2, #0
 800487c:	4619      	mov	r1, r3
 800487e:	f7ff f9cf 	bl	8003c20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff f963 	bl	8003b56 <LL_ADC_SetSamplingTimeCommonConfig>
 8004890:	e00e      	b.n	80048b0 <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6819      	ldr	r1, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	461a      	mov	r2, r3
 80048a0:	f7ff f9be 	bl	8003c20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2100      	movs	r1, #0
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff f953 	bl	8003b56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	695a      	ldr	r2, [r3, #20]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	08db      	lsrs	r3, r3, #3
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d022      	beq.n	8004918 <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6919      	ldr	r1, [r3, #16]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80048e2:	f7ff f8ad 	bl	8003a40 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6919      	ldr	r1, [r3, #16]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	461a      	mov	r2, r3
 80048f4:	f7ff f8f9 	bl	8003aea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6818      	ldr	r0, [r3, #0]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004904:	2b01      	cmp	r3, #1
 8004906:	d102      	bne.n	800490e <HAL_ADC_ConfigChannel+0x14a>
 8004908:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800490c:	e000      	b.n	8004910 <HAL_ADC_ConfigChannel+0x14c>
 800490e:	2300      	movs	r3, #0
 8004910:	461a      	mov	r2, r3
 8004912:	f7ff f905 	bl	8003b20 <LL_ADC_SetOffsetSaturation>
 8004916:	e17f      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff f8b2 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004924:	4603      	mov	r3, r0
 8004926:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x180>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff f8a7 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 800493a:	4603      	mov	r3, r0
 800493c:	0e9b      	lsrs	r3, r3, #26
 800493e:	f003 021f 	and.w	r2, r3, #31
 8004942:	e01e      	b.n	8004982 <HAL_ADC_ConfigChannel+0x1be>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff f89c 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004950:	4603      	mov	r3, r0
 8004952:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004956:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800495a:	fa93 f3a3 	rbit	r3, r3
 800495e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8004962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004966:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 800496a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 8004972:	2320      	movs	r3, #32
 8004974:	e004      	b.n	8004980 <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 8004976:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800497a:	fab3 f383 	clz	r3, r3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800498a:	2b00      	cmp	r3, #0
 800498c:	d105      	bne.n	800499a <HAL_ADC_ConfigChannel+0x1d6>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	0e9b      	lsrs	r3, r3, #26
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	e018      	b.n	80049cc <HAL_ADC_ConfigChannel+0x208>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80049ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80049b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 80049be:	2320      	movs	r3, #32
 80049c0:	e004      	b.n	80049cc <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 80049c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049c6:	fab3 f383 	clz	r3, r3
 80049ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d106      	bne.n	80049de <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff f86b 	bl	8003ab4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2101      	movs	r1, #1
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff f84f 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <HAL_ADC_ConfigChannel+0x246>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2101      	movs	r1, #1
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff f844 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004a00:	4603      	mov	r3, r0
 8004a02:	0e9b      	lsrs	r3, r3, #26
 8004a04:	f003 021f 	and.w	r2, r3, #31
 8004a08:	e01e      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x284>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2101      	movs	r1, #1
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff f839 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a20:	fa93 f3a3 	rbit	r3, r3
 8004a24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004a28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 8004a38:	2320      	movs	r3, #32
 8004a3a:	e004      	b.n	8004a46 <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 8004a3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a40:	fab3 f383 	clz	r3, r3
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x29c>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	0e9b      	lsrs	r3, r3, #26
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	e018      	b.n	8004a92 <HAL_ADC_ConfigChannel+0x2ce>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a6c:	fa93 f3a3 	rbit	r3, r3
 8004a70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004a74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004a78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8004a84:	2320      	movs	r3, #32
 8004a86:	e004      	b.n	8004a92 <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 8004a88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a8c:	fab3 f383 	clz	r3, r3
 8004a90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d106      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7ff f808 	bl	8003ab4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2102      	movs	r1, #2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe ffec 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10e      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x314>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2102      	movs	r1, #2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fe ffe1 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	0e9b      	lsrs	r3, r3, #26
 8004aca:	f003 021f 	and.w	r2, r3, #31
 8004ace:	e022      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x352>
 8004ad0:	04300002 	.word	0x04300002
 8004ad4:	407f0000 	.word	0x407f0000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2102      	movs	r1, #2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe ffd2 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aee:	fa93 f3a3 	rbit	r3, r3
 8004af2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004af6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004afa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 8004b06:	2320      	movs	r3, #32
 8004b08:	e004      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8004b0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b0e:	fab3 f383 	clz	r3, r3
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d105      	bne.n	8004b2e <HAL_ADC_ConfigChannel+0x36a>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	0e9b      	lsrs	r3, r3, #26
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	e016      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x398>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b36:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b3a:	fa93 f3a3 	rbit	r3, r3
 8004b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004b40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 8004b4e:	2320      	movs	r3, #32
 8004b50:	e004      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 8004b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d106      	bne.n	8004b6e <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2102      	movs	r1, #2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fe ffa3 	bl	8003ab4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2103      	movs	r1, #3
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe ff87 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x3d6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2103      	movs	r1, #3
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe ff7c 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004b90:	4603      	mov	r3, r0
 8004b92:	0e9b      	lsrs	r3, r3, #26
 8004b94:	f003 021f 	and.w	r2, r3, #31
 8004b98:	e017      	b.n	8004bca <HAL_ADC_ConfigChannel+0x406>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2103      	movs	r1, #3
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe ff71 	bl	8003a88 <LL_ADC_GetOffsetChannel>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bac:	fa93 f3a3 	rbit	r3, r3
 8004bb0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004bb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bb4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004bb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	e003      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d105      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x41e>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	0e9b      	lsrs	r3, r3, #26
 8004bdc:	f003 031f 	and.w	r3, r3, #31
 8004be0:	e011      	b.n	8004c06 <HAL_ADC_ConfigChannel+0x442>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bea:	fa93 f3a3 	rbit	r3, r3
 8004bee:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004bf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 8004bfa:	2320      	movs	r3, #32
 8004bfc:	e003      	b.n	8004c06 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8004bfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c00:	fab3 f383 	clz	r3, r3
 8004c04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d106      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2103      	movs	r1, #3
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe ff4e 	bl	8003ab4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff f8cd 	bl	8003dbc <LL_ADC_IsEnabled>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 813f 	bne.w	8004ea8 <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f7ff f81e 	bl	8003c78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4a8e      	ldr	r2, [pc, #568]	@ (8004e7c <HAL_ADC_ConfigChannel+0x6b8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	f040 8130 	bne.w	8004ea8 <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10b      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x4ac>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	0e9b      	lsrs	r3, r3, #26
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	2b09      	cmp	r3, #9
 8004c66:	bf94      	ite	ls
 8004c68:	2301      	movls	r3, #1
 8004c6a:	2300      	movhi	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	e019      	b.n	8004ca4 <HAL_ADC_ConfigChannel+0x4e0>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c78:	fa93 f3a3 	rbit	r3, r3
 8004c7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004c7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c80:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004c82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 8004c88:	2320      	movs	r3, #32
 8004c8a:	e003      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8004c8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c8e:	fab3 f383 	clz	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	3301      	adds	r3, #1
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2b09      	cmp	r3, #9
 8004c9c:	bf94      	ite	ls
 8004c9e:	2301      	movls	r3, #1
 8004ca0:	2300      	movhi	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d079      	beq.n	8004d9c <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d107      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x500>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	0e9b      	lsrs	r3, r3, #26
 8004cba:	3301      	adds	r3, #1
 8004cbc:	069b      	lsls	r3, r3, #26
 8004cbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cc2:	e015      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0x52c>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ccc:	fa93 f3a3 	rbit	r3, r3
 8004cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cd4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 8004cdc:	2320      	movs	r3, #32
 8004cde:	e003      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 8004ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce2:	fab3 f383 	clz	r3, r3
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	3301      	adds	r3, #1
 8004cea:	069b      	lsls	r3, r3, #26
 8004cec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d109      	bne.n	8004d10 <HAL_ADC_ConfigChannel+0x54c>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0e9b      	lsrs	r3, r3, #26
 8004d02:	3301      	adds	r3, #1
 8004d04:	f003 031f 	and.w	r3, r3, #31
 8004d08:	2101      	movs	r1, #1
 8004d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0e:	e017      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x57c>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d18:	fa93 f3a3 	rbit	r3, r3
 8004d1c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d20:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 8004d28:	2320      	movs	r3, #32
 8004d2a:	e003      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 8004d2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d2e:	fab3 f383 	clz	r3, r3
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	3301      	adds	r3, #1
 8004d36:	f003 031f 	and.w	r3, r3, #31
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d40:	ea42 0103 	orr.w	r1, r2, r3
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x5a2>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	0e9b      	lsrs	r3, r3, #26
 8004d56:	3301      	adds	r3, #1
 8004d58:	f003 021f 	and.w	r2, r3, #31
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	4413      	add	r3, r2
 8004d62:	051b      	lsls	r3, r3, #20
 8004d64:	e018      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x5d4>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 8004d7e:	2320      	movs	r3, #32
 8004d80:	e003      	b.n	8004d8a <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 8004d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d84:	fab3 f383 	clz	r3, r3
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	f003 021f 	and.w	r2, r3, #31
 8004d90:	4613      	mov	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	4413      	add	r3, r2
 8004d96:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	e080      	b.n	8004e9e <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d107      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x5f4>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	0e9b      	lsrs	r3, r3, #26
 8004dae:	3301      	adds	r3, #1
 8004db0:	069b      	lsls	r3, r3, #26
 8004db2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004db6:	e015      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x620>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc0:	fa93 f3a3 	rbit	r3, r3
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 8004dd0:	2320      	movs	r3, #32
 8004dd2:	e003      	b.n	8004ddc <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd6:	fab3 f383 	clz	r3, r3
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	3301      	adds	r3, #1
 8004dde:	069b      	lsls	r3, r3, #26
 8004de0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <HAL_ADC_ConfigChannel+0x640>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0e9b      	lsrs	r3, r3, #26
 8004df6:	3301      	adds	r3, #1
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004e02:	e017      	b.n	8004e34 <HAL_ADC_ConfigChannel+0x670>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	fa93 f3a3 	rbit	r3, r3
 8004e10:	61fb      	str	r3, [r7, #28]
  return result;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 8004e1c:	2320      	movs	r3, #32
 8004e1e:	e003      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	fab3 f383 	clz	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	3301      	adds	r3, #1
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2101      	movs	r1, #1
 8004e30:	fa01 f303 	lsl.w	r3, r1, r3
 8004e34:	ea42 0103 	orr.w	r1, r2, r3
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10d      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x69c>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	0e9b      	lsrs	r3, r3, #26
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	f003 021f 	and.w	r2, r3, #31
 8004e50:	4613      	mov	r3, r2
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	3b1e      	subs	r3, #30
 8004e58:	051b      	lsls	r3, r3, #20
 8004e5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e5e:	e01d      	b.n	8004e9c <HAL_ADC_ConfigChannel+0x6d8>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	fa93 f3a3 	rbit	r3, r3
 8004e6c:	613b      	str	r3, [r7, #16]
  return result;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d103      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 8004e78:	2320      	movs	r3, #32
 8004e7a:	e005      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x6c4>
 8004e7c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	3301      	adds	r3, #1
 8004e8a:	f003 021f 	and.w	r2, r3, #31
 8004e8e:	4613      	mov	r3, r2
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4413      	add	r3, r2
 8004e94:	3b1e      	subs	r3, #30
 8004e96:	051b      	lsls	r3, r3, #20
 8004e98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e9c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	f7fe febc 	bl	8003c20 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b43      	ldr	r3, [pc, #268]	@ (8004fbc <HAL_ADC_ConfigChannel+0x7f8>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d079      	beq.n	8004fa8 <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eb4:	4842      	ldr	r0, [pc, #264]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x7fc>)
 8004eb6:	f7fe fd8f 	bl	80039d8 <LL_ADC_GetCommonPathInternalCh>
 8004eba:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a40      	ldr	r2, [pc, #256]	@ (8004fc4 <HAL_ADC_ConfigChannel+0x800>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d124      	bne.n	8004f12 <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ecc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d11e      	bne.n	8004f12 <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a3b      	ldr	r2, [pc, #236]	@ (8004fc8 <HAL_ADC_ConfigChannel+0x804>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d164      	bne.n	8004fa8 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ede:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ee2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4835      	ldr	r0, [pc, #212]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x7fc>)
 8004eea:	f7fe fd62 	bl	80039b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004eee:	4b37      	ldr	r3, [pc, #220]	@ (8004fcc <HAL_ADC_ConfigChannel+0x808>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	099b      	lsrs	r3, r3, #6
 8004ef4:	4a36      	ldr	r2, [pc, #216]	@ (8004fd0 <HAL_ADC_ConfigChannel+0x80c>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	3301      	adds	r3, #1
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f02:	e002      	b.n	8004f0a <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f9      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f10:	e04a      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2f      	ldr	r2, [pc, #188]	@ (8004fd4 <HAL_ADC_ConfigChannel+0x810>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d113      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10d      	bne.n	8004f44 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd8 <HAL_ADC_ConfigChannel+0x814>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d13a      	bne.n	8004fa8 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4820      	ldr	r0, [pc, #128]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x7fc>)
 8004f3e:	f7fe fd38 	bl	80039b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f42:	e031      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a24      	ldr	r2, [pc, #144]	@ (8004fdc <HAL_ADC_ConfigChannel+0x818>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d113      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004f4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10d      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8004fc8 <HAL_ADC_ConfigChannel+0x804>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d121      	bne.n	8004fa8 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4814      	ldr	r0, [pc, #80]	@ (8004fc0 <HAL_ADC_ConfigChannel+0x7fc>)
 8004f70:	f7fe fd1f 	bl	80039b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8004f74:	e018      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a19      	ldr	r2, [pc, #100]	@ (8004fe0 <HAL_ADC_ConfigChannel+0x81c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d113      	bne.n	8004fa8 <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a10      	ldr	r2, [pc, #64]	@ (8004fc8 <HAL_ADC_ConfigChannel+0x804>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fe fd30 	bl	80039f4 <LL_ADC_EnableChannelVDDcore>
 8004f94:	e008      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f9a:	f043 0220 	orr.w	r2, r3, #32
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004fb0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	37d8      	adds	r7, #216	@ 0xd8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	80080000 	.word	0x80080000
 8004fc0:	42028300 	.word	0x42028300
 8004fc4:	c3210000 	.word	0xc3210000
 8004fc8:	42028000 	.word	0x42028000
 8004fcc:	2000003c 	.word	0x2000003c
 8004fd0:	053e2d63 	.word	0x053e2d63
 8004fd4:	43290000 	.word	0x43290000
 8004fd8:	42028100 	.word	0x42028100
 8004fdc:	c7520000 	.word	0xc7520000
 8004fe0:	475a0000 	.word	0x475a0000

08004fe4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe fee1 	bl	8003dbc <LL_ADC_IsEnabled>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d166      	bne.n	80050ce <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	4b34      	ldr	r3, [pc, #208]	@ (80050d8 <ADC_Enable+0xf4>)
 8005008:	4013      	ands	r3, r2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00d      	beq.n	800502a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005012:	f043 0210 	orr.w	r2, r3, #16
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501e:	f043 0201 	orr.w	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e052      	b.n	80050d0 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe feb0 	bl	8003d94 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005034:	4829      	ldr	r0, [pc, #164]	@ (80050dc <ADC_Enable+0xf8>)
 8005036:	f7fe fccf 	bl	80039d8 <LL_ADC_GetCommonPathInternalCh>
 800503a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800503c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005040:	2b00      	cmp	r3, #0
 8005042:	d010      	beq.n	8005066 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005044:	4b26      	ldr	r3, [pc, #152]	@ (80050e0 <ADC_Enable+0xfc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	099b      	lsrs	r3, r3, #6
 800504a:	4a26      	ldr	r2, [pc, #152]	@ (80050e4 <ADC_Enable+0x100>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	099b      	lsrs	r3, r3, #6
 8005052:	3301      	adds	r3, #1
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005058:	e002      	b.n	8005060 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	3b01      	subs	r3, #1
 800505e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f9      	bne.n	800505a <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005066:	f7fe fc85 	bl	8003974 <HAL_GetTick>
 800506a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800506c:	e028      	b.n	80050c0 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe fea2 	bl	8003dbc <LL_ADC_IsEnabled>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d104      	bne.n	8005088 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7fe fe86 	bl	8003d94 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005088:	f7fe fc74 	bl	8003974 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d914      	bls.n	80050c0 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d00d      	beq.n	80050c0 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a8:	f043 0210 	orr.w	r2, r3, #16
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b4:	f043 0201 	orr.w	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e007      	b.n	80050d0 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d1cf      	bne.n	800506e <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	8000003f 	.word	0x8000003f
 80050dc:	42028300 	.word	0x42028300
 80050e0:	2000003c 	.word	0x2000003c
 80050e4:	053e2d63 	.word	0x053e2d63

080050e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fa:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d14b      	bne.n	800519a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005106:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b00      	cmp	r3, #0
 800511a:	d021      	beq.n	8005160 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f7fe fd2b 	bl	8003b7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d032      	beq.n	8005192 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d12b      	bne.n	8005192 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800513e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800514a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d11f      	bne.n	8005192 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005156:	f043 0201 	orr.w	r2, r3, #1
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	659a      	str	r2, [r3, #88]	@ 0x58
 800515e:	e018      	b.n	8005192 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d111      	bne.n	8005192 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005172:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d105      	bne.n	8005192 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518a:	f043 0201 	orr.w	r2, r3, #1
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7fd f904 	bl	80023a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005198:	e00e      	b.n	80051b8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff fb02 	bl	80047b0 <HAL_ADC_ErrorCallback>
}
 80051ac:	e004      	b.n	80051b8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	4798      	blx	r3
}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff fada 	bl	8004788 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fa:	f043 0204 	orr.w	r2, r3, #4
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff fad4 	bl	80047b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005208:	bf00      	nop
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005284:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005290:	4013      	ands	r3, r2
 8005292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800529c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80052a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052a6:	4a04      	ldr	r2, [pc, #16]	@ (80052b8 <__NVIC_SetPriorityGrouping+0x44>)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	60d3      	str	r3, [r2, #12]
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	e000ed00 	.word	0xe000ed00

080052bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052c0:	4b04      	ldr	r3, [pc, #16]	@ (80052d4 <__NVIC_GetPriorityGrouping+0x18>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	0a1b      	lsrs	r3, r3, #8
 80052c6:	f003 0307 	and.w	r3, r3, #7
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr
 80052d4:	e000ed00 	.word	0xe000ed00

080052d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	4603      	mov	r3, r0
 80052e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	db0b      	blt.n	8005302 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	f003 021f 	and.w	r2, r3, #31
 80052f0:	4907      	ldr	r1, [pc, #28]	@ (8005310 <__NVIC_EnableIRQ+0x38>)
 80052f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	2001      	movs	r0, #1
 80052fa:	fa00 f202 	lsl.w	r2, r0, r2
 80052fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	e000e100 	.word	0xe000e100

08005314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	6039      	str	r1, [r7, #0]
 800531e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005324:	2b00      	cmp	r3, #0
 8005326:	db0a      	blt.n	800533e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	490c      	ldr	r1, [pc, #48]	@ (8005360 <__NVIC_SetPriority+0x4c>)
 800532e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005332:	0112      	lsls	r2, r2, #4
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	440b      	add	r3, r1
 8005338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800533c:	e00a      	b.n	8005354 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	4908      	ldr	r1, [pc, #32]	@ (8005364 <__NVIC_SetPriority+0x50>)
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	3b04      	subs	r3, #4
 800534c:	0112      	lsls	r2, r2, #4
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	440b      	add	r3, r1
 8005352:	761a      	strb	r2, [r3, #24]
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	e000e100 	.word	0xe000e100
 8005364:	e000ed00 	.word	0xe000ed00

08005368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005368:	b480      	push	{r7}
 800536a:	b089      	sub	sp, #36	@ 0x24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f1c3 0307 	rsb	r3, r3, #7
 8005382:	2b04      	cmp	r3, #4
 8005384:	bf28      	it	cs
 8005386:	2304      	movcs	r3, #4
 8005388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	3304      	adds	r3, #4
 800538e:	2b06      	cmp	r3, #6
 8005390:	d902      	bls.n	8005398 <NVIC_EncodePriority+0x30>
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	3b03      	subs	r3, #3
 8005396:	e000      	b.n	800539a <NVIC_EncodePriority+0x32>
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800539c:	f04f 32ff 	mov.w	r2, #4294967295
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	43da      	mvns	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	401a      	ands	r2, r3
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053b0:	f04f 31ff 	mov.w	r1, #4294967295
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ba:	43d9      	mvns	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053c0:	4313      	orrs	r3, r2
         );
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3724      	adds	r7, #36	@ 0x24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff ff4c 	bl	8005274 <__NVIC_SetPriorityGrouping>
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053f2:	f7ff ff63 	bl	80052bc <__NVIC_GetPriorityGrouping>
 80053f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	6978      	ldr	r0, [r7, #20]
 80053fe:	f7ff ffb3 	bl	8005368 <NVIC_EncodePriority>
 8005402:	4602      	mov	r2, r0
 8005404:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005408:	4611      	mov	r1, r2
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff ff82 	bl	8005314 <__NVIC_SetPriority>
}
 8005410:	bf00      	nop
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff ff56 	bl	80052d8 <__NVIC_EnableIRQ>
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b04      	cmp	r3, #4
 8005440:	d844      	bhi.n	80054cc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005442:	a201      	add	r2, pc, #4	@ (adr r2, 8005448 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005448:	0800546b 	.word	0x0800546b
 800544c:	08005489 	.word	0x08005489
 8005450:	080054ab 	.word	0x080054ab
 8005454:	080054cd 	.word	0x080054cd
 8005458:	0800545d 	.word	0x0800545d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800545c:	4b1f      	ldr	r3, [pc, #124]	@ (80054dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1e      	ldr	r2, [pc, #120]	@ (80054dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005462:	f043 0304 	orr.w	r3, r3, #4
 8005466:	6013      	str	r3, [r2, #0]
      break;
 8005468:	e031      	b.n	80054ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800546a:	4b1c      	ldr	r3, [pc, #112]	@ (80054dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1b      	ldr	r2, [pc, #108]	@ (80054dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005470:	f023 0304 	bic.w	r3, r3, #4
 8005474:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8005476:	4b1a      	ldr	r3, [pc, #104]	@ (80054e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005478:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800547c:	4a18      	ldr	r2, [pc, #96]	@ (80054e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800547e:	f023 030c 	bic.w	r3, r3, #12
 8005482:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8005486:	e022      	b.n	80054ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8005488:	4b14      	ldr	r3, [pc, #80]	@ (80054dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a13      	ldr	r2, [pc, #76]	@ (80054dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800548e:	f023 0304 	bic.w	r3, r3, #4
 8005492:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8005494:	4b12      	ldr	r3, [pc, #72]	@ (80054e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005496:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800549a:	f023 030c 	bic.w	r3, r3, #12
 800549e:	4a10      	ldr	r2, [pc, #64]	@ (80054e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80054a0:	f043 0304 	orr.w	r3, r3, #4
 80054a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80054a8:	e011      	b.n	80054ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80054aa:	4b0c      	ldr	r3, [pc, #48]	@ (80054dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a0b      	ldr	r2, [pc, #44]	@ (80054dc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80054b0:	f023 0304 	bic.w	r3, r3, #4
 80054b4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80054b6:	4b0a      	ldr	r3, [pc, #40]	@ (80054e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80054b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054bc:	f023 030c 	bic.w	r3, r3, #12
 80054c0:	4a07      	ldr	r2, [pc, #28]	@ (80054e0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80054c2:	f043 0308 	orr.w	r3, r3, #8
 80054c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80054ca:	e000      	b.n	80054ce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80054cc:	bf00      	nop
  }
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	e000e010 	.word	0xe000e010
 80054e0:	44020c00 	.word	0x44020c00

080054e4 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80054ec:	f7fe fa42 	bl	8003974 <HAL_GetTick>
 80054f0:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e0f0      	b.n	80056de <HAL_DMA_Init+0x1fa>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a79      	ldr	r2, [pc, #484]	@ (80056e8 <HAL_DMA_Init+0x204>)
 8005502:	4293      	cmp	r3, r2
 8005504:	f000 809f 	beq.w	8005646 <HAL_DMA_Init+0x162>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a77      	ldr	r2, [pc, #476]	@ (80056ec <HAL_DMA_Init+0x208>)
 800550e:	4293      	cmp	r3, r2
 8005510:	f000 8099 	beq.w	8005646 <HAL_DMA_Init+0x162>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a75      	ldr	r2, [pc, #468]	@ (80056f0 <HAL_DMA_Init+0x20c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	f000 8093 	beq.w	8005646 <HAL_DMA_Init+0x162>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a73      	ldr	r2, [pc, #460]	@ (80056f4 <HAL_DMA_Init+0x210>)
 8005526:	4293      	cmp	r3, r2
 8005528:	f000 808d 	beq.w	8005646 <HAL_DMA_Init+0x162>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a71      	ldr	r2, [pc, #452]	@ (80056f8 <HAL_DMA_Init+0x214>)
 8005532:	4293      	cmp	r3, r2
 8005534:	f000 8087 	beq.w	8005646 <HAL_DMA_Init+0x162>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a6f      	ldr	r2, [pc, #444]	@ (80056fc <HAL_DMA_Init+0x218>)
 800553e:	4293      	cmp	r3, r2
 8005540:	f000 8081 	beq.w	8005646 <HAL_DMA_Init+0x162>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a6d      	ldr	r2, [pc, #436]	@ (8005700 <HAL_DMA_Init+0x21c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d07b      	beq.n	8005646 <HAL_DMA_Init+0x162>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a6c      	ldr	r2, [pc, #432]	@ (8005704 <HAL_DMA_Init+0x220>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d076      	beq.n	8005646 <HAL_DMA_Init+0x162>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a6a      	ldr	r2, [pc, #424]	@ (8005708 <HAL_DMA_Init+0x224>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d071      	beq.n	8005646 <HAL_DMA_Init+0x162>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a69      	ldr	r2, [pc, #420]	@ (800570c <HAL_DMA_Init+0x228>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d06c      	beq.n	8005646 <HAL_DMA_Init+0x162>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a67      	ldr	r2, [pc, #412]	@ (8005710 <HAL_DMA_Init+0x22c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d067      	beq.n	8005646 <HAL_DMA_Init+0x162>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a66      	ldr	r2, [pc, #408]	@ (8005714 <HAL_DMA_Init+0x230>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d062      	beq.n	8005646 <HAL_DMA_Init+0x162>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a64      	ldr	r2, [pc, #400]	@ (8005718 <HAL_DMA_Init+0x234>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d05d      	beq.n	8005646 <HAL_DMA_Init+0x162>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a63      	ldr	r2, [pc, #396]	@ (800571c <HAL_DMA_Init+0x238>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d058      	beq.n	8005646 <HAL_DMA_Init+0x162>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a61      	ldr	r2, [pc, #388]	@ (8005720 <HAL_DMA_Init+0x23c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d053      	beq.n	8005646 <HAL_DMA_Init+0x162>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a60      	ldr	r2, [pc, #384]	@ (8005724 <HAL_DMA_Init+0x240>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d04e      	beq.n	8005646 <HAL_DMA_Init+0x162>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a5e      	ldr	r2, [pc, #376]	@ (8005728 <HAL_DMA_Init+0x244>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d049      	beq.n	8005646 <HAL_DMA_Init+0x162>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a5d      	ldr	r2, [pc, #372]	@ (800572c <HAL_DMA_Init+0x248>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d044      	beq.n	8005646 <HAL_DMA_Init+0x162>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a5b      	ldr	r2, [pc, #364]	@ (8005730 <HAL_DMA_Init+0x24c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d03f      	beq.n	8005646 <HAL_DMA_Init+0x162>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a5a      	ldr	r2, [pc, #360]	@ (8005734 <HAL_DMA_Init+0x250>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d03a      	beq.n	8005646 <HAL_DMA_Init+0x162>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a58      	ldr	r2, [pc, #352]	@ (8005738 <HAL_DMA_Init+0x254>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d035      	beq.n	8005646 <HAL_DMA_Init+0x162>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a57      	ldr	r2, [pc, #348]	@ (800573c <HAL_DMA_Init+0x258>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d030      	beq.n	8005646 <HAL_DMA_Init+0x162>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a55      	ldr	r2, [pc, #340]	@ (8005740 <HAL_DMA_Init+0x25c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d02b      	beq.n	8005646 <HAL_DMA_Init+0x162>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a54      	ldr	r2, [pc, #336]	@ (8005744 <HAL_DMA_Init+0x260>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d026      	beq.n	8005646 <HAL_DMA_Init+0x162>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a52      	ldr	r2, [pc, #328]	@ (8005748 <HAL_DMA_Init+0x264>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d021      	beq.n	8005646 <HAL_DMA_Init+0x162>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a51      	ldr	r2, [pc, #324]	@ (800574c <HAL_DMA_Init+0x268>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d01c      	beq.n	8005646 <HAL_DMA_Init+0x162>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a4f      	ldr	r2, [pc, #316]	@ (8005750 <HAL_DMA_Init+0x26c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d017      	beq.n	8005646 <HAL_DMA_Init+0x162>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a4e      	ldr	r2, [pc, #312]	@ (8005754 <HAL_DMA_Init+0x270>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d012      	beq.n	8005646 <HAL_DMA_Init+0x162>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a4c      	ldr	r2, [pc, #304]	@ (8005758 <HAL_DMA_Init+0x274>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00d      	beq.n	8005646 <HAL_DMA_Init+0x162>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a4b      	ldr	r2, [pc, #300]	@ (800575c <HAL_DMA_Init+0x278>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d008      	beq.n	8005646 <HAL_DMA_Init+0x162>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a49      	ldr	r2, [pc, #292]	@ (8005760 <HAL_DMA_Init+0x27c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d003      	beq.n	8005646 <HAL_DMA_Init+0x162>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a48      	ldr	r2, [pc, #288]	@ (8005764 <HAL_DMA_Init+0x280>)
 8005644:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10e      	bne.n	8005678 <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695a      	ldr	r2, [r3, #20]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0206 	orr.w	r2, r2, #6
 800568e:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005690:	e00f      	b.n	80056b2 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005692:	f7fe f96f 	bl	8003974 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b05      	cmp	r3, #5
 800569e:	d908      	bls.n	80056b2 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2210      	movs	r2, #16
 80056a4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2203      	movs	r2, #3
 80056aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e015      	b.n	80056de <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e8      	bne.n	8005692 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fb1f 	bl	8005d04 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40020050 	.word	0x40020050
 80056ec:	50020050 	.word	0x50020050
 80056f0:	400200d0 	.word	0x400200d0
 80056f4:	500200d0 	.word	0x500200d0
 80056f8:	40020150 	.word	0x40020150
 80056fc:	50020150 	.word	0x50020150
 8005700:	400201d0 	.word	0x400201d0
 8005704:	500201d0 	.word	0x500201d0
 8005708:	40020250 	.word	0x40020250
 800570c:	50020250 	.word	0x50020250
 8005710:	400202d0 	.word	0x400202d0
 8005714:	500202d0 	.word	0x500202d0
 8005718:	40020350 	.word	0x40020350
 800571c:	50020350 	.word	0x50020350
 8005720:	400203d0 	.word	0x400203d0
 8005724:	500203d0 	.word	0x500203d0
 8005728:	40021050 	.word	0x40021050
 800572c:	50021050 	.word	0x50021050
 8005730:	400210d0 	.word	0x400210d0
 8005734:	500210d0 	.word	0x500210d0
 8005738:	40021150 	.word	0x40021150
 800573c:	50021150 	.word	0x50021150
 8005740:	400211d0 	.word	0x400211d0
 8005744:	500211d0 	.word	0x500211d0
 8005748:	40021250 	.word	0x40021250
 800574c:	50021250 	.word	0x50021250
 8005750:	400212d0 	.word	0x400212d0
 8005754:	500212d0 	.word	0x500212d0
 8005758:	40021350 	.word	0x40021350
 800575c:	50021350 	.word	0x50021350
 8005760:	400213d0 	.word	0x400213d0
 8005764:	500213d0 	.word	0x500213d0

08005768 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e055      	b.n	800582c <HAL_DMA_Start_IT+0xc4>
  }

  /* Check the DMA Mode is DMA_NORMAL */
  if (hdma->Mode != DMA_NORMAL)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <HAL_DMA_Start_IT+0x24>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e04f      	b.n	800582c <HAL_DMA_Start_IT+0xc4>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_DMA_Start_IT+0x32>
 8005796:	2302      	movs	r3, #2
 8005798:	e048      	b.n	800582c <HAL_DMA_Start_IT+0xc4>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d136      	bne.n	800581c <HAL_DMA_Start_IT+0xb4>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 fa78 	bl	8005cb8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	695a      	ldr	r2, [r3, #20]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80057d6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d007      	beq.n	80057f0 <HAL_DMA_Start_IT+0x88>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057ee:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <HAL_DMA_Start_IT+0xa0>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695a      	ldr	r2, [r3, #20]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005806:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
 800581a:	e007      	b.n	800582c <HAL_DMA_Start_IT+0xc4>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2240      	movs	r2, #64	@ 0x40
 8005820:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800583c:	f7fe f89a 	bl	8003974 <HAL_GetTick>
 8005840:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e06b      	b.n	8005924 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d008      	beq.n	800586a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e05c      	b.n	8005924 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0204 	orr.w	r2, r2, #4
 8005878:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2205      	movs	r2, #5
 800587e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005882:	e020      	b.n	80058c6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005884:	f7fe f876 	bl	8003974 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b05      	cmp	r3, #5
 8005890:	d919      	bls.n	80058c6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005896:	f043 0210 	orr.w	r2, r3, #16
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2203      	movs	r2, #3
 80058a2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058b6:	2201      	movs	r2, #1
 80058b8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e02e      	b.n	8005924 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0d7      	beq.n	8005884 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0202 	orr.w	r2, r2, #2
 80058e2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2204      	movs	r2, #4
 80058e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80058f4:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005906:	2b00      	cmp	r3, #0
 8005908:	d007      	beq.n	800591a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590e:	2201      	movs	r2, #1
 8005910:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2200      	movs	r2, #0
 8005918:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e019      	b.n	8005972 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d004      	beq.n	8005954 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e00e      	b.n	8005972 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2204      	movs	r2, #4
 8005958:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800596a:	f043 0304 	orr.w	r3, r3, #4
 800596e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b086      	sub	sp, #24
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800598e:	f023 030f 	bic.w	r3, r3, #15
 8005992:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800599c:	3b50      	subs	r3, #80	@ 0x50
 800599e:	09db      	lsrs	r3, r3, #7
 80059a0:	f003 031f 	and.w	r3, r3, #31
 80059a4:	2201      	movs	r2, #1
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4013      	ands	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 813b 	beq.w	8005c34 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d011      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059e2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e8:	f043 0201 	orr.w	r2, r3, #1
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d011      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a14:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a1a:	f043 0202 	orr.w	r2, r3, #2
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d011      	beq.n	8005a54 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005a46:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4c:	f043 0204 	orr.w	r2, r3, #4
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d011      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005a78:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a7e:	f043 0208 	orr.w	r2, r3, #8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d013      	beq.n	8005abc <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00c      	beq.n	8005abc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aaa:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d04c      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d045      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005ae0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d12e      	bne.n	8005b4c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695a      	ldr	r2, [r3, #20]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005afc:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695a      	ldr	r2, [r3, #20]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0202 	orr.w	r2, r2, #2
 8005b0c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d007      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b26:	2201      	movs	r2, #1
 8005b28:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d07a      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	4798      	blx	r3
        }

        return;
 8005b4a:	e075      	b.n	8005c38 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2205      	movs	r2, #5
 8005b50:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d039      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d032      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d012      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d116      	bne.n	8005bc4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d111      	bne.n	8005bc4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bac:	2201      	movs	r2, #1
 8005bae:	731a      	strb	r2, [r3, #12]
 8005bb0:	e008      	b.n	8005bc4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d103      	bne.n	8005bc4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005bcc:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d025      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695a      	ldr	r2, [r3, #20]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0202 	orr.w	r2, r2, #2
 8005bfc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c16:	2201      	movs	r2, #1
 8005c18:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	4798      	blx	r3
 8005c32:	e002      	b.n	8005c3a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8005c34:	bf00      	nop
 8005c36:	e000      	b.n	8005c3a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8005c38:	bf00      	nop
    }
  }
}
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e02b      	b.n	8005cac <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005c5c:	f023 030f 	bic.w	r3, r3, #15
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c6a:	3b50      	subs	r3, #80	@ 0x50
 8005c6c:	09db      	lsrs	r3, r3, #7
 8005c6e:	f003 031f 	and.w	r3, r3, #31
 8005c72:	2201      	movs	r2, #1
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	f003 0310 	and.w	r3, r3, #16
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d012      	beq.n	8005caa <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	f003 0311 	and.w	r3, r3, #17
 8005c8a:	2b11      	cmp	r3, #17
 8005c8c:	d106      	bne.n	8005c9c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	e006      	b.n	8005caa <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	401a      	ands	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ccc:	0c1b      	lsrs	r3, r3, #16
 8005cce:	041b      	lsls	r3, r3, #16
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	b291      	uxth	r1, r2
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005ce4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a53      	ldr	r2, [pc, #332]	@ (8005e90 <DMA_Init+0x18c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	f000 80a0 	beq.w	8005e8a <DMA_Init+0x186>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a51      	ldr	r2, [pc, #324]	@ (8005e94 <DMA_Init+0x190>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	f000 809a 	beq.w	8005e8a <DMA_Init+0x186>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a4f      	ldr	r2, [pc, #316]	@ (8005e98 <DMA_Init+0x194>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	f000 8094 	beq.w	8005e8a <DMA_Init+0x186>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a4d      	ldr	r2, [pc, #308]	@ (8005e9c <DMA_Init+0x198>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	f000 808e 	beq.w	8005e8a <DMA_Init+0x186>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a4b      	ldr	r2, [pc, #300]	@ (8005ea0 <DMA_Init+0x19c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	f000 8088 	beq.w	8005e8a <DMA_Init+0x186>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a49      	ldr	r2, [pc, #292]	@ (8005ea4 <DMA_Init+0x1a0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	f000 8082 	beq.w	8005e8a <DMA_Init+0x186>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a47      	ldr	r2, [pc, #284]	@ (8005ea8 <DMA_Init+0x1a4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d07c      	beq.n	8005e8a <DMA_Init+0x186>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a45      	ldr	r2, [pc, #276]	@ (8005eac <DMA_Init+0x1a8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d077      	beq.n	8005e8a <DMA_Init+0x186>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a44      	ldr	r2, [pc, #272]	@ (8005eb0 <DMA_Init+0x1ac>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d072      	beq.n	8005e8a <DMA_Init+0x186>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a42      	ldr	r2, [pc, #264]	@ (8005eb4 <DMA_Init+0x1b0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d06d      	beq.n	8005e8a <DMA_Init+0x186>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a41      	ldr	r2, [pc, #260]	@ (8005eb8 <DMA_Init+0x1b4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d068      	beq.n	8005e8a <DMA_Init+0x186>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8005ebc <DMA_Init+0x1b8>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d063      	beq.n	8005e8a <DMA_Init+0x186>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a3e      	ldr	r2, [pc, #248]	@ (8005ec0 <DMA_Init+0x1bc>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d05e      	beq.n	8005e8a <DMA_Init+0x186>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a3c      	ldr	r2, [pc, #240]	@ (8005ec4 <DMA_Init+0x1c0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d059      	beq.n	8005e8a <DMA_Init+0x186>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a3b      	ldr	r2, [pc, #236]	@ (8005ec8 <DMA_Init+0x1c4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d054      	beq.n	8005e8a <DMA_Init+0x186>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a39      	ldr	r2, [pc, #228]	@ (8005ecc <DMA_Init+0x1c8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d04f      	beq.n	8005e8a <DMA_Init+0x186>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a38      	ldr	r2, [pc, #224]	@ (8005ed0 <DMA_Init+0x1cc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d04a      	beq.n	8005e8a <DMA_Init+0x186>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a36      	ldr	r2, [pc, #216]	@ (8005ed4 <DMA_Init+0x1d0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d045      	beq.n	8005e8a <DMA_Init+0x186>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a35      	ldr	r2, [pc, #212]	@ (8005ed8 <DMA_Init+0x1d4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d040      	beq.n	8005e8a <DMA_Init+0x186>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a33      	ldr	r2, [pc, #204]	@ (8005edc <DMA_Init+0x1d8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d03b      	beq.n	8005e8a <DMA_Init+0x186>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a32      	ldr	r2, [pc, #200]	@ (8005ee0 <DMA_Init+0x1dc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d036      	beq.n	8005e8a <DMA_Init+0x186>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a30      	ldr	r2, [pc, #192]	@ (8005ee4 <DMA_Init+0x1e0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d031      	beq.n	8005e8a <DMA_Init+0x186>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ee8 <DMA_Init+0x1e4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d02c      	beq.n	8005e8a <DMA_Init+0x186>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a2d      	ldr	r2, [pc, #180]	@ (8005eec <DMA_Init+0x1e8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d027      	beq.n	8005e8a <DMA_Init+0x186>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ef0 <DMA_Init+0x1ec>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d022      	beq.n	8005e8a <DMA_Init+0x186>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2a      	ldr	r2, [pc, #168]	@ (8005ef4 <DMA_Init+0x1f0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01d      	beq.n	8005e8a <DMA_Init+0x186>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a29      	ldr	r2, [pc, #164]	@ (8005ef8 <DMA_Init+0x1f4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d018      	beq.n	8005e8a <DMA_Init+0x186>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a27      	ldr	r2, [pc, #156]	@ (8005efc <DMA_Init+0x1f8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <DMA_Init+0x186>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a26      	ldr	r2, [pc, #152]	@ (8005f00 <DMA_Init+0x1fc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00e      	beq.n	8005e8a <DMA_Init+0x186>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a24      	ldr	r2, [pc, #144]	@ (8005f04 <DMA_Init+0x200>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <DMA_Init+0x186>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a23      	ldr	r2, [pc, #140]	@ (8005f08 <DMA_Init+0x204>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <DMA_Init+0x186>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a21      	ldr	r2, [pc, #132]	@ (8005f0c <DMA_Init+0x208>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d142      	bne.n	8005f10 <DMA_Init+0x20c>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e041      	b.n	8005f12 <DMA_Init+0x20e>
 8005e8e:	bf00      	nop
 8005e90:	40020050 	.word	0x40020050
 8005e94:	50020050 	.word	0x50020050
 8005e98:	400200d0 	.word	0x400200d0
 8005e9c:	500200d0 	.word	0x500200d0
 8005ea0:	40020150 	.word	0x40020150
 8005ea4:	50020150 	.word	0x50020150
 8005ea8:	400201d0 	.word	0x400201d0
 8005eac:	500201d0 	.word	0x500201d0
 8005eb0:	40020250 	.word	0x40020250
 8005eb4:	50020250 	.word	0x50020250
 8005eb8:	400202d0 	.word	0x400202d0
 8005ebc:	500202d0 	.word	0x500202d0
 8005ec0:	40020350 	.word	0x40020350
 8005ec4:	50020350 	.word	0x50020350
 8005ec8:	400203d0 	.word	0x400203d0
 8005ecc:	500203d0 	.word	0x500203d0
 8005ed0:	40021050 	.word	0x40021050
 8005ed4:	50021050 	.word	0x50021050
 8005ed8:	400210d0 	.word	0x400210d0
 8005edc:	500210d0 	.word	0x500210d0
 8005ee0:	40021150 	.word	0x40021150
 8005ee4:	50021150 	.word	0x50021150
 8005ee8:	400211d0 	.word	0x400211d0
 8005eec:	500211d0 	.word	0x500211d0
 8005ef0:	40021250 	.word	0x40021250
 8005ef4:	50021250 	.word	0x50021250
 8005ef8:	400212d0 	.word	0x400212d0
 8005efc:	500212d0 	.word	0x500212d0
 8005f00:	40021350 	.word	0x40021350
 8005f04:	50021350 	.word	0x50021350
 8005f08:	400213d0 	.word	0x400213d0
 8005f0c:	500213d0 	.word	0x500213d0
 8005f10:	2300      	movs	r3, #0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d012      	beq.n	8005f3c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	051b      	lsls	r3, r3, #20
 8005f22:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005f26:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8005f34:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f42:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f6c:	f040 80b0 	bne.w	80060d0 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a84      	ldr	r2, [pc, #528]	@ (8006188 <DMA_Init+0x484>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	f000 80a0 	beq.w	80060bc <DMA_Init+0x3b8>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a82      	ldr	r2, [pc, #520]	@ (800618c <DMA_Init+0x488>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	f000 809a 	beq.w	80060bc <DMA_Init+0x3b8>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a80      	ldr	r2, [pc, #512]	@ (8006190 <DMA_Init+0x48c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	f000 8094 	beq.w	80060bc <DMA_Init+0x3b8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a7e      	ldr	r2, [pc, #504]	@ (8006194 <DMA_Init+0x490>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	f000 808e 	beq.w	80060bc <DMA_Init+0x3b8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a7c      	ldr	r2, [pc, #496]	@ (8006198 <DMA_Init+0x494>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	f000 8088 	beq.w	80060bc <DMA_Init+0x3b8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a7a      	ldr	r2, [pc, #488]	@ (800619c <DMA_Init+0x498>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	f000 8082 	beq.w	80060bc <DMA_Init+0x3b8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a78      	ldr	r2, [pc, #480]	@ (80061a0 <DMA_Init+0x49c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d07c      	beq.n	80060bc <DMA_Init+0x3b8>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a77      	ldr	r2, [pc, #476]	@ (80061a4 <DMA_Init+0x4a0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d077      	beq.n	80060bc <DMA_Init+0x3b8>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a75      	ldr	r2, [pc, #468]	@ (80061a8 <DMA_Init+0x4a4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d072      	beq.n	80060bc <DMA_Init+0x3b8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a74      	ldr	r2, [pc, #464]	@ (80061ac <DMA_Init+0x4a8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d06d      	beq.n	80060bc <DMA_Init+0x3b8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a72      	ldr	r2, [pc, #456]	@ (80061b0 <DMA_Init+0x4ac>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d068      	beq.n	80060bc <DMA_Init+0x3b8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a71      	ldr	r2, [pc, #452]	@ (80061b4 <DMA_Init+0x4b0>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d063      	beq.n	80060bc <DMA_Init+0x3b8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a6f      	ldr	r2, [pc, #444]	@ (80061b8 <DMA_Init+0x4b4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d05e      	beq.n	80060bc <DMA_Init+0x3b8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a6e      	ldr	r2, [pc, #440]	@ (80061bc <DMA_Init+0x4b8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d059      	beq.n	80060bc <DMA_Init+0x3b8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a6c      	ldr	r2, [pc, #432]	@ (80061c0 <DMA_Init+0x4bc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d054      	beq.n	80060bc <DMA_Init+0x3b8>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a6b      	ldr	r2, [pc, #428]	@ (80061c4 <DMA_Init+0x4c0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d04f      	beq.n	80060bc <DMA_Init+0x3b8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a69      	ldr	r2, [pc, #420]	@ (80061c8 <DMA_Init+0x4c4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d04a      	beq.n	80060bc <DMA_Init+0x3b8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a68      	ldr	r2, [pc, #416]	@ (80061cc <DMA_Init+0x4c8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d045      	beq.n	80060bc <DMA_Init+0x3b8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a66      	ldr	r2, [pc, #408]	@ (80061d0 <DMA_Init+0x4cc>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d040      	beq.n	80060bc <DMA_Init+0x3b8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a65      	ldr	r2, [pc, #404]	@ (80061d4 <DMA_Init+0x4d0>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d03b      	beq.n	80060bc <DMA_Init+0x3b8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a63      	ldr	r2, [pc, #396]	@ (80061d8 <DMA_Init+0x4d4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d036      	beq.n	80060bc <DMA_Init+0x3b8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a62      	ldr	r2, [pc, #392]	@ (80061dc <DMA_Init+0x4d8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d031      	beq.n	80060bc <DMA_Init+0x3b8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a60      	ldr	r2, [pc, #384]	@ (80061e0 <DMA_Init+0x4dc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d02c      	beq.n	80060bc <DMA_Init+0x3b8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a5f      	ldr	r2, [pc, #380]	@ (80061e4 <DMA_Init+0x4e0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d027      	beq.n	80060bc <DMA_Init+0x3b8>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a5d      	ldr	r2, [pc, #372]	@ (80061e8 <DMA_Init+0x4e4>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d022      	beq.n	80060bc <DMA_Init+0x3b8>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a5c      	ldr	r2, [pc, #368]	@ (80061ec <DMA_Init+0x4e8>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d01d      	beq.n	80060bc <DMA_Init+0x3b8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a5a      	ldr	r2, [pc, #360]	@ (80061f0 <DMA_Init+0x4ec>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d018      	beq.n	80060bc <DMA_Init+0x3b8>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a59      	ldr	r2, [pc, #356]	@ (80061f4 <DMA_Init+0x4f0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d013      	beq.n	80060bc <DMA_Init+0x3b8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a57      	ldr	r2, [pc, #348]	@ (80061f8 <DMA_Init+0x4f4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00e      	beq.n	80060bc <DMA_Init+0x3b8>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a56      	ldr	r2, [pc, #344]	@ (80061fc <DMA_Init+0x4f8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d009      	beq.n	80060bc <DMA_Init+0x3b8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a54      	ldr	r2, [pc, #336]	@ (8006200 <DMA_Init+0x4fc>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d004      	beq.n	80060bc <DMA_Init+0x3b8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a53      	ldr	r2, [pc, #332]	@ (8006204 <DMA_Init+0x500>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d101      	bne.n	80060c0 <DMA_Init+0x3bc>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <DMA_Init+0x3be>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	e008      	b.n	80060e2 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060d8:	d103      	bne.n	80060e2 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060e0:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060f2:	4b45      	ldr	r3, [pc, #276]	@ (8006208 <DMA_Init+0x504>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	68f9      	ldr	r1, [r7, #12]
 80060fc:	430b      	orrs	r3, r1
 80060fe:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2200      	movs	r2, #0
 8006106:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2a      	ldr	r2, [pc, #168]	@ (80061b8 <DMA_Init+0x4b4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d022      	beq.n	8006158 <DMA_Init+0x454>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a29      	ldr	r2, [pc, #164]	@ (80061bc <DMA_Init+0x4b8>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d01d      	beq.n	8006158 <DMA_Init+0x454>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a27      	ldr	r2, [pc, #156]	@ (80061c0 <DMA_Init+0x4bc>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d018      	beq.n	8006158 <DMA_Init+0x454>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a26      	ldr	r2, [pc, #152]	@ (80061c4 <DMA_Init+0x4c0>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d013      	beq.n	8006158 <DMA_Init+0x454>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a30      	ldr	r2, [pc, #192]	@ (80061f8 <DMA_Init+0x4f4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00e      	beq.n	8006158 <DMA_Init+0x454>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a2f      	ldr	r2, [pc, #188]	@ (80061fc <DMA_Init+0x4f8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d009      	beq.n	8006158 <DMA_Init+0x454>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a2d      	ldr	r2, [pc, #180]	@ (8006200 <DMA_Init+0x4fc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d004      	beq.n	8006158 <DMA_Init+0x454>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a2c      	ldr	r2, [pc, #176]	@ (8006204 <DMA_Init+0x500>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d101      	bne.n	800615c <DMA_Init+0x458>
 8006158:	2301      	movs	r3, #1
 800615a:	e000      	b.n	800615e <DMA_Init+0x45a>
 800615c:	2300      	movs	r3, #0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d007      	beq.n	8006172 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2200      	movs	r2, #0
 8006168:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2200      	movs	r2, #0
 8006170:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2200      	movs	r2, #0
 8006178:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800617a:	bf00      	nop
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	40020050 	.word	0x40020050
 800618c:	50020050 	.word	0x50020050
 8006190:	400200d0 	.word	0x400200d0
 8006194:	500200d0 	.word	0x500200d0
 8006198:	40020150 	.word	0x40020150
 800619c:	50020150 	.word	0x50020150
 80061a0:	400201d0 	.word	0x400201d0
 80061a4:	500201d0 	.word	0x500201d0
 80061a8:	40020250 	.word	0x40020250
 80061ac:	50020250 	.word	0x50020250
 80061b0:	400202d0 	.word	0x400202d0
 80061b4:	500202d0 	.word	0x500202d0
 80061b8:	40020350 	.word	0x40020350
 80061bc:	50020350 	.word	0x50020350
 80061c0:	400203d0 	.word	0x400203d0
 80061c4:	500203d0 	.word	0x500203d0
 80061c8:	40021050 	.word	0x40021050
 80061cc:	50021050 	.word	0x50021050
 80061d0:	400210d0 	.word	0x400210d0
 80061d4:	500210d0 	.word	0x500210d0
 80061d8:	40021150 	.word	0x40021150
 80061dc:	50021150 	.word	0x50021150
 80061e0:	400211d0 	.word	0x400211d0
 80061e4:	500211d0 	.word	0x500211d0
 80061e8:	40021250 	.word	0x40021250
 80061ec:	50021250 	.word	0x50021250
 80061f0:	400212d0 	.word	0x400212d0
 80061f4:	500212d0 	.word	0x500212d0
 80061f8:	40021350 	.word	0x40021350
 80061fc:	50021350 	.word	0x50021350
 8006200:	400213d0 	.word	0x400213d0
 8006204:	500213d0 	.word	0x500213d0
 8006208:	3cc02100 	.word	0x3cc02100

0800620c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d003      	beq.n	8006222 <HAL_DMAEx_List_Start_IT+0x16>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e088      	b.n	8006338 <HAL_DMAEx_List_Start_IT+0x12c>
  }

  /* Check the DMA Mode is not DMA_NORMAL */
  if (hdma->Mode == DMA_NORMAL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_DMAEx_List_Start_IT+0x26>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e082      	b.n	8006338 <HAL_DMAEx_List_Start_IT+0x12c>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006238:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006244:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d005      	beq.n	8006258 <HAL_DMAEx_List_Start_IT+0x4c>
 800624c:	7dfb      	ldrb	r3, [r7, #23]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d16a      	bne.n	8006328 <HAL_DMAEx_List_Start_IT+0x11c>
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d067      	beq.n	8006328 <HAL_DMAEx_List_Start_IT+0x11c>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b01      	cmp	r3, #1
 8006262:	d157      	bne.n	8006314 <HAL_DMAEx_List_Start_IT+0x108>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_DMAEx_List_Start_IT+0x66>
 800626e:	2302      	movs	r3, #2
 8006270:	e062      	b.n	8006338 <HAL_DMAEx_List_Start_IT+0x12c>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2202      	movs	r2, #2
 800627e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006286:	2202      	movs	r2, #2
 8006288:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006294:	2200      	movs	r2, #0
 8006296:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695a      	ldr	r2, [r3, #20]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80062a6:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d007      	beq.n	80062c0 <HAL_DMAEx_List_Start_IT+0xb4>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062be:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <HAL_DMAEx_List_Start_IT+0xcc>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695a      	ldr	r2, [r3, #20]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062d6:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f107 010c 	add.w	r1, r7, #12
 80062e2:	2200      	movs	r2, #0
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 f94b 	bl	8006580 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4619      	mov	r1, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	0c0b      	lsrs	r3, r1, #16
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006308:	4013      	ands	r3, r2
 800630a:	68f9      	ldr	r1, [r7, #12]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	430b      	orrs	r3, r1
 8006312:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695a      	ldr	r2, [r3, #20]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0201 	orr.w	r2, r2, #1
 8006322:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	e007      	b.n	8006338 <HAL_DMAEx_List_Start_IT+0x12c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2240      	movs	r2, #64	@ 0x40
 800632c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
}
 8006338:	4618      	mov	r0, r3
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e004      	b.n	8006364 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f805 	bl	800636c <DMA_List_GetNodeConfig>

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	b2da      	uxtb	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0208 	and.w	r2, r3, #8
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0203 	and.w	r2, r3, #3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063ba:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80063c4:	0d1b      	lsrs	r3, r3, #20
 80063c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063ca:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	4b66      	ldr	r3, [pc, #408]	@ (800657c <DMA_List_GetNodeConfig+0x210>)
 80063e2:	4013      	ands	r3, r2
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006406:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800640e:	60da      	str	r2, [r3, #12]
 8006410:	e012      	b.n	8006438 <DMA_List_GetNodeConfig+0xcc>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006424:	2b00      	cmp	r3, #0
 8006426:	d004      	beq.n	8006432 <DMA_List_GetNodeConfig+0xc6>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800642e:	60da      	str	r2, [r3, #12]
 8006430:	e002      	b.n	8006438 <DMA_List_GetNodeConfig+0xcc>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8006460:	0c1b      	lsrs	r3, r3, #16
 8006462:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	b29a      	uxth	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d008      	beq.n	800649e <DMA_List_GetNodeConfig+0x132>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	0c1b      	lsrs	r3, r3, #16
 8006492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006496:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800649c:	e002      	b.n	80064a4 <DMA_List_GetNodeConfig+0x138>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d04a      	beq.n	8006556 <DMA_List_GetNodeConfig+0x1ea>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064ca:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80064cc:	89fa      	ldrh	r2, [r7, #14]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	0c1b      	lsrs	r3, r3, #16
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064de:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 80064e0:	89fa      	ldrh	r2, [r7, #14]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <DMA_List_GetNodeConfig+0x190>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064f6:	425a      	negs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d004      	beq.n	8006512 <DMA_List_GetNodeConfig+0x1a6>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800650c:	425a      	negs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8006518:	89fa      	ldrh	r2, [r7, #14]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	0c1b      	lsrs	r3, r3, #16
 8006524:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8006526:	89fa      	ldrh	r2, [r7, #14]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d004      	beq.n	8006542 <DMA_List_GetNodeConfig+0x1d6>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800653c:	425a      	negs	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	da11      	bge.n	800656e <DMA_List_GetNodeConfig+0x202>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800654e:	425a      	negs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8006554:	e00b      	b.n	800656e <DMA_List_GetNodeConfig+0x202>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800656e:	bf00      	nop
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	0c002000 	.word	0x0c002000

08006580 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00c      	beq.n	80065b2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4a0d      	ldr	r2, [pc, #52]	@ (80065d8 <DMA_List_GetCLLRNodeInfo+0x58>)
 80065a2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00f      	beq.n	80065ca <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2207      	movs	r2, #7
 80065ae:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80065b0:	e00b      	b.n	80065ca <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	4a08      	ldr	r2, [pc, #32]	@ (80065dc <DMA_List_GetCLLRNodeInfo+0x5c>)
 80065bc:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2205      	movs	r2, #5
 80065c8:	601a      	str	r2, [r3, #0]
}
 80065ca:	bf00      	nop
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	fe010000 	.word	0xfe010000
 80065dc:	f8010000 	.word	0xf8010000

080065e0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80065ee:	e142      	b.n	8006876 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	2101      	movs	r1, #1
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	fa01 f303 	lsl.w	r3, r1, r3
 80065fc:	4013      	ands	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 8134 	beq.w	8006870 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d003      	beq.n	8006618 <HAL_GPIO_Init+0x38>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b12      	cmp	r3, #18
 8006616:	d125      	bne.n	8006664 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	08da      	lsrs	r2, r3, #3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3208      	adds	r2, #8
 8006620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006624:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	220f      	movs	r2, #15
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	43db      	mvns	r3, r3
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4013      	ands	r3, r2
 800663a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f003 020f 	and.w	r2, r3, #15
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	08da      	lsrs	r2, r3, #3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3208      	adds	r2, #8
 800665e:	6979      	ldr	r1, [r7, #20]
 8006660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	2203      	movs	r2, #3
 8006670:	fa02 f303 	lsl.w	r3, r2, r3
 8006674:	43db      	mvns	r3, r3
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4013      	ands	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f003 0203 	and.w	r2, r3, #3
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d00b      	beq.n	80066b8 <HAL_GPIO_Init+0xd8>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d007      	beq.n	80066b8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066ac:	2b11      	cmp	r3, #17
 80066ae:	d003      	beq.n	80066b8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b12      	cmp	r3, #18
 80066b6:	d130      	bne.n	800671a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	2203      	movs	r2, #3
 80066c4:	fa02 f303 	lsl.w	r3, r2, r3
 80066c8:	43db      	mvns	r3, r3
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4013      	ands	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066ee:	2201      	movs	r2, #1
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	43db      	mvns	r3, r3
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4013      	ands	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	091b      	lsrs	r3, r3, #4
 8006704:	f003 0201 	and.w	r2, r3, #1
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	2b03      	cmp	r3, #3
 8006724:	d109      	bne.n	800673a <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800672e:	2b03      	cmp	r3, #3
 8006730:	d11b      	bne.n	800676a <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d017      	beq.n	800676a <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	2203      	movs	r2, #3
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	43db      	mvns	r3, r3
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	4013      	ands	r3, r2
 8006750:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d07c      	beq.n	8006870 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8006776:	4a47      	ldr	r2, [pc, #284]	@ (8006894 <HAL_GPIO_Init+0x2b4>)
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	089b      	lsrs	r3, r3, #2
 800677c:	3318      	adds	r3, #24
 800677e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006782:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	220f      	movs	r2, #15
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	43db      	mvns	r3, r3
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4013      	ands	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	0a9a      	lsrs	r2, r3, #10
 800679e:	4b3e      	ldr	r3, [pc, #248]	@ (8006898 <HAL_GPIO_Init+0x2b8>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	f002 0203 	and.w	r2, r2, #3
 80067a8:	00d2      	lsls	r2, r2, #3
 80067aa:	4093      	lsls	r3, r2
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80067b2:	4938      	ldr	r1, [pc, #224]	@ (8006894 <HAL_GPIO_Init+0x2b4>)
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	089b      	lsrs	r3, r3, #2
 80067b8:	3318      	adds	r3, #24
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80067c0:	4b34      	ldr	r3, [pc, #208]	@ (8006894 <HAL_GPIO_Init+0x2b4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	43db      	mvns	r3, r3
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	4013      	ands	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80067e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006894 <HAL_GPIO_Init+0x2b4>)
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80067ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006894 <HAL_GPIO_Init+0x2b4>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	43db      	mvns	r3, r3
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	4013      	ands	r3, r2
 80067f8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800680e:	4a21      	ldr	r2, [pc, #132]	@ (8006894 <HAL_GPIO_Init+0x2b4>)
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006814:	4b1f      	ldr	r3, [pc, #124]	@ (8006894 <HAL_GPIO_Init+0x2b4>)
 8006816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800681a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	43db      	mvns	r3, r3
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4013      	ands	r3, r2
 8006824:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800683a:	4a16      	ldr	r2, [pc, #88]	@ (8006894 <HAL_GPIO_Init+0x2b4>)
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8006842:	4b14      	ldr	r3, [pc, #80]	@ (8006894 <HAL_GPIO_Init+0x2b4>)
 8006844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006848:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	43db      	mvns	r3, r3
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4013      	ands	r3, r2
 8006852:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8006868:	4a0a      	ldr	r2, [pc, #40]	@ (8006894 <HAL_GPIO_Init+0x2b4>)
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	3301      	adds	r3, #1
 8006874:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	fa22 f303 	lsr.w	r3, r2, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	f47f aeb5 	bne.w	80065f0 <HAL_GPIO_Init+0x10>
  }
}
 8006886:	bf00      	nop
 8006888:	bf00      	nop
 800688a:	371c      	adds	r7, #28
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	44022000 	.word	0x44022000
 8006898:	002f7f7f 	.word	0x002f7f7f

0800689c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691a      	ldr	r2, [r3, #16]
 80068ac:	887b      	ldrh	r3, [r7, #2]
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068b4:	2301      	movs	r3, #1
 80068b6:	73fb      	strb	r3, [r7, #15]
 80068b8:	e001      	b.n	80068be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068be:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	807b      	strh	r3, [r7, #2]
 80068d8:	4613      	mov	r3, r2
 80068da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80068dc:	787b      	ldrb	r3, [r7, #1]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80068e2:	887a      	ldrh	r2, [r7, #2]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80068e8:	e002      	b.n	80068f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80068ea:	887a      	ldrh	r2, [r7, #2]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e08d      	b.n	8006a2a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fc f8a2 	bl	8002a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2224      	movs	r2, #36	@ 0x24
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0201 	bic.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800694c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800695c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d107      	bne.n	8006976 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006972:	609a      	str	r2, [r3, #8]
 8006974:	e006      	b.n	8006984 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006982:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b02      	cmp	r3, #2
 800698a:	d108      	bne.n	800699e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800699a:	605a      	str	r2, [r3, #4]
 800699c:	e007      	b.n	80069ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80069bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80069d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691a      	ldr	r2, [r3, #16]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	69d9      	ldr	r1, [r3, #28]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1a      	ldr	r2, [r3, #32]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d138      	bne.n	8006aba <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e032      	b.n	8006abc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2224      	movs	r2, #36	@ 0x24
 8006a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0201 	bic.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006a84:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6819      	ldr	r1, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	430a      	orrs	r2, r1
 8006a94:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f042 0201 	orr.w	r2, r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e000      	b.n	8006abc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006aba:	2302      	movs	r3, #2
  }
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d139      	bne.n	8006b52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e033      	b.n	8006b54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2224      	movs	r2, #36	@ 0x24
 8006af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0201 	bic.w	r2, r2, #1
 8006b0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006b1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	e000      	b.n	8006b54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b52:	2302      	movs	r3, #2
  }
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b9c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	73fb      	strb	r3, [r7, #15]
 8006b7c:	e007      	b.n	8006b8e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8006b7e:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f023 0204 	bic.w	r2, r3, #4
 8006b86:	4905      	ldr	r1, [pc, #20]	@ (8006b9c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	40030400 	.word	0x40030400

08006ba0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006ba4:	4b05      	ldr	r3, [pc, #20]	@ (8006bbc <HAL_ICACHE_Enable+0x1c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a04      	ldr	r2, [pc, #16]	@ (8006bbc <HAL_ICACHE_Enable+0x1c>)
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	40030400 	.word	0x40030400

08006bc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8006bc4:	4b05      	ldr	r3, [pc, #20]	@ (8006bdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc8:	4a04      	ldr	r2, [pc, #16]	@ (8006bdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8006bd0:	bf00      	nop
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	44020800 	.word	0x44020800

08006be0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d102      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	f000 bc28 	b.w	8007444 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bf4:	4b94      	ldr	r3, [pc, #592]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f003 0318 	and.w	r3, r3, #24
 8006bfc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8006bfe:	4b92      	ldr	r3, [pc, #584]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0310 	and.w	r3, r3, #16
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d05b      	beq.n	8006ccc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	2b08      	cmp	r3, #8
 8006c18:	d005      	beq.n	8006c26 <HAL_RCC_OscConfig+0x46>
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	2b18      	cmp	r3, #24
 8006c1e:	d114      	bne.n	8006c4a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d111      	bne.n	8006c4a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f000 bc08 	b.w	8007444 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006c34:	4b84      	ldr	r3, [pc, #528]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	041b      	lsls	r3, r3, #16
 8006c42:	4981      	ldr	r1, [pc, #516]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006c48:	e040      	b.n	8006ccc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d023      	beq.n	8006c9a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c52:	4b7d      	ldr	r3, [pc, #500]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a7c      	ldr	r2, [pc, #496]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5e:	f7fc fe89 	bl	8003974 <HAL_GetTick>
 8006c62:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8006c66:	f7fc fe85 	bl	8003974 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e3e5      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8006c78:	4b73      	ldr	r3, [pc, #460]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0f0      	beq.n	8006c66 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006c84:	4b70      	ldr	r3, [pc, #448]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	041b      	lsls	r3, r3, #16
 8006c92:	496d      	ldr	r1, [pc, #436]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	618b      	str	r3, [r1, #24]
 8006c98:	e018      	b.n	8006ccc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006c9a:	4b6b      	ldr	r3, [pc, #428]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a6a      	ldr	r2, [pc, #424]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca6:	f7fc fe65 	bl	8003974 <HAL_GetTick>
 8006caa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8006cae:	f7fc fe61 	bl	8003974 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e3c1      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006cc0:	4b61      	ldr	r3, [pc, #388]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1f0      	bne.n	8006cae <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80a0 	beq.w	8006e1a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	d005      	beq.n	8006cec <HAL_RCC_OscConfig+0x10c>
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	2b18      	cmp	r3, #24
 8006ce4:	d109      	bne.n	8006cfa <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d106      	bne.n	8006cfa <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f040 8092 	bne.w	8006e1a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e3a4      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d02:	d106      	bne.n	8006d12 <HAL_RCC_OscConfig+0x132>
 8006d04:	4b50      	ldr	r3, [pc, #320]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a4f      	ldr	r2, [pc, #316]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	e058      	b.n	8006dc4 <HAL_RCC_OscConfig+0x1e4>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d112      	bne.n	8006d40 <HAL_RCC_OscConfig+0x160>
 8006d1a:	4b4b      	ldr	r3, [pc, #300]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	4b48      	ldr	r3, [pc, #288]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a47      	ldr	r2, [pc, #284]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	4b45      	ldr	r3, [pc, #276]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a44      	ldr	r2, [pc, #272]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	e041      	b.n	8006dc4 <HAL_RCC_OscConfig+0x1e4>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d48:	d112      	bne.n	8006d70 <HAL_RCC_OscConfig+0x190>
 8006d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	4b3c      	ldr	r3, [pc, #240]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a3b      	ldr	r2, [pc, #236]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	4b39      	ldr	r3, [pc, #228]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a38      	ldr	r2, [pc, #224]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	e029      	b.n	8006dc4 <HAL_RCC_OscConfig+0x1e4>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006d78:	d112      	bne.n	8006da0 <HAL_RCC_OscConfig+0x1c0>
 8006d7a:	4b33      	ldr	r3, [pc, #204]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a32      	ldr	r2, [pc, #200]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	4b30      	ldr	r3, [pc, #192]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	4b2d      	ldr	r3, [pc, #180]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a2c      	ldr	r2, [pc, #176]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	e011      	b.n	8006dc4 <HAL_RCC_OscConfig+0x1e4>
 8006da0:	4b29      	ldr	r3, [pc, #164]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a28      	ldr	r2, [pc, #160]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	4b26      	ldr	r3, [pc, #152]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a25      	ldr	r2, [pc, #148]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	4b23      	ldr	r3, [pc, #140]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a22      	ldr	r2, [pc, #136]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006dbe:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d013      	beq.n	8006df4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dcc:	f7fc fdd2 	bl	8003974 <HAL_GetTick>
 8006dd0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006dd4:	f7fc fdce 	bl	8003974 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b64      	cmp	r3, #100	@ 0x64
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e32e      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006de6:	4b18      	ldr	r3, [pc, #96]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0f0      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x1f4>
 8006df2:	e012      	b.n	8006e1a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df4:	f7fc fdbe 	bl	8003974 <HAL_GetTick>
 8006df8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006dfc:	f7fc fdba 	bl	8003974 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b64      	cmp	r3, #100	@ 0x64
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e31a      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006e48 <HAL_RCC_OscConfig+0x268>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1f0      	bne.n	8006dfc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 809a 	beq.w	8006f5c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d005      	beq.n	8006e3a <HAL_RCC_OscConfig+0x25a>
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	2b18      	cmp	r3, #24
 8006e32:	d149      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d146      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d104      	bne.n	8006e4c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e2fe      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
 8006e46:	bf00      	nop
 8006e48:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d11c      	bne.n	8006e8c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8006e52:	4b9a      	ldr	r3, [pc, #616]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0218 	and.w	r2, r3, #24
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d014      	beq.n	8006e8c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006e62:	4b96      	ldr	r3, [pc, #600]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f023 0218 	bic.w	r2, r3, #24
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	4993      	ldr	r1, [pc, #588]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8006e74:	f000 fdd0 	bl	8007a18 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e78:	4b91      	ldr	r3, [pc, #580]	@ (80070c0 <HAL_RCC_OscConfig+0x4e0>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fc fb43 	bl	8003508 <HAL_InitTick>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e2db      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8c:	f7fc fd72 	bl	8003974 <HAL_GetTick>
 8006e90:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e92:	e008      	b.n	8006ea6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006e94:	f7fc fd6e 	bl	8003974 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d901      	bls.n	8006ea6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e2ce      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ea6:	4b85      	ldr	r3, [pc, #532]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d0f0      	beq.n	8006e94 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006eb2:	4b82      	ldr	r3, [pc, #520]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	041b      	lsls	r3, r3, #16
 8006ec0:	497e      	ldr	r1, [pc, #504]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006ec6:	e049      	b.n	8006f5c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d02c      	beq.n	8006f2a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006ed0:	4b7a      	ldr	r3, [pc, #488]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f023 0218 	bic.w	r2, r3, #24
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	4977      	ldr	r1, [pc, #476]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8006ee2:	4b76      	ldr	r3, [pc, #472]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a75      	ldr	r2, [pc, #468]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006ee8:	f043 0301 	orr.w	r3, r3, #1
 8006eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eee:	f7fc fd41 	bl	8003974 <HAL_GetTick>
 8006ef2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ef4:	e008      	b.n	8006f08 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006ef6:	f7fc fd3d 	bl	8003974 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e29d      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f08:	4b6c      	ldr	r3, [pc, #432]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0f0      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006f14:	4b69      	ldr	r3, [pc, #420]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	041b      	lsls	r3, r3, #16
 8006f22:	4966      	ldr	r1, [pc, #408]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	610b      	str	r3, [r1, #16]
 8006f28:	e018      	b.n	8006f5c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f2a:	4b64      	ldr	r3, [pc, #400]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a63      	ldr	r2, [pc, #396]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f30:	f023 0301 	bic.w	r3, r3, #1
 8006f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f36:	f7fc fd1d 	bl	8003974 <HAL_GetTick>
 8006f3a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006f3e:	f7fc fd19 	bl	8003974 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e279      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f50:	4b5a      	ldr	r3, [pc, #360]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1f0      	bne.n	8006f3e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0308 	and.w	r3, r3, #8
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d03c      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01c      	beq.n	8006faa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f70:	4b52      	ldr	r3, [pc, #328]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f76:	4a51      	ldr	r2, [pc, #324]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f7c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f80:	f7fc fcf8 	bl	8003974 <HAL_GetTick>
 8006f84:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006f86:	e008      	b.n	8006f9a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006f88:	f7fc fcf4 	bl	8003974 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e254      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006f9a:	4b48      	ldr	r3, [pc, #288]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0ef      	beq.n	8006f88 <HAL_RCC_OscConfig+0x3a8>
 8006fa8:	e01b      	b.n	8006fe2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006faa:	4b44      	ldr	r3, [pc, #272]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fb0:	4a42      	ldr	r2, [pc, #264]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006fb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fba:	f7fc fcdb 	bl	8003974 <HAL_GetTick>
 8006fbe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006fc2:	f7fc fcd7 	bl	8003974 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d901      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e237      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006fd4:	4b39      	ldr	r3, [pc, #228]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1ef      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 80d2 	beq.w	8007194 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006ff0:	4b34      	ldr	r3, [pc, #208]	@ (80070c4 <HAL_RCC_OscConfig+0x4e4>)
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff4:	f003 0301 	and.w	r3, r3, #1
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d118      	bne.n	800702e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006ffc:	4b31      	ldr	r3, [pc, #196]	@ (80070c4 <HAL_RCC_OscConfig+0x4e4>)
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007000:	4a30      	ldr	r2, [pc, #192]	@ (80070c4 <HAL_RCC_OscConfig+0x4e4>)
 8007002:	f043 0301 	orr.w	r3, r3, #1
 8007006:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007008:	f7fc fcb4 	bl	8003974 <HAL_GetTick>
 800700c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007010:	f7fc fcb0 	bl	8003974 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e210      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007022:	4b28      	ldr	r3, [pc, #160]	@ (80070c4 <HAL_RCC_OscConfig+0x4e4>)
 8007024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0f0      	beq.n	8007010 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d108      	bne.n	8007048 <HAL_RCC_OscConfig+0x468>
 8007036:	4b21      	ldr	r3, [pc, #132]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800703c:	4a1f      	ldr	r2, [pc, #124]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 800703e:	f043 0301 	orr.w	r3, r3, #1
 8007042:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007046:	e074      	b.n	8007132 <HAL_RCC_OscConfig+0x552>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d118      	bne.n	8007082 <HAL_RCC_OscConfig+0x4a2>
 8007050:	4b1a      	ldr	r3, [pc, #104]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007056:	4a19      	ldr	r2, [pc, #100]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007058:	f023 0301 	bic.w	r3, r3, #1
 800705c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007060:	4b16      	ldr	r3, [pc, #88]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007066:	4a15      	ldr	r2, [pc, #84]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800706c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007070:	4b12      	ldr	r3, [pc, #72]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007076:	4a11      	ldr	r2, [pc, #68]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007078:	f023 0304 	bic.w	r3, r3, #4
 800707c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007080:	e057      	b.n	8007132 <HAL_RCC_OscConfig+0x552>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2b05      	cmp	r3, #5
 8007088:	d11e      	bne.n	80070c8 <HAL_RCC_OscConfig+0x4e8>
 800708a:	4b0c      	ldr	r3, [pc, #48]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 800708c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007090:	4a0a      	ldr	r2, [pc, #40]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007092:	f043 0304 	orr.w	r3, r3, #4
 8007096:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800709a:	4b08      	ldr	r3, [pc, #32]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 800709c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070a0:	4a06      	ldr	r2, [pc, #24]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 80070a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80070aa:	4b04      	ldr	r3, [pc, #16]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 80070ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070b0:	4a02      	ldr	r2, [pc, #8]	@ (80070bc <HAL_RCC_OscConfig+0x4dc>)
 80070b2:	f043 0301 	orr.w	r3, r3, #1
 80070b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80070ba:	e03a      	b.n	8007132 <HAL_RCC_OscConfig+0x552>
 80070bc:	44020c00 	.word	0x44020c00
 80070c0:	20000040 	.word	0x20000040
 80070c4:	44020800 	.word	0x44020800
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	2b85      	cmp	r3, #133	@ 0x85
 80070ce:	d118      	bne.n	8007102 <HAL_RCC_OscConfig+0x522>
 80070d0:	4ba2      	ldr	r3, [pc, #648]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80070d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070d6:	4aa1      	ldr	r2, [pc, #644]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80070d8:	f043 0304 	orr.w	r3, r3, #4
 80070dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80070e0:	4b9e      	ldr	r3, [pc, #632]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80070e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070e6:	4a9d      	ldr	r2, [pc, #628]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80070e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80070f0:	4b9a      	ldr	r3, [pc, #616]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80070f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070f6:	4a99      	ldr	r2, [pc, #612]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80070f8:	f043 0301 	orr.w	r3, r3, #1
 80070fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007100:	e017      	b.n	8007132 <HAL_RCC_OscConfig+0x552>
 8007102:	4b96      	ldr	r3, [pc, #600]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 8007104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007108:	4a94      	ldr	r2, [pc, #592]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 800710a:	f023 0301 	bic.w	r3, r3, #1
 800710e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007112:	4b92      	ldr	r3, [pc, #584]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 8007114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007118:	4a90      	ldr	r2, [pc, #576]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 800711a:	f023 0304 	bic.w	r3, r3, #4
 800711e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007122:	4b8e      	ldr	r3, [pc, #568]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 8007124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007128:	4a8c      	ldr	r2, [pc, #560]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 800712a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800712e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d016      	beq.n	8007168 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800713a:	f7fc fc1b 	bl	8003974 <HAL_GetTick>
 800713e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007140:	e00a      	b.n	8007158 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007142:	f7fc fc17 	bl	8003974 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007150:	4293      	cmp	r3, r2
 8007152:	d901      	bls.n	8007158 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e175      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007158:	4b80      	ldr	r3, [pc, #512]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 800715a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0ed      	beq.n	8007142 <HAL_RCC_OscConfig+0x562>
 8007166:	e015      	b.n	8007194 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007168:	f7fc fc04 	bl	8003974 <HAL_GetTick>
 800716c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800716e:	e00a      	b.n	8007186 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007170:	f7fc fc00 	bl	8003974 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800717e:	4293      	cmp	r3, r2
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e15e      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007186:	4b75      	ldr	r3, [pc, #468]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 8007188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1ed      	bne.n	8007170 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b00      	cmp	r3, #0
 800719e:	d036      	beq.n	800720e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d019      	beq.n	80071dc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071a8:	4b6c      	ldr	r3, [pc, #432]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a6b      	ldr	r2, [pc, #428]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80071ae:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80071b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b4:	f7fc fbde 	bl	8003974 <HAL_GetTick>
 80071b8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80071bc:	f7fc fbda 	bl	8003974 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e13a      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80071ce:	4b63      	ldr	r3, [pc, #396]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0f0      	beq.n	80071bc <HAL_RCC_OscConfig+0x5dc>
 80071da:	e018      	b.n	800720e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071dc:	4b5f      	ldr	r3, [pc, #380]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a5e      	ldr	r2, [pc, #376]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80071e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e8:	f7fc fbc4 	bl	8003974 <HAL_GetTick>
 80071ec:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80071ee:	e008      	b.n	8007202 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80071f0:	f7fc fbc0 	bl	8003974 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e120      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007202:	4b56      	ldr	r3, [pc, #344]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1f0      	bne.n	80071f0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 8115 	beq.w	8007442 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	2b18      	cmp	r3, #24
 800721c:	f000 80af 	beq.w	800737e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007224:	2b02      	cmp	r3, #2
 8007226:	f040 8086 	bne.w	8007336 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800722a:	4b4c      	ldr	r3, [pc, #304]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a4b      	ldr	r2, [pc, #300]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 8007230:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007236:	f7fc fb9d 	bl	8003974 <HAL_GetTick>
 800723a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800723c:	e008      	b.n	8007250 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800723e:	f7fc fb99 	bl	8003974 <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d901      	bls.n	8007250 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e0f9      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007250:	4b42      	ldr	r3, [pc, #264]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1f0      	bne.n	800723e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800725c:	4b3f      	ldr	r3, [pc, #252]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 800725e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007260:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007264:	f023 0303 	bic.w	r3, r3, #3
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007270:	0212      	lsls	r2, r2, #8
 8007272:	430a      	orrs	r2, r1
 8007274:	4939      	ldr	r1, [pc, #228]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 8007276:	4313      	orrs	r3, r2
 8007278:	628b      	str	r3, [r1, #40]	@ 0x28
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800727e:	3b01      	subs	r3, #1
 8007280:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007288:	3b01      	subs	r3, #1
 800728a:	025b      	lsls	r3, r3, #9
 800728c:	b29b      	uxth	r3, r3
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007294:	3b01      	subs	r3, #1
 8007296:	041b      	lsls	r3, r3, #16
 8007298:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800729c:	431a      	orrs	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a2:	3b01      	subs	r3, #1
 80072a4:	061b      	lsls	r3, r3, #24
 80072a6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80072aa:	492c      	ldr	r1, [pc, #176]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80072b0:	4b2a      	ldr	r3, [pc, #168]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80072b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b4:	4a29      	ldr	r2, [pc, #164]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80072b6:	f023 0310 	bic.w	r3, r3, #16
 80072ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072c0:	4a26      	ldr	r2, [pc, #152]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80072c2:	00db      	lsls	r3, r3, #3
 80072c4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80072c6:	4b25      	ldr	r3, [pc, #148]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80072c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ca:	4a24      	ldr	r2, [pc, #144]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80072cc:	f043 0310 	orr.w	r3, r3, #16
 80072d0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80072d2:	4b22      	ldr	r3, [pc, #136]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80072d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d6:	f023 020c 	bic.w	r2, r3, #12
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072de:	491f      	ldr	r1, [pc, #124]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80072e4:	4b1d      	ldr	r3, [pc, #116]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80072e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e8:	f023 0220 	bic.w	r2, r3, #32
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072f0:	491a      	ldr	r1, [pc, #104]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80072f6:	4b19      	ldr	r3, [pc, #100]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80072f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fa:	4a18      	ldr	r2, [pc, #96]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 80072fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007300:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8007302:	4b16      	ldr	r3, [pc, #88]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a15      	ldr	r2, [pc, #84]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 8007308:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800730c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730e:	f7fc fb31 	bl	8003974 <HAL_GetTick>
 8007312:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007314:	e008      	b.n	8007328 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007316:	f7fc fb2d 	bl	8003974 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d901      	bls.n	8007328 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e08d      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007328:	4b0c      	ldr	r3, [pc, #48]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0f0      	beq.n	8007316 <HAL_RCC_OscConfig+0x736>
 8007334:	e085      	b.n	8007442 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007336:	4b09      	ldr	r3, [pc, #36]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a08      	ldr	r2, [pc, #32]	@ (800735c <HAL_RCC_OscConfig+0x77c>)
 800733c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007342:	f7fc fb17 	bl	8003974 <HAL_GetTick>
 8007346:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007348:	e00a      	b.n	8007360 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800734a:	f7fc fb13 	bl	8003974 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d903      	bls.n	8007360 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e073      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
 800735c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007360:	4b3a      	ldr	r3, [pc, #232]	@ (800744c <HAL_RCC_OscConfig+0x86c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1ee      	bne.n	800734a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800736c:	4b37      	ldr	r3, [pc, #220]	@ (800744c <HAL_RCC_OscConfig+0x86c>)
 800736e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007370:	4a36      	ldr	r2, [pc, #216]	@ (800744c <HAL_RCC_OscConfig+0x86c>)
 8007372:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	6293      	str	r3, [r2, #40]	@ 0x28
 800737c:	e061      	b.n	8007442 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800737e:	4b33      	ldr	r3, [pc, #204]	@ (800744c <HAL_RCC_OscConfig+0x86c>)
 8007380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007382:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007384:	4b31      	ldr	r3, [pc, #196]	@ (800744c <HAL_RCC_OscConfig+0x86c>)
 8007386:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007388:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800738e:	2b01      	cmp	r3, #1
 8007390:	d031      	beq.n	80073f6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f003 0203 	and.w	r2, r3, #3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800739c:	429a      	cmp	r2, r3
 800739e:	d12a      	bne.n	80073f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	0a1b      	lsrs	r3, r3, #8
 80073a4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d122      	bne.n	80073f6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ba:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80073bc:	429a      	cmp	r2, r3
 80073be:	d11a      	bne.n	80073f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	0a5b      	lsrs	r3, r3, #9
 80073c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d111      	bne.n	80073f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	0c1b      	lsrs	r3, r3, #16
 80073d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073de:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d108      	bne.n	80073f6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	0e1b      	lsrs	r3, r3, #24
 80073e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d001      	beq.n	80073fa <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e024      	b.n	8007444 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80073fa:	4b14      	ldr	r3, [pc, #80]	@ (800744c <HAL_RCC_OscConfig+0x86c>)
 80073fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fe:	08db      	lsrs	r3, r3, #3
 8007400:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007408:	429a      	cmp	r2, r3
 800740a:	d01a      	beq.n	8007442 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800740c:	4b0f      	ldr	r3, [pc, #60]	@ (800744c <HAL_RCC_OscConfig+0x86c>)
 800740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007410:	4a0e      	ldr	r2, [pc, #56]	@ (800744c <HAL_RCC_OscConfig+0x86c>)
 8007412:	f023 0310 	bic.w	r3, r3, #16
 8007416:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007418:	f7fc faac 	bl	8003974 <HAL_GetTick>
 800741c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800741e:	bf00      	nop
 8007420:	f7fc faa8 	bl	8003974 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	4293      	cmp	r3, r2
 800742a:	d0f9      	beq.n	8007420 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007430:	4a06      	ldr	r2, [pc, #24]	@ (800744c <HAL_RCC_OscConfig+0x86c>)
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007436:	4b05      	ldr	r3, [pc, #20]	@ (800744c <HAL_RCC_OscConfig+0x86c>)
 8007438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800743a:	4a04      	ldr	r2, [pc, #16]	@ (800744c <HAL_RCC_OscConfig+0x86c>)
 800743c:	f043 0310 	orr.w	r3, r3, #16
 8007440:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3720      	adds	r7, #32
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	44020c00 	.word	0x44020c00

08007450 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e19e      	b.n	80077a2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007464:	4b83      	ldr	r3, [pc, #524]	@ (8007674 <HAL_RCC_ClockConfig+0x224>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d910      	bls.n	8007494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007472:	4b80      	ldr	r3, [pc, #512]	@ (8007674 <HAL_RCC_ClockConfig+0x224>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f023 020f 	bic.w	r2, r3, #15
 800747a:	497e      	ldr	r1, [pc, #504]	@ (8007674 <HAL_RCC_ClockConfig+0x224>)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	4313      	orrs	r3, r2
 8007480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007482:	4b7c      	ldr	r3, [pc, #496]	@ (8007674 <HAL_RCC_ClockConfig+0x224>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	d001      	beq.n	8007494 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e186      	b.n	80077a2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0310 	and.w	r3, r3, #16
 800749c:	2b00      	cmp	r3, #0
 800749e:	d012      	beq.n	80074c6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	695a      	ldr	r2, [r3, #20]
 80074a4:	4b74      	ldr	r3, [pc, #464]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	0a1b      	lsrs	r3, r3, #8
 80074aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d909      	bls.n	80074c6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80074b2:	4b71      	ldr	r3, [pc, #452]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	021b      	lsls	r3, r3, #8
 80074c0:	496d      	ldr	r1, [pc, #436]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d012      	beq.n	80074f8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691a      	ldr	r2, [r3, #16]
 80074d6:	4b68      	ldr	r3, [pc, #416]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	091b      	lsrs	r3, r3, #4
 80074dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d909      	bls.n	80074f8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80074e4:	4b64      	ldr	r3, [pc, #400]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	011b      	lsls	r3, r3, #4
 80074f2:	4961      	ldr	r1, [pc, #388]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	d010      	beq.n	8007526 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	4b5b      	ldr	r3, [pc, #364]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 800750a:	6a1b      	ldr	r3, [r3, #32]
 800750c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007510:	429a      	cmp	r2, r3
 8007512:	d908      	bls.n	8007526 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007514:	4b58      	ldr	r3, [pc, #352]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 8007516:	6a1b      	ldr	r3, [r3, #32]
 8007518:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	4955      	ldr	r1, [pc, #340]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 8007522:	4313      	orrs	r3, r2
 8007524:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d010      	beq.n	8007554 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	4b50      	ldr	r3, [pc, #320]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	f003 030f 	and.w	r3, r3, #15
 800753e:	429a      	cmp	r2, r3
 8007540:	d908      	bls.n	8007554 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8007542:	4b4d      	ldr	r3, [pc, #308]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	f023 020f 	bic.w	r2, r3, #15
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	494a      	ldr	r1, [pc, #296]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 8007550:	4313      	orrs	r3, r2
 8007552:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 8093 	beq.w	8007688 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	2b03      	cmp	r3, #3
 8007568:	d107      	bne.n	800757a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800756a:	4b43      	ldr	r3, [pc, #268]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d121      	bne.n	80075ba <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e113      	b.n	80077a2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d107      	bne.n	8007592 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007582:	4b3d      	ldr	r3, [pc, #244]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d115      	bne.n	80075ba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e107      	b.n	80077a2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d107      	bne.n	80075aa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800759a:	4b37      	ldr	r3, [pc, #220]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e0fb      	b.n	80077a2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075aa:	4b33      	ldr	r3, [pc, #204]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e0f3      	b.n	80077a2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80075ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	f023 0203 	bic.w	r2, r3, #3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	492c      	ldr	r1, [pc, #176]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075cc:	f7fc f9d2 	bl	8003974 <HAL_GetTick>
 80075d0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	d112      	bne.n	8007600 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075da:	e00a      	b.n	80075f2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80075dc:	f7fc f9ca 	bl	8003974 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e0d7      	b.n	80077a2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075f2:	4b21      	ldr	r3, [pc, #132]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f003 0318 	and.w	r3, r3, #24
 80075fa:	2b18      	cmp	r3, #24
 80075fc:	d1ee      	bne.n	80075dc <HAL_RCC_ClockConfig+0x18c>
 80075fe:	e043      	b.n	8007688 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d112      	bne.n	800762e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007608:	e00a      	b.n	8007620 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800760a:	f7fc f9b3 	bl	8003974 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007618:	4293      	cmp	r3, r2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e0c0      	b.n	80077a2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007620:	4b15      	ldr	r3, [pc, #84]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f003 0318 	and.w	r3, r3, #24
 8007628:	2b10      	cmp	r3, #16
 800762a:	d1ee      	bne.n	800760a <HAL_RCC_ClockConfig+0x1ba>
 800762c:	e02c      	b.n	8007688 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d122      	bne.n	800767c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8007636:	e00a      	b.n	800764e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007638:	f7fc f99c 	bl	8003974 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007646:	4293      	cmp	r3, r2
 8007648:	d901      	bls.n	800764e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e0a9      	b.n	80077a2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800764e:	4b0a      	ldr	r3, [pc, #40]	@ (8007678 <HAL_RCC_ClockConfig+0x228>)
 8007650:	69db      	ldr	r3, [r3, #28]
 8007652:	f003 0318 	and.w	r3, r3, #24
 8007656:	2b08      	cmp	r3, #8
 8007658:	d1ee      	bne.n	8007638 <HAL_RCC_ClockConfig+0x1e8>
 800765a:	e015      	b.n	8007688 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800765c:	f7fc f98a 	bl	8003974 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800766a:	4293      	cmp	r3, r2
 800766c:	d906      	bls.n	800767c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e097      	b.n	80077a2 <HAL_RCC_ClockConfig+0x352>
 8007672:	bf00      	nop
 8007674:	40022000 	.word	0x40022000
 8007678:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800767c:	4b4b      	ldr	r3, [pc, #300]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	f003 0318 	and.w	r3, r3, #24
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e9      	bne.n	800765c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d010      	beq.n	80076b6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689a      	ldr	r2, [r3, #8]
 8007698:	4b44      	ldr	r3, [pc, #272]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d208      	bcs.n	80076b6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80076a4:	4b41      	ldr	r3, [pc, #260]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	f023 020f 	bic.w	r2, r3, #15
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	493e      	ldr	r1, [pc, #248]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076b6:	4b3e      	ldr	r3, [pc, #248]	@ (80077b0 <HAL_RCC_ClockConfig+0x360>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 030f 	and.w	r3, r3, #15
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d210      	bcs.n	80076e6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076c4:	4b3a      	ldr	r3, [pc, #232]	@ (80077b0 <HAL_RCC_ClockConfig+0x360>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f023 020f 	bic.w	r2, r3, #15
 80076cc:	4938      	ldr	r1, [pc, #224]	@ (80077b0 <HAL_RCC_ClockConfig+0x360>)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d4:	4b36      	ldr	r3, [pc, #216]	@ (80077b0 <HAL_RCC_ClockConfig+0x360>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 030f 	and.w	r3, r3, #15
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d001      	beq.n	80076e6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e05d      	b.n	80077a2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0304 	and.w	r3, r3, #4
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d010      	beq.n	8007714 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	4b2d      	ldr	r3, [pc, #180]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076fe:	429a      	cmp	r2, r3
 8007700:	d208      	bcs.n	8007714 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8007702:	4b2a      	ldr	r3, [pc, #168]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	4927      	ldr	r1, [pc, #156]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 8007710:	4313      	orrs	r3, r2
 8007712:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b00      	cmp	r3, #0
 800771e:	d012      	beq.n	8007746 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	4b21      	ldr	r3, [pc, #132]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	091b      	lsrs	r3, r3, #4
 800772a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800772e:	429a      	cmp	r2, r3
 8007730:	d209      	bcs.n	8007746 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8007732:	4b1e      	ldr	r3, [pc, #120]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	491a      	ldr	r1, [pc, #104]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 8007742:	4313      	orrs	r3, r2
 8007744:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0310 	and.w	r3, r3, #16
 800774e:	2b00      	cmp	r3, #0
 8007750:	d012      	beq.n	8007778 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695a      	ldr	r2, [r3, #20]
 8007756:	4b15      	ldr	r3, [pc, #84]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	0a1b      	lsrs	r3, r3, #8
 800775c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007760:	429a      	cmp	r2, r3
 8007762:	d209      	bcs.n	8007778 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8007764:	4b11      	ldr	r3, [pc, #68]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	021b      	lsls	r3, r3, #8
 8007772:	490e      	ldr	r1, [pc, #56]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 8007774:	4313      	orrs	r3, r2
 8007776:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8007778:	f000 f822 	bl	80077c0 <HAL_RCC_GetSysClockFreq>
 800777c:	4602      	mov	r2, r0
 800777e:	4b0b      	ldr	r3, [pc, #44]	@ (80077ac <HAL_RCC_ClockConfig+0x35c>)
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	f003 030f 	and.w	r3, r3, #15
 8007786:	490b      	ldr	r1, [pc, #44]	@ (80077b4 <HAL_RCC_ClockConfig+0x364>)
 8007788:	5ccb      	ldrb	r3, [r1, r3]
 800778a:	fa22 f303 	lsr.w	r3, r2, r3
 800778e:	4a0a      	ldr	r2, [pc, #40]	@ (80077b8 <HAL_RCC_ClockConfig+0x368>)
 8007790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007792:	4b0a      	ldr	r3, [pc, #40]	@ (80077bc <HAL_RCC_ClockConfig+0x36c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4618      	mov	r0, r3
 8007798:	f7fb feb6 	bl	8003508 <HAL_InitTick>
 800779c:	4603      	mov	r3, r0
 800779e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80077a0:	7afb      	ldrb	r3, [r7, #11]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	44020c00 	.word	0x44020c00
 80077b0:	40022000 	.word	0x40022000
 80077b4:	08013c9c 	.word	0x08013c9c
 80077b8:	2000003c 	.word	0x2000003c
 80077bc:	20000040 	.word	0x20000040

080077c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b089      	sub	sp, #36	@ 0x24
 80077c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80077c6:	4b8c      	ldr	r3, [pc, #560]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	f003 0318 	and.w	r3, r3, #24
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d102      	bne.n	80077d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80077d2:	4b8a      	ldr	r3, [pc, #552]	@ (80079fc <HAL_RCC_GetSysClockFreq+0x23c>)
 80077d4:	61fb      	str	r3, [r7, #28]
 80077d6:	e107      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80077d8:	4b87      	ldr	r3, [pc, #540]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	f003 0318 	and.w	r3, r3, #24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d112      	bne.n	800780a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80077e4:	4b84      	ldr	r3, [pc, #528]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d009      	beq.n	8007804 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077f0:	4b81      	ldr	r3, [pc, #516]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	08db      	lsrs	r3, r3, #3
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	4a81      	ldr	r2, [pc, #516]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x240>)
 80077fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007800:	61fb      	str	r3, [r7, #28]
 8007802:	e0f1      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8007804:	4b7e      	ldr	r3, [pc, #504]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x240>)
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	e0ee      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800780a:	4b7b      	ldr	r3, [pc, #492]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	f003 0318 	and.w	r3, r3, #24
 8007812:	2b10      	cmp	r3, #16
 8007814:	d102      	bne.n	800781c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007816:	4b7b      	ldr	r3, [pc, #492]	@ (8007a04 <HAL_RCC_GetSysClockFreq+0x244>)
 8007818:	61fb      	str	r3, [r7, #28]
 800781a:	e0e5      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800781c:	4b76      	ldr	r3, [pc, #472]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	f003 0318 	and.w	r3, r3, #24
 8007824:	2b18      	cmp	r3, #24
 8007826:	f040 80dd 	bne.w	80079e4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800782a:	4b73      	ldr	r3, [pc, #460]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800782c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782e:	f003 0303 	and.w	r3, r3, #3
 8007832:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007834:	4b70      	ldr	r3, [pc, #448]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8007836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007838:	0a1b      	lsrs	r3, r3, #8
 800783a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800783e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007840:	4b6d      	ldr	r3, [pc, #436]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8007842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007844:	091b      	lsrs	r3, r3, #4
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800784c:	4b6a      	ldr	r3, [pc, #424]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800784e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8007850:	08db      	lsrs	r3, r3, #3
 8007852:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	fb02 f303 	mul.w	r3, r2, r3
 800785c:	ee07 3a90 	vmov	s15, r3
 8007860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007864:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 80b7 	beq.w	80079de <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d003      	beq.n	800787e <HAL_RCC_GetSysClockFreq+0xbe>
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b03      	cmp	r3, #3
 800787a:	d056      	beq.n	800792a <HAL_RCC_GetSysClockFreq+0x16a>
 800787c:	e077      	b.n	800796e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800787e:	4b5e      	ldr	r3, [pc, #376]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d02d      	beq.n	80078e6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800788a:	4b5b      	ldr	r3, [pc, #364]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	08db      	lsrs	r3, r3, #3
 8007890:	f003 0303 	and.w	r3, r3, #3
 8007894:	4a5a      	ldr	r2, [pc, #360]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x240>)
 8007896:	fa22 f303 	lsr.w	r3, r2, r3
 800789a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b4:	4b50      	ldr	r3, [pc, #320]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80078b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078bc:	ee07 3a90 	vmov	s15, r3
 80078c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80078c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80078c8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x248>
 80078cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80078d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80078e4:	e065      	b.n	80079b2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	ee07 3a90 	vmov	s15, r3
 80078ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8007a0c <HAL_RCC_GetSysClockFreq+0x24c>
 80078f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078f8:	4b3f      	ldr	r3, [pc, #252]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80078fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007900:	ee07 3a90 	vmov	s15, r3
 8007904:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007908:	ed97 6a02 	vldr	s12, [r7, #8]
 800790c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x248>
 8007910:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007914:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8007918:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800791c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007924:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8007928:	e043      	b.n	80079b2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	ee07 3a90 	vmov	s15, r3
 8007930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007934:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8007a10 <HAL_RCC_GetSysClockFreq+0x250>
 8007938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800793c:	4b2e      	ldr	r3, [pc, #184]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 800793e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007944:	ee07 3a90 	vmov	s15, r3
 8007948:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800794c:	ed97 6a02 	vldr	s12, [r7, #8]
 8007950:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x248>
 8007954:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007958:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800795c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007960:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007968:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800796c:	e021      	b.n	80079b2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	ee07 3a90 	vmov	s15, r3
 8007974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007978:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007a14 <HAL_RCC_GetSysClockFreq+0x254>
 800797c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007980:	4b1d      	ldr	r3, [pc, #116]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 8007982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007988:	ee07 3a90 	vmov	s15, r3
 800798c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007990:	ed97 6a02 	vldr	s12, [r7, #8]
 8007994:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8007a08 <HAL_RCC_GetSysClockFreq+0x248>
 8007998:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800799c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80079a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80079a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ac:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80079b0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80079b2:	4b11      	ldr	r3, [pc, #68]	@ (80079f8 <HAL_RCC_GetSysClockFreq+0x238>)
 80079b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079b6:	0a5b      	lsrs	r3, r3, #9
 80079b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079bc:	3301      	adds	r3, #1
 80079be:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079ca:	edd7 6a06 	vldr	s13, [r7, #24]
 80079ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079d6:	ee17 3a90 	vmov	r3, s15
 80079da:	61fb      	str	r3, [r7, #28]
 80079dc:	e004      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	61fb      	str	r3, [r7, #28]
 80079e2:	e001      	b.n	80079e8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80079e4:	4b06      	ldr	r3, [pc, #24]	@ (8007a00 <HAL_RCC_GetSysClockFreq+0x240>)
 80079e6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80079e8:	69fb      	ldr	r3, [r7, #28]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3724      	adds	r7, #36	@ 0x24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	44020c00 	.word	0x44020c00
 80079fc:	003d0900 	.word	0x003d0900
 8007a00:	03d09000 	.word	0x03d09000
 8007a04:	007a1200 	.word	0x007a1200
 8007a08:	46000000 	.word	0x46000000
 8007a0c:	4c742400 	.word	0x4c742400
 8007a10:	4af42400 	.word	0x4af42400
 8007a14:	4a742400 	.word	0x4a742400

08007a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007a1c:	f7ff fed0 	bl	80077c0 <HAL_RCC_GetSysClockFreq>
 8007a20:	4602      	mov	r2, r0
 8007a22:	4b08      	ldr	r3, [pc, #32]	@ (8007a44 <HAL_RCC_GetHCLKFreq+0x2c>)
 8007a24:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007a26:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007a2a:	4907      	ldr	r1, [pc, #28]	@ (8007a48 <HAL_RCC_GetHCLKFreq+0x30>)
 8007a2c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8007a2e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8007a32:	fa22 f303 	lsr.w	r3, r2, r3
 8007a36:	4a05      	ldr	r2, [pc, #20]	@ (8007a4c <HAL_RCC_GetHCLKFreq+0x34>)
 8007a38:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8007a3a:	4b04      	ldr	r3, [pc, #16]	@ (8007a4c <HAL_RCC_GetHCLKFreq+0x34>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	44020c00 	.word	0x44020c00
 8007a48:	08013c9c 	.word	0x08013c9c
 8007a4c:	2000003c 	.word	0x2000003c

08007a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8007a54:	f7ff ffe0 	bl	8007a18 <HAL_RCC_GetHCLKFreq>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	4b06      	ldr	r3, [pc, #24]	@ (8007a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	091b      	lsrs	r3, r3, #4
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	4904      	ldr	r1, [pc, #16]	@ (8007a78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a66:	5ccb      	ldrb	r3, [r1, r3]
 8007a68:	f003 031f 	and.w	r3, r3, #31
 8007a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	44020c00 	.word	0x44020c00
 8007a78:	08013cac 	.word	0x08013cac

08007a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8007a80:	f7ff ffca 	bl	8007a18 <HAL_RCC_GetHCLKFreq>
 8007a84:	4602      	mov	r2, r0
 8007a86:	4b06      	ldr	r3, [pc, #24]	@ (8007aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	0a1b      	lsrs	r3, r3, #8
 8007a8c:	f003 0307 	and.w	r3, r3, #7
 8007a90:	4904      	ldr	r1, [pc, #16]	@ (8007aa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a92:	5ccb      	ldrb	r3, [r1, r3]
 8007a94:	f003 031f 	and.w	r3, r3, #31
 8007a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	44020c00 	.word	0x44020c00
 8007aa4:	08013cac 	.word	0x08013cac

08007aa8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8007aac:	f7ff ffb4 	bl	8007a18 <HAL_RCC_GetHCLKFreq>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	4b06      	ldr	r3, [pc, #24]	@ (8007acc <HAL_RCC_GetPCLK3Freq+0x24>)
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	0b1b      	lsrs	r3, r3, #12
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	4904      	ldr	r1, [pc, #16]	@ (8007ad0 <HAL_RCC_GetPCLK3Freq+0x28>)
 8007abe:	5ccb      	ldrb	r3, [r1, r3]
 8007ac0:	f003 031f 	and.w	r3, r3, #31
 8007ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	44020c00 	.word	0x44020c00
 8007ad0:	08013cac 	.word	0x08013cac

08007ad4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	221f      	movs	r2, #31
 8007ae2:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8007ae4:	4b15      	ldr	r3, [pc, #84]	@ (8007b3c <HAL_RCC_GetClockConfig+0x68>)
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f003 0203 	and.w	r2, r3, #3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8007af0:	4b12      	ldr	r3, [pc, #72]	@ (8007b3c <HAL_RCC_GetClockConfig+0x68>)
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f003 020f 	and.w	r2, r3, #15
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	091b      	lsrs	r3, r3, #4
 8007b0e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	0a1b      	lsrs	r3, r3, #8
 8007b1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b22:	4b07      	ldr	r3, [pc, #28]	@ (8007b40 <HAL_RCC_GetClockConfig+0x6c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 020f 	and.w	r2, r3, #15
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	601a      	str	r2, [r3, #0]
}
 8007b2e:	bf00      	nop
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	44020c00 	.word	0x44020c00
 8007b40:	40022000 	.word	0x40022000

08007b44 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b48:	b0d6      	sub	sp, #344	@ 0x158
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b50:	2300      	movs	r3, #0
 8007b52:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b56:	2300      	movs	r3, #0
 8007b58:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b5c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8007b68:	2500      	movs	r5, #0
 8007b6a:	ea54 0305 	orrs.w	r3, r4, r5
 8007b6e:	d00b      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8007b70:	4bcd      	ldr	r3, [pc, #820]	@ (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b76:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8007b7a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b80:	4ac9      	ldr	r2, [pc, #804]	@ (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007b82:	430b      	orrs	r3, r1
 8007b84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b88:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f002 0801 	and.w	r8, r2, #1
 8007b94:	f04f 0900 	mov.w	r9, #0
 8007b98:	ea58 0309 	orrs.w	r3, r8, r9
 8007b9c:	d042      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8007b9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ba4:	2b05      	cmp	r3, #5
 8007ba6:	d823      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8007ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8007baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bae:	bf00      	nop
 8007bb0:	08007bf9 	.word	0x08007bf9
 8007bb4:	08007bc9 	.word	0x08007bc9
 8007bb8:	08007bdd 	.word	0x08007bdd
 8007bbc:	08007bf9 	.word	0x08007bf9
 8007bc0:	08007bf9 	.word	0x08007bf9
 8007bc4:	08007bf9 	.word	0x08007bf9
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007bc8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007bcc:	3308      	adds	r3, #8
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f004 fe68 	bl	800c8a4 <RCCEx_PLL2_Config>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8007bda:	e00e      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007bdc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007be0:	3330      	adds	r3, #48	@ 0x30
 8007be2:	4618      	mov	r0, r3
 8007be4:	f004 fef6 	bl	800c9d4 <RCCEx_PLL3_Config>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8007bee:	e004      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8007bf6:	e000      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8007bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bfa:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10c      	bne.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007c02:	4ba9      	ldr	r3, [pc, #676]	@ (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007c04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c08:	f023 0107 	bic.w	r1, r3, #7
 8007c0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c12:	4aa5      	ldr	r2, [pc, #660]	@ (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007c14:	430b      	orrs	r3, r1
 8007c16:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007c1a:	e003      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c1c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8007c20:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c24:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	f002 0a02 	and.w	sl, r2, #2
 8007c30:	f04f 0b00 	mov.w	fp, #0
 8007c34:	ea5a 030b 	orrs.w	r3, sl, fp
 8007c38:	f000 8088 	beq.w	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8007c3c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c42:	2b28      	cmp	r3, #40	@ 0x28
 8007c44:	d868      	bhi.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007c46:	a201      	add	r2, pc, #4	@ (adr r2, 8007c4c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8007c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4c:	08007d21 	.word	0x08007d21
 8007c50:	08007d19 	.word	0x08007d19
 8007c54:	08007d19 	.word	0x08007d19
 8007c58:	08007d19 	.word	0x08007d19
 8007c5c:	08007d19 	.word	0x08007d19
 8007c60:	08007d19 	.word	0x08007d19
 8007c64:	08007d19 	.word	0x08007d19
 8007c68:	08007d19 	.word	0x08007d19
 8007c6c:	08007cf1 	.word	0x08007cf1
 8007c70:	08007d19 	.word	0x08007d19
 8007c74:	08007d19 	.word	0x08007d19
 8007c78:	08007d19 	.word	0x08007d19
 8007c7c:	08007d19 	.word	0x08007d19
 8007c80:	08007d19 	.word	0x08007d19
 8007c84:	08007d19 	.word	0x08007d19
 8007c88:	08007d19 	.word	0x08007d19
 8007c8c:	08007d05 	.word	0x08007d05
 8007c90:	08007d19 	.word	0x08007d19
 8007c94:	08007d19 	.word	0x08007d19
 8007c98:	08007d19 	.word	0x08007d19
 8007c9c:	08007d19 	.word	0x08007d19
 8007ca0:	08007d19 	.word	0x08007d19
 8007ca4:	08007d19 	.word	0x08007d19
 8007ca8:	08007d19 	.word	0x08007d19
 8007cac:	08007d21 	.word	0x08007d21
 8007cb0:	08007d19 	.word	0x08007d19
 8007cb4:	08007d19 	.word	0x08007d19
 8007cb8:	08007d19 	.word	0x08007d19
 8007cbc:	08007d19 	.word	0x08007d19
 8007cc0:	08007d19 	.word	0x08007d19
 8007cc4:	08007d19 	.word	0x08007d19
 8007cc8:	08007d19 	.word	0x08007d19
 8007ccc:	08007d21 	.word	0x08007d21
 8007cd0:	08007d19 	.word	0x08007d19
 8007cd4:	08007d19 	.word	0x08007d19
 8007cd8:	08007d19 	.word	0x08007d19
 8007cdc:	08007d19 	.word	0x08007d19
 8007ce0:	08007d19 	.word	0x08007d19
 8007ce4:	08007d19 	.word	0x08007d19
 8007ce8:	08007d19 	.word	0x08007d19
 8007cec:	08007d21 	.word	0x08007d21
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007cf0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f004 fdd4 	bl	800c8a4 <RCCEx_PLL2_Config>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 8007d02:	e00e      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d04:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007d08:	3330      	adds	r3, #48	@ 0x30
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f004 fe62 	bl	800c9d4 <RCCEx_PLL3_Config>
 8007d10:	4603      	mov	r3, r0
 8007d12:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 8007d16:	e004      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8007d1e:	e000      	b.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8007d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d22:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10c      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007d2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007d30:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d34:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007d3c:	430b      	orrs	r3, r1
 8007d3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007d42:	e003      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d44:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8007d48:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007d4c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	f002 0304 	and.w	r3, r2, #4
 8007d58:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8007d62:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8007d66:	460b      	mov	r3, r1
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	d04e      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8007d6c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007d70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d72:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007d76:	d02c      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8007d78:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007d7c:	d825      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d82:	d028      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d88:	d81f      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007d8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d8c:	d025      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007d8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d90:	d81b      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007d92:	2b80      	cmp	r3, #128	@ 0x80
 8007d94:	d00f      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8007d96:	2b80      	cmp	r3, #128	@ 0x80
 8007d98:	d817      	bhi.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d01f      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8007d9e:	2b40      	cmp	r3, #64	@ 0x40
 8007da0:	d113      	bne.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007da2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007da6:	3308      	adds	r3, #8
 8007da8:	4618      	mov	r0, r3
 8007daa:	f004 fd7b 	bl	800c8a4 <RCCEx_PLL2_Config>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 8007db4:	e014      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007db6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007dba:	3330      	adds	r3, #48	@ 0x30
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f004 fe09 	bl	800c9d4 <RCCEx_PLL3_Config>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 8007dc8:	e00a      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8007dd0:	e006      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007dd2:	bf00      	nop
 8007dd4:	e004      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007dd6:	bf00      	nop
 8007dd8:	e002      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007dda:	bf00      	nop
 8007ddc:	e000      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8007dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007de0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10c      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007de8:	4b2f      	ldr	r3, [pc, #188]	@ (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007dee:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007df2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007df8:	4a2b      	ldr	r2, [pc, #172]	@ (8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8007dfa:	430b      	orrs	r3, r1
 8007dfc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007e00:	e003      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e02:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8007e06:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e0a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	f002 0308 	and.w	r3, r2, #8
 8007e16:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007e20:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8007e24:	460b      	mov	r3, r1
 8007e26:	4313      	orrs	r3, r2
 8007e28:	d056      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8007e2a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007e2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e30:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007e34:	d031      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8007e36:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007e3a:	d82a      	bhi.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e40:	d02d      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e46:	d824      	bhi.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e48:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e4c:	d029      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007e4e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e52:	d81e      	bhi.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e58:	d011      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e5e:	d818      	bhi.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d023      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e68:	d113      	bne.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e6a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007e6e:	3308      	adds	r3, #8
 8007e70:	4618      	mov	r0, r3
 8007e72:	f004 fd17 	bl	800c8a4 <RCCEx_PLL2_Config>
 8007e76:	4603      	mov	r3, r0
 8007e78:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 8007e7c:	e017      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007e82:	3330      	adds	r3, #48	@ 0x30
 8007e84:	4618      	mov	r0, r3
 8007e86:	f004 fda5 	bl	800c9d4 <RCCEx_PLL3_Config>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 8007e90:	e00d      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8007e98:	e009      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007e9a:	bf00      	nop
 8007e9c:	e007      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007e9e:	bf00      	nop
 8007ea0:	e005      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8007ea2:	bf00      	nop
 8007ea4:	e003      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007ea6:	bf00      	nop
 8007ea8:	44020c00 	.word	0x44020c00
        break;
 8007eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eae:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10c      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007eb6:	4bbb      	ldr	r3, [pc, #748]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007eb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ebc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007ec0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007ec4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ec6:	4ab7      	ldr	r2, [pc, #732]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007ece:	e003      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8007ed4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ed8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f002 0310 	and.w	r3, r2, #16
 8007ee4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8007eee:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	d053      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8007ef8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007efe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007f02:	d031      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007f04:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007f08:	d82a      	bhi.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007f0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f0e:	d02d      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007f10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f14:	d824      	bhi.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007f16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f1a:	d029      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8007f1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f20:	d81e      	bhi.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f26:	d011      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007f28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f2c:	d818      	bhi.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d020      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8007f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f36:	d113      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f38:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f004 fcb0 	bl	800c8a4 <RCCEx_PLL2_Config>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 8007f4a:	e014      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f4c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007f50:	3330      	adds	r3, #48	@ 0x30
 8007f52:	4618      	mov	r0, r3
 8007f54:	f004 fd3e 	bl	800c9d4 <RCCEx_PLL3_Config>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 8007f5e:	e00a      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8007f66:	e006      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007f68:	bf00      	nop
 8007f6a:	e004      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007f6c:	bf00      	nop
 8007f6e:	e002      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007f70:	bf00      	nop
 8007f72:	e000      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8007f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f76:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10c      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007f7e:	4b89      	ldr	r3, [pc, #548]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007f80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f84:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007f88:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f8e:	4a85      	ldr	r2, [pc, #532]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007f90:	430b      	orrs	r3, r1
 8007f92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007f96:	e003      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f98:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8007f9c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007fa0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f002 0320 	and.w	r3, r2, #32
 8007fac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8007fb6:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	d053      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8007fc0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8007fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fc6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007fca:	d031      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8007fcc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007fd0:	d82a      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007fd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fd6:	d02d      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007fd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007fdc:	d824      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007fde:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007fe2:	d029      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8007fe4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007fe8:	d81e      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fee:	d011      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ff4:	d818      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d020      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8007ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ffe:	d113      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008000:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008004:	3308      	adds	r3, #8
 8008006:	4618      	mov	r0, r3
 8008008:	f004 fc4c 	bl	800c8a4 <RCCEx_PLL2_Config>
 800800c:	4603      	mov	r3, r0
 800800e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 8008012:	e014      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008014:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008018:	3330      	adds	r3, #48	@ 0x30
 800801a:	4618      	mov	r0, r3
 800801c:	f004 fcda 	bl	800c9d4 <RCCEx_PLL3_Config>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 8008026:	e00a      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800802e:	e006      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008030:	bf00      	nop
 8008032:	e004      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008034:	bf00      	nop
 8008036:	e002      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008038:	bf00      	nop
 800803a:	e000      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800803c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800803e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10c      	bne.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008046:	4b57      	ldr	r3, [pc, #348]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008048:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800804c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8008050:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008056:	4a53      	ldr	r2, [pc, #332]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008058:	430b      	orrs	r3, r1
 800805a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800805e:	e003      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008060:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008064:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008068:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008074:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8008078:	2300      	movs	r3, #0
 800807a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800807e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8008082:	460b      	mov	r3, r1
 8008084:	4313      	orrs	r3, r2
 8008086:	d053      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8008088:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800808c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800808e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008092:	d031      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8008094:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008098:	d82a      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800809a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800809e:	d02d      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80080a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080a4:	d824      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80080a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80080aa:	d029      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80080ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80080b0:	d81e      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80080b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80080b6:	d011      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x598>
 80080b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80080bc:	d818      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d020      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80080c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080c6:	d113      	bne.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80080cc:	3308      	adds	r3, #8
 80080ce:	4618      	mov	r0, r3
 80080d0:	f004 fbe8 	bl	800c8a4 <RCCEx_PLL2_Config>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 80080da:	e014      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80080dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80080e0:	3330      	adds	r3, #48	@ 0x30
 80080e2:	4618      	mov	r0, r3
 80080e4:	f004 fc76 	bl	800c9d4 <RCCEx_PLL3_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 80080ee:	e00a      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80080f6:	e006      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80080f8:	bf00      	nop
 80080fa:	e004      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80080fc:	bf00      	nop
 80080fe:	e002      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008100:	bf00      	nop
 8008102:	e000      	b.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008106:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10c      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800810e:	4b25      	ldr	r3, [pc, #148]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008110:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008114:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8008118:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800811c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800811e:	4a21      	ldr	r2, [pc, #132]	@ (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008120:	430b      	orrs	r3, r1
 8008122:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008126:	e003      	b.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008128:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800812c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008130:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800813c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8008140:	2300      	movs	r3, #0
 8008142:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8008146:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800814a:	460b      	mov	r3, r1
 800814c:	4313      	orrs	r3, r2
 800814e:	d055      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8008150:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008154:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008156:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800815a:	d033      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800815c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008160:	d82c      	bhi.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008162:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008166:	d02f      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8008168:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800816c:	d826      	bhi.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800816e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008172:	d02b      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x688>
 8008174:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008178:	d820      	bhi.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800817a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800817e:	d013      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008180:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008184:	d81a      	bhi.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d022      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800818a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800818e:	d115      	bne.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008190:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008194:	3308      	adds	r3, #8
 8008196:	4618      	mov	r0, r3
 8008198:	f004 fb84 	bl	800c8a4 <RCCEx_PLL2_Config>
 800819c:	4603      	mov	r3, r0
 800819e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 80081a2:	e016      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80081a4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80081a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80081ac:	3330      	adds	r3, #48	@ 0x30
 80081ae:	4618      	mov	r0, r3
 80081b0:	f004 fc10 	bl	800c9d4 <RCCEx_PLL3_Config>
 80081b4:	4603      	mov	r3, r0
 80081b6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 80081ba:	e00a      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80081c2:	e006      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80081c4:	bf00      	nop
 80081c6:	e004      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80081c8:	bf00      	nop
 80081ca:	e002      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80081cc:	bf00      	nop
 80081ce:	e000      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80081d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081d2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10c      	bne.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80081da:	4bbb      	ldr	r3, [pc, #748]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80081dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80081e0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80081e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80081e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081ea:	4ab7      	ldr	r2, [pc, #732]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80081ec:	430b      	orrs	r3, r1
 80081ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80081f2:	e003      	b.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081f4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80081f8:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80081fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008204:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8008208:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800820c:	2300      	movs	r3, #0
 800820e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008212:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008216:	460b      	mov	r3, r1
 8008218:	4313      	orrs	r3, r2
 800821a:	d053      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800821c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008222:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008226:	d031      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8008228:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800822c:	d82a      	bhi.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800822e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008232:	d02d      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8008234:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008238:	d824      	bhi.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800823a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800823e:	d029      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8008240:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008244:	d81e      	bhi.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800824a:	d011      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800824c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008250:	d818      	bhi.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d020      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8008256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800825a:	d113      	bne.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800825c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008260:	3308      	adds	r3, #8
 8008262:	4618      	mov	r0, r3
 8008264:	f004 fb1e 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008268:	4603      	mov	r3, r0
 800826a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 800826e:	e014      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008270:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008274:	3330      	adds	r3, #48	@ 0x30
 8008276:	4618      	mov	r0, r3
 8008278:	f004 fbac 	bl	800c9d4 <RCCEx_PLL3_Config>
 800827c:	4603      	mov	r3, r0
 800827e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 8008282:	e00a      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800828a:	e006      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800828c:	bf00      	nop
 800828e:	e004      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008290:	bf00      	nop
 8008292:	e002      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008294:	bf00      	nop
 8008296:	e000      	b.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800829a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10c      	bne.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80082a2:	4b89      	ldr	r3, [pc, #548]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80082a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80082a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80082ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80082b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082b2:	4a85      	ldr	r2, [pc, #532]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80082b4:	430b      	orrs	r3, r1
 80082b6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80082ba:	e003      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082bc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80082c0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80082c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80082d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80082d4:	2300      	movs	r3, #0
 80082d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80082da:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80082de:	460b      	mov	r3, r1
 80082e0:	4313      	orrs	r3, r2
 80082e2:	d055      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80082e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80082e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ec:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80082f0:	d031      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80082f2:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80082f6:	d82a      	bhi.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80082f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082fc:	d02d      	beq.n	800835a <HAL_RCCEx_PeriphCLKConfig+0x816>
 80082fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008302:	d824      	bhi.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008304:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008308:	d029      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800830a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800830e:	d81e      	bhi.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008314:	d011      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8008316:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800831a:	d818      	bhi.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800831c:	2b00      	cmp	r3, #0
 800831e:	d020      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008320:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008324:	d113      	bne.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008326:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800832a:	3308      	adds	r3, #8
 800832c:	4618      	mov	r0, r3
 800832e:	f004 fab9 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008332:	4603      	mov	r3, r0
 8008334:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 8008338:	e014      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800833a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800833e:	3330      	adds	r3, #48	@ 0x30
 8008340:	4618      	mov	r0, r3
 8008342:	f004 fb47 	bl	800c9d4 <RCCEx_PLL3_Config>
 8008346:	4603      	mov	r3, r0
 8008348:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 800834c:	e00a      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008354:	e006      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008356:	bf00      	nop
 8008358:	e004      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800835a:	bf00      	nop
 800835c:	e002      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800835e:	bf00      	nop
 8008360:	e000      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008364:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10d      	bne.n	8008388 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800836c:	4b56      	ldr	r3, [pc, #344]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800836e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008372:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8008376:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800837a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800837e:	4a52      	ldr	r2, [pc, #328]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008380:	430b      	orrs	r3, r1
 8008382:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008386:	e003      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008388:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800838c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8008390:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008398:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800839c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80083a0:	2300      	movs	r3, #0
 80083a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80083a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80083aa:	460b      	mov	r3, r1
 80083ac:	4313      	orrs	r3, r2
 80083ae:	d044      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80083b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80083b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083b8:	2b05      	cmp	r3, #5
 80083ba:	d823      	bhi.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80083bc:	a201      	add	r2, pc, #4	@ (adr r2, 80083c4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c2:	bf00      	nop
 80083c4:	0800840d 	.word	0x0800840d
 80083c8:	080083dd 	.word	0x080083dd
 80083cc:	080083f1 	.word	0x080083f1
 80083d0:	0800840d 	.word	0x0800840d
 80083d4:	0800840d 	.word	0x0800840d
 80083d8:	0800840d 	.word	0x0800840d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80083dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80083e0:	3308      	adds	r3, #8
 80083e2:	4618      	mov	r0, r3
 80083e4:	f004 fa5e 	bl	800c8a4 <RCCEx_PLL2_Config>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 80083ee:	e00e      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80083f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80083f4:	3330      	adds	r3, #48	@ 0x30
 80083f6:	4618      	mov	r0, r3
 80083f8:	f004 faec 	bl	800c9d4 <RCCEx_PLL3_Config>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 8008402:	e004      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800840a:	e000      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800840c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800840e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10d      	bne.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8008416:	4b2c      	ldr	r3, [pc, #176]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008418:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800841c:	f023 0107 	bic.w	r1, r3, #7
 8008420:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008428:	4a27      	ldr	r2, [pc, #156]	@ (80084c8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800842a:	430b      	orrs	r3, r1
 800842c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008430:	e003      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008432:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008436:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800843a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800843e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008442:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008446:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800844a:	2300      	movs	r3, #0
 800844c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008450:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008454:	460b      	mov	r3, r1
 8008456:	4313      	orrs	r3, r2
 8008458:	d04f      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800845a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800845e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008462:	2b50      	cmp	r3, #80	@ 0x50
 8008464:	d029      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008466:	2b50      	cmp	r3, #80	@ 0x50
 8008468:	d823      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800846a:	2b40      	cmp	r3, #64	@ 0x40
 800846c:	d027      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800846e:	2b40      	cmp	r3, #64	@ 0x40
 8008470:	d81f      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008472:	2b30      	cmp	r3, #48	@ 0x30
 8008474:	d025      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8008476:	2b30      	cmp	r3, #48	@ 0x30
 8008478:	d81b      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800847a:	2b20      	cmp	r3, #32
 800847c:	d00f      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800847e:	2b20      	cmp	r3, #32
 8008480:	d817      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d022      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008486:	2b10      	cmp	r3, #16
 8008488:	d113      	bne.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800848a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800848e:	3308      	adds	r3, #8
 8008490:	4618      	mov	r0, r3
 8008492:	f004 fa07 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008496:	4603      	mov	r3, r0
 8008498:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 800849c:	e017      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800849e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80084a2:	3330      	adds	r3, #48	@ 0x30
 80084a4:	4618      	mov	r0, r3
 80084a6:	f004 fa95 	bl	800c9d4 <RCCEx_PLL3_Config>
 80084aa:	4603      	mov	r3, r0
 80084ac:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 80084b0:	e00d      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80084b8:	e009      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80084ba:	bf00      	nop
 80084bc:	e007      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80084be:	bf00      	nop
 80084c0:	e005      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80084c2:	bf00      	nop
 80084c4:	e003      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80084c6:	bf00      	nop
 80084c8:	44020c00 	.word	0x44020c00
        break;
 80084cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ce:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10d      	bne.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80084d6:	4baf      	ldr	r3, [pc, #700]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80084d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80084dc:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80084e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80084e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e8:	4aaa      	ldr	r2, [pc, #680]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80084ea:	430b      	orrs	r3, r1
 80084ec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80084f0:	e003      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80084f6:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80084fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008502:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008506:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800850a:	2300      	movs	r3, #0
 800850c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008510:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008514:	460b      	mov	r3, r1
 8008516:	4313      	orrs	r3, r2
 8008518:	d055      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800851a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800851e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008522:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008526:	d031      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8008528:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800852c:	d82a      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800852e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008532:	d02d      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8008534:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008538:	d824      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800853a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800853e:	d029      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8008540:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008544:	d81e      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008546:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800854a:	d011      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800854c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008550:	d818      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d020      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8008556:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800855a:	d113      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800855c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008560:	3308      	adds	r3, #8
 8008562:	4618      	mov	r0, r3
 8008564:	f004 f99e 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008568:	4603      	mov	r3, r0
 800856a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800856e:	e014      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008570:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008574:	3330      	adds	r3, #48	@ 0x30
 8008576:	4618      	mov	r0, r3
 8008578:	f004 fa2c 	bl	800c9d4 <RCCEx_PLL3_Config>
 800857c:	4603      	mov	r3, r0
 800857e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8008582:	e00a      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800858a:	e006      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800858c:	bf00      	nop
 800858e:	e004      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008590:	bf00      	nop
 8008592:	e002      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008594:	bf00      	nop
 8008596:	e000      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8008598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800859a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10d      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80085a2:	4b7c      	ldr	r3, [pc, #496]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80085a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80085a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80085ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80085b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085b4:	4a77      	ldr	r2, [pc, #476]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80085b6:	430b      	orrs	r3, r1
 80085b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80085bc:	e003      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085be:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80085c2:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80085d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80085d6:	2300      	movs	r3, #0
 80085d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80085dc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4313      	orrs	r3, r2
 80085e4:	d03d      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80085e6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085f2:	d01b      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80085f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085f8:	d814      	bhi.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80085fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085fe:	d017      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8008600:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008604:	d80e      	bhi.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8008606:	2b00      	cmp	r3, #0
 8008608:	d014      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800860a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800860e:	d109      	bne.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008610:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008614:	3330      	adds	r3, #48	@ 0x30
 8008616:	4618      	mov	r0, r3
 8008618:	f004 f9dc 	bl	800c9d4 <RCCEx_PLL3_Config>
 800861c:	4603      	mov	r3, r0
 800861e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8008622:	e008      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800862a:	e004      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800862c:	bf00      	nop
 800862e:	e002      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008630:	bf00      	nop
 8008632:	e000      	b.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8008634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008636:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10d      	bne.n	800865a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800863e:	4b55      	ldr	r3, [pc, #340]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008640:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008644:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008648:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800864c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008650:	4a50      	ldr	r2, [pc, #320]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008652:	430b      	orrs	r3, r1
 8008654:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008658:	e003      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800865e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008662:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800866e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008672:	2300      	movs	r3, #0
 8008674:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008678:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800867c:	460b      	mov	r3, r1
 800867e:	4313      	orrs	r3, r2
 8008680:	d03d      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8008682:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800868a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800868e:	d01b      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8008690:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008694:	d814      	bhi.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8008696:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800869a:	d017      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800869c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086a0:	d80e      	bhi.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d014      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80086a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086aa:	d109      	bne.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80086ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80086b0:	3330      	adds	r3, #48	@ 0x30
 80086b2:	4618      	mov	r0, r3
 80086b4:	f004 f98e 	bl	800c9d4 <RCCEx_PLL3_Config>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80086be:	e008      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80086c6:	e004      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80086c8:	bf00      	nop
 80086ca:	e002      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80086cc:	bf00      	nop
 80086ce:	e000      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80086d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086d2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10d      	bne.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80086da:	4b2e      	ldr	r3, [pc, #184]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80086dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80086e0:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80086e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80086e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086ec:	4a29      	ldr	r2, [pc, #164]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80086ee:	430b      	orrs	r3, r1
 80086f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80086f4:	e003      	b.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80086fa:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80086fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800870a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800870e:	2300      	movs	r3, #0
 8008710:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008714:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008718:	460b      	mov	r3, r1
 800871a:	4313      	orrs	r3, r2
 800871c:	d040      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800871e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008722:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008726:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800872a:	d01b      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800872c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008730:	d814      	bhi.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8008732:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008736:	d017      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008738:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800873c:	d80e      	bhi.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d014      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008742:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008746:	d109      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008748:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800874c:	3330      	adds	r3, #48	@ 0x30
 800874e:	4618      	mov	r0, r3
 8008750:	f004 f940 	bl	800c9d4 <RCCEx_PLL3_Config>
 8008754:	4603      	mov	r3, r0
 8008756:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* I2C3 clock source config set later after clock selection check */
        break;
 800875a:	e008      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008762:	e004      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008764:	bf00      	nop
 8008766:	e002      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8008768:	bf00      	nop
 800876a:	e000      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800876c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800876e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008772:	2b00      	cmp	r3, #0
 8008774:	d110      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008776:	4b07      	ldr	r3, [pc, #28]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8008778:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800877c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008780:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008784:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008788:	4a02      	ldr	r2, [pc, #8]	@ (8008794 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800878a:	430b      	orrs	r3, r1
 800878c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008790:	e006      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8008792:	bf00      	nop
 8008794:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008798:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800879c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	2100      	movs	r1, #0
 80087aa:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80087ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80087b6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80087ba:	460b      	mov	r3, r1
 80087bc:	4313      	orrs	r3, r2
 80087be:	d03d      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80087c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80087c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80087cc:	d01b      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80087ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80087d2:	d814      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80087d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087d8:	d017      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80087da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80087de:	d80e      	bhi.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d014      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80087e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087e8:	d109      	bne.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80087ea:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80087ee:	3330      	adds	r3, #48	@ 0x30
 80087f0:	4618      	mov	r0, r3
 80087f2:	f004 f8ef 	bl	800c9d4 <RCCEx_PLL3_Config>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* I2C4 clock source config set later after clock selection check */
        break;
 80087fc:	e008      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008804:	e004      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8008806:	bf00      	nop
 8008808:	e002      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800880a:	bf00      	nop
 800880c:	e000      	b.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800880e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008810:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10d      	bne.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008818:	4bbe      	ldr	r3, [pc, #760]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800881a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800881e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008822:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008826:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800882a:	4aba      	ldr	r2, [pc, #744]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800882c:	430b      	orrs	r3, r1
 800882e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008832:	e003      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008834:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008838:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800883c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008848:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800884c:	2300      	movs	r3, #0
 800884e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008852:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008856:	460b      	mov	r3, r1
 8008858:	4313      	orrs	r3, r2
 800885a:	d035      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800885c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008860:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008864:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008868:	d015      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800886a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800886e:	d80e      	bhi.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008870:	2b00      	cmp	r3, #0
 8008872:	d012      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8008874:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008878:	d109      	bne.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800887a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800887e:	3330      	adds	r3, #48	@ 0x30
 8008880:	4618      	mov	r0, r3
 8008882:	f004 f8a7 	bl	800c9d4 <RCCEx_PLL3_Config>
 8008886:	4603      	mov	r3, r0
 8008888:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800888c:	e006      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008894:	e002      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8008896:	bf00      	nop
 8008898:	e000      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800889a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800889c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10d      	bne.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80088a4:	4b9b      	ldr	r3, [pc, #620]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80088a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088aa:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80088ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80088b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80088b6:	4a97      	ldr	r2, [pc, #604]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80088b8:	430b      	orrs	r3, r1
 80088ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80088be:	e003      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80088c4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80088c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	2100      	movs	r1, #0
 80088d2:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 80088d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80088de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80088e2:	460b      	mov	r3, r1
 80088e4:	4313      	orrs	r3, r2
 80088e6:	d00e      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80088e8:	4b8a      	ldr	r3, [pc, #552]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	4a89      	ldr	r2, [pc, #548]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80088ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80088f2:	61d3      	str	r3, [r2, #28]
 80088f4:	4b87      	ldr	r3, [pc, #540]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80088f6:	69d9      	ldr	r1, [r3, #28]
 80088f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80088fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008900:	4a84      	ldr	r2, [pc, #528]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008902:	430b      	orrs	r3, r1
 8008904:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008906:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008912:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008916:	2300      	movs	r3, #0
 8008918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800891c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008920:	460b      	mov	r3, r1
 8008922:	4313      	orrs	r3, r2
 8008924:	d055      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8008926:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800892a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800892e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008932:	d031      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8008934:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008938:	d82a      	bhi.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800893a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800893e:	d02d      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8008940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008944:	d824      	bhi.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008946:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800894a:	d029      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800894c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008950:	d81e      	bhi.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8008952:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008956:	d011      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8008958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800895c:	d818      	bhi.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800895e:	2b00      	cmp	r3, #0
 8008960:	d020      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8008962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008966:	d113      	bne.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008968:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800896c:	3308      	adds	r3, #8
 800896e:	4618      	mov	r0, r3
 8008970:	f003 ff98 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008974:	4603      	mov	r3, r0
 8008976:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800897a:	e014      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800897c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008980:	3330      	adds	r3, #48	@ 0x30
 8008982:	4618      	mov	r0, r3
 8008984:	f004 f826 	bl	800c9d4 <RCCEx_PLL3_Config>
 8008988:	4603      	mov	r3, r0
 800898a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800898e:	e00a      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008996:	e006      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8008998:	bf00      	nop
 800899a:	e004      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800899c:	bf00      	nop
 800899e:	e002      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80089a0:	bf00      	nop
 80089a2:	e000      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80089a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089a6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10d      	bne.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80089ae:	4b59      	ldr	r3, [pc, #356]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80089b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80089b4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80089b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80089bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089c0:	4a54      	ldr	r2, [pc, #336]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80089c2:	430b      	orrs	r3, r1
 80089c4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80089c8:	e003      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ca:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80089ce:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80089d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80089d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80089de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089e2:	2300      	movs	r3, #0
 80089e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80089ec:	460b      	mov	r3, r1
 80089ee:	4313      	orrs	r3, r2
 80089f0:	d055      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80089f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80089f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80089fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80089fe:	d031      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8008a00:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008a04:	d82a      	bhi.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008a06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a0a:	d02d      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8008a0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a10:	d824      	bhi.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008a12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a16:	d029      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8008a18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a1c:	d81e      	bhi.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a22:	d011      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8008a24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a28:	d818      	bhi.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d020      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a32:	d113      	bne.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a34:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a38:	3308      	adds	r3, #8
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f003 ff32 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008a40:	4603      	mov	r3, r0
 8008a42:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008a46:	e014      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a48:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a4c:	3330      	adds	r3, #48	@ 0x30
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f003 ffc0 	bl	800c9d4 <RCCEx_PLL3_Config>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8008a5a:	e00a      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008a62:	e006      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008a64:	bf00      	nop
 8008a66:	e004      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008a68:	bf00      	nop
 8008a6a:	e002      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008a6c:	bf00      	nop
 8008a6e:	e000      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8008a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a72:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10d      	bne.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008a7a:	4b26      	ldr	r3, [pc, #152]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008a7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008a80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008a84:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a8c:	4a21      	ldr	r2, [pc, #132]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8008a8e:	430b      	orrs	r3, r1
 8008a90:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008a94:	e003      	b.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a96:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008a9a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8008a9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008ab4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4313      	orrs	r3, r2
 8008abc:	d057      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8008abe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008ac2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008ac6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008aca:	d033      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8008acc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ad0:	d82c      	bhi.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008ad2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ad6:	d02f      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8008ad8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008adc:	d826      	bhi.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008ade:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ae2:	d02b      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8008ae4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ae8:	d820      	bhi.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008aea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aee:	d013      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008af4:	d81a      	bhi.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d022      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8008afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008afe:	d115      	bne.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b00:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008b04:	3308      	adds	r3, #8
 8008b06:	4618      	mov	r0, r3
 8008b08:	f003 fecc 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8008b12:	e016      	b.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8008b14:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b18:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008b1c:	3330      	adds	r3, #48	@ 0x30
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f003 ff58 	bl	800c9d4 <RCCEx_PLL3_Config>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8008b2a:	e00a      	b.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008b32:	e006      	b.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008b34:	bf00      	nop
 8008b36:	e004      	b.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008b38:	bf00      	nop
 8008b3a:	e002      	b.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008b3c:	bf00      	nop
 8008b3e:	e000      	b.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8008b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b42:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10d      	bne.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8008b4a:	4bbb      	ldr	r3, [pc, #748]	@ (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008b4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008b50:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008b54:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008b58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b5c:	4ab6      	ldr	r2, [pc, #728]	@ (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008b64:	e003      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b66:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008b6a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8008b6e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	2100      	movs	r1, #0
 8008b78:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8008b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b84:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	d055      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8008b8e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008b92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008b96:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008b9a:	d031      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8008b9c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008ba0:	d82a      	bhi.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ba6:	d02d      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8008ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008bac:	d824      	bhi.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008bae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bb2:	d029      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8008bb4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008bb8:	d81e      	bhi.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008bba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bbe:	d011      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8008bc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008bc4:	d818      	bhi.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d020      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8008bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bce:	d113      	bne.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008bd0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f003 fe64 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8008be2:	e014      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008be4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008be8:	3330      	adds	r3, #48	@ 0x30
 8008bea:	4618      	mov	r0, r3
 8008bec:	f003 fef2 	bl	800c9d4 <RCCEx_PLL3_Config>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8008bf6:	e00a      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008bfe:	e006      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008c00:	bf00      	nop
 8008c02:	e004      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008c04:	bf00      	nop
 8008c06:	e002      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008c08:	bf00      	nop
 8008c0a:	e000      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8008c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c0e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10d      	bne.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8008c16:	4b88      	ldr	r3, [pc, #544]	@ (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008c18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008c1c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8008c20:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008c24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008c28:	4a83      	ldr	r2, [pc, #524]	@ (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008c2a:	430b      	orrs	r3, r1
 8008c2c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008c30:	e003      	b.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c32:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008c36:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8008c3a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	2100      	movs	r1, #0
 8008c44:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8008c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c50:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008c54:	460b      	mov	r3, r1
 8008c56:	4313      	orrs	r3, r2
 8008c58:	d055      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8008c5a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008c5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c62:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008c66:	d031      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8008c68:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008c6c:	d82a      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008c6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c72:	d02d      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8008c74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c78:	d824      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008c7a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c7e:	d029      	beq.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8008c80:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008c84:	d81e      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008c86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c8a:	d011      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8008c8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c90:	d818      	bhi.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d020      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8008c96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c9a:	d113      	bne.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c9c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f003 fdfe 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8008cae:	e014      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008cb0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008cb4:	3330      	adds	r3, #48	@ 0x30
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f003 fe8c 	bl	800c9d4 <RCCEx_PLL3_Config>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8008cc2:	e00a      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008cca:	e006      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008ccc:	bf00      	nop
 8008cce:	e004      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008cd0:	bf00      	nop
 8008cd2:	e002      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008cd4:	bf00      	nop
 8008cd6:	e000      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8008cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cda:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10d      	bne.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8008ce2:	4b55      	ldr	r3, [pc, #340]	@ (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008ce4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008ce8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008cec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008cf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008cf4:	4a50      	ldr	r2, [pc, #320]	@ (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008cfc:	e003      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfe:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008d02:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8008d06:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	2100      	movs	r1, #0
 8008d10:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8008d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d1c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008d20:	460b      	mov	r3, r1
 8008d22:	4313      	orrs	r3, r2
 8008d24:	d055      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8008d26:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008d2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d32:	d031      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8008d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d38:	d82a      	bhi.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d3e:	d02d      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8008d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d44:	d824      	bhi.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008d46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d4a:	d029      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8008d4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d50:	d81e      	bhi.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d56:	d011      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8008d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d5c:	d818      	bhi.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d020      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8008d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d66:	d113      	bne.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008d68:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f003 fd98 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8008d7a:	e014      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008d7c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008d80:	3330      	adds	r3, #48	@ 0x30
 8008d82:	4618      	mov	r0, r3
 8008d84:	f003 fe26 	bl	800c9d4 <RCCEx_PLL3_Config>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8008d8e:	e00a      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008d96:	e006      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008d98:	bf00      	nop
 8008d9a:	e004      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008d9c:	bf00      	nop
 8008d9e:	e002      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008da0:	bf00      	nop
 8008da2:	e000      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8008da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008da6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10d      	bne.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8008dae:	4b22      	ldr	r3, [pc, #136]	@ (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008db0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008db4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008db8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008dbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008dc2:	430b      	orrs	r3, r1
 8008dc4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008dc8:	e003      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dca:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008dce:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008dd2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008dde:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008de2:	2300      	movs	r3, #0
 8008de4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008de8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008dec:	460b      	mov	r3, r1
 8008dee:	4313      	orrs	r3, r2
 8008df0:	d055      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8008df2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008df6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008dfa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008dfe:	d035      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8008e00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e04:	d82e      	bhi.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008e06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e0a:	d031      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8008e0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e10:	d828      	bhi.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008e12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e16:	d01b      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8008e18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e1c:	d822      	bhi.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d003      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8008e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e26:	d009      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8008e28:	e01c      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e2a:	4b03      	ldr	r3, [pc, #12]	@ (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e2e:	4a02      	ldr	r2, [pc, #8]	@ (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8008e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e34:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008e36:	e01c      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8008e38:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e3c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008e40:	3308      	adds	r3, #8
 8008e42:	4618      	mov	r0, r3
 8008e44:	f003 fd2e 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008e4e:	e010      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e50:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008e54:	3330      	adds	r3, #48	@ 0x30
 8008e56:	4618      	mov	r0, r3
 8008e58:	f003 fdbc 	bl	800c9d4 <RCCEx_PLL3_Config>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008e62:	e006      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008e6a:	e002      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8008e6c:	bf00      	nop
 8008e6e:	e000      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8008e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e72:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10d      	bne.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008e7a:	4bc2      	ldr	r3, [pc, #776]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8008e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e80:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008e84:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008e88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008e8c:	4abd      	ldr	r2, [pc, #756]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8008e8e:	430b      	orrs	r3, r1
 8008e90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008e94:	e003      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e96:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008e9a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8008e9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008eaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008eac:	2300      	movs	r3, #0
 8008eae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008eb0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	d051      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x141a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008eba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008ebe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008ec2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ec6:	d033      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 8008ec8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ecc:	d82c      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8008ece:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008ed2:	d02d      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 8008ed4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008ed8:	d826      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8008eda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ede:	d019      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x13d0>
 8008ee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ee4:	d820      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x13ae>
 8008eea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008eee:	d007      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
 8008ef0:	e01a      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ef2:	4ba4      	ldr	r3, [pc, #656]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef6:	4aa3      	ldr	r2, [pc, #652]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8008ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008efc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008efe:	e018      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f00:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008f04:	3308      	adds	r3, #8
 8008f06:	4618      	mov	r0, r3
 8008f08:	f003 fccc 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008f12:	e00e      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f14:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008f18:	3330      	adds	r3, #48	@ 0x30
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f003 fd5a 	bl	800c9d4 <RCCEx_PLL3_Config>
 8008f20:	4603      	mov	r3, r0
 8008f22:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008f26:	e004      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x13ee>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008f2e:	e000      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x13ee>
        break;
 8008f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f32:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10d      	bne.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x1412>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008f3a:	4b92      	ldr	r3, [pc, #584]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8008f3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f40:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8008f44:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008f48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008f4c:	4a8d      	ldr	r2, [pc, #564]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8008f4e:	430b      	orrs	r3, r1
 8008f50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008f54:	e003      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x141a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f56:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008f5a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008f5e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008f6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f70:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008f74:	460b      	mov	r3, r1
 8008f76:	4313      	orrs	r3, r2
 8008f78:	d032      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x149c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008f7a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008f7e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008f82:	2b05      	cmp	r3, #5
 8008f84:	d80f      	bhi.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x1462>
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d211      	bcs.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x146a>
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d911      	bls.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d109      	bne.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x1462>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f92:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008f96:	3308      	adds	r3, #8
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f003 fc83 	bl	800c8a4 <RCCEx_PLL2_Config>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008fa4:	e006      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008fac:	e002      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 8008fae:	bf00      	nop
 8008fb0:	e000      	b.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 8008fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fb4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d10d      	bne.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x1494>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008fbc:	4b71      	ldr	r3, [pc, #452]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8008fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fc2:	f023 0107 	bic.w	r1, r3, #7
 8008fc6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008fca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8008fce:	4a6d      	ldr	r2, [pc, #436]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8008fd0:	430b      	orrs	r3, r1
 8008fd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008fd6:	e003      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x149c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008fdc:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8008fe0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	2100      	movs	r1, #0
 8008fea:	66b9      	str	r1, [r7, #104]	@ 0x68
 8008fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ff2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	d024      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x1502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8008ffc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009000:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009004:	2b00      	cmp	r3, #0
 8009006:	d005      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x14d0>
 8009008:	2b08      	cmp	r3, #8
 800900a:	d005      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009012:	e002      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 8009014:	bf00      	nop
 8009016:	e000      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 8009018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800901a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10d      	bne.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x14fa>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8009022:	4b58      	ldr	r3, [pc, #352]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009028:	f023 0108 	bic.w	r1, r3, #8
 800902c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009030:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009034:	4a53      	ldr	r2, [pc, #332]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009036:	430b      	orrs	r3, r1
 8009038:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800903c:	e003      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x1502>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009042:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009046:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009052:	663b      	str	r3, [r7, #96]	@ 0x60
 8009054:	2300      	movs	r3, #0
 8009056:	667b      	str	r3, [r7, #100]	@ 0x64
 8009058:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800905c:	460b      	mov	r3, r1
 800905e:	4313      	orrs	r3, r2
 8009060:	f000 80b9 	beq.w	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x1692>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8009064:	4b48      	ldr	r3, [pc, #288]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009068:	4a47      	ldr	r2, [pc, #284]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800906a:	f043 0301 	orr.w	r3, r3, #1
 800906e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009070:	f7fa fc80 	bl	8003974 <HAL_GetTick>
 8009074:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009078:	e00b      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x154e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800907a:	f7fa fc7b 	bl	8003974 <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d903      	bls.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x154e>
      {
        ret = HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009090:	e005      	b.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x155a>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009092:	4b3d      	ldr	r3, [pc, #244]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009096:	f003 0301 	and.w	r3, r3, #1
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0ed      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x1536>
      }
    }

    if (ret == HAL_OK)
 800909e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f040 8093 	bne.w	80091ce <HAL_RCCEx_PeriphCLKConfig+0x168a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80090a8:	4b36      	ldr	r3, [pc, #216]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80090aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090b2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80090b6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d023      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x15c2>
 80090be:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80090c2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80090c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d01b      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x15c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80090ce:	4b2d      	ldr	r3, [pc, #180]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80090d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090d8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090dc:	4b29      	ldr	r3, [pc, #164]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80090de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090e2:	4a28      	ldr	r2, [pc, #160]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80090e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090ec:	4b25      	ldr	r3, [pc, #148]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80090ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090f2:	4a24      	ldr	r2, [pc, #144]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80090f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80090fc:	4a21      	ldr	r2, [pc, #132]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80090fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8009102:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009106:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d019      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x1602>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009112:	f7fa fc2f 	bl	8003974 <HAL_GetTick>
 8009116:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800911a:	e00d      	b.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x15f4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800911c:	f7fa fc2a 	bl	8003974 <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009126:	1ad2      	subs	r2, r2, r3
 8009128:	f241 3388 	movw	r3, #5000	@ 0x1388
 800912c:	429a      	cmp	r2, r3
 800912e:	d903      	bls.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x15f4>
          {
            ret = HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
            break;
 8009136:	e006      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x1602>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009138:	4b12      	ldr	r3, [pc, #72]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800913a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800913e:	f003 0302 	and.w	r3, r3, #2
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0ea      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x15d8>
          }
        }
      }

      if (ret == HAL_OK)
 8009146:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800914a:	2b00      	cmp	r3, #0
 800914c:	d13a      	bne.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1680>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800914e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009152:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800915a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800915e:	d115      	bne.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x1648>
 8009160:	4b08      	ldr	r3, [pc, #32]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009168:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800916c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009170:	091b      	lsrs	r3, r3, #4
 8009172:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009176:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800917a:	4a02      	ldr	r2, [pc, #8]	@ (8009184 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800917c:	430b      	orrs	r3, r1
 800917e:	61d3      	str	r3, [r2, #28]
 8009180:	e00a      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1654>
 8009182:	bf00      	nop
 8009184:	44020c00 	.word	0x44020c00
 8009188:	44020800 	.word	0x44020800
 800918c:	4bc6      	ldr	r3, [pc, #792]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	4ac5      	ldr	r2, [pc, #788]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009192:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009196:	61d3      	str	r3, [r2, #28]
 8009198:	4bc3      	ldr	r3, [pc, #780]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800919a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800919e:	4ac2      	ldr	r2, [pc, #776]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80091a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091a4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80091a8:	4bbf      	ldr	r3, [pc, #764]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80091aa:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80091ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80091b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80091b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091ba:	4abb      	ldr	r2, [pc, #748]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80091bc:	430b      	orrs	r3, r1
 80091be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80091c2:	e008      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80091c4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80091c8:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
 80091cc:	e003      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ce:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80091d2:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80091d6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80091e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091e4:	2300      	movs	r3, #0
 80091e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091e8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80091ec:	460b      	mov	r3, r1
 80091ee:	4313      	orrs	r3, r2
 80091f0:	d035      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x171a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80091f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80091f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80091fa:	2b30      	cmp	r3, #48	@ 0x30
 80091fc:	d014      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x16e4>
 80091fe:	2b30      	cmp	r3, #48	@ 0x30
 8009200:	d80e      	bhi.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 8009202:	2b20      	cmp	r3, #32
 8009204:	d012      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8009206:	2b20      	cmp	r3, #32
 8009208:	d80a      	bhi.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 800920a:	2b00      	cmp	r3, #0
 800920c:	d010      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800920e:	2b10      	cmp	r3, #16
 8009210:	d106      	bne.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009212:	4ba5      	ldr	r3, [pc, #660]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009216:	4aa4      	ldr	r2, [pc, #656]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800921c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800921e:	e008      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x16ee>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009226:	e004      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8009228:	bf00      	nop
 800922a:	e002      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 800922c:	bf00      	nop
 800922e:	e000      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8009230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009232:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10d      	bne.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x1712>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800923a:	4b9b      	ldr	r3, [pc, #620]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800923c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009240:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009244:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009248:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800924c:	4a96      	ldr	r2, [pc, #600]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800924e:	430b      	orrs	r3, r1
 8009250:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009254:	e003      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x171a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009256:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800925a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800925e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800926a:	653b      	str	r3, [r7, #80]	@ 0x50
 800926c:	2300      	movs	r3, #0
 800926e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009270:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009274:	460b      	mov	r3, r1
 8009276:	4313      	orrs	r3, r2
 8009278:	d033      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x179e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800927a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800927e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x1748>
 8009286:	2b40      	cmp	r3, #64	@ 0x40
 8009288:	d007      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x1756>
 800928a:	e010      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0x176a>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800928c:	4b86      	ldr	r3, [pc, #536]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800928e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009290:	4a85      	ldr	r2, [pc, #532]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009296:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009298:	e00d      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x1772>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800929a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800929e:	3308      	adds	r3, #8
 80092a0:	4618      	mov	r0, r3
 80092a2:	f003 faff 	bl	800c8a4 <RCCEx_PLL2_Config>
 80092a6:	4603      	mov	r3, r0
 80092a8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80092ac:	e003      	b.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x1772>

      default:
        ret = HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80092b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092b6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10d      	bne.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x1796>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80092be:	4b7a      	ldr	r3, [pc, #488]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80092c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092c4:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80092c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80092cc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80092d0:	4a75      	ldr	r2, [pc, #468]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80092d2:	430b      	orrs	r3, r1
 80092d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80092d8:	e003      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x179e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092da:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80092de:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80092e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80092ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092f0:	2300      	movs	r3, #0
 80092f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80092f8:	460b      	mov	r3, r1
 80092fa:	4313      	orrs	r3, r2
 80092fc:	d048      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x184c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80092fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009302:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009306:	2b04      	cmp	r3, #4
 8009308:	d827      	bhi.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x1816>
 800930a:	a201      	add	r2, pc, #4	@ (adr r2, 8009310 <HAL_RCCEx_PeriphCLKConfig+0x17cc>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	08009325 	.word	0x08009325
 8009314:	08009333 	.word	0x08009333
 8009318:	08009347 	.word	0x08009347
 800931c:	08009363 	.word	0x08009363
 8009320:	08009363 	.word	0x08009363
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009324:	4b60      	ldr	r3, [pc, #384]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009328:	4a5f      	ldr	r2, [pc, #380]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800932a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800932e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009330:	e018      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x1820>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009332:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009336:	3308      	adds	r3, #8
 8009338:	4618      	mov	r0, r3
 800933a:	f003 fab3 	bl	800c8a4 <RCCEx_PLL2_Config>
 800933e:	4603      	mov	r3, r0
 8009340:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009344:	e00e      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x1820>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009346:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800934a:	3330      	adds	r3, #48	@ 0x30
 800934c:	4618      	mov	r0, r3
 800934e:	f003 fb41 	bl	800c9d4 <RCCEx_PLL3_Config>
 8009352:	4603      	mov	r3, r0
 8009354:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009358:	e004      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x1820>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009360:	e000      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x1820>
        break;
 8009362:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009364:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10d      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x1844>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800936c:	4b4e      	ldr	r3, [pc, #312]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800936e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009372:	f023 0107 	bic.w	r1, r3, #7
 8009376:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800937a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800937e:	4a4a      	ldr	r2, [pc, #296]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009380:	430b      	orrs	r3, r1
 8009382:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009386:	e003      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009388:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800938c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009390:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800939c:	643b      	str	r3, [r7, #64]	@ 0x40
 800939e:	2300      	movs	r3, #0
 80093a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80093a2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80093a6:	460b      	mov	r3, r1
 80093a8:	4313      	orrs	r3, r2
 80093aa:	f000 8083 	beq.w	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1970>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80093ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80093b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093b6:	2b20      	cmp	r3, #32
 80093b8:	d85f      	bhi.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x1936>
 80093ba:	a201      	add	r2, pc, #4	@ (adr r2, 80093c0 <HAL_RCCEx_PeriphCLKConfig+0x187c>)
 80093bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c0:	08009445 	.word	0x08009445
 80093c4:	0800947b 	.word	0x0800947b
 80093c8:	0800947b 	.word	0x0800947b
 80093cc:	0800947b 	.word	0x0800947b
 80093d0:	0800947b 	.word	0x0800947b
 80093d4:	0800947b 	.word	0x0800947b
 80093d8:	0800947b 	.word	0x0800947b
 80093dc:	0800947b 	.word	0x0800947b
 80093e0:	08009453 	.word	0x08009453
 80093e4:	0800947b 	.word	0x0800947b
 80093e8:	0800947b 	.word	0x0800947b
 80093ec:	0800947b 	.word	0x0800947b
 80093f0:	0800947b 	.word	0x0800947b
 80093f4:	0800947b 	.word	0x0800947b
 80093f8:	0800947b 	.word	0x0800947b
 80093fc:	0800947b 	.word	0x0800947b
 8009400:	08009467 	.word	0x08009467
 8009404:	0800947b 	.word	0x0800947b
 8009408:	0800947b 	.word	0x0800947b
 800940c:	0800947b 	.word	0x0800947b
 8009410:	0800947b 	.word	0x0800947b
 8009414:	0800947b 	.word	0x0800947b
 8009418:	0800947b 	.word	0x0800947b
 800941c:	0800947b 	.word	0x0800947b
 8009420:	08009483 	.word	0x08009483
 8009424:	0800947b 	.word	0x0800947b
 8009428:	0800947b 	.word	0x0800947b
 800942c:	0800947b 	.word	0x0800947b
 8009430:	0800947b 	.word	0x0800947b
 8009434:	0800947b 	.word	0x0800947b
 8009438:	0800947b 	.word	0x0800947b
 800943c:	0800947b 	.word	0x0800947b
 8009440:	08009483 	.word	0x08009483
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009444:	4b18      	ldr	r3, [pc, #96]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009448:	4a17      	ldr	r2, [pc, #92]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800944a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800944e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009450:	e018      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x1940>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009452:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009456:	3308      	adds	r3, #8
 8009458:	4618      	mov	r0, r3
 800945a:	f003 fa23 	bl	800c8a4 <RCCEx_PLL2_Config>
 800945e:	4603      	mov	r3, r0
 8009460:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009464:	e00e      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x1940>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009466:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800946a:	3330      	adds	r3, #48	@ 0x30
 800946c:	4618      	mov	r0, r3
 800946e:	f003 fab1 	bl	800c9d4 <RCCEx_PLL3_Config>
 8009472:	4603      	mov	r3, r0
 8009474:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009478:	e004      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x1940>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009480:	e000      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x1940>
        break;
 8009482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009484:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10f      	bne.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x1968>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800948c:	4b06      	ldr	r3, [pc, #24]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800948e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009492:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009496:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800949a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800949e:	4a02      	ldr	r2, [pc, #8]	@ (80094a8 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80094a0:	430b      	orrs	r3, r1
 80094a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80094a6:	e005      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x1970>
 80094a8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ac:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80094b0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80094b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80094b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80094c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094c2:	2300      	movs	r3, #0
 80094c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80094ca:	460b      	mov	r3, r1
 80094cc:	4313      	orrs	r3, r2
 80094ce:	d04e      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80094d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80094d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80094d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094dc:	d02e      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
 80094de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094e2:	d827      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 80094e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80094e6:	d02b      	beq.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
 80094e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80094ea:	d823      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 80094ec:	2b80      	cmp	r3, #128	@ 0x80
 80094ee:	d017      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
 80094f0:	2b80      	cmp	r3, #128	@ 0x80
 80094f2:	d81f      	bhi.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d002      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x19ba>
 80094f8:	2b40      	cmp	r3, #64	@ 0x40
 80094fa:	d007      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x19c8>
 80094fc:	e01a      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094fe:	4bb0      	ldr	r3, [pc, #704]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8009500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009502:	4aaf      	ldr	r2, [pc, #700]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8009504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009508:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800950a:	e01a      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x19fe>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800950c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009510:	3308      	adds	r3, #8
 8009512:	4618      	mov	r0, r3
 8009514:	f003 f9c6 	bl	800c8a4 <RCCEx_PLL2_Config>
 8009518:	4603      	mov	r3, r0
 800951a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800951e:	e010      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x19fe>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009520:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009524:	3330      	adds	r3, #48	@ 0x30
 8009526:	4618      	mov	r0, r3
 8009528:	f003 fa54 	bl	800c9d4 <RCCEx_PLL3_Config>
 800952c:	4603      	mov	r3, r0
 800952e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8009532:	e006      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800953a:	e002      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 800953c:	bf00      	nop
 800953e:	e000      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 8009540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009542:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10d      	bne.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x1a22>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800954a:	4b9d      	ldr	r3, [pc, #628]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800954c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009550:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009554:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009558:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800955c:	4a98      	ldr	r2, [pc, #608]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800955e:	430b      	orrs	r3, r1
 8009560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009564:	e003      	b.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009566:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800956a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800956e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800957a:	633b      	str	r3, [r7, #48]	@ 0x30
 800957c:	2300      	movs	r3, #0
 800957e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009580:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009584:	460b      	mov	r3, r1
 8009586:	4313      	orrs	r3, r2
 8009588:	d055      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x1af2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800958a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800958e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009592:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009596:	d031      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x1ab8>
 8009598:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800959c:	d82a      	bhi.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 800959e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095a2:	d02d      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x1abc>
 80095a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095a8:	d824      	bhi.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80095aa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80095ae:	d029      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
 80095b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80095b4:	d81e      	bhi.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80095b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095ba:	d011      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
 80095bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095c0:	d818      	bhi.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d020      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x1ac4>
 80095c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095ca:	d113      	bne.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80095cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80095d0:	3308      	adds	r3, #8
 80095d2:	4618      	mov	r0, r3
 80095d4:	f003 f966 	bl	800c8a4 <RCCEx_PLL2_Config>
 80095d8:	4603      	mov	r3, r0
 80095da:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80095de:	e014      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x1ac6>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80095e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80095e4:	3330      	adds	r3, #48	@ 0x30
 80095e6:	4618      	mov	r0, r3
 80095e8:	f003 f9f4 	bl	800c9d4 <RCCEx_PLL3_Config>
 80095ec:	4603      	mov	r3, r0
 80095ee:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80095f2:	e00a      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80095fa:	e006      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 80095fc:	bf00      	nop
 80095fe:	e004      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8009600:	bf00      	nop
 8009602:	e002      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8009604:	bf00      	nop
 8009606:	e000      	b.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8009608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800960a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10d      	bne.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x1aea>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8009612:	4b6b      	ldr	r3, [pc, #428]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8009614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009618:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800961c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009624:	4a66      	ldr	r2, [pc, #408]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8009626:	430b      	orrs	r3, r1
 8009628:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800962c:	e003      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x1af2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800962e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009632:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8009636:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009642:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009644:	2300      	movs	r3, #0
 8009646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009648:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800964c:	460b      	mov	r3, r1
 800964e:	4313      	orrs	r3, r2
 8009650:	d055      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x1bba>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8009652:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009656:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800965a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800965e:	d031      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x1b80>
 8009660:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009664:	d82a      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8009666:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800966a:	d02d      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x1b84>
 800966c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009670:	d824      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8009672:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009676:	d029      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 8009678:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800967c:	d81e      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 800967e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009682:	d011      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0x1b64>
 8009684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009688:	d818      	bhi.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 800968a:	2b00      	cmp	r3, #0
 800968c:	d020      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8c>
 800968e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009692:	d113      	bne.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x1b78>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009694:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009698:	3308      	adds	r3, #8
 800969a:	4618      	mov	r0, r3
 800969c:	f003 f902 	bl	800c8a4 <RCCEx_PLL2_Config>
 80096a0:	4603      	mov	r3, r0
 80096a2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80096a6:	e014      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80096a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80096ac:	3330      	adds	r3, #48	@ 0x30
 80096ae:	4618      	mov	r0, r3
 80096b0:	f003 f990 	bl	800c9d4 <RCCEx_PLL3_Config>
 80096b4:	4603      	mov	r3, r0
 80096b6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80096ba:	e00a      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80096c2:	e006      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 80096c4:	bf00      	nop
 80096c6:	e004      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 80096c8:	bf00      	nop
 80096ca:	e002      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 80096cc:	bf00      	nop
 80096ce:	e000      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 80096d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096d2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10d      	bne.n	80096f6 <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80096da:	4b39      	ldr	r3, [pc, #228]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80096dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80096e0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80096e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80096e8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80096ec:	4934      	ldr	r1, [pc, #208]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80096f4:	e003      	b.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x1bba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80096fa:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80096fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	2100      	movs	r1, #0
 8009708:	6239      	str	r1, [r7, #32]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009710:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009714:	460b      	mov	r3, r1
 8009716:	4313      	orrs	r3, r2
 8009718:	d058      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1c88>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800971a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800971e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009722:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009726:	d031      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8009728:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800972c:	d82a      	bhi.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 800972e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009732:	d02d      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0x1c4c>
 8009734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009738:	d824      	bhi.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 800973a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800973e:	d029      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
 8009740:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009744:	d81e      	bhi.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8009746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800974a:	d011      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x1c2c>
 800974c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009750:	d818      	bhi.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8009752:	2b00      	cmp	r3, #0
 8009754:	d020      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x1c54>
 8009756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800975a:	d113      	bne.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800975c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009760:	3308      	adds	r3, #8
 8009762:	4618      	mov	r0, r3
 8009764:	f003 f89e 	bl	800c8a4 <RCCEx_PLL2_Config>
 8009768:	4603      	mov	r3, r0
 800976a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800976e:	e014      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x1c56>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009770:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009774:	3330      	adds	r3, #48	@ 0x30
 8009776:	4618      	mov	r0, r3
 8009778:	f003 f92c 	bl	800c9d4 <RCCEx_PLL3_Config>
 800977c:	4603      	mov	r3, r0
 800977e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009782:	e00a      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009784:	2301      	movs	r3, #1
 8009786:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800978a:	e006      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 800978c:	bf00      	nop
 800978e:	e004      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8009790:	bf00      	nop
 8009792:	e002      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8009794:	bf00      	nop
 8009796:	e000      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8009798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800979a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d110      	bne.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80097a2:	4b07      	ldr	r3, [pc, #28]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80097a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80097a8:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 80097ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80097b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097b4:	4902      	ldr	r1, [pc, #8]	@ (80097c0 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80097bc:	e006      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x1c88>
 80097be:	bf00      	nop
 80097c0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80097c8:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80097cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80097d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d4:	2100      	movs	r1, #0
 80097d6:	61b9      	str	r1, [r7, #24]
 80097d8:	f003 0302 	and.w	r3, r3, #2
 80097dc:	61fb      	str	r3, [r7, #28]
 80097de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80097e2:	460b      	mov	r3, r1
 80097e4:	4313      	orrs	r3, r2
 80097e6:	d03d      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80097e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80097ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80097f0:	2b03      	cmp	r3, #3
 80097f2:	d81c      	bhi.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x1cea>
 80097f4:	a201      	add	r2, pc, #4	@ (adr r2, 80097fc <HAL_RCCEx_PeriphCLKConfig+0x1cb8>)
 80097f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097fa:	bf00      	nop
 80097fc:	08009837 	.word	0x08009837
 8009800:	0800980d 	.word	0x0800980d
 8009804:	0800981b 	.word	0x0800981b
 8009808:	08009837 	.word	0x08009837
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800980c:	4b6f      	ldr	r3, [pc, #444]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800980e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009810:	4a6e      	ldr	r2, [pc, #440]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8009812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009816:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009818:	e00e      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800981a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800981e:	3308      	adds	r3, #8
 8009820:	4618      	mov	r0, r3
 8009822:	f003 f83f 	bl	800c8a4 <RCCEx_PLL2_Config>
 8009826:	4603      	mov	r3, r0
 8009828:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800982c:	e004      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009834:	e000      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
        break;
 8009836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009838:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10d      	bne.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x1d18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8009840:	4b62      	ldr	r3, [pc, #392]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8009842:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009846:	f023 0203 	bic.w	r2, r3, #3
 800984a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800984e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009852:	495e      	ldr	r1, [pc, #376]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8009854:	4313      	orrs	r3, r2
 8009856:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800985a:	e003      	b.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009860:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009864:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	2100      	movs	r1, #0
 800986e:	6139      	str	r1, [r7, #16]
 8009870:	f003 0304 	and.w	r3, r3, #4
 8009874:	617b      	str	r3, [r7, #20]
 8009876:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800987a:	460b      	mov	r3, r1
 800987c:	4313      	orrs	r3, r2
 800987e:	d03a      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8009880:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009884:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800988c:	d00e      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x1d68>
 800988e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009892:	d815      	bhi.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
 8009894:	2b00      	cmp	r3, #0
 8009896:	d017      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x1d84>
 8009898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800989c:	d110      	bne.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800989e:	4b4b      	ldr	r3, [pc, #300]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80098a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a2:	4a4a      	ldr	r2, [pc, #296]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80098a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098a8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80098aa:	e00e      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80098ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80098b0:	3308      	adds	r3, #8
 80098b2:	4618      	mov	r0, r3
 80098b4:	f002 fff6 	bl	800c8a4 <RCCEx_PLL2_Config>
 80098b8:	4603      	mov	r3, r0
 80098ba:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80098be:	e004      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      default:
        ret = HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80098c6:	e000      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x1d86>
        break;
 80098c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ca:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10d      	bne.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x1daa>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80098d2:	4b3e      	ldr	r3, [pc, #248]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80098d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80098dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80098e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80098e4:	4939      	ldr	r1, [pc, #228]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80098ec:	e003      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ee:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80098f2:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80098f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	2100      	movs	r1, #0
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	f003 0310 	and.w	r3, r3, #16
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800990c:	460b      	mov	r3, r1
 800990e:	4313      	orrs	r3, r2
 8009910:	d038      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x1e40>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8009912:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009916:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800991a:	2b30      	cmp	r3, #48	@ 0x30
 800991c:	d01b      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x1e12>
 800991e:	2b30      	cmp	r3, #48	@ 0x30
 8009920:	d815      	bhi.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
 8009922:	2b10      	cmp	r3, #16
 8009924:	d002      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 8009926:	2b20      	cmp	r3, #32
 8009928:	d007      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 800992a:	e010      	b.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800992c:	4b27      	ldr	r3, [pc, #156]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800992e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009930:	4a26      	ldr	r2, [pc, #152]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8009932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009936:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8009938:	e00e      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x1e14>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800993a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800993e:	3330      	adds	r3, #48	@ 0x30
 8009940:	4618      	mov	r0, r3
 8009942:	f003 f847 	bl	800c9d4 <RCCEx_PLL3_Config>
 8009946:	4603      	mov	r3, r0
 8009948:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800994c:	e004      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009954:	e000      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        break;
 8009956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009958:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10d      	bne.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x1e38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8009960:	4b1a      	ldr	r3, [pc, #104]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8009962:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009966:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800996a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800996e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8009972:	4916      	ldr	r1, [pc, #88]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8009974:	4313      	orrs	r3, r2
 8009976:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800997a:	e003      	b.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x1e40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800997c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009980:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009984:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998c:	2100      	movs	r1, #0
 800998e:	6039      	str	r1, [r7, #0]
 8009990:	f003 0308 	and.w	r3, r3, #8
 8009994:	607b      	str	r3, [r7, #4]
 8009996:	e9d7 1200 	ldrd	r1, r2, [r7]
 800999a:	460b      	mov	r3, r1
 800999c:	4313      	orrs	r3, r2
 800999e:	d00c      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x1e76>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80099a0:	4b0a      	ldr	r3, [pc, #40]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80099a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80099aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80099ae:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80099b2:	4906      	ldr	r1, [pc, #24]	@ (80099cc <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80099b4:	4313      	orrs	r3, r2
 80099b6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80099ba:	f897 3152 	ldrb.w	r3, [r7, #338]	@ 0x152
}
 80099be:	4618      	mov	r0, r3
 80099c0:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 80099c4:	46bd      	mov	sp, r7
 80099c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099ca:	bf00      	nop
 80099cc:	44020c00 	.word	0x44020c00

080099d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b08b      	sub	sp, #44	@ 0x2c
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80099d8:	4bae      	ldr	r3, [pc, #696]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80099da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80099e2:	4bac      	ldr	r3, [pc, #688]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80099e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e6:	f003 0303 	and.w	r3, r3, #3
 80099ea:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80099ec:	4ba9      	ldr	r3, [pc, #676]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80099ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f0:	0a1b      	lsrs	r3, r3, #8
 80099f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099f6:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80099f8:	4ba6      	ldr	r3, [pc, #664]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80099fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fc:	091b      	lsrs	r3, r3, #4
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009a04:	4ba3      	ldr	r3, [pc, #652]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a08:	08db      	lsrs	r3, r3, #3
 8009a0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	fb02 f303 	mul.w	r3, r2, r3
 8009a14:	ee07 3a90 	vmov	s15, r3
 8009a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a1c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 8126 	beq.w	8009c74 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	d053      	beq.n	8009ad6 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d86f      	bhi.n	8009b14 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d003      	beq.n	8009a42 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d02b      	beq.n	8009a98 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009a40:	e068      	b.n	8009b14 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a42:	4b94      	ldr	r3, [pc, #592]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	08db      	lsrs	r3, r3, #3
 8009a48:	f003 0303 	and.w	r3, r3, #3
 8009a4c:	4a92      	ldr	r2, [pc, #584]	@ (8009c98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8009a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a52:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	ee07 3a90 	vmov	s15, r3
 8009a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a76:	ed97 6a04 	vldr	s12, [r7, #16]
 8009a7a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8009c9c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8009a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a92:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009a96:	e068      	b.n	8009b6a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	ee07 3a90 	vmov	s15, r3
 8009a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8009aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	ee07 3a90 	vmov	s15, r3
 8009ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab4:	ed97 6a04 	vldr	s12, [r7, #16]
 8009ab8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009c9c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8009abc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ac4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009ad4:	e049      	b.n	8009b6a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	ee07 3a90 	vmov	s15, r3
 8009adc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8009ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	ee07 3a90 	vmov	s15, r3
 8009aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af2:	ed97 6a04 	vldr	s12, [r7, #16]
 8009af6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8009c9c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8009afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b0e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009b12:	e02a      	b.n	8009b6a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b14:	4b5f      	ldr	r3, [pc, #380]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	08db      	lsrs	r3, r3, #3
 8009b1a:	f003 0303 	and.w	r3, r3, #3
 8009b1e:	4a5e      	ldr	r2, [pc, #376]	@ (8009c98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8009b20:	fa22 f303 	lsr.w	r3, r2, r3
 8009b24:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	ee07 3a90 	vmov	s15, r3
 8009b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	ee07 3a90 	vmov	s15, r3
 8009b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b48:	ed97 6a04 	vldr	s12, [r7, #16]
 8009b4c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009c9c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8009b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b64:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009b68:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b76:	d121      	bne.n	8009bbc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009b78:	4b46      	ldr	r3, [pc, #280]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d017      	beq.n	8009bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009b84:	4b43      	ldr	r3, [pc, #268]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b88:	0a5b      	lsrs	r3, r3, #9
 8009b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8009b96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8009b9e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009baa:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	601a      	str	r2, [r3, #0]
 8009bb2:	e006      	b.n	8009bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	e002      	b.n	8009bc2 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bc2:	4b34      	ldr	r3, [pc, #208]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bce:	d121      	bne.n	8009c14 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009bd0:	4b30      	ldr	r3, [pc, #192]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d017      	beq.n	8009c0c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009be0:	0c1b      	lsrs	r3, r3, #16
 8009be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009bee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8009bf6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c02:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	605a      	str	r2, [r3, #4]
 8009c0a:	e006      	b.n	8009c1a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	605a      	str	r2, [r3, #4]
 8009c12:	e002      	b.n	8009c1a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c26:	d121      	bne.n	8009c6c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009c28:	4b1a      	ldr	r3, [pc, #104]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d017      	beq.n	8009c64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009c34:	4b17      	ldr	r3, [pc, #92]	@ (8009c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8009c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c38:	0e1b      	lsrs	r3, r3, #24
 8009c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8009c46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8009c4e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c5a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009c62:	e010      	b.n	8009c86 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	609a      	str	r2, [r3, #8]
}
 8009c6a:	e00c      	b.n	8009c86 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	609a      	str	r2, [r3, #8]
}
 8009c72:	e008      	b.n	8009c86 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	609a      	str	r2, [r3, #8]
}
 8009c86:	bf00      	nop
 8009c88:	372c      	adds	r7, #44	@ 0x2c
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	44020c00 	.word	0x44020c00
 8009c98:	03d09000 	.word	0x03d09000
 8009c9c:	46000000 	.word	0x46000000
 8009ca0:	4a742400 	.word	0x4a742400
 8009ca4:	4af42400 	.word	0x4af42400

08009ca8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b08b      	sub	sp, #44	@ 0x2c
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009cb0:	4bae      	ldr	r3, [pc, #696]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009cba:	4bac      	ldr	r3, [pc, #688]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cbe:	f003 0303 	and.w	r3, r3, #3
 8009cc2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8009cc4:	4ba9      	ldr	r3, [pc, #676]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc8:	0a1b      	lsrs	r3, r3, #8
 8009cca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cce:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009cd0:	4ba6      	ldr	r3, [pc, #664]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd4:	091b      	lsrs	r3, r3, #4
 8009cd6:	f003 0301 	and.w	r3, r3, #1
 8009cda:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009cdc:	4ba3      	ldr	r3, [pc, #652]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ce0:	08db      	lsrs	r3, r3, #3
 8009ce2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	fb02 f303 	mul.w	r3, r2, r3
 8009cec:	ee07 3a90 	vmov	s15, r3
 8009cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 8126 	beq.w	8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	2b03      	cmp	r3, #3
 8009d04:	d053      	beq.n	8009dae <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	2b03      	cmp	r3, #3
 8009d0a:	d86f      	bhi.n	8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d003      	beq.n	8009d1a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d02b      	beq.n	8009d70 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009d18:	e068      	b.n	8009dec <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d1a:	4b94      	ldr	r3, [pc, #592]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	08db      	lsrs	r3, r3, #3
 8009d20:	f003 0303 	and.w	r3, r3, #3
 8009d24:	4a92      	ldr	r2, [pc, #584]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8009d26:	fa22 f303 	lsr.w	r3, r2, r3
 8009d2a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	ee07 3a90 	vmov	s15, r3
 8009d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4e:	ed97 6a04 	vldr	s12, [r7, #16]
 8009d52:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009d6e:	e068      	b.n	8009e42 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009d70:	69bb      	ldr	r3, [r7, #24]
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8009d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	ee07 3a90 	vmov	s15, r3
 8009d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d8c:	ed97 6a04 	vldr	s12, [r7, #16]
 8009d90:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009d94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009da0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009da8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009dac:	e049      	b.n	8009e42 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	ee07 3a90 	vmov	s15, r3
 8009db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8009f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8009dbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc0:	6a3b      	ldr	r3, [r7, #32]
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dca:	ed97 6a04 	vldr	s12, [r7, #16]
 8009dce:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8009dea:	e02a      	b.n	8009e42 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009dec:	4b5f      	ldr	r3, [pc, #380]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	08db      	lsrs	r3, r3, #3
 8009df2:	f003 0303 	and.w	r3, r3, #3
 8009df6:	4a5e      	ldr	r2, [pc, #376]	@ (8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8009df8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	ee07 3a90 	vmov	s15, r3
 8009e04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	ee07 3a90 	vmov	s15, r3
 8009e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	ee07 3a90 	vmov	s15, r3
 8009e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e20:	ed97 6a04 	vldr	s12, [r7, #16]
 8009e24:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8009e28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e3c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009e40:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e42:	4b4a      	ldr	r3, [pc, #296]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e4e:	d121      	bne.n	8009e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009e50:	4b46      	ldr	r3, [pc, #280]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d017      	beq.n	8009e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009e5c:	4b43      	ldr	r3, [pc, #268]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e60:	0a5b      	lsrs	r3, r3, #9
 8009e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8009e6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e72:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009e76:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e82:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	e006      	b.n	8009e9a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	e002      	b.n	8009e9a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e9a:	4b34      	ldr	r3, [pc, #208]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ea6:	d121      	bne.n	8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009ea8:	4b30      	ldr	r3, [pc, #192]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d017      	beq.n	8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eb8:	0c1b      	lsrs	r3, r3, #16
 8009eba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ebe:	ee07 3a90 	vmov	s15, r3
 8009ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009ec6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009eca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009ece:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eda:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	605a      	str	r2, [r3, #4]
 8009ee2:	e006      	b.n	8009ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	605a      	str	r2, [r3, #4]
 8009eea:	e002      	b.n	8009ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009efa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009efe:	d121      	bne.n	8009f44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009f00:	4b1a      	ldr	r3, [pc, #104]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d017      	beq.n	8009f3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009f0c:	4b17      	ldr	r3, [pc, #92]	@ (8009f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8009f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f10:	0e1b      	lsrs	r3, r3, #24
 8009f12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f16:	ee07 3a90 	vmov	s15, r3
 8009f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8009f1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f22:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8009f26:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f32:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f3a:	e010      	b.n	8009f5e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	609a      	str	r2, [r3, #8]
}
 8009f42:	e00c      	b.n	8009f5e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	609a      	str	r2, [r3, #8]
}
 8009f4a:	e008      	b.n	8009f5e <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	609a      	str	r2, [r3, #8]
}
 8009f5e:	bf00      	nop
 8009f60:	372c      	adds	r7, #44	@ 0x2c
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	44020c00 	.word	0x44020c00
 8009f70:	03d09000 	.word	0x03d09000
 8009f74:	46000000 	.word	0x46000000
 8009f78:	4a742400 	.word	0x4a742400
 8009f7c:	4af42400 	.word	0x4af42400

08009f80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b08b      	sub	sp, #44	@ 0x2c
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009f88:	4bae      	ldr	r3, [pc, #696]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f90:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009f92:	4bac      	ldr	r3, [pc, #688]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f96:	f003 0303 	and.w	r3, r3, #3
 8009f9a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8009f9c:	4ba9      	ldr	r3, [pc, #676]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fa0:	0a1b      	lsrs	r3, r3, #8
 8009fa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009fa6:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8009fa8:	4ba6      	ldr	r3, [pc, #664]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fac:	091b      	lsrs	r3, r3, #4
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009fb4:	4ba3      	ldr	r3, [pc, #652]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fb8:	08db      	lsrs	r3, r3, #3
 8009fba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	fb02 f303 	mul.w	r3, r2, r3
 8009fc4:	ee07 3a90 	vmov	s15, r3
 8009fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fcc:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f000 8126 	beq.w	800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d053      	beq.n	800a086 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	d86f      	bhi.n	800a0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d003      	beq.n	8009ff2 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d02b      	beq.n	800a048 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8009ff0:	e068      	b.n	800a0c4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009ff2:	4b94      	ldr	r3, [pc, #592]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	08db      	lsrs	r3, r3, #3
 8009ff8:	f003 0303 	and.w	r3, r3, #3
 8009ffc:	4a92      	ldr	r2, [pc, #584]	@ (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8009ffe:	fa22 f303 	lsr.w	r3, r2, r3
 800a002:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	ee07 3a90 	vmov	s15, r3
 800a014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a018:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	ee07 3a90 	vmov	s15, r3
 800a022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a026:	ed97 6a04 	vldr	s12, [r7, #16]
 800a02a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800a24c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800a02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a042:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800a046:	e068      	b.n	800a11a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	ee07 3a90 	vmov	s15, r3
 800a04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a052:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800a250 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800a056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a05a:	6a3b      	ldr	r3, [r7, #32]
 800a05c:	ee07 3a90 	vmov	s15, r3
 800a060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a064:	ed97 6a04 	vldr	s12, [r7, #16]
 800a068:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a24c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800a06c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a070:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a074:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a07c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a080:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800a084:	e049      	b.n	800a11a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	ee07 3a90 	vmov	s15, r3
 800a08c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a090:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800a254 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 800a094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	ee07 3a90 	vmov	s15, r3
 800a09e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0a2:	ed97 6a04 	vldr	s12, [r7, #16]
 800a0a6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800a24c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800a0aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800a0c2:	e02a      	b.n	800a11a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0c4:	4b5f      	ldr	r3, [pc, #380]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	08db      	lsrs	r3, r3, #3
 800a0ca:	f003 0303 	and.w	r3, r3, #3
 800a0ce:	4a5e      	ldr	r2, [pc, #376]	@ (800a248 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800a0d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d4:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	ee07 3a90 	vmov	s15, r3
 800a0dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	ee07 3a90 	vmov	s15, r3
 800a0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ee:	6a3b      	ldr	r3, [r7, #32]
 800a0f0:	ee07 3a90 	vmov	s15, r3
 800a0f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0f8:	ed97 6a04 	vldr	s12, [r7, #16]
 800a0fc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800a24c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800a100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a108:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a10c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a110:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a114:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800a118:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a11a:	4b4a      	ldr	r3, [pc, #296]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a126:	d121      	bne.n	800a16c <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a128:	4b46      	ldr	r3, [pc, #280]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a12a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a12c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d017      	beq.n	800a164 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a134:	4b43      	ldr	r3, [pc, #268]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a138:	0a5b      	lsrs	r3, r3, #9
 800a13a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800a146:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a14a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a14e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a15a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	e006      	b.n	800a172 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	601a      	str	r2, [r3, #0]
 800a16a:	e002      	b.n	800a172 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a172:	4b34      	ldr	r3, [pc, #208]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a17a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a17e:	d121      	bne.n	800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a180:	4b30      	ldr	r3, [pc, #192]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d017      	beq.n	800a1bc <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a18c:	4b2d      	ldr	r3, [pc, #180]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a18e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a190:	0c1b      	lsrs	r3, r3, #16
 800a192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a196:	ee07 3a90 	vmov	s15, r3
 800a19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a19e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1a2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a1a6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a1aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1b2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	605a      	str	r2, [r3, #4]
 800a1ba:	e006      	b.n	800a1ca <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	605a      	str	r2, [r3, #4]
 800a1c2:	e002      	b.n	800a1ca <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1ca:	4b1e      	ldr	r3, [pc, #120]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1d6:	d121      	bne.n	800a21c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a1d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d017      	beq.n	800a214 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a1e4:	4b17      	ldr	r3, [pc, #92]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800a1e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1e8:	0e1b      	lsrs	r3, r3, #24
 800a1ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800a1f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1fa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800a1fe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a20a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800a212:	e010      	b.n	800a236 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	609a      	str	r2, [r3, #8]
}
 800a21a:	e00c      	b.n	800a236 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	609a      	str	r2, [r3, #8]
}
 800a222:	e008      	b.n	800a236 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	609a      	str	r2, [r3, #8]
}
 800a236:	bf00      	nop
 800a238:	372c      	adds	r7, #44	@ 0x2c
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	44020c00 	.word	0x44020c00
 800a248:	03d09000 	.word	0x03d09000
 800a24c:	46000000 	.word	0x46000000
 800a250:	4a742400 	.word	0x4a742400
 800a254:	4af42400 	.word	0x4af42400

0800a258 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a258:	b590      	push	{r4, r7, lr}
 800a25a:	b08f      	sub	sp, #60	@ 0x3c
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a262:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a266:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800a26a:	4321      	orrs	r1, r4
 800a26c:	d150      	bne.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a26e:	4b26      	ldr	r3, [pc, #152]	@ (800a308 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a274:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a278:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a27a:	4b23      	ldr	r3, [pc, #140]	@ (800a308 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a27c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a280:	f003 0302 	and.w	r3, r3, #2
 800a284:	2b02      	cmp	r3, #2
 800a286:	d108      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a28e:	d104      	bne.n	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a294:	637b      	str	r3, [r7, #52]	@ 0x34
 800a296:	f002 baf6 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a29a:	4b1b      	ldr	r3, [pc, #108]	@ (800a308 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a29c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2a8:	d108      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2b0:	d104      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800a2b2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a2b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b8:	f002 bae5 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800a2bc:	4b12      	ldr	r3, [pc, #72]	@ (800a308 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2c8:	d119      	bne.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2d0:	d115      	bne.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800a2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a308 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800a2da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2de:	d30a      	bcc.n	800a2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800a2e0:	4b09      	ldr	r3, [pc, #36]	@ (800a308 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800a2e2:	69db      	ldr	r3, [r3, #28]
 800a2e4:	0a1b      	lsrs	r3, r3, #8
 800a2e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2ea:	4a08      	ldr	r2, [pc, #32]	@ (800a30c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800a2ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800a2f2:	f002 bac8 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
      }
      else
      {
        frequency = 0U;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800a2fa:	f002 bac4 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	637b      	str	r3, [r7, #52]	@ 0x34
 800a302:	f002 bac0 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800a306:	bf00      	nop
 800a308:	44020c00 	.word	0x44020c00
 800a30c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800a310:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a314:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800a318:	ea50 0104 	orrs.w	r1, r0, r4
 800a31c:	f001 8242 	beq.w	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154c>
 800a320:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a324:	2801      	cmp	r0, #1
 800a326:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800a32a:	f082 82a9 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a32e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a332:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800a336:	ea50 0104 	orrs.w	r1, r0, r4
 800a33a:	f001 8139 	beq.w	800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 800a33e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a342:	2801      	cmp	r0, #1
 800a344:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800a348:	f082 829a 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a34c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a350:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800a354:	ea50 0104 	orrs.w	r1, r0, r4
 800a358:	f001 85ce 	beq.w	800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca0>
 800a35c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a360:	2801      	cmp	r0, #1
 800a362:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800a366:	f082 828b 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a36a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a36e:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800a372:	ea50 0104 	orrs.w	r1, r0, r4
 800a376:	f001 8518 	beq.w	800bdaa <HAL_RCCEx_GetPeriphCLKFreq+0x1b52>
 800a37a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a37e:	2801      	cmp	r0, #1
 800a380:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800a384:	f082 827c 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a388:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a38c:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800a390:	ea50 0104 	orrs.w	r1, r0, r4
 800a394:	f001 846a 	beq.w	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a14>
 800a398:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a39c:	2801      	cmp	r0, #1
 800a39e:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800a3a2:	f082 826d 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a3a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3aa:	f1a1 0420 	sub.w	r4, r1, #32
 800a3ae:	ea50 0104 	orrs.w	r1, r0, r4
 800a3b2:	f001 83b4 	beq.w	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x18c6>
 800a3b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3ba:	2801      	cmp	r0, #1
 800a3bc:	f171 0120 	sbcs.w	r1, r1, #32
 800a3c0:	f082 825e 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a3c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3c8:	f1a1 0410 	sub.w	r4, r1, #16
 800a3cc:	ea50 0104 	orrs.w	r1, r0, r4
 800a3d0:	f002 8222 	beq.w	800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x25c0>
 800a3d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3d8:	2801      	cmp	r0, #1
 800a3da:	f171 0110 	sbcs.w	r1, r1, #16
 800a3de:	f082 824f 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a3e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3e6:	f1a1 0408 	sub.w	r4, r1, #8
 800a3ea:	ea50 0104 	orrs.w	r1, r0, r4
 800a3ee:	f002 8198 	beq.w	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x24ca>
 800a3f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a3f6:	2801      	cmp	r0, #1
 800a3f8:	f171 0108 	sbcs.w	r1, r1, #8
 800a3fc:	f082 8240 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a400:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a404:	1f0c      	subs	r4, r1, #4
 800a406:	ea50 0104 	orrs.w	r1, r0, r4
 800a40a:	f001 8614 	beq.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x1dde>
 800a40e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a412:	2801      	cmp	r0, #1
 800a414:	f171 0104 	sbcs.w	r1, r1, #4
 800a418:	f082 8232 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a41c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a420:	1e8c      	subs	r4, r1, #2
 800a422:	ea50 0104 	orrs.w	r1, r0, r4
 800a426:	f002 810f 	beq.w	800c648 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800a42a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a42e:	2801      	cmp	r0, #1
 800a430:	f171 0102 	sbcs.w	r1, r1, #2
 800a434:	f082 8224 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a438:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a43c:	1e4c      	subs	r4, r1, #1
 800a43e:	ea50 0104 	orrs.w	r1, r0, r4
 800a442:	f002 809a 	beq.w	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800a446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a44a:	2801      	cmp	r0, #1
 800a44c:	f171 0101 	sbcs.w	r1, r1, #1
 800a450:	f082 8216 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a454:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a458:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800a45c:	4321      	orrs	r1, r4
 800a45e:	f002 8025 	beq.w	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800a462:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a466:	4cd6      	ldr	r4, [pc, #856]	@ (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x568>)
 800a468:	42a0      	cmp	r0, r4
 800a46a:	f171 0100 	sbcs.w	r1, r1, #0
 800a46e:	f082 8207 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a472:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a476:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800a47a:	4321      	orrs	r1, r4
 800a47c:	f001 87a5 	beq.w	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0x2172>
 800a480:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a484:	4ccf      	ldr	r4, [pc, #828]	@ (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800a486:	42a0      	cmp	r0, r4
 800a488:	f171 0100 	sbcs.w	r1, r1, #0
 800a48c:	f082 81f8 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a490:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a494:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800a498:	4321      	orrs	r1, r4
 800a49a:	f001 871d 	beq.w	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2080>
 800a49e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4a2:	4cc9      	ldr	r4, [pc, #804]	@ (800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800a4a4:	42a0      	cmp	r0, r4
 800a4a6:	f171 0100 	sbcs.w	r1, r1, #0
 800a4aa:	f082 81e9 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a4ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4b2:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800a4b6:	4321      	orrs	r1, r4
 800a4b8:	f001 8666 	beq.w	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x1f30>
 800a4bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4c0:	4cc2      	ldr	r4, [pc, #776]	@ (800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800a4c2:	42a0      	cmp	r0, r4
 800a4c4:	f171 0100 	sbcs.w	r1, r1, #0
 800a4c8:	f082 81da 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a4cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4d0:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800a4d4:	4321      	orrs	r1, r4
 800a4d6:	f001 85de 	beq.w	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3e>
 800a4da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4de:	4cbc      	ldr	r4, [pc, #752]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800a4e0:	42a0      	cmp	r0, r4
 800a4e2:	f171 0100 	sbcs.w	r1, r1, #0
 800a4e6:	f082 81cb 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a4ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4ee:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800a4f2:	4321      	orrs	r1, r4
 800a4f4:	f002 814a 	beq.w	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x2534>
 800a4f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4fc:	4cb5      	ldr	r4, [pc, #724]	@ (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800a4fe:	42a0      	cmp	r0, r4
 800a500:	f171 0100 	sbcs.w	r1, r1, #0
 800a504:	f082 81bc 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a50c:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800a510:	4321      	orrs	r1, r4
 800a512:	f000 826b 	beq.w	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a516:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a51a:	4caf      	ldr	r4, [pc, #700]	@ (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800a51c:	42a0      	cmp	r0, r4
 800a51e:	f171 0100 	sbcs.w	r1, r1, #0
 800a522:	f082 81ad 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a526:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a52a:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800a52e:	4321      	orrs	r1, r4
 800a530:	f000 87e9 	beq.w	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 800a534:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a538:	4ca8      	ldr	r4, [pc, #672]	@ (800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800a53a:	42a0      	cmp	r0, r4
 800a53c:	f171 0100 	sbcs.w	r1, r1, #0
 800a540:	f082 819e 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a544:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a548:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 800a54c:	4321      	orrs	r1, r4
 800a54e:	f000 81ce 	beq.w	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800a552:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a556:	4ca2      	ldr	r4, [pc, #648]	@ (800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a558:	42a0      	cmp	r0, r4
 800a55a:	f171 0100 	sbcs.w	r1, r1, #0
 800a55e:	f082 818f 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a562:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a566:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 800a56a:	4321      	orrs	r1, r4
 800a56c:	f000 8140 	beq.w	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800a570:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a574:	4c9b      	ldr	r4, [pc, #620]	@ (800a7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a576:	42a0      	cmp	r0, r4
 800a578:	f171 0100 	sbcs.w	r1, r1, #0
 800a57c:	f082 8180 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a580:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a584:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800a588:	4321      	orrs	r1, r4
 800a58a:	f001 8229 	beq.w	800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>
 800a58e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a592:	4c95      	ldr	r4, [pc, #596]	@ (800a7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a594:	42a0      	cmp	r0, r4
 800a596:	f171 0100 	sbcs.w	r1, r1, #0
 800a59a:	f082 8171 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a59e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5a2:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800a5a6:	4321      	orrs	r1, r4
 800a5a8:	f001 8173 	beq.w	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0x163a>
 800a5ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5b0:	4c8e      	ldr	r4, [pc, #568]	@ (800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a5b2:	42a0      	cmp	r0, r4
 800a5b4:	f171 0100 	sbcs.w	r1, r1, #0
 800a5b8:	f082 8162 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a5bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5c0:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800a5c4:	4321      	orrs	r1, r4
 800a5c6:	f001 8130 	beq.w	800b82a <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 800a5ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5ce:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800a5d2:	f171 0100 	sbcs.w	r1, r1, #0
 800a5d6:	f082 8153 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a5da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5de:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800a5e2:	4321      	orrs	r1, r4
 800a5e4:	f001 8093 	beq.w	800b70e <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 800a5e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5ec:	f248 0401 	movw	r4, #32769	@ 0x8001
 800a5f0:	42a0      	cmp	r0, r4
 800a5f2:	f171 0100 	sbcs.w	r1, r1, #0
 800a5f6:	f082 8143 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a5fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a5fe:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800a602:	4321      	orrs	r1, r4
 800a604:	f001 8040 	beq.w	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x1430>
 800a608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a60c:	f244 0401 	movw	r4, #16385	@ 0x4001
 800a610:	42a0      	cmp	r0, r4
 800a612:	f171 0100 	sbcs.w	r1, r1, #0
 800a616:	f082 8133 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a61a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a61e:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800a622:	4321      	orrs	r1, r4
 800a624:	f000 87ed 	beq.w	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
 800a628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a62c:	f242 0401 	movw	r4, #8193	@ 0x2001
 800a630:	42a0      	cmp	r0, r4
 800a632:	f171 0100 	sbcs.w	r1, r1, #0
 800a636:	f082 8123 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a63a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a63e:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800a642:	4321      	orrs	r1, r4
 800a644:	f000 86f9 	beq.w	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800a648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a64c:	f241 0401 	movw	r4, #4097	@ 0x1001
 800a650:	42a0      	cmp	r0, r4
 800a652:	f171 0100 	sbcs.w	r1, r1, #0
 800a656:	f082 8113 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a65a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a65e:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800a662:	4321      	orrs	r1, r4
 800a664:	f000 8683 	beq.w	800b36e <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800a668:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a66c:	f640 0401 	movw	r4, #2049	@ 0x801
 800a670:	42a0      	cmp	r0, r4
 800a672:	f171 0100 	sbcs.w	r1, r1, #0
 800a676:	f082 8103 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a67a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a67e:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800a682:	4321      	orrs	r1, r4
 800a684:	f000 860d 	beq.w	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x104a>
 800a688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a68c:	f240 4401 	movw	r4, #1025	@ 0x401
 800a690:	42a0      	cmp	r0, r4
 800a692:	f171 0100 	sbcs.w	r1, r1, #0
 800a696:	f082 80f3 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a69a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a69e:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800a6a2:	4321      	orrs	r1, r4
 800a6a4:	f000 858b 	beq.w	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 800a6a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6ac:	f240 2401 	movw	r4, #513	@ 0x201
 800a6b0:	42a0      	cmp	r0, r4
 800a6b2:	f171 0100 	sbcs.w	r1, r1, #0
 800a6b6:	f082 80e3 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a6ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6be:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800a6c2:	4321      	orrs	r1, r4
 800a6c4:	f000 8510 	beq.w	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800a6c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6cc:	f240 1401 	movw	r4, #257	@ 0x101
 800a6d0:	42a0      	cmp	r0, r4
 800a6d2:	f171 0100 	sbcs.w	r1, r1, #0
 800a6d6:	f082 80d3 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a6da:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6de:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800a6e2:	4321      	orrs	r1, r4
 800a6e4:	f000 8495 	beq.w	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 800a6e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6ec:	2881      	cmp	r0, #129	@ 0x81
 800a6ee:	f171 0100 	sbcs.w	r1, r1, #0
 800a6f2:	f082 80c5 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a6f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6fa:	2821      	cmp	r0, #33	@ 0x21
 800a6fc:	f171 0100 	sbcs.w	r1, r1, #0
 800a700:	d254      	bcs.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800a702:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a706:	4301      	orrs	r1, r0
 800a708:	f002 80ba 	beq.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a70c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a710:	1e42      	subs	r2, r0, #1
 800a712:	f141 33ff 	adc.w	r3, r1, #4294967295
 800a716:	2a20      	cmp	r2, #32
 800a718:	f173 0100 	sbcs.w	r1, r3, #0
 800a71c:	f082 80b0 	bcs.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a720:	2a1f      	cmp	r2, #31
 800a722:	f202 80ad 	bhi.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a726:	a101      	add	r1, pc, #4	@ (adr r1, 800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800a728:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a72c:	0800aa31 	.word	0x0800aa31
 800a730:	0800ab11 	.word	0x0800ab11
 800a734:	0800c881 	.word	0x0800c881
 800a738:	0800abd1 	.word	0x0800abd1
 800a73c:	0800c881 	.word	0x0800c881
 800a740:	0800c881 	.word	0x0800c881
 800a744:	0800c881 	.word	0x0800c881
 800a748:	0800aca1 	.word	0x0800aca1
 800a74c:	0800c881 	.word	0x0800c881
 800a750:	0800c881 	.word	0x0800c881
 800a754:	0800c881 	.word	0x0800c881
 800a758:	0800c881 	.word	0x0800c881
 800a75c:	0800c881 	.word	0x0800c881
 800a760:	0800c881 	.word	0x0800c881
 800a764:	0800c881 	.word	0x0800c881
 800a768:	0800ad83 	.word	0x0800ad83
 800a76c:	0800c881 	.word	0x0800c881
 800a770:	0800c881 	.word	0x0800c881
 800a774:	0800c881 	.word	0x0800c881
 800a778:	0800c881 	.word	0x0800c881
 800a77c:	0800c881 	.word	0x0800c881
 800a780:	0800c881 	.word	0x0800c881
 800a784:	0800c881 	.word	0x0800c881
 800a788:	0800c881 	.word	0x0800c881
 800a78c:	0800c881 	.word	0x0800c881
 800a790:	0800c881 	.word	0x0800c881
 800a794:	0800c881 	.word	0x0800c881
 800a798:	0800c881 	.word	0x0800c881
 800a79c:	0800c881 	.word	0x0800c881
 800a7a0:	0800c881 	.word	0x0800c881
 800a7a4:	0800c881 	.word	0x0800c881
 800a7a8:	0800ae59 	.word	0x0800ae59
 800a7ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b0:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800a7b4:	430b      	orrs	r3, r1
 800a7b6:	f000 83ba 	beq.w	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
 800a7ba:	f002 b861 	b.w	800c880 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800a7be:	bf00      	nop
 800a7c0:	80000001 	.word	0x80000001
 800a7c4:	40000001 	.word	0x40000001
 800a7c8:	20000001 	.word	0x20000001
 800a7cc:	10000001 	.word	0x10000001
 800a7d0:	08000001 	.word	0x08000001
 800a7d4:	04000001 	.word	0x04000001
 800a7d8:	00400001 	.word	0x00400001
 800a7dc:	00200001 	.word	0x00200001
 800a7e0:	00100001 	.word	0x00100001
 800a7e4:	00080001 	.word	0x00080001
 800a7e8:	00040001 	.word	0x00040001
 800a7ec:	00020001 	.word	0x00020001
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a7f0:	4b9f      	ldr	r3, [pc, #636]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a7f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a7f6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a7fa:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a802:	d036      	beq.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 800a804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a806:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a80a:	d86b      	bhi.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a812:	d02b      	beq.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a816:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a81a:	d863      	bhi.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a822:	d01b      	beq.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800a824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a82a:	d85b      	bhi.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d004      	beq.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a838:	d008      	beq.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
 800a83a:	e053      	b.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a83c:	f107 0320 	add.w	r3, r7, #32
 800a840:	4618      	mov	r0, r3
 800a842:	f7ff f8c5 	bl	80099d0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a848:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a84a:	e04e      	b.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a84c:	f107 0314 	add.w	r3, r7, #20
 800a850:	4618      	mov	r0, r3
 800a852:	f7ff fa29 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a85a:	e046      	b.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a85c:	f107 0308 	add.w	r3, r7, #8
 800a860:	4618      	mov	r0, r3
 800a862:	f7ff fb8d 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a86a:	e03e      	b.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a86c:	4b81      	ldr	r3, [pc, #516]	@ (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800a86e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a870:	e03b      	b.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a872:	4b7f      	ldr	r3, [pc, #508]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a878:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a87c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a87e:	4b7c      	ldr	r3, [pc, #496]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0302 	and.w	r3, r3, #2
 800a886:	2b02      	cmp	r3, #2
 800a888:	d10c      	bne.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d109      	bne.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a890:	4b77      	ldr	r3, [pc, #476]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	08db      	lsrs	r3, r3, #3
 800a896:	f003 0303 	and.w	r3, r3, #3
 800a89a:	4a77      	ldr	r2, [pc, #476]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a89c:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8a2:	e01e      	b.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8a4:	4b72      	ldr	r3, [pc, #456]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a8ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8b0:	d106      	bne.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800a8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8b8:	d102      	bne.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a8ba:	4b70      	ldr	r3, [pc, #448]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800a8bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8be:	e010      	b.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8c0:	4b6b      	ldr	r3, [pc, #428]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8cc:	d106      	bne.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8d4:	d102      	bne.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a8d6:	4b6a      	ldr	r3, [pc, #424]	@ (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800a8d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8da:	e002      	b.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a8e0:	e003      	b.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800a8e2:	e002      	b.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          default :
          {
            frequency = 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a8e8:	bf00      	nop
          }
        }
        break;
 800a8ea:	f001 bfcc 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a8ee:	4b60      	ldr	r3, [pc, #384]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a8f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a8f4:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800a8f8:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a900:	d036      	beq.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800a902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a904:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a908:	d86b      	bhi.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800a90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a910:	d02b      	beq.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x712>
 800a912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a914:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800a918:	d863      	bhi.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800a91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a920:	d01b      	beq.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800a922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a928:	d85b      	bhi.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800a92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d004      	beq.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800a930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a932:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a936:	d008      	beq.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 800a938:	e053      	b.n	800a9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a93a:	f107 0320 	add.w	r3, r7, #32
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff f846 	bl	80099d0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a946:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a948:	e04e      	b.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a94a:	f107 0314 	add.w	r3, r7, #20
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff f9aa 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a958:	e046      	b.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a95a:	f107 0308 	add.w	r3, r7, #8
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff fb0e 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a968:	e03e      	b.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a96a:	4b42      	ldr	r3, [pc, #264]	@ (800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800a96c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a96e:	e03b      	b.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a970:	4b3f      	ldr	r3, [pc, #252]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a972:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a976:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a97a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a97c:	4b3c      	ldr	r3, [pc, #240]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0302 	and.w	r3, r3, #2
 800a984:	2b02      	cmp	r3, #2
 800a986:	d10c      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800a988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d109      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a98e:	4b38      	ldr	r3, [pc, #224]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	08db      	lsrs	r3, r3, #3
 800a994:	f003 0303 	and.w	r3, r3, #3
 800a998:	4a37      	ldr	r2, [pc, #220]	@ (800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a99a:	fa22 f303 	lsr.w	r3, r2, r3
 800a99e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9a0:	e01e      	b.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9a2:	4b33      	ldr	r3, [pc, #204]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9ae:	d106      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 800a9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9b6:	d102      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a9b8:	4b30      	ldr	r3, [pc, #192]	@ (800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800a9ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9bc:	e010      	b.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9be:	4b2c      	ldr	r3, [pc, #176]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9ca:	d106      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9d2:	d102      	bne.n	800a9da <HAL_RCCEx_GetPeriphCLKFreq+0x782>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a9d4:	4b2a      	ldr	r3, [pc, #168]	@ (800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800a9d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9d8:	e002      	b.n	800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a9de:	e003      	b.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
 800a9e0:	e002      	b.n	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          default :
          {
            frequency = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a9e6:	bf00      	nop
          }
        }
        break;
 800a9e8:	f001 bf4d 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800a9ec:	4b20      	ldr	r3, [pc, #128]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800a9ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a9f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9f6:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d108      	bne.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9fe:	f107 0320 	add.w	r3, r7, #32
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fe ffe4 	bl	80099d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aa0c:	f001 bf3b 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800aa10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa12:	2b40      	cmp	r3, #64	@ 0x40
 800aa14:	d108      	bne.n	800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa16:	f107 0314 	add.w	r3, r7, #20
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7ff f944 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa24:	f001 bf2f 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa2c:	f001 bf2b 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800aa30:	4b0f      	ldr	r3, [pc, #60]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800aa32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800aa36:	f003 0307 	and.w	r3, r3, #7
 800aa3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d104      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800aa42:	f7fd f81b 	bl	8007a7c <HAL_RCC_GetPCLK2Freq>
 800aa46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800aa48:	f001 bf1d 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800aa4c:	4b08      	ldr	r3, [pc, #32]	@ (800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa58:	d114      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d111      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa60:	f107 0314 	add.w	r3, r7, #20
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7ff f91f 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa6e:	e04d      	b.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 800aa70:	44020c00 	.word	0x44020c00
 800aa74:	00bb8000 	.word	0x00bb8000
 800aa78:	03d09000 	.word	0x03d09000
 800aa7c:	003d0900 	.word	0x003d0900
 800aa80:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800aa84:	4ba0      	ldr	r3, [pc, #640]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa90:	d10a      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 800aa92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d107      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa98:	f107 0308 	add.w	r3, r7, #8
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7ff fa6f 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaa6:	e031      	b.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800aaa8:	4b97      	ldr	r3, [pc, #604]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 0302 	and.w	r3, r3, #2
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d10c      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 800aab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	d109      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aaba:	4b93      	ldr	r3, [pc, #588]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	08db      	lsrs	r3, r3, #3
 800aac0:	f003 0303 	and.w	r3, r3, #3
 800aac4:	4a91      	ldr	r2, [pc, #580]	@ (800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800aac6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaca:	637b      	str	r3, [r7, #52]	@ 0x34
 800aacc:	e01e      	b.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800aace:	4b8e      	ldr	r3, [pc, #568]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aad6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aada:	d105      	bne.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
 800aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aade:	2b04      	cmp	r3, #4
 800aae0:	d102      	bne.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = CSI_VALUE;
 800aae2:	4b8b      	ldr	r3, [pc, #556]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800aae4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aae6:	e011      	b.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800aae8:	4b87      	ldr	r3, [pc, #540]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aaea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aaee:	f003 0302 	and.w	r3, r3, #2
 800aaf2:	2b02      	cmp	r3, #2
 800aaf4:	d106      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf8:	2b05      	cmp	r3, #5
 800aafa:	d103      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          frequency = LSE_VALUE;
 800aafc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab02:	e003      	b.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = 0U;
 800ab04:	2300      	movs	r3, #0
 800ab06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab08:	f001 bebd 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800ab0c:	f001 bebb 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800ab10:	4b7d      	ldr	r3, [pc, #500]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ab12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ab16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab1a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d104      	bne.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab22:	f7fc ff95 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800ab26:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800ab28:	f001 bead 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800ab2c:	4b76      	ldr	r3, [pc, #472]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab38:	d10a      	bne.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3c:	2b08      	cmp	r3, #8
 800ab3e:	d107      	bne.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab40:	f107 0314 	add.w	r3, r7, #20
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff f8af 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab4e:	e03d      	b.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800ab50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab52:	2b10      	cmp	r3, #16
 800ab54:	d108      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab56:	f107 0308 	add.w	r3, r7, #8
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7ff fa10 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab64:	f001 be8f 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800ab68:	4b67      	ldr	r3, [pc, #412]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 0302 	and.w	r3, r3, #2
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d10c      	bne.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800ab74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab76:	2b18      	cmp	r3, #24
 800ab78:	d109      	bne.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab7a:	4b63      	ldr	r3, [pc, #396]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	08db      	lsrs	r3, r3, #3
 800ab80:	f003 0303 	and.w	r3, r3, #3
 800ab84:	4a61      	ldr	r2, [pc, #388]	@ (800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800ab86:	fa22 f303 	lsr.w	r3, r2, r3
 800ab8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab8c:	e01e      	b.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800ab8e:	4b5e      	ldr	r3, [pc, #376]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab9a:	d105      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9e:	2b20      	cmp	r3, #32
 800aba0:	d102      	bne.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
          frequency = CSI_VALUE;
 800aba2:	4b5b      	ldr	r3, [pc, #364]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800aba4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aba6:	e011      	b.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800aba8:	4b57      	ldr	r3, [pc, #348]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800abaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abae:	f003 0302 	and.w	r3, r3, #2
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d106      	bne.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800abb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb8:	2b28      	cmp	r3, #40	@ 0x28
 800abba:	d103      	bne.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = LSE_VALUE;
 800abbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800abc2:	e003      	b.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = 0U;
 800abc4:	2300      	movs	r3, #0
 800abc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abc8:	f001 be5d 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800abcc:	f001 be5b 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800abd0:	4b4d      	ldr	r3, [pc, #308]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800abd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800abd6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800abda:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800abdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d104      	bne.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800abe2:	f7fc ff35 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800abe6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800abe8:	f001 be4d 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800abec:	4b46      	ldr	r3, [pc, #280]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abf8:	d10a      	bne.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800abfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfc:	2b40      	cmp	r3, #64	@ 0x40
 800abfe:	d107      	bne.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac00:	f107 0314 	add.w	r3, r7, #20
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff f84f 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac0e:	e045      	b.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800ac10:	4b3d      	ldr	r3, [pc, #244]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac1c:	d10a      	bne.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac20:	2b80      	cmp	r3, #128	@ 0x80
 800ac22:	d107      	bne.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac24:	f107 0308 	add.w	r3, r7, #8
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff f9a9 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac32:	e033      	b.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800ac34:	4b34      	ldr	r3, [pc, #208]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d10c      	bne.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ac40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac42:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac44:	d109      	bne.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac46:	4b30      	ldr	r3, [pc, #192]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	08db      	lsrs	r3, r3, #3
 800ac4c:	f003 0303 	and.w	r3, r3, #3
 800ac50:	4a2e      	ldr	r2, [pc, #184]	@ (800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800ac52:	fa22 f303 	lsr.w	r3, r2, r3
 800ac56:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac58:	e020      	b.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800ac5a:	4b2b      	ldr	r3, [pc, #172]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac66:	d106      	bne.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800ac68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac6e:	d102      	bne.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = CSI_VALUE;
 800ac70:	4b27      	ldr	r3, [pc, #156]	@ (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800ac72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac74:	e012      	b.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800ac76:	4b24      	ldr	r3, [pc, #144]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ac78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac7c:	f003 0302 	and.w	r3, r3, #2
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d107      	bne.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800ac84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac86:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800ac8a:	d103      	bne.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
          frequency = LSE_VALUE;
 800ac8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac90:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac92:	e003      	b.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          frequency = 0U;
 800ac94:	2300      	movs	r3, #0
 800ac96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac98:	f001 bdf5 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800ac9c:	f001 bdf3 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800aca0:	4b19      	ldr	r3, [pc, #100]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aca2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800aca6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800acaa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800acac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d104      	bne.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800acb2:	f7fc fecd 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800acb6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800acb8:	f001 bde5 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800acbc:	4b12      	ldr	r3, [pc, #72]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acc8:	d10b      	bne.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 800acca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800accc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acd0:	d107      	bne.n	800ace2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acd2:	f107 0314 	add.w	r3, r7, #20
 800acd6:	4618      	mov	r0, r3
 800acd8:	f7fe ffe6 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	637b      	str	r3, [r7, #52]	@ 0x34
 800ace0:	e04d      	b.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800ace2:	4b09      	ldr	r3, [pc, #36]	@ (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acee:	d111      	bne.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800acf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acf6:	d10d      	bne.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acf8:	f107 0308 	add.w	r3, r7, #8
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7ff f93f 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad06:	e03a      	b.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 800ad08:	44020c00 	.word	0x44020c00
 800ad0c:	03d09000 	.word	0x03d09000
 800ad10:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800ad14:	4ba0      	ldr	r3, [pc, #640]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d10d      	bne.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ad20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad22:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ad26:	d109      	bne.n	800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ad28:	4b9b      	ldr	r3, [pc, #620]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	08db      	lsrs	r3, r3, #3
 800ad2e:	f003 0303 	and.w	r3, r3, #3
 800ad32:	4a9a      	ldr	r2, [pc, #616]	@ (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800ad34:	fa22 f303 	lsr.w	r3, r2, r3
 800ad38:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad3a:	e020      	b.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800ad3c:	4b96      	ldr	r3, [pc, #600]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ad44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad48:	d106      	bne.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad50:	d102      	bne.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = CSI_VALUE;
 800ad52:	4b93      	ldr	r3, [pc, #588]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800ad54:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad56:	e012      	b.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800ad58:	4b8f      	ldr	r3, [pc, #572]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ad5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad5e:	f003 0302 	and.w	r3, r3, #2
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d107      	bne.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
 800ad66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad68:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800ad6c:	d103      	bne.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          frequency = LSE_VALUE;
 800ad6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad74:	e003      	b.n	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
          frequency = 0U;
 800ad76:	2300      	movs	r3, #0
 800ad78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad7a:	f001 bd84 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800ad7e:	f001 bd82 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ad82:	4b85      	ldr	r3, [pc, #532]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ad84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ad88:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ad8c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d104      	bne.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad94:	f7fc fe5c 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800ad98:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800ad9a:	f001 bd74 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800ad9e:	4b7e      	ldr	r3, [pc, #504]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ada6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adaa:	d10b      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800adac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adb2:	d107      	bne.n	800adc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adb4:	f107 0314 	add.w	r3, r7, #20
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fe ff75 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	637b      	str	r3, [r7, #52]	@ 0x34
 800adc2:	e047      	b.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800adc4:	4b74      	ldr	r3, [pc, #464]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800adcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800add0:	d10b      	bne.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800add2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800add8:	d107      	bne.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adda:	f107 0308 	add.w	r3, r7, #8
 800adde:	4618      	mov	r0, r3
 800ade0:	f7ff f8ce 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ade8:	e034      	b.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800adea:	4b6b      	ldr	r3, [pc, #428]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 0302 	and.w	r3, r3, #2
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d10d      	bne.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
 800adf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800adfc:	d109      	bne.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800adfe:	4b66      	ldr	r3, [pc, #408]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	08db      	lsrs	r3, r3, #3
 800ae04:	f003 0303 	and.w	r3, r3, #3
 800ae08:	4a64      	ldr	r2, [pc, #400]	@ (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800ae0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae10:	e020      	b.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800ae12:	4b61      	ldr	r3, [pc, #388]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ae1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae1e:	d106      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 800ae20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae26:	d102      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
          frequency = CSI_VALUE;
 800ae28:	4b5d      	ldr	r3, [pc, #372]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800ae2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae2c:	e012      	b.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ae2e:	4b5a      	ldr	r3, [pc, #360]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ae30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae34:	f003 0302 	and.w	r3, r3, #2
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d107      	bne.n	800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ae42:	d103      	bne.n	800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
          frequency = LSE_VALUE;
 800ae44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae48:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae4a:	e003      	b.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
          frequency = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ae50:	f001 bd19 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800ae54:	f001 bd17 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800ae58:	4b4f      	ldr	r3, [pc, #316]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ae5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ae5e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800ae62:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800ae64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d104      	bne.n	800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ae6a:	f7fc fdf1 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800ae6e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800ae70:	f001 bd09 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800ae74:	4b48      	ldr	r3, [pc, #288]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae80:	d10b      	bne.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 800ae82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae88:	d107      	bne.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae8a:	f107 0314 	add.w	r3, r7, #20
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fe ff0a 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae98:	e047      	b.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800ae9a:	4b3f      	ldr	r3, [pc, #252]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aea2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aea6:	d10b      	bne.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 800aea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aeae:	d107      	bne.n	800aec0 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aeb0:	f107 0308 	add.w	r3, r7, #8
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7ff f863 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	637b      	str	r3, [r7, #52]	@ 0x34
 800aebe:	e034      	b.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800aec0:	4b35      	ldr	r3, [pc, #212]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 0302 	and.w	r3, r3, #2
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d10d      	bne.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
 800aecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aece:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800aed2:	d109      	bne.n	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aed4:	4b30      	ldr	r3, [pc, #192]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	08db      	lsrs	r3, r3, #3
 800aeda:	f003 0303 	and.w	r3, r3, #3
 800aede:	4a2f      	ldr	r2, [pc, #188]	@ (800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800aee0:	fa22 f303 	lsr.w	r3, r2, r3
 800aee4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aee6:	e020      	b.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800aee8:	4b2b      	ldr	r3, [pc, #172]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aef4:	d106      	bne.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800aef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aefc:	d102      	bne.n	800af04 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
          frequency = CSI_VALUE;
 800aefe:	4b28      	ldr	r3, [pc, #160]	@ (800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800af00:	637b      	str	r3, [r7, #52]	@ 0x34
 800af02:	e012      	b.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800af04:	4b24      	ldr	r3, [pc, #144]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800af06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af0a:	f003 0302 	and.w	r3, r3, #2
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d107      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
 800af12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af14:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800af18:	d103      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
          frequency = LSE_VALUE;
 800af1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800af20:	e003      	b.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
          frequency = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800af26:	f001 bcae 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800af2a:	f001 bcac 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800af2e:	4b1a      	ldr	r3, [pc, #104]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800af30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800af34:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800af38:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800af3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d104      	bne.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800af40:	f7fc fd86 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800af44:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800af46:	f001 bc9e 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800af4a:	4b13      	ldr	r3, [pc, #76]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af56:	d10b      	bne.n	800af70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
 800af58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af5e:	d107      	bne.n	800af70 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af60:	f107 0314 	add.w	r3, r7, #20
 800af64:	4618      	mov	r0, r3
 800af66:	f7fe fe9f 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af6e:	e04e      	b.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800af70:	4b09      	ldr	r3, [pc, #36]	@ (800af98 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af7c:	d112      	bne.n	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800af84:	d10e      	bne.n	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af86:	f107 0308 	add.w	r3, r7, #8
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7fe fff8 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	637b      	str	r3, [r7, #52]	@ 0x34
 800af94:	e03b      	b.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 800af96:	bf00      	nop
 800af98:	44020c00 	.word	0x44020c00
 800af9c:	03d09000 	.word	0x03d09000
 800afa0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800afa4:	4ba0      	ldr	r3, [pc, #640]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 0302 	and.w	r3, r3, #2
 800afac:	2b02      	cmp	r3, #2
 800afae:	d10d      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 800afb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800afb6:	d109      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800afb8:	4b9b      	ldr	r3, [pc, #620]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	08db      	lsrs	r3, r3, #3
 800afbe:	f003 0303 	and.w	r3, r3, #3
 800afc2:	4a9a      	ldr	r2, [pc, #616]	@ (800b22c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 800afc4:	fa22 f303 	lsr.w	r3, r2, r3
 800afc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800afca:	e020      	b.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800afcc:	4b96      	ldr	r3, [pc, #600]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afd8:	d106      	bne.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800afda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afe0:	d102      	bne.n	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
          frequency = CSI_VALUE;
 800afe2:	4b93      	ldr	r3, [pc, #588]	@ (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 800afe4:	637b      	str	r3, [r7, #52]	@ 0x34
 800afe6:	e012      	b.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800afe8:	4b8f      	ldr	r3, [pc, #572]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800afea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afee:	f003 0302 	and.w	r3, r3, #2
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d107      	bne.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800affc:	d103      	bne.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
          frequency = LSE_VALUE;
 800affe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b002:	637b      	str	r3, [r7, #52]	@ 0x34
 800b004:	e003      	b.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
          frequency = 0U;
 800b006:	2300      	movs	r3, #0
 800b008:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b00a:	f001 bc3c 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b00e:	f001 bc3a 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800b012:	4b85      	ldr	r3, [pc, #532]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b018:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b01c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800b01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b020:	2b00      	cmp	r3, #0
 800b022:	d104      	bne.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b024:	f7fc fd14 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800b028:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800b02a:	f001 bc2c 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800b02e:	4b7e      	ldr	r3, [pc, #504]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b03a:	d10b      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800b03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b042:	d107      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b044:	f107 0314 	add.w	r3, r7, #20
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fe fe2d 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	637b      	str	r3, [r7, #52]	@ 0x34
 800b052:	e047      	b.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800b054:	4b74      	ldr	r3, [pc, #464]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b05c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b060:	d10b      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800b062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b068:	d107      	bne.n	800b07a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b06a:	f107 0308 	add.w	r3, r7, #8
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe ff86 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	637b      	str	r3, [r7, #52]	@ 0x34
 800b078:	e034      	b.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800b07a:	4b6b      	ldr	r3, [pc, #428]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f003 0302 	and.w	r3, r3, #2
 800b082:	2b02      	cmp	r3, #2
 800b084:	d10d      	bne.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 800b086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b088:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b08c:	d109      	bne.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b08e:	4b66      	ldr	r3, [pc, #408]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	08db      	lsrs	r3, r3, #3
 800b094:	f003 0303 	and.w	r3, r3, #3
 800b098:	4a64      	ldr	r2, [pc, #400]	@ (800b22c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 800b09a:	fa22 f303 	lsr.w	r3, r2, r3
 800b09e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0a0:	e020      	b.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800b0a2:	4b61      	ldr	r3, [pc, #388]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b0aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0ae:	d106      	bne.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b0b6:	d102      	bne.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
          frequency = CSI_VALUE;
 800b0b8:	4b5d      	ldr	r3, [pc, #372]	@ (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 800b0ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0bc:	e012      	b.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800b0be:	4b5a      	ldr	r3, [pc, #360]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b0c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0c4:	f003 0302 	and.w	r3, r3, #2
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d107      	bne.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ce:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b0d2:	d103      	bne.n	800b0dc <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
          frequency = LSE_VALUE;
 800b0d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0da:	e003      	b.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
          frequency = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0e0:	f001 bbd1 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b0e4:	f001 bbcf 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800b0e8:	4b4f      	ldr	r3, [pc, #316]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b0ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b0ee:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b0f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d104      	bne.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b0fa:	f7fc fca9 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800b0fe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800b100:	f001 bbc1 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800b104:	4b48      	ldr	r3, [pc, #288]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b10c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b110:	d10b      	bne.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 800b112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b118:	d107      	bne.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b11a:	f107 0314 	add.w	r3, r7, #20
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fe fdc2 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b124:	69bb      	ldr	r3, [r7, #24]
 800b126:	637b      	str	r3, [r7, #52]	@ 0x34
 800b128:	e047      	b.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800b12a:	4b3f      	ldr	r3, [pc, #252]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b136:	d10b      	bne.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800b138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b13e:	d107      	bne.n	800b150 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b140:	f107 0308 	add.w	r3, r7, #8
 800b144:	4618      	mov	r0, r3
 800b146:	f7fe ff1b 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b14e:	e034      	b.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800b150:	4b35      	ldr	r3, [pc, #212]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 0302 	and.w	r3, r3, #2
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d10d      	bne.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800b15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b162:	d109      	bne.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b164:	4b30      	ldr	r3, [pc, #192]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	08db      	lsrs	r3, r3, #3
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	4a2f      	ldr	r2, [pc, #188]	@ (800b22c <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 800b170:	fa22 f303 	lsr.w	r3, r2, r3
 800b174:	637b      	str	r3, [r7, #52]	@ 0x34
 800b176:	e020      	b.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800b178:	4b2b      	ldr	r3, [pc, #172]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b180:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b184:	d106      	bne.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 800b186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b188:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b18c:	d102      	bne.n	800b194 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
          frequency = CSI_VALUE;
 800b18e:	4b28      	ldr	r3, [pc, #160]	@ (800b230 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 800b190:	637b      	str	r3, [r7, #52]	@ 0x34
 800b192:	e012      	b.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800b194:	4b24      	ldr	r3, [pc, #144]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b19a:	f003 0302 	and.w	r3, r3, #2
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d107      	bne.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b1a8:	d103      	bne.n	800b1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
          frequency = LSE_VALUE;
 800b1aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1b0:	e003      	b.n	800b1ba <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
          frequency = 0U;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1b6:	f001 bb66 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b1ba:	f001 bb64 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800b1be:	4b1a      	ldr	r3, [pc, #104]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b1c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b1c4:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800b1c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d104      	bne.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b1d0:	f7fc fc3e 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800b1d4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800b1d6:	f001 bb56 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800b1da:	4b13      	ldr	r3, [pc, #76]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1e6:	d10b      	bne.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1ee:	d107      	bne.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1f0:	f107 0314 	add.w	r3, r7, #20
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fe fd57 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1fe:	e04e      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800b200:	4b09      	ldr	r3, [pc, #36]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b20c:	d112      	bne.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800b20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b210:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b214:	d10e      	bne.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b216:	f107 0308 	add.w	r3, r7, #8
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fe feb0 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	637b      	str	r3, [r7, #52]	@ 0x34
 800b224:	e03b      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
 800b226:	bf00      	nop
 800b228:	44020c00 	.word	0x44020c00
 800b22c:	03d09000 	.word	0x03d09000
 800b230:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800b234:	4b9f      	ldr	r3, [pc, #636]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 0302 	and.w	r3, r3, #2
 800b23c:	2b02      	cmp	r3, #2
 800b23e:	d10d      	bne.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
 800b240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b242:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800b246:	d109      	bne.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b248:	4b9a      	ldr	r3, [pc, #616]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	08db      	lsrs	r3, r3, #3
 800b24e:	f003 0303 	and.w	r3, r3, #3
 800b252:	4a99      	ldr	r2, [pc, #612]	@ (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800b254:	fa22 f303 	lsr.w	r3, r2, r3
 800b258:	637b      	str	r3, [r7, #52]	@ 0x34
 800b25a:	e020      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800b25c:	4b95      	ldr	r3, [pc, #596]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b268:	d106      	bne.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 800b26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b270:	d102      	bne.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
          frequency = CSI_VALUE;
 800b272:	4b92      	ldr	r3, [pc, #584]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 800b274:	637b      	str	r3, [r7, #52]	@ 0x34
 800b276:	e012      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800b278:	4b8e      	ldr	r3, [pc, #568]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b27a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b27e:	f003 0302 	and.w	r3, r3, #2
 800b282:	2b02      	cmp	r3, #2
 800b284:	d107      	bne.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
 800b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b288:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800b28c:	d103      	bne.n	800b296 <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
          frequency = LSE_VALUE;
 800b28e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b292:	637b      	str	r3, [r7, #52]	@ 0x34
 800b294:	e003      	b.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
          frequency = 0U;
 800b296:	2300      	movs	r3, #0
 800b298:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b29a:	f001 baf4 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b29e:	f001 baf2 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800b2a2:	4b84      	ldr	r3, [pc, #528]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b2a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b2a8:	f003 0307 	and.w	r3, r3, #7
 800b2ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d104      	bne.n	800b2be <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b2b4:	f7fc fbcc 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800b2b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800b2ba:	f001 bae4 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800b2be:	4b7d      	ldr	r3, [pc, #500]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2ca:	d10a      	bne.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
 800b2cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d107      	bne.n	800b2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2d2:	f107 0314 	add.w	r3, r7, #20
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fe fce6 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2e0:	e043      	b.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800b2e2:	4b74      	ldr	r3, [pc, #464]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2ee:	d10a      	bne.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
 800b2f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d107      	bne.n	800b306 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2f6:	f107 0308 	add.w	r3, r7, #8
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fe fe40 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	637b      	str	r3, [r7, #52]	@ 0x34
 800b304:	e031      	b.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800b306:	4b6b      	ldr	r3, [pc, #428]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f003 0302 	and.w	r3, r3, #2
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d10c      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800b312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b314:	2b03      	cmp	r3, #3
 800b316:	d109      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b318:	4b66      	ldr	r3, [pc, #408]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	08db      	lsrs	r3, r3, #3
 800b31e:	f003 0303 	and.w	r3, r3, #3
 800b322:	4a65      	ldr	r2, [pc, #404]	@ (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800b324:	fa22 f303 	lsr.w	r3, r2, r3
 800b328:	637b      	str	r3, [r7, #52]	@ 0x34
 800b32a:	e01e      	b.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800b32c:	4b61      	ldr	r3, [pc, #388]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b338:	d105      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
 800b33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33c:	2b04      	cmp	r3, #4
 800b33e:	d102      	bne.n	800b346 <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
          frequency = CSI_VALUE;
 800b340:	4b5e      	ldr	r3, [pc, #376]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 800b342:	637b      	str	r3, [r7, #52]	@ 0x34
 800b344:	e011      	b.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800b346:	4b5b      	ldr	r3, [pc, #364]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b34c:	f003 0302 	and.w	r3, r3, #2
 800b350:	2b02      	cmp	r3, #2
 800b352:	d106      	bne.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
 800b354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b356:	2b05      	cmp	r3, #5
 800b358:	d103      	bne.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
          frequency = LSE_VALUE;
 800b35a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b35e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b360:	e003      	b.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
          frequency = 0U;
 800b362:	2300      	movs	r3, #0
 800b364:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b366:	f001 ba8e 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b36a:	f001 ba8c 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800b36e:	4b51      	ldr	r3, [pc, #324]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b370:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b374:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b378:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800b37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d104      	bne.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b380:	f7fc fb66 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800b384:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800b386:	f001 ba7e 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800b38a:	4b4a      	ldr	r3, [pc, #296]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b392:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b396:	d10a      	bne.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800b398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39a:	2b10      	cmp	r3, #16
 800b39c:	d107      	bne.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b39e:	f107 0314 	add.w	r3, r7, #20
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe fc80 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3ac:	e043      	b.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800b3ae:	4b41      	ldr	r3, [pc, #260]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3ba:	d10a      	bne.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
 800b3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3be:	2b20      	cmp	r3, #32
 800b3c0:	d107      	bne.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3c2:	f107 0308 	add.w	r3, r7, #8
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7fe fdda 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3d0:	e031      	b.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800b3d2:	4b38      	ldr	r3, [pc, #224]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 0302 	and.w	r3, r3, #2
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	d10c      	bne.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800b3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e0:	2b30      	cmp	r3, #48	@ 0x30
 800b3e2:	d109      	bne.n	800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b3e4:	4b33      	ldr	r3, [pc, #204]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	08db      	lsrs	r3, r3, #3
 800b3ea:	f003 0303 	and.w	r3, r3, #3
 800b3ee:	4a32      	ldr	r2, [pc, #200]	@ (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800b3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3f6:	e01e      	b.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800b3f8:	4b2e      	ldr	r3, [pc, #184]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b404:	d105      	bne.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 800b406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b408:	2b40      	cmp	r3, #64	@ 0x40
 800b40a:	d102      	bne.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
          frequency = CSI_VALUE;
 800b40c:	4b2b      	ldr	r3, [pc, #172]	@ (800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 800b40e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b410:	e011      	b.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800b412:	4b28      	ldr	r3, [pc, #160]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b418:	f003 0302 	and.w	r3, r3, #2
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d106      	bne.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800b420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b422:	2b50      	cmp	r3, #80	@ 0x50
 800b424:	d103      	bne.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = LSE_VALUE;
 800b426:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b42a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b42c:	e003      	b.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
          frequency = 0U;
 800b42e:	2300      	movs	r3, #0
 800b430:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b432:	f001 ba28 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b436:	f001 ba26 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b43a:	4b1e      	ldr	r3, [pc, #120]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b43c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b440:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b444:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d104      	bne.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b44c:	f7fc fb2c 	bl	8007aa8 <HAL_RCC_GetPCLK3Freq>
 800b450:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b452:	f001 ba18 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800b456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b45c:	d108      	bne.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b45e:	f107 0314 	add.w	r3, r7, #20
 800b462:	4618      	mov	r0, r3
 800b464:	f7fe fc20 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b46c:	f001 ba0b 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800b470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b472:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b476:	d108      	bne.n	800b48a <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b478:	f107 0308 	add.w	r3, r7, #8
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7fe fd7f 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b486:	f001 b9fe 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b48a:	4b0a      	ldr	r3, [pc, #40]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	2b02      	cmp	r3, #2
 800b494:	d114      	bne.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
 800b496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b498:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b49c:	d110      	bne.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b49e:	4b05      	ldr	r3, [pc, #20]	@ (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	08db      	lsrs	r3, r3, #3
 800b4a4:	f003 0303 	and.w	r3, r3, #3
 800b4a8:	4a03      	ldr	r2, [pc, #12]	@ (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800b4aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4b0:	e027      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
 800b4b2:	bf00      	nop
 800b4b4:	44020c00 	.word	0x44020c00
 800b4b8:	03d09000 	.word	0x03d09000
 800b4bc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800b4c0:	4ba0      	ldr	r3, [pc, #640]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b4c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4cc:	d106      	bne.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4d4:	d102      	bne.n	800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
          frequency = CSI_VALUE;
 800b4d6:	4b9c      	ldr	r3, [pc, #624]	@ (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 800b4d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4da:	e012      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b4dc:	4b99      	ldr	r3, [pc, #612]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b4de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b4e2:	f003 0302 	and.w	r3, r3, #2
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d107      	bne.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ec:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b4f0:	d103      	bne.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
          frequency = LSE_VALUE;
 800b4f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4f8:	e003      	b.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
          frequency = 0U;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b4fe:	f001 b9c2 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b502:	f001 b9c0 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b506:	4b8f      	ldr	r3, [pc, #572]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b50c:	f003 0307 	and.w	r3, r3, #7
 800b510:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b514:	2b00      	cmp	r3, #0
 800b516:	d104      	bne.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800b518:	f7fc fa7e 	bl	8007a18 <HAL_RCC_GetHCLKFreq>
 800b51c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800b51e:	f001 b9b2 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b524:	2b01      	cmp	r3, #1
 800b526:	d104      	bne.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
          frequency = HAL_RCC_GetSysClockFreq();
 800b528:	f7fc f94a 	bl	80077c0 <HAL_RCC_GetSysClockFreq>
 800b52c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b52e:	f001 b9aa 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800b532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b534:	2b02      	cmp	r3, #2
 800b536:	d108      	bne.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b538:	f107 0314 	add.w	r3, r7, #20
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fe fbb3 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b546:	f001 b99e 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b54a:	4b7e      	ldr	r3, [pc, #504]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b552:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b556:	d105      	bne.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
 800b558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	d102      	bne.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
          frequency = HSE_VALUE;
 800b55e:	4b7b      	ldr	r3, [pc, #492]	@ (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>)
 800b560:	637b      	str	r3, [r7, #52]	@ 0x34
 800b562:	e023      	b.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b564:	4b77      	ldr	r3, [pc, #476]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f003 0302 	and.w	r3, r3, #2
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d10c      	bne.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
 800b570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b572:	2b04      	cmp	r3, #4
 800b574:	d109      	bne.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b576:	4b73      	ldr	r3, [pc, #460]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	08db      	lsrs	r3, r3, #3
 800b57c:	f003 0303 	and.w	r3, r3, #3
 800b580:	4a73      	ldr	r2, [pc, #460]	@ (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 800b582:	fa22 f303 	lsr.w	r3, r2, r3
 800b586:	637b      	str	r3, [r7, #52]	@ 0x34
 800b588:	e010      	b.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800b58a:	4b6e      	ldr	r3, [pc, #440]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b592:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b596:	d105      	bne.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	2b05      	cmp	r3, #5
 800b59c:	d102      	bne.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
          frequency = CSI_VALUE;
 800b59e:	4b6a      	ldr	r3, [pc, #424]	@ (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 800b5a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5a2:	e003      	b.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
          frequency = 0U;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b5a8:	f001 b96d 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b5ac:	f001 b96b 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800b5b0:	4b64      	ldr	r3, [pc, #400]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b5b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b5b6:	f003 0308 	and.w	r3, r3, #8
 800b5ba:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800b5bc:	4b61      	ldr	r3, [pc, #388]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b5be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5c2:	f003 0302 	and.w	r3, r3, #2
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d106      	bne.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d103      	bne.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
        {
          frequency = LSE_VALUE;
 800b5d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5d6:	e012      	b.n	800b5fe <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800b5d8:	4b5a      	ldr	r3, [pc, #360]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b5da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b5de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b5e6:	d106      	bne.n	800b5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 800b5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ea:	2b08      	cmp	r3, #8
 800b5ec:	d103      	bne.n	800b5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
        {
          frequency = LSI_VALUE;
 800b5ee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b5f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5f4:	e003      	b.n	800b5fe <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b5fa:	f001 b944 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b5fe:	f001 b942 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b602:	4b50      	ldr	r3, [pc, #320]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b604:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b608:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b60c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b610:	2b00      	cmp	r3, #0
 800b612:	d104      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b614:	f7fc fa1c 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800b618:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b61a:	f001 b934 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800b61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b624:	d108      	bne.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b626:	f107 0308 	add.w	r3, r7, #8
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fe fca8 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b634:	f001 b927 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b638:	4b42      	ldr	r3, [pc, #264]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 0302 	and.w	r3, r3, #2
 800b640:	2b02      	cmp	r3, #2
 800b642:	d10d      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
 800b644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b64a:	d109      	bne.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b64c:	4b3d      	ldr	r3, [pc, #244]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	08db      	lsrs	r3, r3, #3
 800b652:	f003 0303 	and.w	r3, r3, #3
 800b656:	4a3e      	ldr	r2, [pc, #248]	@ (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 800b658:	fa22 f303 	lsr.w	r3, r2, r3
 800b65c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b65e:	e011      	b.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800b660:	4b38      	ldr	r3, [pc, #224]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b66c:	d106      	bne.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
 800b66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b670:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b674:	d102      	bne.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
          frequency = CSI_VALUE;
 800b676:	4b34      	ldr	r3, [pc, #208]	@ (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 800b678:	637b      	str	r3, [r7, #52]	@ 0x34
 800b67a:	e003      	b.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
          frequency = 0U;
 800b67c:	2300      	movs	r3, #0
 800b67e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b680:	f001 b901 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b684:	f001 b8ff 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b688:	4b2e      	ldr	r3, [pc, #184]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b68a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b68e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b692:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800b694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b696:	2b00      	cmp	r3, #0
 800b698:	d104      	bne.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b69a:	f7fc f9d9 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800b69e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b6a0:	f001 b8f1 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800b6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b6aa:	d108      	bne.n	800b6be <HAL_RCCEx_GetPeriphCLKFreq+0x1466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6ac:	f107 0308 	add.w	r3, r7, #8
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7fe fc65 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6ba:	f001 b8e4 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800b6be:	4b21      	ldr	r3, [pc, #132]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 0302 	and.w	r3, r3, #2
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d10d      	bne.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b6d0:	d109      	bne.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b6d2:	4b1c      	ldr	r3, [pc, #112]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	08db      	lsrs	r3, r3, #3
 800b6d8:	f003 0303 	and.w	r3, r3, #3
 800b6dc:	4a1c      	ldr	r2, [pc, #112]	@ (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 800b6de:	fa22 f303 	lsr.w	r3, r2, r3
 800b6e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6e4:	e011      	b.n	800b70a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800b6e6:	4b17      	ldr	r3, [pc, #92]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b6ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6f2:	d106      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b6fa:	d102      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
          frequency = CSI_VALUE;
 800b6fc:	4b12      	ldr	r3, [pc, #72]	@ (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 800b6fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b700:	e003      	b.n	800b70a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
          frequency = 0U;
 800b702:	2300      	movs	r3, #0
 800b704:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b706:	f001 b8be 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b70a:	f001 b8bc 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b70e:	4b0d      	ldr	r3, [pc, #52]	@ (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800b710:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b714:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b718:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800b71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d104      	bne.n	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x14d2>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b720:	f7fc f9c2 	bl	8007aa8 <HAL_RCC_GetPCLK3Freq>
 800b724:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b726:	f001 b8ae 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800b72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b72c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b730:	d110      	bne.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x14fc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b732:	f107 0308 	add.w	r3, r7, #8
 800b736:	4618      	mov	r0, r3
 800b738:	f7fe fc22 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b740:	f001 b8a1 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b744:	44020c00 	.word	0x44020c00
 800b748:	003d0900 	.word	0x003d0900
 800b74c:	007a1200 	.word	0x007a1200
 800b750:	03d09000 	.word	0x03d09000
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800b754:	4b9e      	ldr	r3, [pc, #632]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0302 	and.w	r3, r3, #2
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d10d      	bne.n	800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
 800b760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b762:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b766:	d109      	bne.n	800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b768:	4b99      	ldr	r3, [pc, #612]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	08db      	lsrs	r3, r3, #3
 800b76e:	f003 0303 	and.w	r3, r3, #3
 800b772:	4a98      	ldr	r2, [pc, #608]	@ (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800b774:	fa22 f303 	lsr.w	r3, r2, r3
 800b778:	637b      	str	r3, [r7, #52]	@ 0x34
 800b77a:	e011      	b.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800b77c:	4b94      	ldr	r3, [pc, #592]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b788:	d106      	bne.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
 800b78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b78c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b790:	d102      	bne.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
          frequency = CSI_VALUE;
 800b792:	4b91      	ldr	r3, [pc, #580]	@ (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 800b794:	637b      	str	r3, [r7, #52]	@ 0x34
 800b796:	e003      	b.n	800b7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
          frequency = 0U;
 800b798:	2300      	movs	r3, #0
 800b79a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b79c:	f001 b873 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b7a0:	f001 b871 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b7a4:	4b8a      	ldr	r3, [pc, #552]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b7a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7aa:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b7ae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800b7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d104      	bne.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b7b6:	f7fc f977 	bl	8007aa8 <HAL_RCC_GetPCLK3Freq>
 800b7ba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b7bc:	f001 b863 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800b7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7c6:	d108      	bne.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x1582>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7c8:	f107 0308 	add.w	r3, r7, #8
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fe fbd7 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b7d6:	f001 b856 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b7da:	4b7d      	ldr	r3, [pc, #500]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f003 0302 	and.w	r3, r3, #2
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d10d      	bne.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
 800b7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7ec:	d109      	bne.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b7ee:	4b78      	ldr	r3, [pc, #480]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	08db      	lsrs	r3, r3, #3
 800b7f4:	f003 0303 	and.w	r3, r3, #3
 800b7f8:	4a76      	ldr	r2, [pc, #472]	@ (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800b7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b7fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b800:	e011      	b.n	800b826 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800b802:	4b73      	ldr	r3, [pc, #460]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b80a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b80e:	d106      	bne.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 800b810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b812:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b816:	d102      	bne.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
          frequency = CSI_VALUE;
 800b818:	4b6f      	ldr	r3, [pc, #444]	@ (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 800b81a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b81c:	e003      	b.n	800b826 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
          frequency = 0U;
 800b81e:	2300      	movs	r3, #0
 800b820:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b822:	f001 b830 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b826:	f001 b82e 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800b82a:	4b69      	ldr	r3, [pc, #420]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b82c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b830:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b834:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800b836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d104      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b83c:	f7fc f908 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800b840:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b842:	f001 b820 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800b846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b84c:	d108      	bne.n	800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b84e:	f107 0308 	add.w	r3, r7, #8
 800b852:	4618      	mov	r0, r3
 800b854:	f7fe fb94 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b85c:	f001 b813 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800b860:	4b5b      	ldr	r3, [pc, #364]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 0302 	and.w	r3, r3, #2
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d10e      	bne.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
 800b86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b86e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b872:	d10a      	bne.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b874:	4b56      	ldr	r3, [pc, #344]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	08db      	lsrs	r3, r3, #3
 800b87a:	f003 0303 	and.w	r3, r3, #3
 800b87e:	4a55      	ldr	r2, [pc, #340]	@ (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800b880:	fa22 f303 	lsr.w	r3, r2, r3
 800b884:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b886:	f000 bffe 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 800b88a:	2300      	movs	r3, #0
 800b88c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b88e:	f000 bffa 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b892:	4b4f      	ldr	r3, [pc, #316]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b894:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b898:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b89c:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800b89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b8a4:	d056      	beq.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800b8ac:	f200 808b 	bhi.w	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8b6:	d03e      	beq.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x16de>
 800b8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8be:	f200 8082 	bhi.w	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b8c8:	d027      	beq.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0x16c2>
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b8d0:	d879      	bhi.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8d8:	d017      	beq.n	800b90a <HAL_RCCEx_GetPeriphCLKFreq+0x16b2>
 800b8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8e0:	d871      	bhi.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d004      	beq.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8ee:	d004      	beq.n	800b8fa <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
 800b8f0:	e069      	b.n	800b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800b8f2:	f7fc f8d9 	bl	8007aa8 <HAL_RCC_GetPCLK3Freq>
 800b8f6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b8f8:	e068      	b.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8fa:	f107 0314 	add.w	r3, r7, #20
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe f9d2 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b908:	e060      	b.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b90a:	f107 0308 	add.w	r3, r7, #8
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe fb36 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b918:	e058      	b.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800b91a:	4b2d      	ldr	r3, [pc, #180]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b91c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b920:	f003 0302 	and.w	r3, r3, #2
 800b924:	2b02      	cmp	r3, #2
 800b926:	d103      	bne.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x16d8>
            {
              frequency = LSE_VALUE;
 800b928:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b92c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b92e:	e04d      	b.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b934:	e04a      	b.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800b936:	4b26      	ldr	r3, [pc, #152]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b93c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b940:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b944:	d103      	bne.n	800b94e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            {
              frequency = LSI_VALUE;
 800b946:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b94a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b94c:	e03e      	b.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 800b94e:	2300      	movs	r3, #0
 800b950:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b952:	e03b      	b.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b954:	4b1e      	ldr	r3, [pc, #120]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b95a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b95e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b960:	4b1b      	ldr	r3, [pc, #108]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 0302 	and.w	r3, r3, #2
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d10c      	bne.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
 800b96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d109      	bne.n	800b986 <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b972:	4b17      	ldr	r3, [pc, #92]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	08db      	lsrs	r3, r3, #3
 800b978:	f003 0303 	and.w	r3, r3, #3
 800b97c:	4a15      	ldr	r2, [pc, #84]	@ (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800b97e:	fa22 f303 	lsr.w	r3, r2, r3
 800b982:	637b      	str	r3, [r7, #52]	@ 0x34
 800b984:	e01e      	b.n	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b986:	4b12      	ldr	r3, [pc, #72]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b98e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b992:	d106      	bne.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
 800b994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b99a:	d102      	bne.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b99c:	4b0e      	ldr	r3, [pc, #56]	@ (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 800b99e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9a0:	e010      	b.n	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b9a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9ae:	d106      	bne.n	800b9be <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
 800b9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9b6:	d102      	bne.n	800b9be <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b9b8:	4b08      	ldr	r3, [pc, #32]	@ (800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x1784>)
 800b9ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9bc:	e002      	b.n	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b9c2:	e003      	b.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
 800b9c4:	e002      	b.n	800b9cc <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          default :
          {
            frequency = 0U;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b9ca:	bf00      	nop
          }
        }
        break;
 800b9cc:	f000 bf5b 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b9d0:	44020c00 	.word	0x44020c00
 800b9d4:	03d09000 	.word	0x03d09000
 800b9d8:	003d0900 	.word	0x003d0900
 800b9dc:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b9e0:	4b9e      	ldr	r3, [pc, #632]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800b9e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800b9e6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b9ea:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ee:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b9f2:	d056      	beq.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x184a>
 800b9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b9fa:	f200 808b 	bhi.w	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba04:	d03e      	beq.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x182c>
 800ba06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba0c:	f200 8082 	bhi.w	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 800ba10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ba16:	d027      	beq.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x1810>
 800ba18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ba1e:	d879      	bhi.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 800ba20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba26:	d017      	beq.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x1800>
 800ba28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba2e:	d871      	bhi.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 800ba30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d004      	beq.n	800ba40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>
 800ba36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba3c:	d004      	beq.n	800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800ba3e:	e069      	b.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800ba40:	f7fc f806 	bl	8007a50 <HAL_RCC_GetPCLK1Freq>
 800ba44:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ba46:	e068      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba48:	f107 0314 	add.w	r3, r7, #20
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe f92b 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba56:	e060      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba58:	f107 0308 	add.w	r3, r7, #8
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe fa8f 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba66:	e058      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ba68:	4b7c      	ldr	r3, [pc, #496]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800ba6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba6e:	f003 0302 	and.w	r3, r3, #2
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d103      	bne.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x1826>
            {
              frequency = LSE_VALUE;
 800ba76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba7a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ba7c:	e04d      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ba82:	e04a      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ba84:	4b75      	ldr	r3, [pc, #468]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800ba86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba92:	d103      	bne.n	800ba9c <HAL_RCCEx_GetPeriphCLKFreq+0x1844>
            {
              frequency = LSI_VALUE;
 800ba94:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ba98:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ba9a:	e03e      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800baa0:	e03b      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800baa2:	4b6e      	ldr	r3, [pc, #440]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800baa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800baa8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800baac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800baae:	4b6b      	ldr	r3, [pc, #428]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 0302 	and.w	r3, r3, #2
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d10c      	bne.n	800bad4 <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
 800baba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800babc:	2b00      	cmp	r3, #0
 800babe:	d109      	bne.n	800bad4 <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bac0:	4b66      	ldr	r3, [pc, #408]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	08db      	lsrs	r3, r3, #3
 800bac6:	f003 0303 	and.w	r3, r3, #3
 800baca:	4a65      	ldr	r2, [pc, #404]	@ (800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 800bacc:	fa22 f303 	lsr.w	r3, r2, r3
 800bad0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bad2:	e01e      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bad4:	4b61      	ldr	r3, [pc, #388]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800badc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bae0:	d106      	bne.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
 800bae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bae8:	d102      	bne.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800baea:	4b5e      	ldr	r3, [pc, #376]	@ (800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 800baec:	637b      	str	r3, [r7, #52]	@ 0x34
 800baee:	e010      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800baf0:	4b5a      	ldr	r3, [pc, #360]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bafc:	d106      	bne.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
 800bafe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb04:	d102      	bne.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bb06:	4b58      	ldr	r3, [pc, #352]	@ (800bc68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 800bb08:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb0a:	e002      	b.n	800bb12 <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bb10:	e003      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
 800bb12:	e002      	b.n	800bb1a <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          default :
          {
            frequency = 0U;
 800bb14:	2300      	movs	r3, #0
 800bb16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bb18:	bf00      	nop
          }
        }
        break;
 800bb1a:	f000 beb4 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800bb1e:	4b4f      	ldr	r3, [pc, #316]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800bb20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bb24:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800bb28:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800bb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bb30:	d056      	beq.n	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1988>
 800bb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bb38:	f200 808b 	bhi.w	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 800bb3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bb42:	d03e      	beq.n	800bbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x196a>
 800bb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bb4a:	f200 8082 	bhi.w	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bb54:	d027      	beq.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x194e>
 800bb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bb5c:	d879      	bhi.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb64:	d017      	beq.n	800bb96 <HAL_RCCEx_GetPeriphCLKFreq+0x193e>
 800bb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb6c:	d871      	bhi.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 800bb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d004      	beq.n	800bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x1926>
 800bb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb7a:	d004      	beq.n	800bb86 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800bb7c:	e069      	b.n	800bc52 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800bb7e:	f7fb ff93 	bl	8007aa8 <HAL_RCC_GetPCLK3Freq>
 800bb82:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800bb84:	e068      	b.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb86:	f107 0314 	add.w	r3, r7, #20
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7fe f88c 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bb94:	e060      	b.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb96:	f107 0308 	add.w	r3, r7, #8
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fe f9f0 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bba4:	e058      	b.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bba6:	4b2d      	ldr	r3, [pc, #180]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800bba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bbac:	f003 0302 	and.w	r3, r3, #2
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d103      	bne.n	800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0x1964>
            {
              frequency = LSE_VALUE;
 800bbb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bbb8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bbba:	e04d      	b.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bbc0:	e04a      	b.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800bbc2:	4b26      	ldr	r3, [pc, #152]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800bbc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bbc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bbd0:	d103      	bne.n	800bbda <HAL_RCCEx_GetPeriphCLKFreq+0x1982>
            {
              frequency = LSI_VALUE;
 800bbd2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bbd6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bbd8:	e03e      	b.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bbde:	e03b      	b.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bbe0:	4b1e      	ldr	r3, [pc, #120]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800bbe2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bbe6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bbea:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bbec:	4b1b      	ldr	r3, [pc, #108]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f003 0302 	and.w	r3, r3, #2
 800bbf4:	2b02      	cmp	r3, #2
 800bbf6:	d10c      	bne.n	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
 800bbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d109      	bne.n	800bc12 <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bbfe:	4b17      	ldr	r3, [pc, #92]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	08db      	lsrs	r3, r3, #3
 800bc04:	f003 0303 	and.w	r3, r3, #3
 800bc08:	4a15      	ldr	r2, [pc, #84]	@ (800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 800bc0a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc10:	e01e      	b.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc12:	4b12      	ldr	r3, [pc, #72]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bc1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc1e:	d106      	bne.n	800bc2e <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
 800bc20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc26:	d102      	bne.n	800bc2e <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bc28:	4b0e      	ldr	r3, [pc, #56]	@ (800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 800bc2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc2c:	e010      	b.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc2e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc3a:	d106      	bne.n	800bc4a <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
 800bc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc42:	d102      	bne.n	800bc4a <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bc44:	4b08      	ldr	r3, [pc, #32]	@ (800bc68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 800bc46:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc48:	e002      	b.n	800bc50 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bc4e:	e003      	b.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
 800bc50:	e002      	b.n	800bc58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          default :
          {
            frequency = 0U;
 800bc52:	2300      	movs	r3, #0
 800bc54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bc56:	bf00      	nop
          }
        }
        break;
 800bc58:	f000 be15 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800bc5c:	44020c00 	.word	0x44020c00
 800bc60:	03d09000 	.word	0x03d09000
 800bc64:	003d0900 	.word	0x003d0900
 800bc68:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800bc6c:	4b9e      	ldr	r3, [pc, #632]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800bc6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bc72:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800bc76:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800bc78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800bc7e:	d056      	beq.n	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x1ad6>
 800bc80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc82:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800bc86:	f200 808b 	bhi.w	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 800bc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc90:	d03e      	beq.n	800bd10 <HAL_RCCEx_GetPeriphCLKFreq+0x1ab8>
 800bc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc98:	f200 8082 	bhi.w	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 800bc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bca2:	d027      	beq.n	800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a9c>
 800bca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bcaa:	d879      	bhi.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 800bcac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bcb2:	d017      	beq.n	800bce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8c>
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bcba:	d871      	bhi.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d004      	beq.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcc8:	d004      	beq.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800bcca:	e069      	b.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800bccc:	f7fb feec 	bl	8007aa8 <HAL_RCC_GetPCLK3Freq>
 800bcd0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800bcd2:	e068      	b.n	800bda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcd4:	f107 0314 	add.w	r3, r7, #20
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fd ffe5 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bce2:	e060      	b.n	800bda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bce4:	f107 0308 	add.w	r3, r7, #8
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fe f949 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bcf2:	e058      	b.n	800bda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bcf4:	4b7c      	ldr	r3, [pc, #496]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800bcf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bcfa:	f003 0302 	and.w	r3, r3, #2
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d103      	bne.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ab2>
            {
              frequency = LSE_VALUE;
 800bd02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd06:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bd08:	e04d      	b.n	800bda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd0e:	e04a      	b.n	800bda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800bd10:	4b75      	ldr	r3, [pc, #468]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800bd12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bd16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd1e:	d103      	bne.n	800bd28 <HAL_RCCEx_GetPeriphCLKFreq+0x1ad0>
            {
              frequency = LSI_VALUE;
 800bd20:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bd24:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bd26:	e03e      	b.n	800bda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bd2c:	e03b      	b.n	800bda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd2e:	4b6e      	ldr	r3, [pc, #440]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800bd30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bd34:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bd38:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd3a:	4b6b      	ldr	r3, [pc, #428]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f003 0302 	and.w	r3, r3, #2
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d10c      	bne.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
 800bd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d109      	bne.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd4c:	4b66      	ldr	r3, [pc, #408]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	08db      	lsrs	r3, r3, #3
 800bd52:	f003 0303 	and.w	r3, r3, #3
 800bd56:	4a65      	ldr	r2, [pc, #404]	@ (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 800bd58:	fa22 f303 	lsr.w	r3, r2, r3
 800bd5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd5e:	e01e      	b.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd60:	4b61      	ldr	r3, [pc, #388]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd6c:	d106      	bne.n	800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
 800bd6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd74:	d102      	bne.n	800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800bd76:	4b5e      	ldr	r3, [pc, #376]	@ (800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 800bd78:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd7a:	e010      	b.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd7c:	4b5a      	ldr	r3, [pc, #360]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd88:	d106      	bne.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
 800bd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd90:	d102      	bne.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bd92:	4b58      	ldr	r3, [pc, #352]	@ (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 800bd94:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd96:	e002      	b.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800bd9c:	e003      	b.n	800bda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
 800bd9e:	e002      	b.n	800bda6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          default :
          {
            frequency = 0U;
 800bda0:	2300      	movs	r3, #0
 800bda2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bda4:	bf00      	nop
          }
        }
        break;
 800bda6:	f000 bd6e 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800bdaa:	4b4f      	ldr	r3, [pc, #316]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800bdac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bdb0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800bdb4:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bdbc:	d056      	beq.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c14>
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bdc4:	f200 808b 	bhi.w	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 800bdc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bdce:	d03e      	beq.n	800be4e <HAL_RCCEx_GetPeriphCLKFreq+0x1bf6>
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bdd6:	f200 8082 	bhi.w	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 800bdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bddc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bde0:	d027      	beq.n	800be32 <HAL_RCCEx_GetPeriphCLKFreq+0x1bda>
 800bde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bde8:	d879      	bhi.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 800bdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bdf0:	d017      	beq.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x1bca>
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bdf8:	d871      	bhi.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d004      	beq.n	800be0a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb2>
 800be00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be06:	d004      	beq.n	800be12 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800be08:	e069      	b.n	800bede <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800be0a:	f7fb fe4d 	bl	8007aa8 <HAL_RCC_GetPCLK3Freq>
 800be0e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800be10:	e068      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be12:	f107 0314 	add.w	r3, r7, #20
 800be16:	4618      	mov	r0, r3
 800be18:	f7fd ff46 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800be20:	e060      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be22:	f107 0308 	add.w	r3, r7, #8
 800be26:	4618      	mov	r0, r3
 800be28:	f7fe f8aa 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800be30:	e058      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800be32:	4b2d      	ldr	r3, [pc, #180]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800be34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be38:	f003 0302 	and.w	r3, r3, #2
 800be3c:	2b02      	cmp	r3, #2
 800be3e:	d103      	bne.n	800be48 <HAL_RCCEx_GetPeriphCLKFreq+0x1bf0>
            {
              frequency = LSE_VALUE;
 800be40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be44:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800be46:	e04d      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 800be48:	2300      	movs	r3, #0
 800be4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800be4c:	e04a      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800be4e:	4b26      	ldr	r3, [pc, #152]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800be50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be5c:	d103      	bne.n	800be66 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0e>
            {
              frequency = LSI_VALUE;
 800be5e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800be62:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800be64:	e03e      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 800be66:	2300      	movs	r3, #0
 800be68:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800be6a:	e03b      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be6c:	4b1e      	ldr	r3, [pc, #120]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800be6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800be72:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800be76:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be78:	4b1b      	ldr	r3, [pc, #108]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f003 0302 	and.w	r3, r3, #2
 800be80:	2b02      	cmp	r3, #2
 800be82:	d10c      	bne.n	800be9e <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
 800be84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be86:	2b00      	cmp	r3, #0
 800be88:	d109      	bne.n	800be9e <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800be8a:	4b17      	ldr	r3, [pc, #92]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	08db      	lsrs	r3, r3, #3
 800be90:	f003 0303 	and.w	r3, r3, #3
 800be94:	4a15      	ldr	r2, [pc, #84]	@ (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 800be96:	fa22 f303 	lsr.w	r3, r2, r3
 800be9a:	637b      	str	r3, [r7, #52]	@ 0x34
 800be9c:	e01e      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be9e:	4b12      	ldr	r3, [pc, #72]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bea6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800beaa:	d106      	bne.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
 800beac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800beb2:	d102      	bne.n	800beba <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800beb4:	4b0e      	ldr	r3, [pc, #56]	@ (800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 800beb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800beb8:	e010      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800beba:	4b0b      	ldr	r3, [pc, #44]	@ (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bec2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bec6:	d106      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
 800bec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bece:	d102      	bne.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800bed0:	4b08      	ldr	r3, [pc, #32]	@ (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 800bed2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bed4:	e002      	b.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800beda:	e003      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
 800bedc:	e002      	b.n	800bee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          default :
          {
            frequency = 0U;
 800bede:	2300      	movs	r3, #0
 800bee0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bee2:	bf00      	nop
          }
        }
        break;
 800bee4:	f000 bccf 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800bee8:	44020c00 	.word	0x44020c00
 800beec:	03d09000 	.word	0x03d09000
 800bef0:	003d0900 	.word	0x003d0900
 800bef4:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800bef8:	4b9e      	ldr	r3, [pc, #632]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800befa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800befe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800bf02:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800bf04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf0a:	d056      	beq.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x1d62>
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf12:	f200 808b 	bhi.w	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 800bf16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf1c:	d03e      	beq.n	800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x1d44>
 800bf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf24:	f200 8082 	bhi.w	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 800bf28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bf2e:	d027      	beq.n	800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x1d28>
 800bf30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bf36:	d879      	bhi.n	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 800bf38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf3e:	d017      	beq.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x1d18>
 800bf40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf46:	d871      	bhi.n	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 800bf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d004      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf54:	d004      	beq.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800bf56:	e069      	b.n	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800bf58:	f7fb fda6 	bl	8007aa8 <HAL_RCC_GetPCLK3Freq>
 800bf5c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800bf5e:	e068      	b.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf60:	f107 0314 	add.w	r3, r7, #20
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fd fe9f 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bf6e:	e060      	b.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf70:	f107 0308 	add.w	r3, r7, #8
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fe f803 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bf7e:	e058      	b.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800bf80:	4b7c      	ldr	r3, [pc, #496]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800bf82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf86:	f003 0302 	and.w	r3, r3, #2
 800bf8a:	2b02      	cmp	r3, #2
 800bf8c:	d103      	bne.n	800bf96 <HAL_RCCEx_GetPeriphCLKFreq+0x1d3e>
            {
              frequency = LSE_VALUE;
 800bf8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf92:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bf94:	e04d      	b.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bf9a:	e04a      	b.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800bf9c:	4b75      	ldr	r3, [pc, #468]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800bf9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bfa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bfa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bfaa:	d103      	bne.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d5c>
            {
              frequency = LSI_VALUE;
 800bfac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bfb0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800bfb2:	e03e      	b.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800bfb8:	e03b      	b.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfba:	4b6e      	ldr	r3, [pc, #440]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800bfbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bfc0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bfc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfc6:	4b6b      	ldr	r3, [pc, #428]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f003 0302 	and.w	r3, r3, #2
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	d10c      	bne.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
 800bfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d109      	bne.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bfd8:	4b66      	ldr	r3, [pc, #408]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	08db      	lsrs	r3, r3, #3
 800bfde:	f003 0303 	and.w	r3, r3, #3
 800bfe2:	4a65      	ldr	r2, [pc, #404]	@ (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 800bfe4:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfea:	e01e      	b.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfec:	4b61      	ldr	r3, [pc, #388]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bff8:	d106      	bne.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
 800bffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c000:	d102      	bne.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c002:	4b5e      	ldr	r3, [pc, #376]	@ (800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 800c004:	637b      	str	r3, [r7, #52]	@ 0x34
 800c006:	e010      	b.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c008:	4b5a      	ldr	r3, [pc, #360]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c014:	d106      	bne.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
 800c016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c018:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c01c:	d102      	bne.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c01e:	4b58      	ldr	r3, [pc, #352]	@ (800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 800c020:	637b      	str	r3, [r7, #52]	@ 0x34
 800c022:	e002      	b.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c024:	2300      	movs	r3, #0
 800c026:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c028:	e003      	b.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
 800c02a:	e002      	b.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          default :
          {
            frequency = 0U;
 800c02c:	2300      	movs	r3, #0
 800c02e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c030:	bf00      	nop
          }
        }
        break;
 800c032:	f000 bc28 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c036:	4b4f      	ldr	r3, [pc, #316]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800c038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c03c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c040:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800c042:	4b4c      	ldr	r3, [pc, #304]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c04a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c04e:	d106      	bne.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
 800c050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c052:	2b00      	cmp	r3, #0
 800c054:	d103      	bne.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
        {
          frequency = HSE_VALUE;
 800c056:	4b4a      	ldr	r3, [pc, #296]	@ (800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 800c058:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800c05a:	f000 bc14 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800c05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c064:	d108      	bne.n	800c078 <HAL_RCCEx_GetPeriphCLKFreq+0x1e20>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c066:	f107 0320 	add.w	r3, r7, #32
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fd fcb0 	bl	80099d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c074:	f000 bc07 	b.w	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800c078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c07e:	d107      	bne.n	800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x1e38>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c080:	f107 0314 	add.w	r3, r7, #20
 800c084:	4618      	mov	r0, r3
 800c086:	f7fd fe0f 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c08e:	e3fa      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 800c090:	2300      	movs	r3, #0
 800c092:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c094:	e3f7      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c096:	4b37      	ldr	r3, [pc, #220]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800c098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c09c:	f003 0307 	and.w	r3, r3, #7
 800c0a0:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a4:	2b04      	cmp	r3, #4
 800c0a6:	d861      	bhi.n	800c16c <HAL_RCCEx_GetPeriphCLKFreq+0x1f14>
 800c0a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e58>)
 800c0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ae:	bf00      	nop
 800c0b0:	0800c0c5 	.word	0x0800c0c5
 800c0b4:	0800c0d5 	.word	0x0800c0d5
 800c0b8:	0800c0e5 	.word	0x0800c0e5
 800c0bc:	0800c0f5 	.word	0x0800c0f5
 800c0c0:	0800c0fb 	.word	0x0800c0fb
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0c4:	f107 0320 	add.w	r3, r7, #32
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7fd fc81 	bl	80099d0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c0d2:	e04e      	b.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0d4:	f107 0314 	add.w	r3, r7, #20
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fd fde5 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c0e2:	e046      	b.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0e4:	f107 0308 	add.w	r3, r7, #8
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f7fd ff49 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c0f2:	e03e      	b.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c0f4:	4b23      	ldr	r3, [pc, #140]	@ (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2c>)
 800c0f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c0f8:	e03b      	b.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c0fa:	4b1e      	ldr	r3, [pc, #120]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800c0fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c100:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c104:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c106:	4b1b      	ldr	r3, [pc, #108]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f003 0302 	and.w	r3, r3, #2
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d10c      	bne.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
 800c112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c114:	2b00      	cmp	r3, #0
 800c116:	d109      	bne.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c118:	4b16      	ldr	r3, [pc, #88]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	08db      	lsrs	r3, r3, #3
 800c11e:	f003 0303 	and.w	r3, r3, #3
 800c122:	4a15      	ldr	r2, [pc, #84]	@ (800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 800c124:	fa22 f303 	lsr.w	r3, r2, r3
 800c128:	637b      	str	r3, [r7, #52]	@ 0x34
 800c12a:	e01e      	b.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c12c:	4b11      	ldr	r3, [pc, #68]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c138:	d106      	bne.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
 800c13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c13c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c140:	d102      	bne.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c142:	4b0e      	ldr	r3, [pc, #56]	@ (800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 800c144:	637b      	str	r3, [r7, #52]	@ 0x34
 800c146:	e010      	b.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c148:	4b0a      	ldr	r3, [pc, #40]	@ (800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c150:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c154:	d106      	bne.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
 800c156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c158:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c15c:	d102      	bne.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c15e:	4b08      	ldr	r3, [pc, #32]	@ (800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 800c160:	637b      	str	r3, [r7, #52]	@ 0x34
 800c162:	e002      	b.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c168:	e003      	b.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
 800c16a:	e002      	b.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          default:
          {
            frequency = 0;
 800c16c:	2300      	movs	r3, #0
 800c16e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c170:	bf00      	nop
          }
        }
        break;
 800c172:	e388      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c174:	44020c00 	.word	0x44020c00
 800c178:	03d09000 	.word	0x03d09000
 800c17c:	003d0900 	.word	0x003d0900
 800c180:	007a1200 	.word	0x007a1200
 800c184:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c188:	4ba9      	ldr	r3, [pc, #676]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c18a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c18e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c192:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800c194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c196:	2b20      	cmp	r3, #32
 800c198:	f200 809a 	bhi.w	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2078>
 800c19c:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4c>)
 800c19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a2:	bf00      	nop
 800c1a4:	0800c229 	.word	0x0800c229
 800c1a8:	0800c2d1 	.word	0x0800c2d1
 800c1ac:	0800c2d1 	.word	0x0800c2d1
 800c1b0:	0800c2d1 	.word	0x0800c2d1
 800c1b4:	0800c2d1 	.word	0x0800c2d1
 800c1b8:	0800c2d1 	.word	0x0800c2d1
 800c1bc:	0800c2d1 	.word	0x0800c2d1
 800c1c0:	0800c2d1 	.word	0x0800c2d1
 800c1c4:	0800c239 	.word	0x0800c239
 800c1c8:	0800c2d1 	.word	0x0800c2d1
 800c1cc:	0800c2d1 	.word	0x0800c2d1
 800c1d0:	0800c2d1 	.word	0x0800c2d1
 800c1d4:	0800c2d1 	.word	0x0800c2d1
 800c1d8:	0800c2d1 	.word	0x0800c2d1
 800c1dc:	0800c2d1 	.word	0x0800c2d1
 800c1e0:	0800c2d1 	.word	0x0800c2d1
 800c1e4:	0800c249 	.word	0x0800c249
 800c1e8:	0800c2d1 	.word	0x0800c2d1
 800c1ec:	0800c2d1 	.word	0x0800c2d1
 800c1f0:	0800c2d1 	.word	0x0800c2d1
 800c1f4:	0800c2d1 	.word	0x0800c2d1
 800c1f8:	0800c2d1 	.word	0x0800c2d1
 800c1fc:	0800c2d1 	.word	0x0800c2d1
 800c200:	0800c2d1 	.word	0x0800c2d1
 800c204:	0800c259 	.word	0x0800c259
 800c208:	0800c2d1 	.word	0x0800c2d1
 800c20c:	0800c2d1 	.word	0x0800c2d1
 800c210:	0800c2d1 	.word	0x0800c2d1
 800c214:	0800c2d1 	.word	0x0800c2d1
 800c218:	0800c2d1 	.word	0x0800c2d1
 800c21c:	0800c2d1 	.word	0x0800c2d1
 800c220:	0800c2d1 	.word	0x0800c2d1
 800c224:	0800c25f 	.word	0x0800c25f
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c228:	f107 0320 	add.w	r3, r7, #32
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fd fbcf 	bl	80099d0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c234:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c236:	e04e      	b.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c238:	f107 0314 	add.w	r3, r7, #20
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fd fd33 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c246:	e046      	b.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c248:	f107 0308 	add.w	r3, r7, #8
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fd fe97 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c256:	e03e      	b.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c258:	4b76      	ldr	r3, [pc, #472]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 800c25a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c25c:	e03b      	b.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c25e:	4b74      	ldr	r3, [pc, #464]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c264:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c268:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c26a:	4b71      	ldr	r3, [pc, #452]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f003 0302 	and.w	r3, r3, #2
 800c272:	2b02      	cmp	r3, #2
 800c274:	d10c      	bne.n	800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
 800c276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d109      	bne.n	800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c27c:	4b6c      	ldr	r3, [pc, #432]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	08db      	lsrs	r3, r3, #3
 800c282:	f003 0303 	and.w	r3, r3, #3
 800c286:	4a6c      	ldr	r2, [pc, #432]	@ (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 800c288:	fa22 f303 	lsr.w	r3, r2, r3
 800c28c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c28e:	e01e      	b.n	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c290:	4b67      	ldr	r3, [pc, #412]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c29c:	d106      	bne.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
 800c29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2a4:	d102      	bne.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c2a6:	4b65      	ldr	r3, [pc, #404]	@ (800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 800c2a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2aa:	e010      	b.n	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2ac:	4b60      	ldr	r3, [pc, #384]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2b8:	d106      	bne.n	800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
 800c2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2c0:	d102      	bne.n	800c2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c2c2:	4b5f      	ldr	r3, [pc, #380]	@ (800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 800c2c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2c6:	e002      	b.n	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c2cc:	e003      	b.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
 800c2ce:	e002      	b.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          default:
          {
            frequency = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c2d4:	bf00      	nop
          }
        }
        break;
 800c2d6:	e2d6      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c2d8:	4b55      	ldr	r3, [pc, #340]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c2da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c2de:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800c2e2:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2ea:	d031      	beq.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x20f8>
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2f2:	d866      	bhi.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800c2f8:	d027      	beq.n	800c34a <HAL_RCCEx_GetPeriphCLKFreq+0x20f2>
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2fc:	2bc0      	cmp	r3, #192	@ 0xc0
 800c2fe:	d860      	bhi.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 800c300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c302:	2b80      	cmp	r3, #128	@ 0x80
 800c304:	d019      	beq.n	800c33a <HAL_RCCEx_GetPeriphCLKFreq+0x20e2>
 800c306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c308:	2b80      	cmp	r3, #128	@ 0x80
 800c30a:	d85a      	bhi.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 800c30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <HAL_RCCEx_GetPeriphCLKFreq+0x20c2>
 800c312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c314:	2b40      	cmp	r3, #64	@ 0x40
 800c316:	d008      	beq.n	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x20d2>
 800c318:	e053      	b.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c31a:	f107 0320 	add.w	r3, r7, #32
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fd fb56 	bl	80099d0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c326:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c328:	e04e      	b.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c32a:	f107 0314 	add.w	r3, r7, #20
 800c32e:	4618      	mov	r0, r3
 800c330:	f7fd fcba 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c338:	e046      	b.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c33a:	f107 0308 	add.w	r3, r7, #8
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fd fe1e 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c348:	e03e      	b.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800c34a:	4b3a      	ldr	r3, [pc, #232]	@ (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 800c34c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c34e:	e03b      	b.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c350:	4b37      	ldr	r3, [pc, #220]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c356:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c35a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c35c:	4b34      	ldr	r3, [pc, #208]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 0302 	and.w	r3, r3, #2
 800c364:	2b02      	cmp	r3, #2
 800c366:	d10c      	bne.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800c368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d109      	bne.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c36e:	4b30      	ldr	r3, [pc, #192]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	08db      	lsrs	r3, r3, #3
 800c374:	f003 0303 	and.w	r3, r3, #3
 800c378:	4a2f      	ldr	r2, [pc, #188]	@ (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 800c37a:	fa22 f303 	lsr.w	r3, r2, r3
 800c37e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c380:	e01e      	b.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c382:	4b2b      	ldr	r3, [pc, #172]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c38a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c38e:	d106      	bne.n	800c39e <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
 800c390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c396:	d102      	bne.n	800c39e <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c398:	4b28      	ldr	r3, [pc, #160]	@ (800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 800c39a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c39c:	e010      	b.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c39e:	4b24      	ldr	r3, [pc, #144]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c3a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3aa:	d106      	bne.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
 800c3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c3b2:	d102      	bne.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c3b4:	4b22      	ldr	r3, [pc, #136]	@ (800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 800c3b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3b8:	e002      	b.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c3be:	e003      	b.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
 800c3c0:	e002      	b.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          default:
          {
            frequency = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c3c6:	bf00      	nop
          }
        }
        break;
 800c3c8:	e25d      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800c3ca:	4b19      	ldr	r3, [pc, #100]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c3cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c3d0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800c3d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d103      	bne.n	800c3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x218c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800c3dc:	f7fb fb4e 	bl	8007a7c <HAL_RCC_GetPCLK2Freq>
 800c3e0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800c3e2:	e250      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800c3e4:	4b12      	ldr	r3, [pc, #72]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3f0:	d10b      	bne.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3f8:	d107      	bne.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3fa:	f107 0314 	add.w	r3, r7, #20
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7fd fc52 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	637b      	str	r3, [r7, #52]	@ 0x34
 800c408:	e04f      	b.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800c40a:	4b09      	ldr	r3, [pc, #36]	@ (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c416:	d115      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
 800c418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c41a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c41e:	d111      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c420:	f107 0308 	add.w	r3, r7, #8
 800c424:	4618      	mov	r0, r3
 800c426:	f7fd fdab 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c42e:	e03c      	b.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
 800c430:	44020c00 	.word	0x44020c00
 800c434:	00bb8000 	.word	0x00bb8000
 800c438:	03d09000 	.word	0x03d09000
 800c43c:	003d0900 	.word	0x003d0900
 800c440:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800c444:	4b94      	ldr	r3, [pc, #592]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f003 0302 	and.w	r3, r3, #2
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d10d      	bne.n	800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
 800c450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c452:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800c456:	d109      	bne.n	800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c458:	4b8f      	ldr	r3, [pc, #572]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	08db      	lsrs	r3, r3, #3
 800c45e:	f003 0303 	and.w	r3, r3, #3
 800c462:	4a8e      	ldr	r2, [pc, #568]	@ (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 800c464:	fa22 f303 	lsr.w	r3, r2, r3
 800c468:	637b      	str	r3, [r7, #52]	@ 0x34
 800c46a:	e01e      	b.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800c46c:	4b8a      	ldr	r3, [pc, #552]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c478:	d106      	bne.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
 800c47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c480:	d102      	bne.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
          frequency = CSI_VALUE;
 800c482:	4b87      	ldr	r3, [pc, #540]	@ (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 800c484:	637b      	str	r3, [r7, #52]	@ 0x34
 800c486:	e010      	b.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800c488:	4b83      	ldr	r3, [pc, #524]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c490:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c494:	d106      	bne.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
 800c496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c498:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800c49c:	d102      	bne.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
          frequency = HSE_VALUE;
 800c49e:	4b81      	ldr	r3, [pc, #516]	@ (800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 800c4a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4a2:	e002      	b.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
          frequency = 0U;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c4a8:	e1ed      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c4aa:	e1ec      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800c4ac:	4b7a      	ldr	r3, [pc, #488]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c4ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c4b2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c4b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800c4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d103      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x226e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c4be:	f7fb faf3 	bl	8007aa8 <HAL_RCC_GetPCLK3Freq>
 800c4c2:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800c4c4:	e1df      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800c4c6:	4b74      	ldr	r3, [pc, #464]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c4d2:	d10b      	bne.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4da:	d107      	bne.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4dc:	f107 0314 	add.w	r3, r7, #20
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7fd fbe1 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4ea:	e045      	b.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800c4ec:	4b6a      	ldr	r3, [pc, #424]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4f8:	d10b      	bne.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800c4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c500:	d107      	bne.n	800c512 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c502:	f107 0308 	add.w	r3, r7, #8
 800c506:	4618      	mov	r0, r3
 800c508:	f7fd fd3a 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c510:	e032      	b.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800c512:	4b61      	ldr	r3, [pc, #388]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 0302 	and.w	r3, r3, #2
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d10d      	bne.n	800c53a <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
 800c51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c520:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c524:	d109      	bne.n	800c53a <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c526:	4b5c      	ldr	r3, [pc, #368]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	08db      	lsrs	r3, r3, #3
 800c52c:	f003 0303 	and.w	r3, r3, #3
 800c530:	4a5a      	ldr	r2, [pc, #360]	@ (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 800c532:	fa22 f303 	lsr.w	r3, r2, r3
 800c536:	637b      	str	r3, [r7, #52]	@ 0x34
 800c538:	e01e      	b.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800c53a:	4b57      	ldr	r3, [pc, #348]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c542:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c546:	d106      	bne.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
 800c548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c54e:	d102      	bne.n	800c556 <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
          frequency = CSI_VALUE;
 800c550:	4b53      	ldr	r3, [pc, #332]	@ (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 800c552:	637b      	str	r3, [r7, #52]	@ 0x34
 800c554:	e010      	b.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800c556:	4b50      	ldr	r3, [pc, #320]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c55e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c562:	d106      	bne.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
 800c564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c566:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c56a:	d102      	bne.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
          frequency = HSE_VALUE;
 800c56c:	4b4d      	ldr	r3, [pc, #308]	@ (800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 800c56e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c570:	e002      	b.n	800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
          frequency = 0U;
 800c572:	2300      	movs	r3, #0
 800c574:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c576:	e186      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c578:	e185      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c57a:	4b47      	ldr	r3, [pc, #284]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c57c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800c580:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800c584:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800c586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d103      	bne.n	800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x233c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800c58c:	f7fb fa76 	bl	8007a7c <HAL_RCC_GetPCLK2Freq>
 800c590:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800c592:	e178      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800c594:	4b40      	ldr	r3, [pc, #256]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c59c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c5a0:	d10b      	bne.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5a8:	d107      	bne.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5aa:	f107 0314 	add.w	r3, r7, #20
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fd fb7a 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5b8:	e045      	b.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800c5ba:	4b37      	ldr	r3, [pc, #220]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c5c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5c6:	d10b      	bne.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c5ce:	d107      	bne.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5d0:	f107 0308 	add.w	r3, r7, #8
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fd fcd3 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5de:	e032      	b.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800c5e0:	4b2d      	ldr	r3, [pc, #180]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f003 0302 	and.w	r3, r3, #2
 800c5e8:	2b02      	cmp	r3, #2
 800c5ea:	d10d      	bne.n	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ee:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800c5f2:	d109      	bne.n	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c5f4:	4b28      	ldr	r3, [pc, #160]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	08db      	lsrs	r3, r3, #3
 800c5fa:	f003 0303 	and.w	r3, r3, #3
 800c5fe:	4a27      	ldr	r2, [pc, #156]	@ (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 800c600:	fa22 f303 	lsr.w	r3, r2, r3
 800c604:	637b      	str	r3, [r7, #52]	@ 0x34
 800c606:	e01e      	b.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800c608:	4b23      	ldr	r3, [pc, #140]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c614:	d106      	bne.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
 800c616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c61c:	d102      	bne.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
          frequency = CSI_VALUE;
 800c61e:	4b20      	ldr	r3, [pc, #128]	@ (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 800c620:	637b      	str	r3, [r7, #52]	@ 0x34
 800c622:	e010      	b.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800c624:	4b1c      	ldr	r3, [pc, #112]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c62c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c630:	d106      	bne.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
 800c632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c634:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800c638:	d102      	bne.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
          frequency = HSE_VALUE;
 800c63a:	4b1a      	ldr	r3, [pc, #104]	@ (800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 800c63c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c63e:	e002      	b.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
          frequency = 0U;
 800c640:	2300      	movs	r3, #0
 800c642:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c644:	e11f      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c646:	e11e      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c648:	4b13      	ldr	r3, [pc, #76]	@ (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800c64a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c64e:	f003 0303 	and.w	r3, r3, #3
 800c652:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800c654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c656:	2b03      	cmp	r3, #3
 800c658:	d85f      	bhi.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x24c2>
 800c65a:	a201      	add	r2, pc, #4	@ (adr r2, 800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x2408>)
 800c65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c660:	0800c671 	.word	0x0800c671
 800c664:	0800c679 	.word	0x0800c679
 800c668:	0800c689 	.word	0x0800c689
 800c66c:	0800c6a9 	.word	0x0800c6a9
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800c670:	f7fb f9d2 	bl	8007a18 <HAL_RCC_GetHCLKFreq>
 800c674:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800c676:	e053      	b.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c678:	f107 0320 	add.w	r3, r7, #32
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fd f9a7 	bl	80099d0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c684:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c686:	e04b      	b.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c688:	f107 0314 	add.w	r3, r7, #20
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fd fb0b 	bl	8009ca8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800c692:	69fb      	ldr	r3, [r7, #28]
 800c694:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c696:	e043      	b.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 800c698:	44020c00 	.word	0x44020c00
 800c69c:	03d09000 	.word	0x03d09000
 800c6a0:	003d0900 	.word	0x003d0900
 800c6a4:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6a8:	4b79      	ldr	r3, [pc, #484]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c6aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c6ae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c6b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6b4:	4b76      	ldr	r3, [pc, #472]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0302 	and.w	r3, r3, #2
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d10c      	bne.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
 800c6c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d109      	bne.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c6c6:	4b72      	ldr	r3, [pc, #456]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	08db      	lsrs	r3, r3, #3
 800c6cc:	f003 0303 	and.w	r3, r3, #3
 800c6d0:	4a70      	ldr	r2, [pc, #448]	@ (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x263c>)
 800c6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c6d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6d8:	e01e      	b.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6da:	4b6d      	ldr	r3, [pc, #436]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c6e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6e6:	d106      	bne.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
 800c6e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6ee:	d102      	bne.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c6f0:	4b69      	ldr	r3, [pc, #420]	@ (800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x2640>)
 800c6f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6f4:	e010      	b.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6f6:	4b66      	ldr	r3, [pc, #408]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c6fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c702:	d106      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
 800c704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c706:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c70a:	d102      	bne.n	800c712 <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c70c:	4b63      	ldr	r3, [pc, #396]	@ (800c89c <HAL_RCCEx_GetPeriphCLKFreq+0x2644>)
 800c70e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c710:	e002      	b.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800c712:	2300      	movs	r3, #0
 800c714:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c716:	e003      	b.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 800c718:	e002      	b.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          default:
          {
            frequency = 0U;
 800c71a:	2300      	movs	r3, #0
 800c71c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c71e:	bf00      	nop
          }
        }
        break;
 800c720:	e0b1      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800c722:	4b5b      	ldr	r3, [pc, #364]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c728:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c72c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800c72e:	4b58      	ldr	r3, [pc, #352]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c734:	f003 0302 	and.w	r3, r3, #2
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d106      	bne.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
 800c73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d103      	bne.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
        {
          frequency = LSE_VALUE;
 800c742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c746:	637b      	str	r3, [r7, #52]	@ 0x34
 800c748:	e01f      	b.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800c74a:	4b51      	ldr	r3, [pc, #324]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c74c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c754:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c758:	d106      	bne.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
 800c75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75c:	2b40      	cmp	r3, #64	@ 0x40
 800c75e:	d103      	bne.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
        {
          frequency = LSI_VALUE;
 800c760:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c764:	637b      	str	r3, [r7, #52]	@ 0x34
 800c766:	e010      	b.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800c768:	4b49      	ldr	r3, [pc, #292]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c774:	d106      	bne.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
 800c776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c778:	2b80      	cmp	r3, #128	@ 0x80
 800c77a:	d103      	bne.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
        {
          frequency = CSI_VALUE / 122U;
 800c77c:	f248 0312 	movw	r3, #32786	@ 0x8012
 800c780:	637b      	str	r3, [r7, #52]	@ 0x34
 800c782:	e002      	b.n	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800c784:	2300      	movs	r3, #0
 800c786:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800c788:	e07d      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c78a:	e07c      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c78c:	4b40      	ldr	r3, [pc, #256]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c78e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c792:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c796:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c798:	4b3d      	ldr	r3, [pc, #244]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c7a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7a4:	d105      	bne.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800c7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d102      	bne.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = HSI48_VALUE;
 800c7ac:	4b3c      	ldr	r3, [pc, #240]	@ (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 800c7ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7b0:	e031      	b.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800c7b2:	4b37      	ldr	r3, [pc, #220]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c7be:	d10a      	bne.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c2:	2b10      	cmp	r3, #16
 800c7c4:	d107      	bne.n	800c7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7c6:	f107 0320 	add.w	r3, r7, #32
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fd f900 	bl	80099d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7d4:	e01f      	b.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800c7d6:	4b2e      	ldr	r3, [pc, #184]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c7d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c7dc:	f003 0302 	and.w	r3, r3, #2
 800c7e0:	2b02      	cmp	r3, #2
 800c7e2:	d106      	bne.n	800c7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
 800c7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e6:	2b20      	cmp	r3, #32
 800c7e8:	d103      	bne.n	800c7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        {
          frequency = LSE_VALUE;
 800c7ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c7ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7f0:	e011      	b.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800c7f2:	4b27      	ldr	r3, [pc, #156]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c7f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c7f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c7fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c800:	d106      	bne.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
 800c802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c804:	2b30      	cmp	r3, #48	@ 0x30
 800c806:	d103      	bne.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
        {
          frequency = LSI_VALUE;
 800c808:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c80c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c80e:	e002      	b.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800c810:	2300      	movs	r3, #0
 800c812:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800c814:	e037      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c816:	e036      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800c818:	4b1d      	ldr	r3, [pc, #116]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c81a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c81e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c822:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800c824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c826:	2b10      	cmp	r3, #16
 800c828:	d107      	bne.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x25e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c82a:	f107 0320 	add.w	r3, r7, #32
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fd f8ce 	bl	80099d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c836:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800c838:	e025      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800c83a:	4b15      	ldr	r3, [pc, #84]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c846:	d10a      	bne.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
 800c848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c84a:	2b20      	cmp	r3, #32
 800c84c:	d107      	bne.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c84e:	f107 0308 	add.w	r3, r7, #8
 800c852:	4618      	mov	r0, r3
 800c854:	f7fd fb94 	bl	8009f80 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c85c:	e00f      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800c85e:	4b0c      	ldr	r3, [pc, #48]	@ (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c86a:	d105      	bne.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800c86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c86e:	2b30      	cmp	r3, #48	@ 0x30
 800c870:	d102      	bne.n	800c878 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = HSI48_VALUE;
 800c872:	4b0b      	ldr	r3, [pc, #44]	@ (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 800c874:	637b      	str	r3, [r7, #52]	@ 0x34
 800c876:	e002      	b.n	800c87e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800c878:	2300      	movs	r3, #0
 800c87a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800c87c:	e003      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c87e:	e002      	b.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      default:
        frequency = 0U;
 800c880:	2300      	movs	r3, #0
 800c882:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c884:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800c886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c888:	4618      	mov	r0, r3
 800c88a:	373c      	adds	r7, #60	@ 0x3c
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd90      	pop	{r4, r7, pc}
 800c890:	44020c00 	.word	0x44020c00
 800c894:	03d09000 	.word	0x03d09000
 800c898:	003d0900 	.word	0x003d0900
 800c89c:	007a1200 	.word	0x007a1200
 800c8a0:	02dc6c00 	.word	0x02dc6c00

0800c8a4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800c8ac:	4b48      	ldr	r3, [pc, #288]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a47      	ldr	r2, [pc, #284]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c8b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c8b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c8b8:	f7f7 f85c 	bl	8003974 <HAL_GetTick>
 800c8bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c8be:	e008      	b.n	800c8d2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c8c0:	f7f7 f858 	bl	8003974 <HAL_GetTick>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d901      	bls.n	800c8d2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	e07a      	b.n	800c9c8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c8d2:	4b3f      	ldr	r3, [pc, #252]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1f0      	bne.n	800c8c0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c8de:	4b3c      	ldr	r3, [pc, #240]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8e2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c8e6:	f023 0303 	bic.w	r3, r3, #3
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	6811      	ldr	r1, [r2, #0]
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	6852      	ldr	r2, [r2, #4]
 800c8f2:	0212      	lsls	r2, r2, #8
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	4936      	ldr	r1, [pc, #216]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	3b01      	subs	r3, #1
 800c902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	3b01      	subs	r3, #1
 800c90c:	025b      	lsls	r3, r3, #9
 800c90e:	b29b      	uxth	r3, r3
 800c910:	431a      	orrs	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	691b      	ldr	r3, [r3, #16]
 800c916:	3b01      	subs	r3, #1
 800c918:	041b      	lsls	r3, r3, #16
 800c91a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c91e:	431a      	orrs	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	695b      	ldr	r3, [r3, #20]
 800c924:	3b01      	subs	r3, #1
 800c926:	061b      	lsls	r3, r3, #24
 800c928:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c92c:	4928      	ldr	r1, [pc, #160]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c92e:	4313      	orrs	r3, r2
 800c930:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c932:	4b27      	ldr	r3, [pc, #156]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c936:	f023 020c 	bic.w	r2, r3, #12
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	699b      	ldr	r3, [r3, #24]
 800c93e:	4924      	ldr	r1, [pc, #144]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c940:	4313      	orrs	r3, r2
 800c942:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800c944:	4b22      	ldr	r3, [pc, #136]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c948:	f023 0220 	bic.w	r2, r3, #32
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	69db      	ldr	r3, [r3, #28]
 800c950:	491f      	ldr	r1, [pc, #124]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c952:	4313      	orrs	r3, r2
 800c954:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c956:	4b1e      	ldr	r3, [pc, #120]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c95e:	491c      	ldr	r1, [pc, #112]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c960:	4313      	orrs	r3, r2
 800c962:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800c964:	4b1a      	ldr	r3, [pc, #104]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c968:	4a19      	ldr	r2, [pc, #100]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c96a:	f023 0310 	bic.w	r3, r3, #16
 800c96e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800c970:	4b17      	ldr	r3, [pc, #92]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c974:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c978:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	6a12      	ldr	r2, [r2, #32]
 800c980:	00d2      	lsls	r2, r2, #3
 800c982:	4913      	ldr	r1, [pc, #76]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c984:	4313      	orrs	r3, r2
 800c986:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800c988:	4b11      	ldr	r3, [pc, #68]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c98c:	4a10      	ldr	r2, [pc, #64]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c98e:	f043 0310 	orr.w	r3, r3, #16
 800c992:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800c994:	4b0e      	ldr	r3, [pc, #56]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4a0d      	ldr	r2, [pc, #52]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c99a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c99e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c9a0:	f7f6 ffe8 	bl	8003974 <HAL_GetTick>
 800c9a4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c9a6:	e008      	b.n	800c9ba <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c9a8:	f7f6 ffe4 	bl	8003974 <HAL_GetTick>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d901      	bls.n	800c9ba <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	e006      	b.n	800c9c8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c9ba:	4b05      	ldr	r3, [pc, #20]	@ (800c9d0 <RCCEx_PLL2_Config+0x12c>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d0f0      	beq.n	800c9a8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800c9c6:	2300      	movs	r3, #0

}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	44020c00 	.word	0x44020c00

0800c9d4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800c9dc:	4b48      	ldr	r3, [pc, #288]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a47      	ldr	r2, [pc, #284]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800c9e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c9e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c9e8:	f7f6 ffc4 	bl	8003974 <HAL_GetTick>
 800c9ec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c9ee:	e008      	b.n	800ca02 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c9f0:	f7f6 ffc0 	bl	8003974 <HAL_GetTick>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d901      	bls.n	800ca02 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	e07a      	b.n	800caf8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ca02:	4b3f      	ldr	r3, [pc, #252]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1f0      	bne.n	800c9f0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ca0e:	4b3c      	ldr	r3, [pc, #240]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800ca10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca12:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ca16:	f023 0303 	bic.w	r3, r3, #3
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	6811      	ldr	r1, [r2, #0]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	6852      	ldr	r2, [r2, #4]
 800ca22:	0212      	lsls	r2, r2, #8
 800ca24:	430a      	orrs	r2, r1
 800ca26:	4936      	ldr	r1, [pc, #216]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	630b      	str	r3, [r1, #48]	@ 0x30
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	3b01      	subs	r3, #1
 800ca32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	68db      	ldr	r3, [r3, #12]
 800ca3a:	3b01      	subs	r3, #1
 800ca3c:	025b      	lsls	r3, r3, #9
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	431a      	orrs	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	041b      	lsls	r3, r3, #16
 800ca4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ca4e:	431a      	orrs	r2, r3
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	695b      	ldr	r3, [r3, #20]
 800ca54:	3b01      	subs	r3, #1
 800ca56:	061b      	lsls	r3, r3, #24
 800ca58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ca5c:	4928      	ldr	r1, [pc, #160]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ca62:	4b27      	ldr	r3, [pc, #156]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800ca64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca66:	f023 020c 	bic.w	r2, r3, #12
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	699b      	ldr	r3, [r3, #24]
 800ca6e:	4924      	ldr	r1, [pc, #144]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800ca70:	4313      	orrs	r3, r2
 800ca72:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800ca74:	4b22      	ldr	r3, [pc, #136]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800ca76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca78:	f023 0220 	bic.w	r2, r3, #32
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	69db      	ldr	r3, [r3, #28]
 800ca80:	491f      	ldr	r1, [pc, #124]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800ca82:	4313      	orrs	r3, r2
 800ca84:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800ca86:	4b1e      	ldr	r3, [pc, #120]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800ca88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca8e:	491c      	ldr	r1, [pc, #112]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800ca90:	4313      	orrs	r3, r2
 800ca92:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800ca94:	4b1a      	ldr	r3, [pc, #104]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800ca96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca98:	4a19      	ldr	r2, [pc, #100]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800ca9a:	f023 0310 	bic.w	r3, r3, #16
 800ca9e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800caa0:	4b17      	ldr	r3, [pc, #92]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800caa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800caa4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800caa8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	6a12      	ldr	r2, [r2, #32]
 800cab0:	00d2      	lsls	r2, r2, #3
 800cab2:	4913      	ldr	r1, [pc, #76]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800cab4:	4313      	orrs	r3, r2
 800cab6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800cab8:	4b11      	ldr	r3, [pc, #68]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800caba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cabc:	4a10      	ldr	r2, [pc, #64]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800cabe:	f043 0310 	orr.w	r3, r3, #16
 800cac2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800cac4:	4b0e      	ldr	r3, [pc, #56]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a0d      	ldr	r2, [pc, #52]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800caca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cace:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cad0:	f7f6 ff50 	bl	8003974 <HAL_GetTick>
 800cad4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cad6:	e008      	b.n	800caea <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cad8:	f7f6 ff4c 	bl	8003974 <HAL_GetTick>
 800cadc:	4602      	mov	r2, r0
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	2b02      	cmp	r3, #2
 800cae4:	d901      	bls.n	800caea <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800cae6:	2303      	movs	r3, #3
 800cae8:	e006      	b.n	800caf8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800caea:	4b05      	ldr	r3, [pc, #20]	@ (800cb00 <RCCEx_PLL3_Config+0x12c>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d0f0      	beq.n	800cad8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800caf6:	2300      	movs	r3, #0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	44020c00 	.word	0x44020c00

0800cb04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d101      	bne.n	800cb16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e049      	b.n	800cbaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d106      	bne.n	800cb30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7f6 f82c 	bl	8002b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2202      	movs	r2, #2
 800cb34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	4619      	mov	r1, r3
 800cb42:	4610      	mov	r0, r2
 800cb44:	f001 f912 	bl	800dd6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2201      	movs	r2, #1
 800cb74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2201      	movs	r2, #1
 800cba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
	...

0800cbb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cbc2:	b2db      	uxtb	r3, r3
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d001      	beq.n	800cbcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e074      	b.n	800ccb6 <HAL_TIM_Base_Start+0x102>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2202      	movs	r2, #2
 800cbd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a3a      	ldr	r2, [pc, #232]	@ (800ccc4 <HAL_TIM_Base_Start+0x110>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d04a      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a39      	ldr	r2, [pc, #228]	@ (800ccc8 <HAL_TIM_Base_Start+0x114>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d045      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbf0:	d040      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cbfa:	d03b      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a32      	ldr	r2, [pc, #200]	@ (800cccc <HAL_TIM_Base_Start+0x118>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d036      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a31      	ldr	r2, [pc, #196]	@ (800ccd0 <HAL_TIM_Base_Start+0x11c>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d031      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a2f      	ldr	r2, [pc, #188]	@ (800ccd4 <HAL_TIM_Base_Start+0x120>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d02c      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a2e      	ldr	r2, [pc, #184]	@ (800ccd8 <HAL_TIM_Base_Start+0x124>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d027      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a2c      	ldr	r2, [pc, #176]	@ (800ccdc <HAL_TIM_Base_Start+0x128>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d022      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a2b      	ldr	r2, [pc, #172]	@ (800cce0 <HAL_TIM_Base_Start+0x12c>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d01d      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a29      	ldr	r2, [pc, #164]	@ (800cce4 <HAL_TIM_Base_Start+0x130>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d018      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a28      	ldr	r2, [pc, #160]	@ (800cce8 <HAL_TIM_Base_Start+0x134>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d013      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a26      	ldr	r2, [pc, #152]	@ (800ccec <HAL_TIM_Base_Start+0x138>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d00e      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a25      	ldr	r2, [pc, #148]	@ (800ccf0 <HAL_TIM_Base_Start+0x13c>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d009      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a23      	ldr	r2, [pc, #140]	@ (800ccf4 <HAL_TIM_Base_Start+0x140>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d004      	beq.n	800cc74 <HAL_TIM_Base_Start+0xc0>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a22      	ldr	r2, [pc, #136]	@ (800ccf8 <HAL_TIM_Base_Start+0x144>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d115      	bne.n	800cca0 <HAL_TIM_Base_Start+0xec>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	689a      	ldr	r2, [r3, #8]
 800cc7a:	4b20      	ldr	r3, [pc, #128]	@ (800ccfc <HAL_TIM_Base_Start+0x148>)
 800cc7c:	4013      	ands	r3, r2
 800cc7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2b06      	cmp	r3, #6
 800cc84:	d015      	beq.n	800ccb2 <HAL_TIM_Base_Start+0xfe>
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc8c:	d011      	beq.n	800ccb2 <HAL_TIM_Base_Start+0xfe>
    {
      __HAL_TIM_ENABLE(htim);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f042 0201 	orr.w	r2, r2, #1
 800cc9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc9e:	e008      	b.n	800ccb2 <HAL_TIM_Base_Start+0xfe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f042 0201 	orr.w	r2, r2, #1
 800ccae:	601a      	str	r2, [r3, #0]
 800ccb0:	e000      	b.n	800ccb4 <HAL_TIM_Base_Start+0x100>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	bf00      	nop
 800ccc4:	40012c00 	.word	0x40012c00
 800ccc8:	50012c00 	.word	0x50012c00
 800cccc:	40000400 	.word	0x40000400
 800ccd0:	50000400 	.word	0x50000400
 800ccd4:	40000800 	.word	0x40000800
 800ccd8:	50000800 	.word	0x50000800
 800ccdc:	40000c00 	.word	0x40000c00
 800cce0:	50000c00 	.word	0x50000c00
 800cce4:	40013400 	.word	0x40013400
 800cce8:	50013400 	.word	0x50013400
 800ccec:	40001800 	.word	0x40001800
 800ccf0:	50001800 	.word	0x50001800
 800ccf4:	40014000 	.word	0x40014000
 800ccf8:	50014000 	.word	0x50014000
 800ccfc:	00010007 	.word	0x00010007

0800cd00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d001      	beq.n	800cd18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cd14:	2301      	movs	r3, #1
 800cd16:	e07c      	b.n	800ce12 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2202      	movs	r2, #2
 800cd1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68da      	ldr	r2, [r3, #12]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f042 0201 	orr.w	r2, r2, #1
 800cd2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a3a      	ldr	r2, [pc, #232]	@ (800ce20 <HAL_TIM_Base_Start_IT+0x120>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d04a      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a39      	ldr	r2, [pc, #228]	@ (800ce24 <HAL_TIM_Base_Start_IT+0x124>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d045      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd4c:	d040      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd56:	d03b      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a32      	ldr	r2, [pc, #200]	@ (800ce28 <HAL_TIM_Base_Start_IT+0x128>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d036      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a31      	ldr	r2, [pc, #196]	@ (800ce2c <HAL_TIM_Base_Start_IT+0x12c>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d031      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4a2f      	ldr	r2, [pc, #188]	@ (800ce30 <HAL_TIM_Base_Start_IT+0x130>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d02c      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a2e      	ldr	r2, [pc, #184]	@ (800ce34 <HAL_TIM_Base_Start_IT+0x134>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d027      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a2c      	ldr	r2, [pc, #176]	@ (800ce38 <HAL_TIM_Base_Start_IT+0x138>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d022      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a2b      	ldr	r2, [pc, #172]	@ (800ce3c <HAL_TIM_Base_Start_IT+0x13c>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d01d      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a29      	ldr	r2, [pc, #164]	@ (800ce40 <HAL_TIM_Base_Start_IT+0x140>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d018      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a28      	ldr	r2, [pc, #160]	@ (800ce44 <HAL_TIM_Base_Start_IT+0x144>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d013      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a26      	ldr	r2, [pc, #152]	@ (800ce48 <HAL_TIM_Base_Start_IT+0x148>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d00e      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a25      	ldr	r2, [pc, #148]	@ (800ce4c <HAL_TIM_Base_Start_IT+0x14c>)
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d009      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a23      	ldr	r2, [pc, #140]	@ (800ce50 <HAL_TIM_Base_Start_IT+0x150>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d004      	beq.n	800cdd0 <HAL_TIM_Base_Start_IT+0xd0>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a22      	ldr	r2, [pc, #136]	@ (800ce54 <HAL_TIM_Base_Start_IT+0x154>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d115      	bne.n	800cdfc <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	689a      	ldr	r2, [r3, #8]
 800cdd6:	4b20      	ldr	r3, [pc, #128]	@ (800ce58 <HAL_TIM_Base_Start_IT+0x158>)
 800cdd8:	4013      	ands	r3, r2
 800cdda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2b06      	cmp	r3, #6
 800cde0:	d015      	beq.n	800ce0e <HAL_TIM_Base_Start_IT+0x10e>
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cde8:	d011      	beq.n	800ce0e <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	681a      	ldr	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f042 0201 	orr.w	r2, r2, #1
 800cdf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdfa:	e008      	b.n	800ce0e <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f042 0201 	orr.w	r2, r2, #1
 800ce0a:	601a      	str	r2, [r3, #0]
 800ce0c:	e000      	b.n	800ce10 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3714      	adds	r7, #20
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	40012c00 	.word	0x40012c00
 800ce24:	50012c00 	.word	0x50012c00
 800ce28:	40000400 	.word	0x40000400
 800ce2c:	50000400 	.word	0x50000400
 800ce30:	40000800 	.word	0x40000800
 800ce34:	50000800 	.word	0x50000800
 800ce38:	40000c00 	.word	0x40000c00
 800ce3c:	50000c00 	.word	0x50000c00
 800ce40:	40013400 	.word	0x40013400
 800ce44:	50013400 	.word	0x50013400
 800ce48:	40001800 	.word	0x40001800
 800ce4c:	50001800 	.word	0x50001800
 800ce50:	40014000 	.word	0x40014000
 800ce54:	50014000 	.word	0x50014000
 800ce58:	00010007 	.word	0x00010007

0800ce5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d101      	bne.n	800ce6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e049      	b.n	800cf02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d106      	bne.n	800ce88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f7f5 fed4 	bl	8002c30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2202      	movs	r2, #2
 800ce8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	3304      	adds	r3, #4
 800ce98:	4619      	mov	r1, r3
 800ce9a:	4610      	mov	r0, r2
 800ce9c:	f000 ff66 	bl	800dd6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2201      	movs	r2, #1
 800cea4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2201      	movs	r2, #1
 800cebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2201      	movs	r2, #1
 800cec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2201      	movs	r2, #1
 800cecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2201      	movs	r2, #1
 800ced4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2201      	movs	r2, #1
 800cee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2201      	movs	r2, #1
 800ceec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
	...

0800cf0c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	607a      	str	r2, [r7, #4]
 800cf18:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d109      	bne.n	800cf38 <HAL_TIM_PWM_Start_DMA+0x2c>
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	bf0c      	ite	eq
 800cf30:	2301      	moveq	r3, #1
 800cf32:	2300      	movne	r3, #0
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	e03c      	b.n	800cfb2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	2b04      	cmp	r3, #4
 800cf3c:	d109      	bne.n	800cf52 <HAL_TIM_PWM_Start_DMA+0x46>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	bf0c      	ite	eq
 800cf4a:	2301      	moveq	r3, #1
 800cf4c:	2300      	movne	r3, #0
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	e02f      	b.n	800cfb2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	2b08      	cmp	r3, #8
 800cf56:	d109      	bne.n	800cf6c <HAL_TIM_PWM_Start_DMA+0x60>
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	bf0c      	ite	eq
 800cf64:	2301      	moveq	r3, #1
 800cf66:	2300      	movne	r3, #0
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	e022      	b.n	800cfb2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	2b0c      	cmp	r3, #12
 800cf70:	d109      	bne.n	800cf86 <HAL_TIM_PWM_Start_DMA+0x7a>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	bf0c      	ite	eq
 800cf7e:	2301      	moveq	r3, #1
 800cf80:	2300      	movne	r3, #0
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	e015      	b.n	800cfb2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	2b10      	cmp	r3, #16
 800cf8a:	d109      	bne.n	800cfa0 <HAL_TIM_PWM_Start_DMA+0x94>
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	bf0c      	ite	eq
 800cf98:	2301      	moveq	r3, #1
 800cf9a:	2300      	movne	r3, #0
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	e008      	b.n	800cfb2 <HAL_TIM_PWM_Start_DMA+0xa6>
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	2b02      	cmp	r3, #2
 800cfaa:	bf0c      	ite	eq
 800cfac:	2301      	moveq	r3, #1
 800cfae:	2300      	movne	r3, #0
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	e20c      	b.n	800d3d4 <HAL_TIM_PWM_Start_DMA+0x4c8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d109      	bne.n	800cfd4 <HAL_TIM_PWM_Start_DMA+0xc8>
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	bf0c      	ite	eq
 800cfcc:	2301      	moveq	r3, #1
 800cfce:	2300      	movne	r3, #0
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	e03c      	b.n	800d04e <HAL_TIM_PWM_Start_DMA+0x142>
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	2b04      	cmp	r3, #4
 800cfd8:	d109      	bne.n	800cfee <HAL_TIM_PWM_Start_DMA+0xe2>
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800cfe0:	b2db      	uxtb	r3, r3
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	bf0c      	ite	eq
 800cfe6:	2301      	moveq	r3, #1
 800cfe8:	2300      	movne	r3, #0
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	e02f      	b.n	800d04e <HAL_TIM_PWM_Start_DMA+0x142>
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	2b08      	cmp	r3, #8
 800cff2:	d109      	bne.n	800d008 <HAL_TIM_PWM_Start_DMA+0xfc>
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	bf0c      	ite	eq
 800d000:	2301      	moveq	r3, #1
 800d002:	2300      	movne	r3, #0
 800d004:	b2db      	uxtb	r3, r3
 800d006:	e022      	b.n	800d04e <HAL_TIM_PWM_Start_DMA+0x142>
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	2b0c      	cmp	r3, #12
 800d00c:	d109      	bne.n	800d022 <HAL_TIM_PWM_Start_DMA+0x116>
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d014:	b2db      	uxtb	r3, r3
 800d016:	2b01      	cmp	r3, #1
 800d018:	bf0c      	ite	eq
 800d01a:	2301      	moveq	r3, #1
 800d01c:	2300      	movne	r3, #0
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	e015      	b.n	800d04e <HAL_TIM_PWM_Start_DMA+0x142>
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	2b10      	cmp	r3, #16
 800d026:	d109      	bne.n	800d03c <HAL_TIM_PWM_Start_DMA+0x130>
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	2b01      	cmp	r3, #1
 800d032:	bf0c      	ite	eq
 800d034:	2301      	moveq	r3, #1
 800d036:	2300      	movne	r3, #0
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	e008      	b.n	800d04e <HAL_TIM_PWM_Start_DMA+0x142>
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d042:	b2db      	uxtb	r3, r3
 800d044:	2b01      	cmp	r3, #1
 800d046:	bf0c      	ite	eq
 800d048:	2301      	moveq	r3, #1
 800d04a:	2300      	movne	r3, #0
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d034      	beq.n	800d0bc <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d002      	beq.n	800d05e <HAL_TIM_PWM_Start_DMA+0x152>
 800d058:	887b      	ldrh	r3, [r7, #2]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d101      	bne.n	800d062 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	e1b8      	b.n	800d3d4 <HAL_TIM_PWM_Start_DMA+0x4c8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d104      	bne.n	800d072 <HAL_TIM_PWM_Start_DMA+0x166>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2202      	movs	r2, #2
 800d06c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d070:	e026      	b.n	800d0c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	2b04      	cmp	r3, #4
 800d076:	d104      	bne.n	800d082 <HAL_TIM_PWM_Start_DMA+0x176>
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2202      	movs	r2, #2
 800d07c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d080:	e01e      	b.n	800d0c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	2b08      	cmp	r3, #8
 800d086:	d104      	bne.n	800d092 <HAL_TIM_PWM_Start_DMA+0x186>
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2202      	movs	r2, #2
 800d08c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d090:	e016      	b.n	800d0c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	2b0c      	cmp	r3, #12
 800d096:	d104      	bne.n	800d0a2 <HAL_TIM_PWM_Start_DMA+0x196>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2202      	movs	r2, #2
 800d09c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d0a0:	e00e      	b.n	800d0c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	2b10      	cmp	r3, #16
 800d0a6:	d104      	bne.n	800d0b2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2202      	movs	r2, #2
 800d0ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d0b0:	e006      	b.n	800d0c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2202      	movs	r2, #2
 800d0b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d0ba:	e001      	b.n	800d0c0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e189      	b.n	800d3d4 <HAL_TIM_PWM_Start_DMA+0x4c8>
  }

  switch (Channel)
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	2b0c      	cmp	r3, #12
 800d0c4:	f200 80ae 	bhi.w	800d224 <HAL_TIM_PWM_Start_DMA+0x318>
 800d0c8:	a201      	add	r2, pc, #4	@ (adr r2, 800d0d0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800d0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ce:	bf00      	nop
 800d0d0:	0800d105 	.word	0x0800d105
 800d0d4:	0800d225 	.word	0x0800d225
 800d0d8:	0800d225 	.word	0x0800d225
 800d0dc:	0800d225 	.word	0x0800d225
 800d0e0:	0800d14d 	.word	0x0800d14d
 800d0e4:	0800d225 	.word	0x0800d225
 800d0e8:	0800d225 	.word	0x0800d225
 800d0ec:	0800d225 	.word	0x0800d225
 800d0f0:	0800d195 	.word	0x0800d195
 800d0f4:	0800d225 	.word	0x0800d225
 800d0f8:	0800d225 	.word	0x0800d225
 800d0fc:	0800d225 	.word	0x0800d225
 800d100:	0800d1dd 	.word	0x0800d1dd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d108:	4a67      	ldr	r2, [pc, #412]	@ (800d2a8 <HAL_TIM_PWM_Start_DMA+0x39c>)
 800d10a:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d110:	4a66      	ldr	r2, [pc, #408]	@ (800d2ac <HAL_TIM_PWM_Start_DMA+0x3a0>)
 800d112:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d118:	4a65      	ldr	r2, [pc, #404]	@ (800d2b0 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800d11a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d120:	6879      	ldr	r1, [r7, #4]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	3334      	adds	r3, #52	@ 0x34
 800d128:	461a      	mov	r2, r3
 800d12a:	887b      	ldrh	r3, [r7, #2]
 800d12c:	f000 fcf6 	bl	800db1c <TIM_DMA_Start_IT>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	e14c      	b.n	800d3d4 <HAL_TIM_PWM_Start_DMA+0x4c8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	68da      	ldr	r2, [r3, #12]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d148:	60da      	str	r2, [r3, #12]
      break;
 800d14a:	e06e      	b.n	800d22a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d150:	4a55      	ldr	r2, [pc, #340]	@ (800d2a8 <HAL_TIM_PWM_Start_DMA+0x39c>)
 800d152:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d158:	4a54      	ldr	r2, [pc, #336]	@ (800d2ac <HAL_TIM_PWM_Start_DMA+0x3a0>)
 800d15a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d160:	4a53      	ldr	r2, [pc, #332]	@ (800d2b0 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800d162:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d168:	6879      	ldr	r1, [r7, #4]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	3338      	adds	r3, #56	@ 0x38
 800d170:	461a      	mov	r2, r3
 800d172:	887b      	ldrh	r3, [r7, #2]
 800d174:	f000 fcd2 	bl	800db1c <TIM_DMA_Start_IT>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	e128      	b.n	800d3d4 <HAL_TIM_PWM_Start_DMA+0x4c8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	68da      	ldr	r2, [r3, #12]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d190:	60da      	str	r2, [r3, #12]
      break;
 800d192:	e04a      	b.n	800d22a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d198:	4a43      	ldr	r2, [pc, #268]	@ (800d2a8 <HAL_TIM_PWM_Start_DMA+0x39c>)
 800d19a:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a0:	4a42      	ldr	r2, [pc, #264]	@ (800d2ac <HAL_TIM_PWM_Start_DMA+0x3a0>)
 800d1a2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a8:	4a41      	ldr	r2, [pc, #260]	@ (800d2b0 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800d1aa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	333c      	adds	r3, #60	@ 0x3c
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	887b      	ldrh	r3, [r7, #2]
 800d1bc:	f000 fcae 	bl	800db1c <TIM_DMA_Start_IT>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d001      	beq.n	800d1ca <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e104      	b.n	800d3d4 <HAL_TIM_PWM_Start_DMA+0x4c8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	68da      	ldr	r2, [r3, #12]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d1d8:	60da      	str	r2, [r3, #12]
      break;
 800d1da:	e026      	b.n	800d22a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1e0:	4a31      	ldr	r2, [pc, #196]	@ (800d2a8 <HAL_TIM_PWM_Start_DMA+0x39c>)
 800d1e2:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1e8:	4a30      	ldr	r2, [pc, #192]	@ (800d2ac <HAL_TIM_PWM_Start_DMA+0x3a0>)
 800d1ea:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1f0:	4a2f      	ldr	r2, [pc, #188]	@ (800d2b0 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800d1f2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d1f8:	6879      	ldr	r1, [r7, #4]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	3340      	adds	r3, #64	@ 0x40
 800d200:	461a      	mov	r2, r3
 800d202:	887b      	ldrh	r3, [r7, #2]
 800d204:	f000 fc8a 	bl	800db1c <TIM_DMA_Start_IT>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d001      	beq.n	800d212 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d20e:	2301      	movs	r3, #1
 800d210:	e0e0      	b.n	800d3d4 <HAL_TIM_PWM_Start_DMA+0x4c8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	68da      	ldr	r2, [r3, #12]
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d220:	60da      	str	r2, [r3, #12]
      break;
 800d222:	e002      	b.n	800d22a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800d224:	2301      	movs	r3, #1
 800d226:	75fb      	strb	r3, [r7, #23]
      break;
 800d228:	bf00      	nop
  }

  if (status == HAL_OK)
 800d22a:	7dfb      	ldrb	r3, [r7, #23]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f040 80d0 	bne.w	800d3d2 <HAL_TIM_PWM_Start_DMA+0x4c6>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2201      	movs	r2, #1
 800d238:	68b9      	ldr	r1, [r7, #8]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f001 fb32 	bl	800e8a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a1b      	ldr	r2, [pc, #108]	@ (800d2b4 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d02c      	beq.n	800d2a4 <HAL_TIM_PWM_Start_DMA+0x398>
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a1a      	ldr	r2, [pc, #104]	@ (800d2b8 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d027      	beq.n	800d2a4 <HAL_TIM_PWM_Start_DMA+0x398>
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a18      	ldr	r2, [pc, #96]	@ (800d2bc <HAL_TIM_PWM_Start_DMA+0x3b0>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d022      	beq.n	800d2a4 <HAL_TIM_PWM_Start_DMA+0x398>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a17      	ldr	r2, [pc, #92]	@ (800d2c0 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d01d      	beq.n	800d2a4 <HAL_TIM_PWM_Start_DMA+0x398>
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a15      	ldr	r2, [pc, #84]	@ (800d2c4 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d018      	beq.n	800d2a4 <HAL_TIM_PWM_Start_DMA+0x398>
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a14      	ldr	r2, [pc, #80]	@ (800d2c8 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d013      	beq.n	800d2a4 <HAL_TIM_PWM_Start_DMA+0x398>
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a12      	ldr	r2, [pc, #72]	@ (800d2cc <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d00e      	beq.n	800d2a4 <HAL_TIM_PWM_Start_DMA+0x398>
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a11      	ldr	r2, [pc, #68]	@ (800d2d0 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d009      	beq.n	800d2a4 <HAL_TIM_PWM_Start_DMA+0x398>
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a0f      	ldr	r2, [pc, #60]	@ (800d2d4 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d004      	beq.n	800d2a4 <HAL_TIM_PWM_Start_DMA+0x398>
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a0e      	ldr	r2, [pc, #56]	@ (800d2d8 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d11b      	bne.n	800d2dc <HAL_TIM_PWM_Start_DMA+0x3d0>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e01a      	b.n	800d2de <HAL_TIM_PWM_Start_DMA+0x3d2>
 800d2a8:	0800dc9d 	.word	0x0800dc9d
 800d2ac:	0800dd05 	.word	0x0800dd05
 800d2b0:	0800dc0b 	.word	0x0800dc0b
 800d2b4:	40012c00 	.word	0x40012c00
 800d2b8:	50012c00 	.word	0x50012c00
 800d2bc:	40013400 	.word	0x40013400
 800d2c0:	50013400 	.word	0x50013400
 800d2c4:	40014000 	.word	0x40014000
 800d2c8:	50014000 	.word	0x50014000
 800d2cc:	40014400 	.word	0x40014400
 800d2d0:	50014400 	.word	0x50014400
 800d2d4:	40014800 	.word	0x40014800
 800d2d8:	50014800 	.word	0x50014800
 800d2dc:	2300      	movs	r3, #0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d007      	beq.n	800d2f2 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d2f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a39      	ldr	r2, [pc, #228]	@ (800d3dc <HAL_TIM_PWM_Start_DMA+0x4d0>)
 800d2f8:	4293      	cmp	r3, r2
 800d2fa:	d04a      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a37      	ldr	r2, [pc, #220]	@ (800d3e0 <HAL_TIM_PWM_Start_DMA+0x4d4>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d045      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d30e:	d040      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d318:	d03b      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a31      	ldr	r2, [pc, #196]	@ (800d3e4 <HAL_TIM_PWM_Start_DMA+0x4d8>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d036      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a2f      	ldr	r2, [pc, #188]	@ (800d3e8 <HAL_TIM_PWM_Start_DMA+0x4dc>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d031      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4a2e      	ldr	r2, [pc, #184]	@ (800d3ec <HAL_TIM_PWM_Start_DMA+0x4e0>)
 800d334:	4293      	cmp	r3, r2
 800d336:	d02c      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a2c      	ldr	r2, [pc, #176]	@ (800d3f0 <HAL_TIM_PWM_Start_DMA+0x4e4>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d027      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a2b      	ldr	r2, [pc, #172]	@ (800d3f4 <HAL_TIM_PWM_Start_DMA+0x4e8>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d022      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a29      	ldr	r2, [pc, #164]	@ (800d3f8 <HAL_TIM_PWM_Start_DMA+0x4ec>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d01d      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a28      	ldr	r2, [pc, #160]	@ (800d3fc <HAL_TIM_PWM_Start_DMA+0x4f0>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d018      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a26      	ldr	r2, [pc, #152]	@ (800d400 <HAL_TIM_PWM_Start_DMA+0x4f4>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d013      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4a25      	ldr	r2, [pc, #148]	@ (800d404 <HAL_TIM_PWM_Start_DMA+0x4f8>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d00e      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a23      	ldr	r2, [pc, #140]	@ (800d408 <HAL_TIM_PWM_Start_DMA+0x4fc>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d009      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4a22      	ldr	r2, [pc, #136]	@ (800d40c <HAL_TIM_PWM_Start_DMA+0x500>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d004      	beq.n	800d392 <HAL_TIM_PWM_Start_DMA+0x486>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4a20      	ldr	r2, [pc, #128]	@ (800d410 <HAL_TIM_PWM_Start_DMA+0x504>)
 800d38e:	4293      	cmp	r3, r2
 800d390:	d115      	bne.n	800d3be <HAL_TIM_PWM_Start_DMA+0x4b2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	689a      	ldr	r2, [r3, #8]
 800d398:	4b1e      	ldr	r3, [pc, #120]	@ (800d414 <HAL_TIM_PWM_Start_DMA+0x508>)
 800d39a:	4013      	ands	r3, r2
 800d39c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	2b06      	cmp	r3, #6
 800d3a2:	d015      	beq.n	800d3d0 <HAL_TIM_PWM_Start_DMA+0x4c4>
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3aa:	d011      	beq.n	800d3d0 <HAL_TIM_PWM_Start_DMA+0x4c4>
      {
        __HAL_TIM_ENABLE(htim);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f042 0201 	orr.w	r2, r2, #1
 800d3ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3bc:	e008      	b.n	800d3d0 <HAL_TIM_PWM_Start_DMA+0x4c4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f042 0201 	orr.w	r2, r2, #1
 800d3cc:	601a      	str	r2, [r3, #0]
 800d3ce:	e000      	b.n	800d3d2 <HAL_TIM_PWM_Start_DMA+0x4c6>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d3d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3718      	adds	r7, #24
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	40012c00 	.word	0x40012c00
 800d3e0:	50012c00 	.word	0x50012c00
 800d3e4:	40000400 	.word	0x40000400
 800d3e8:	50000400 	.word	0x50000400
 800d3ec:	40000800 	.word	0x40000800
 800d3f0:	50000800 	.word	0x50000800
 800d3f4:	40000c00 	.word	0x40000c00
 800d3f8:	50000c00 	.word	0x50000c00
 800d3fc:	40013400 	.word	0x40013400
 800d400:	50013400 	.word	0x50013400
 800d404:	40001800 	.word	0x40001800
 800d408:	50001800 	.word	0x50001800
 800d40c:	40014000 	.word	0x40014000
 800d410:	50014000 	.word	0x50014000
 800d414:	00010007 	.word	0x00010007

0800d418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	f003 0302 	and.w	r3, r3, #2
 800d436:	2b00      	cmp	r3, #0
 800d438:	d020      	beq.n	800d47c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f003 0302 	and.w	r3, r3, #2
 800d440:	2b00      	cmp	r3, #0
 800d442:	d01b      	beq.n	800d47c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f06f 0202 	mvn.w	r2, #2
 800d44c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2201      	movs	r2, #1
 800d452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	f003 0303 	and.w	r3, r3, #3
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d003      	beq.n	800d46a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 fb9f 	bl	800dba6 <HAL_TIM_IC_CaptureCallback>
 800d468:	e005      	b.n	800d476 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fb91 	bl	800db92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fba2 	bl	800dbba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	f003 0304 	and.w	r3, r3, #4
 800d482:	2b00      	cmp	r3, #0
 800d484:	d020      	beq.n	800d4c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f003 0304 	and.w	r3, r3, #4
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d01b      	beq.n	800d4c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f06f 0204 	mvn.w	r2, #4
 800d498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2202      	movs	r2, #2
 800d49e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	699b      	ldr	r3, [r3, #24]
 800d4a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d003      	beq.n	800d4b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 fb79 	bl	800dba6 <HAL_TIM_IC_CaptureCallback>
 800d4b4:	e005      	b.n	800d4c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 fb6b 	bl	800db92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 fb7c 	bl	800dbba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	f003 0308 	and.w	r3, r3, #8
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d020      	beq.n	800d514 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f003 0308 	and.w	r3, r3, #8
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d01b      	beq.n	800d514 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f06f 0208 	mvn.w	r2, #8
 800d4e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2204      	movs	r2, #4
 800d4ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	69db      	ldr	r3, [r3, #28]
 800d4f2:	f003 0303 	and.w	r3, r3, #3
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d003      	beq.n	800d502 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 fb53 	bl	800dba6 <HAL_TIM_IC_CaptureCallback>
 800d500:	e005      	b.n	800d50e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 fb45 	bl	800db92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 fb56 	bl	800dbba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	f003 0310 	and.w	r3, r3, #16
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d020      	beq.n	800d560 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f003 0310 	and.w	r3, r3, #16
 800d524:	2b00      	cmp	r3, #0
 800d526:	d01b      	beq.n	800d560 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f06f 0210 	mvn.w	r2, #16
 800d530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2208      	movs	r2, #8
 800d536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	69db      	ldr	r3, [r3, #28]
 800d53e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d542:	2b00      	cmp	r3, #0
 800d544:	d003      	beq.n	800d54e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 fb2d 	bl	800dba6 <HAL_TIM_IC_CaptureCallback>
 800d54c:	e005      	b.n	800d55a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 fb1f 	bl	800db92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 fb30 	bl	800dbba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	f003 0301 	and.w	r3, r3, #1
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00c      	beq.n	800d584 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f003 0301 	and.w	r3, r3, #1
 800d570:	2b00      	cmp	r3, #0
 800d572:	d007      	beq.n	800d584 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f06f 0201 	mvn.w	r2, #1
 800d57c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f7f4 ff20 	bl	80023c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d104      	bne.n	800d598 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00c      	beq.n	800d5b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d007      	beq.n	800d5b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d5aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f001 fb13 	bl	800ebd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00c      	beq.n	800d5d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d007      	beq.n	800d5d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d5ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f001 fb0b 	bl	800ebec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00c      	beq.n	800d5fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d007      	beq.n	800d5fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d5f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 faf4 	bl	800dbe2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	f003 0320 	and.w	r3, r3, #32
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00c      	beq.n	800d61e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f003 0320 	and.w	r3, r3, #32
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d007      	beq.n	800d61e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f06f 0220 	mvn.w	r2, #32
 800d616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f001 fad3 	bl	800ebc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00c      	beq.n	800d642 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d007      	beq.n	800d642 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800d63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f001 fadf 	bl	800ec00 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00c      	beq.n	800d666 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d652:	2b00      	cmp	r3, #0
 800d654:	d007      	beq.n	800d666 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800d65e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f001 fad7 	bl	800ec14 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d00c      	beq.n	800d68a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d676:	2b00      	cmp	r3, #0
 800d678:	d007      	beq.n	800d68a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800d682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f001 facf 	bl	800ec28 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00c      	beq.n	800d6ae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d007      	beq.n	800d6ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800d6a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f001 fac7 	bl	800ec3c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d6ae:	bf00      	nop
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
	...

0800d6b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b086      	sub	sp, #24
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d101      	bne.n	800d6d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	e0ff      	b.n	800d8d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2201      	movs	r2, #1
 800d6da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b14      	cmp	r3, #20
 800d6e2:	f200 80f0 	bhi.w	800d8c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d6e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d6ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ec:	0800d741 	.word	0x0800d741
 800d6f0:	0800d8c7 	.word	0x0800d8c7
 800d6f4:	0800d8c7 	.word	0x0800d8c7
 800d6f8:	0800d8c7 	.word	0x0800d8c7
 800d6fc:	0800d781 	.word	0x0800d781
 800d700:	0800d8c7 	.word	0x0800d8c7
 800d704:	0800d8c7 	.word	0x0800d8c7
 800d708:	0800d8c7 	.word	0x0800d8c7
 800d70c:	0800d7c3 	.word	0x0800d7c3
 800d710:	0800d8c7 	.word	0x0800d8c7
 800d714:	0800d8c7 	.word	0x0800d8c7
 800d718:	0800d8c7 	.word	0x0800d8c7
 800d71c:	0800d803 	.word	0x0800d803
 800d720:	0800d8c7 	.word	0x0800d8c7
 800d724:	0800d8c7 	.word	0x0800d8c7
 800d728:	0800d8c7 	.word	0x0800d8c7
 800d72c:	0800d845 	.word	0x0800d845
 800d730:	0800d8c7 	.word	0x0800d8c7
 800d734:	0800d8c7 	.word	0x0800d8c7
 800d738:	0800d8c7 	.word	0x0800d8c7
 800d73c:	0800d885 	.word	0x0800d885
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	68b9      	ldr	r1, [r7, #8]
 800d746:	4618      	mov	r0, r3
 800d748:	f000 fc3a 	bl	800dfc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	699a      	ldr	r2, [r3, #24]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f042 0208 	orr.w	r2, r2, #8
 800d75a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	699a      	ldr	r2, [r3, #24]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f022 0204 	bic.w	r2, r2, #4
 800d76a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	6999      	ldr	r1, [r3, #24]
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	691a      	ldr	r2, [r3, #16]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	430a      	orrs	r2, r1
 800d77c:	619a      	str	r2, [r3, #24]
      break;
 800d77e:	e0a5      	b.n	800d8cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	68b9      	ldr	r1, [r7, #8]
 800d786:	4618      	mov	r0, r3
 800d788:	f000 fcdc 	bl	800e144 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	699a      	ldr	r2, [r3, #24]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d79a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	699a      	ldr	r2, [r3, #24]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d7aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	6999      	ldr	r1, [r3, #24]
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	021a      	lsls	r2, r3, #8
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	430a      	orrs	r2, r1
 800d7be:	619a      	str	r2, [r3, #24]
      break;
 800d7c0:	e084      	b.n	800d8cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	68b9      	ldr	r1, [r7, #8]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f000 fd6b 	bl	800e2a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	69da      	ldr	r2, [r3, #28]
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f042 0208 	orr.w	r2, r2, #8
 800d7dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	69da      	ldr	r2, [r3, #28]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f022 0204 	bic.w	r2, r2, #4
 800d7ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	69d9      	ldr	r1, [r3, #28]
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	691a      	ldr	r2, [r3, #16]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	430a      	orrs	r2, r1
 800d7fe:	61da      	str	r2, [r3, #28]
      break;
 800d800:	e064      	b.n	800d8cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	68b9      	ldr	r1, [r7, #8]
 800d808:	4618      	mov	r0, r3
 800d80a:	f000 fdf9 	bl	800e400 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	69da      	ldr	r2, [r3, #28]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d81c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	69da      	ldr	r2, [r3, #28]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d82c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	69d9      	ldr	r1, [r3, #28]
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	021a      	lsls	r2, r3, #8
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	430a      	orrs	r2, r1
 800d840:	61da      	str	r2, [r3, #28]
      break;
 800d842:	e043      	b.n	800d8cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	68b9      	ldr	r1, [r7, #8]
 800d84a:	4618      	mov	r0, r3
 800d84c:	f000 fe88 	bl	800e560 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f042 0208 	orr.w	r2, r2, #8
 800d85e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f022 0204 	bic.w	r2, r2, #4
 800d86e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	691a      	ldr	r2, [r3, #16]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	430a      	orrs	r2, r1
 800d880:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800d882:	e023      	b.n	800d8cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68b9      	ldr	r1, [r7, #8]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f000 feea 	bl	800e664 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d89e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d8ae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	691b      	ldr	r3, [r3, #16]
 800d8ba:	021a      	lsls	r2, r3, #8
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	430a      	orrs	r2, r1
 800d8c2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800d8c4:	e002      	b.n	800d8cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	75fb      	strb	r3, [r7, #23]
      break;
 800d8ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d8d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3718      	adds	r7, #24
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop

0800d8e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d101      	bne.n	800d8fc <HAL_TIM_ConfigClockSource+0x1c>
 800d8f8:	2302      	movs	r3, #2
 800d8fa:	e0fe      	b.n	800dafa <HAL_TIM_ConfigClockSource+0x21a>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2202      	movs	r2, #2
 800d908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800d91a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d91e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68ba      	ldr	r2, [r7, #8]
 800d92e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d938:	f000 80c9 	beq.w	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800d93c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d940:	f200 80ce 	bhi.w	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d944:	4a6f      	ldr	r2, [pc, #444]	@ (800db04 <HAL_TIM_ConfigClockSource+0x224>)
 800d946:	4293      	cmp	r3, r2
 800d948:	f000 80c1 	beq.w	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800d94c:	4a6d      	ldr	r2, [pc, #436]	@ (800db04 <HAL_TIM_ConfigClockSource+0x224>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	f200 80c6 	bhi.w	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d954:	4a6c      	ldr	r2, [pc, #432]	@ (800db08 <HAL_TIM_ConfigClockSource+0x228>)
 800d956:	4293      	cmp	r3, r2
 800d958:	f000 80b9 	beq.w	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800d95c:	4a6a      	ldr	r2, [pc, #424]	@ (800db08 <HAL_TIM_ConfigClockSource+0x228>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	f200 80be 	bhi.w	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d964:	4a69      	ldr	r2, [pc, #420]	@ (800db0c <HAL_TIM_ConfigClockSource+0x22c>)
 800d966:	4293      	cmp	r3, r2
 800d968:	f000 80b1 	beq.w	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800d96c:	4a67      	ldr	r2, [pc, #412]	@ (800db0c <HAL_TIM_ConfigClockSource+0x22c>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	f200 80b6 	bhi.w	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d974:	4a66      	ldr	r2, [pc, #408]	@ (800db10 <HAL_TIM_ConfigClockSource+0x230>)
 800d976:	4293      	cmp	r3, r2
 800d978:	f000 80a9 	beq.w	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800d97c:	4a64      	ldr	r2, [pc, #400]	@ (800db10 <HAL_TIM_ConfigClockSource+0x230>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	f200 80ae 	bhi.w	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d984:	4a63      	ldr	r2, [pc, #396]	@ (800db14 <HAL_TIM_ConfigClockSource+0x234>)
 800d986:	4293      	cmp	r3, r2
 800d988:	f000 80a1 	beq.w	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800d98c:	4a61      	ldr	r2, [pc, #388]	@ (800db14 <HAL_TIM_ConfigClockSource+0x234>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	f200 80a6 	bhi.w	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d994:	4a60      	ldr	r2, [pc, #384]	@ (800db18 <HAL_TIM_ConfigClockSource+0x238>)
 800d996:	4293      	cmp	r3, r2
 800d998:	f000 8099 	beq.w	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800d99c:	4a5e      	ldr	r2, [pc, #376]	@ (800db18 <HAL_TIM_ConfigClockSource+0x238>)
 800d99e:	4293      	cmp	r3, r2
 800d9a0:	f200 809e 	bhi.w	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d9a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d9a8:	f000 8091 	beq.w	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800d9ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d9b0:	f200 8096 	bhi.w	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d9b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9b8:	f000 8089 	beq.w	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800d9bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9c0:	f200 808e 	bhi.w	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d9c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d9c8:	d03e      	beq.n	800da48 <HAL_TIM_ConfigClockSource+0x168>
 800d9ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d9ce:	f200 8087 	bhi.w	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d9d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9d6:	f000 8086 	beq.w	800dae6 <HAL_TIM_ConfigClockSource+0x206>
 800d9da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9de:	d87f      	bhi.n	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d9e0:	2b70      	cmp	r3, #112	@ 0x70
 800d9e2:	d01a      	beq.n	800da1a <HAL_TIM_ConfigClockSource+0x13a>
 800d9e4:	2b70      	cmp	r3, #112	@ 0x70
 800d9e6:	d87b      	bhi.n	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d9e8:	2b60      	cmp	r3, #96	@ 0x60
 800d9ea:	d050      	beq.n	800da8e <HAL_TIM_ConfigClockSource+0x1ae>
 800d9ec:	2b60      	cmp	r3, #96	@ 0x60
 800d9ee:	d877      	bhi.n	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d9f0:	2b50      	cmp	r3, #80	@ 0x50
 800d9f2:	d03c      	beq.n	800da6e <HAL_TIM_ConfigClockSource+0x18e>
 800d9f4:	2b50      	cmp	r3, #80	@ 0x50
 800d9f6:	d873      	bhi.n	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800d9f8:	2b40      	cmp	r3, #64	@ 0x40
 800d9fa:	d058      	beq.n	800daae <HAL_TIM_ConfigClockSource+0x1ce>
 800d9fc:	2b40      	cmp	r3, #64	@ 0x40
 800d9fe:	d86f      	bhi.n	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800da00:	2b30      	cmp	r3, #48	@ 0x30
 800da02:	d064      	beq.n	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800da04:	2b30      	cmp	r3, #48	@ 0x30
 800da06:	d86b      	bhi.n	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800da08:	2b20      	cmp	r3, #32
 800da0a:	d060      	beq.n	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800da0c:	2b20      	cmp	r3, #32
 800da0e:	d867      	bhi.n	800dae0 <HAL_TIM_ConfigClockSource+0x200>
 800da10:	2b00      	cmp	r3, #0
 800da12:	d05c      	beq.n	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800da14:	2b10      	cmp	r3, #16
 800da16:	d05a      	beq.n	800dace <HAL_TIM_ConfigClockSource+0x1ee>
 800da18:	e062      	b.n	800dae0 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800da2a:	f000 ff1b 	bl	800e864 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800da3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	609a      	str	r2, [r3, #8]
      break;
 800da46:	e04f      	b.n	800dae8 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800da58:	f000 ff04 	bl	800e864 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	689a      	ldr	r2, [r3, #8]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800da6a:	609a      	str	r2, [r3, #8]
      break;
 800da6c:	e03c      	b.n	800dae8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800da7a:	461a      	mov	r2, r3
 800da7c:	f000 fe76 	bl	800e76c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	2150      	movs	r1, #80	@ 0x50
 800da86:	4618      	mov	r0, r3
 800da88:	f000 fecf 	bl	800e82a <TIM_ITRx_SetConfig>
      break;
 800da8c:	e02c      	b.n	800dae8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800da9a:	461a      	mov	r2, r3
 800da9c:	f000 fe95 	bl	800e7ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2160      	movs	r1, #96	@ 0x60
 800daa6:	4618      	mov	r0, r3
 800daa8:	f000 febf 	bl	800e82a <TIM_ITRx_SetConfig>
      break;
 800daac:	e01c      	b.n	800dae8 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800daba:	461a      	mov	r2, r3
 800dabc:	f000 fe56 	bl	800e76c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2140      	movs	r1, #64	@ 0x40
 800dac6:	4618      	mov	r0, r3
 800dac8:	f000 feaf 	bl	800e82a <TIM_ITRx_SetConfig>
      break;
 800dacc:	e00c      	b.n	800dae8 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4619      	mov	r1, r3
 800dad8:	4610      	mov	r0, r2
 800dada:	f000 fea6 	bl	800e82a <TIM_ITRx_SetConfig>
      break;
 800dade:	e003      	b.n	800dae8 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800dae0:	2301      	movs	r3, #1
 800dae2:	73fb      	strb	r3, [r7, #15]
      break;
 800dae4:	e000      	b.n	800dae8 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800dae6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2201      	movs	r2, #1
 800daec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800daf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	00100070 	.word	0x00100070
 800db08:	00100060 	.word	0x00100060
 800db0c:	00100050 	.word	0x00100050
 800db10:	00100040 	.word	0x00100040
 800db14:	00100030 	.word	0x00100030
 800db18:	00100020 	.word	0x00100020

0800db1c <TIM_DMA_Start_IT>:
  * @param  length   : The size of a source block transfer in byte.
  * @retval HAL status
  */
HAL_StatusTypeDef TIM_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t src, uint32_t dst,
                                   uint32_t length)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b086      	sub	sp, #24
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
 800db28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status ;

  /* Enable the DMA channel */
  if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db32:	2b00      	cmp	r3, #0
 800db34:	d020      	beq.n	800db78 <TIM_DMA_Start_IT+0x5c>
  {
    if ((hdma->LinkedListQueue != 0U) && (hdma->LinkedListQueue->Head != 0U))
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d019      	beq.n	800db72 <TIM_DMA_Start_IT+0x56>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d014      	beq.n	800db72 <TIM_DMA_Start_IT+0x56>
    {
      /* Enable the DMA channel */
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = length;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	683a      	ldr	r2, [r7, #0]
 800db50:	609a      	str	r2, [r3, #8]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = src;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	68ba      	ldr	r2, [r7, #8]
 800db5a:	60da      	str	r2, [r3, #12]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = dst;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hdma);
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f7f8 fb50 	bl	800620c <HAL_DMAEx_List_Start_IT>
 800db6c:	4603      	mov	r3, r0
 800db6e:	75fb      	strb	r3, [r7, #23]
 800db70:	e00a      	b.n	800db88 <TIM_DMA_Start_IT+0x6c>
    }
    else
    {
      status = HAL_ERROR;
 800db72:	2301      	movs	r3, #1
 800db74:	75fb      	strb	r3, [r7, #23]
 800db76:	e007      	b.n	800db88 <TIM_DMA_Start_IT+0x6c>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hdma, src, dst, length);
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	68b9      	ldr	r1, [r7, #8]
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	f7f7 fdf2 	bl	8005768 <HAL_DMA_Start_IT>
 800db84:	4603      	mov	r3, r0
 800db86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800db88:	7dfb      	ldrb	r3, [r7, #23]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3718      	adds	r7, #24
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}

0800db92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db92:	b480      	push	{r7}
 800db94:	b083      	sub	sp, #12
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db9a:	bf00      	nop
 800db9c:	370c      	adds	r7, #12
 800db9e:	46bd      	mov	sp, r7
 800dba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba4:	4770      	bx	lr

0800dba6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dba6:	b480      	push	{r7}
 800dba8:	b083      	sub	sp, #12
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dbae:	bf00      	nop
 800dbb0:	370c      	adds	r7, #12
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr

0800dbba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dbba:	b480      	push	{r7}
 800dbbc:	b083      	sub	sp, #12
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dbc2:	bf00      	nop
 800dbc4:	370c      	adds	r7, #12
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr

0800dbce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800dbce:	b480      	push	{r7}
 800dbd0:	b083      	sub	sp, #12
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800dbd6:	bf00      	nop
 800dbd8:	370c      	adds	r7, #12
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr

0800dbe2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dbe2:	b480      	push	{r7}
 800dbe4:	b083      	sub	sp, #12
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dbea:	bf00      	nop
 800dbec:	370c      	adds	r7, #12
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf4:	4770      	bx	lr

0800dbf6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800dbf6:	b480      	push	{r7}
 800dbf8:	b083      	sub	sp, #12
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800dbfe:	bf00      	nop
 800dc00:	370c      	adds	r7, #12
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr

0800dc0a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b084      	sub	sp, #16
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc16:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d107      	bne.n	800dc32 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2201      	movs	r2, #1
 800dc26:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dc30:	e02a      	b.n	800dc88 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d107      	bne.n	800dc4c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2201      	movs	r2, #1
 800dc46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dc4a:	e01d      	b.n	800dc88 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d107      	bne.n	800dc66 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2204      	movs	r2, #4
 800dc5a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dc64:	e010      	b.n	800dc88 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d107      	bne.n	800dc80 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2208      	movs	r2, #8
 800dc74:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dc7e:	e003      	b.n	800dc88 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2201      	movs	r2, #1
 800dc84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800dc88:	68f8      	ldr	r0, [r7, #12]
 800dc8a:	f7ff ffb4 	bl	800dbf6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2200      	movs	r2, #0
 800dc92:	771a      	strb	r2, [r3, #28]
}
 800dc94:	bf00      	nop
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dca8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d103      	bne.n	800dcbc <TIM_DMADelayPulseCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	771a      	strb	r2, [r3, #28]
 800dcba:	e019      	b.n	800dcf0 <TIM_DMADelayPulseCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d103      	bne.n	800dcce <TIM_DMADelayPulseCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2202      	movs	r2, #2
 800dcca:	771a      	strb	r2, [r3, #28]
 800dccc:	e010      	b.n	800dcf0 <TIM_DMADelayPulseCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d103      	bne.n	800dce0 <TIM_DMADelayPulseCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2204      	movs	r2, #4
 800dcdc:	771a      	strb	r2, [r3, #28]
 800dcde:	e007      	b.n	800dcf0 <TIM_DMADelayPulseCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d102      	bne.n	800dcf0 <TIM_DMADelayPulseCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2208      	movs	r2, #8
 800dcee:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f7ff ff62 	bl	800dbba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	771a      	strb	r2, [r3, #28]
}
 800dcfc:	bf00      	nop
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd10:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d103      	bne.n	800dd24 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	771a      	strb	r2, [r3, #28]
 800dd22:	e019      	b.n	800dd58 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d103      	bne.n	800dd36 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2202      	movs	r2, #2
 800dd32:	771a      	strb	r2, [r3, #28]
 800dd34:	e010      	b.n	800dd58 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d103      	bne.n	800dd48 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2204      	movs	r2, #4
 800dd44:	771a      	strb	r2, [r3, #28]
 800dd46:	e007      	b.n	800dd58 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d102      	bne.n	800dd58 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2208      	movs	r2, #8
 800dd56:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f7ff ff38 	bl	800dbce <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	771a      	strb	r2, [r3, #28]
}
 800dd64:	bf00      	nop
 800dd66:	3710      	adds	r7, #16
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b085      	sub	sp, #20
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	4a7a      	ldr	r2, [pc, #488]	@ (800df68 <TIM_Base_SetConfig+0x1fc>)
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d02b      	beq.n	800dddc <TIM_Base_SetConfig+0x70>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	4a79      	ldr	r2, [pc, #484]	@ (800df6c <TIM_Base_SetConfig+0x200>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d027      	beq.n	800dddc <TIM_Base_SetConfig+0x70>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd92:	d023      	beq.n	800dddc <TIM_Base_SetConfig+0x70>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd9a:	d01f      	beq.n	800dddc <TIM_Base_SetConfig+0x70>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	4a74      	ldr	r2, [pc, #464]	@ (800df70 <TIM_Base_SetConfig+0x204>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d01b      	beq.n	800dddc <TIM_Base_SetConfig+0x70>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	4a73      	ldr	r2, [pc, #460]	@ (800df74 <TIM_Base_SetConfig+0x208>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d017      	beq.n	800dddc <TIM_Base_SetConfig+0x70>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a72      	ldr	r2, [pc, #456]	@ (800df78 <TIM_Base_SetConfig+0x20c>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d013      	beq.n	800dddc <TIM_Base_SetConfig+0x70>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4a71      	ldr	r2, [pc, #452]	@ (800df7c <TIM_Base_SetConfig+0x210>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d00f      	beq.n	800dddc <TIM_Base_SetConfig+0x70>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4a70      	ldr	r2, [pc, #448]	@ (800df80 <TIM_Base_SetConfig+0x214>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d00b      	beq.n	800dddc <TIM_Base_SetConfig+0x70>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	4a6f      	ldr	r2, [pc, #444]	@ (800df84 <TIM_Base_SetConfig+0x218>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d007      	beq.n	800dddc <TIM_Base_SetConfig+0x70>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4a6e      	ldr	r2, [pc, #440]	@ (800df88 <TIM_Base_SetConfig+0x21c>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d003      	beq.n	800dddc <TIM_Base_SetConfig+0x70>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4a6d      	ldr	r2, [pc, #436]	@ (800df8c <TIM_Base_SetConfig+0x220>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d108      	bne.n	800ddee <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dde2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	4313      	orrs	r3, r2
 800ddec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	4a5d      	ldr	r2, [pc, #372]	@ (800df68 <TIM_Base_SetConfig+0x1fc>)
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d05b      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	4a5c      	ldr	r2, [pc, #368]	@ (800df6c <TIM_Base_SetConfig+0x200>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d057      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de04:	d053      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800de0c:	d04f      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4a57      	ldr	r2, [pc, #348]	@ (800df70 <TIM_Base_SetConfig+0x204>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d04b      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4a56      	ldr	r2, [pc, #344]	@ (800df74 <TIM_Base_SetConfig+0x208>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d047      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4a55      	ldr	r2, [pc, #340]	@ (800df78 <TIM_Base_SetConfig+0x20c>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d043      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4a54      	ldr	r2, [pc, #336]	@ (800df7c <TIM_Base_SetConfig+0x210>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d03f      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a53      	ldr	r2, [pc, #332]	@ (800df80 <TIM_Base_SetConfig+0x214>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d03b      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4a52      	ldr	r2, [pc, #328]	@ (800df84 <TIM_Base_SetConfig+0x218>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d037      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4a51      	ldr	r2, [pc, #324]	@ (800df88 <TIM_Base_SetConfig+0x21c>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d033      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a50      	ldr	r2, [pc, #320]	@ (800df8c <TIM_Base_SetConfig+0x220>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d02f      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4a4f      	ldr	r2, [pc, #316]	@ (800df90 <TIM_Base_SetConfig+0x224>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d02b      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a4e      	ldr	r2, [pc, #312]	@ (800df94 <TIM_Base_SetConfig+0x228>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d027      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4a4d      	ldr	r2, [pc, #308]	@ (800df98 <TIM_Base_SetConfig+0x22c>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d023      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a4c      	ldr	r2, [pc, #304]	@ (800df9c <TIM_Base_SetConfig+0x230>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d01f      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a4b      	ldr	r2, [pc, #300]	@ (800dfa0 <TIM_Base_SetConfig+0x234>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d01b      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a4a      	ldr	r2, [pc, #296]	@ (800dfa4 <TIM_Base_SetConfig+0x238>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d017      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a49      	ldr	r2, [pc, #292]	@ (800dfa8 <TIM_Base_SetConfig+0x23c>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d013      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4a48      	ldr	r2, [pc, #288]	@ (800dfac <TIM_Base_SetConfig+0x240>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d00f      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	4a47      	ldr	r2, [pc, #284]	@ (800dfb0 <TIM_Base_SetConfig+0x244>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d00b      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	4a46      	ldr	r2, [pc, #280]	@ (800dfb4 <TIM_Base_SetConfig+0x248>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d007      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	4a45      	ldr	r2, [pc, #276]	@ (800dfb8 <TIM_Base_SetConfig+0x24c>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d003      	beq.n	800deae <TIM_Base_SetConfig+0x142>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	4a44      	ldr	r2, [pc, #272]	@ (800dfbc <TIM_Base_SetConfig+0x250>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d108      	bne.n	800dec0 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800deb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	4313      	orrs	r3, r2
 800debe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	695b      	ldr	r3, [r3, #20]
 800deca:	4313      	orrs	r3, r2
 800decc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	689a      	ldr	r2, [r3, #8]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	4a20      	ldr	r2, [pc, #128]	@ (800df68 <TIM_Base_SetConfig+0x1fc>)
 800dee8:	4293      	cmp	r3, r2
 800deea:	d023      	beq.n	800df34 <TIM_Base_SetConfig+0x1c8>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4a1f      	ldr	r2, [pc, #124]	@ (800df6c <TIM_Base_SetConfig+0x200>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d01f      	beq.n	800df34 <TIM_Base_SetConfig+0x1c8>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4a24      	ldr	r2, [pc, #144]	@ (800df88 <TIM_Base_SetConfig+0x21c>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d01b      	beq.n	800df34 <TIM_Base_SetConfig+0x1c8>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	4a23      	ldr	r2, [pc, #140]	@ (800df8c <TIM_Base_SetConfig+0x220>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d017      	beq.n	800df34 <TIM_Base_SetConfig+0x1c8>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	4a28      	ldr	r2, [pc, #160]	@ (800dfa8 <TIM_Base_SetConfig+0x23c>)
 800df08:	4293      	cmp	r3, r2
 800df0a:	d013      	beq.n	800df34 <TIM_Base_SetConfig+0x1c8>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	4a27      	ldr	r2, [pc, #156]	@ (800dfac <TIM_Base_SetConfig+0x240>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d00f      	beq.n	800df34 <TIM_Base_SetConfig+0x1c8>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	4a26      	ldr	r2, [pc, #152]	@ (800dfb0 <TIM_Base_SetConfig+0x244>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d00b      	beq.n	800df34 <TIM_Base_SetConfig+0x1c8>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	4a25      	ldr	r2, [pc, #148]	@ (800dfb4 <TIM_Base_SetConfig+0x248>)
 800df20:	4293      	cmp	r3, r2
 800df22:	d007      	beq.n	800df34 <TIM_Base_SetConfig+0x1c8>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	4a24      	ldr	r2, [pc, #144]	@ (800dfb8 <TIM_Base_SetConfig+0x24c>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d003      	beq.n	800df34 <TIM_Base_SetConfig+0x1c8>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	4a23      	ldr	r2, [pc, #140]	@ (800dfbc <TIM_Base_SetConfig+0x250>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d103      	bne.n	800df3c <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	691a      	ldr	r2, [r3, #16]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2201      	movs	r2, #1
 800df40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	691b      	ldr	r3, [r3, #16]
 800df46:	f003 0301 	and.w	r3, r3, #1
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d105      	bne.n	800df5a <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	691b      	ldr	r3, [r3, #16]
 800df52:	f023 0201 	bic.w	r2, r3, #1
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	611a      	str	r2, [r3, #16]
  }
}
 800df5a:	bf00      	nop
 800df5c:	3714      	adds	r7, #20
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop
 800df68:	40012c00 	.word	0x40012c00
 800df6c:	50012c00 	.word	0x50012c00
 800df70:	40000400 	.word	0x40000400
 800df74:	50000400 	.word	0x50000400
 800df78:	40000800 	.word	0x40000800
 800df7c:	50000800 	.word	0x50000800
 800df80:	40000c00 	.word	0x40000c00
 800df84:	50000c00 	.word	0x50000c00
 800df88:	40013400 	.word	0x40013400
 800df8c:	50013400 	.word	0x50013400
 800df90:	40001800 	.word	0x40001800
 800df94:	50001800 	.word	0x50001800
 800df98:	40001c00 	.word	0x40001c00
 800df9c:	50001c00 	.word	0x50001c00
 800dfa0:	40002000 	.word	0x40002000
 800dfa4:	50002000 	.word	0x50002000
 800dfa8:	40014000 	.word	0x40014000
 800dfac:	50014000 	.word	0x50014000
 800dfb0:	40014400 	.word	0x40014400
 800dfb4:	50014400 	.word	0x50014400
 800dfb8:	40014800 	.word	0x40014800
 800dfbc:	50014800 	.word	0x50014800

0800dfc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b087      	sub	sp, #28
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6a1b      	ldr	r3, [r3, #32]
 800dfce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6a1b      	ldr	r3, [r3, #32]
 800dfd4:	f023 0201 	bic.w	r2, r3, #1
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	699b      	ldr	r3, [r3, #24]
 800dfe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dfee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f023 0303 	bic.w	r3, r3, #3
 800dffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	68fa      	ldr	r2, [r7, #12]
 800e002:	4313      	orrs	r3, r2
 800e004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f023 0302 	bic.w	r3, r3, #2
 800e00c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	697a      	ldr	r2, [r7, #20]
 800e014:	4313      	orrs	r3, r2
 800e016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	4a40      	ldr	r2, [pc, #256]	@ (800e11c <TIM_OC1_SetConfig+0x15c>)
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d023      	beq.n	800e068 <TIM_OC1_SetConfig+0xa8>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	4a3f      	ldr	r2, [pc, #252]	@ (800e120 <TIM_OC1_SetConfig+0x160>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d01f      	beq.n	800e068 <TIM_OC1_SetConfig+0xa8>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4a3e      	ldr	r2, [pc, #248]	@ (800e124 <TIM_OC1_SetConfig+0x164>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d01b      	beq.n	800e068 <TIM_OC1_SetConfig+0xa8>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	4a3d      	ldr	r2, [pc, #244]	@ (800e128 <TIM_OC1_SetConfig+0x168>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d017      	beq.n	800e068 <TIM_OC1_SetConfig+0xa8>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4a3c      	ldr	r2, [pc, #240]	@ (800e12c <TIM_OC1_SetConfig+0x16c>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d013      	beq.n	800e068 <TIM_OC1_SetConfig+0xa8>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	4a3b      	ldr	r2, [pc, #236]	@ (800e130 <TIM_OC1_SetConfig+0x170>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d00f      	beq.n	800e068 <TIM_OC1_SetConfig+0xa8>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	4a3a      	ldr	r2, [pc, #232]	@ (800e134 <TIM_OC1_SetConfig+0x174>)
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d00b      	beq.n	800e068 <TIM_OC1_SetConfig+0xa8>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	4a39      	ldr	r2, [pc, #228]	@ (800e138 <TIM_OC1_SetConfig+0x178>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d007      	beq.n	800e068 <TIM_OC1_SetConfig+0xa8>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	4a38      	ldr	r2, [pc, #224]	@ (800e13c <TIM_OC1_SetConfig+0x17c>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d003      	beq.n	800e068 <TIM_OC1_SetConfig+0xa8>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	4a37      	ldr	r2, [pc, #220]	@ (800e140 <TIM_OC1_SetConfig+0x180>)
 800e064:	4293      	cmp	r3, r2
 800e066:	d10c      	bne.n	800e082 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	f023 0308 	bic.w	r3, r3, #8
 800e06e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	697a      	ldr	r2, [r7, #20]
 800e076:	4313      	orrs	r3, r2
 800e078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	f023 0304 	bic.w	r3, r3, #4
 800e080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	4a25      	ldr	r2, [pc, #148]	@ (800e11c <TIM_OC1_SetConfig+0x15c>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d023      	beq.n	800e0d2 <TIM_OC1_SetConfig+0x112>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4a24      	ldr	r2, [pc, #144]	@ (800e120 <TIM_OC1_SetConfig+0x160>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d01f      	beq.n	800e0d2 <TIM_OC1_SetConfig+0x112>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	4a23      	ldr	r2, [pc, #140]	@ (800e124 <TIM_OC1_SetConfig+0x164>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d01b      	beq.n	800e0d2 <TIM_OC1_SetConfig+0x112>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4a22      	ldr	r2, [pc, #136]	@ (800e128 <TIM_OC1_SetConfig+0x168>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d017      	beq.n	800e0d2 <TIM_OC1_SetConfig+0x112>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4a21      	ldr	r2, [pc, #132]	@ (800e12c <TIM_OC1_SetConfig+0x16c>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d013      	beq.n	800e0d2 <TIM_OC1_SetConfig+0x112>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	4a20      	ldr	r2, [pc, #128]	@ (800e130 <TIM_OC1_SetConfig+0x170>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d00f      	beq.n	800e0d2 <TIM_OC1_SetConfig+0x112>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	4a1f      	ldr	r2, [pc, #124]	@ (800e134 <TIM_OC1_SetConfig+0x174>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d00b      	beq.n	800e0d2 <TIM_OC1_SetConfig+0x112>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	4a1e      	ldr	r2, [pc, #120]	@ (800e138 <TIM_OC1_SetConfig+0x178>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d007      	beq.n	800e0d2 <TIM_OC1_SetConfig+0x112>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	4a1d      	ldr	r2, [pc, #116]	@ (800e13c <TIM_OC1_SetConfig+0x17c>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d003      	beq.n	800e0d2 <TIM_OC1_SetConfig+0x112>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	4a1c      	ldr	r2, [pc, #112]	@ (800e140 <TIM_OC1_SetConfig+0x180>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d111      	bne.n	800e0f6 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e0d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e0e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	695b      	ldr	r3, [r3, #20]
 800e0e6:	693a      	ldr	r2, [r7, #16]
 800e0e8:	4313      	orrs	r3, r2
 800e0ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	699b      	ldr	r3, [r3, #24]
 800e0f0:	693a      	ldr	r2, [r7, #16]
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	693a      	ldr	r2, [r7, #16]
 800e0fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	68fa      	ldr	r2, [r7, #12]
 800e100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	685a      	ldr	r2, [r3, #4]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	697a      	ldr	r2, [r7, #20]
 800e10e:	621a      	str	r2, [r3, #32]
}
 800e110:	bf00      	nop
 800e112:	371c      	adds	r7, #28
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr
 800e11c:	40012c00 	.word	0x40012c00
 800e120:	50012c00 	.word	0x50012c00
 800e124:	40013400 	.word	0x40013400
 800e128:	50013400 	.word	0x50013400
 800e12c:	40014000 	.word	0x40014000
 800e130:	50014000 	.word	0x50014000
 800e134:	40014400 	.word	0x40014400
 800e138:	50014400 	.word	0x50014400
 800e13c:	40014800 	.word	0x40014800
 800e140:	50014800 	.word	0x50014800

0800e144 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e144:	b480      	push	{r7}
 800e146:	b087      	sub	sp, #28
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6a1b      	ldr	r3, [r3, #32]
 800e152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a1b      	ldr	r3, [r3, #32]
 800e158:	f023 0210 	bic.w	r2, r3, #16
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	699b      	ldr	r3, [r3, #24]
 800e16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e172:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e17e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	021b      	lsls	r3, r3, #8
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	4313      	orrs	r3, r2
 800e18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	f023 0320 	bic.w	r3, r3, #32
 800e192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	689b      	ldr	r3, [r3, #8]
 800e198:	011b      	lsls	r3, r3, #4
 800e19a:	697a      	ldr	r2, [r7, #20]
 800e19c:	4313      	orrs	r3, r2
 800e19e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	4a36      	ldr	r2, [pc, #216]	@ (800e27c <TIM_OC2_SetConfig+0x138>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d00b      	beq.n	800e1c0 <TIM_OC2_SetConfig+0x7c>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4a35      	ldr	r2, [pc, #212]	@ (800e280 <TIM_OC2_SetConfig+0x13c>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d007      	beq.n	800e1c0 <TIM_OC2_SetConfig+0x7c>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	4a34      	ldr	r2, [pc, #208]	@ (800e284 <TIM_OC2_SetConfig+0x140>)
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d003      	beq.n	800e1c0 <TIM_OC2_SetConfig+0x7c>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	4a33      	ldr	r2, [pc, #204]	@ (800e288 <TIM_OC2_SetConfig+0x144>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d10d      	bne.n	800e1dc <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	011b      	lsls	r3, r3, #4
 800e1ce:	697a      	ldr	r2, [r7, #20]
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	4a27      	ldr	r2, [pc, #156]	@ (800e27c <TIM_OC2_SetConfig+0x138>)
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d023      	beq.n	800e22c <TIM_OC2_SetConfig+0xe8>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	4a26      	ldr	r2, [pc, #152]	@ (800e280 <TIM_OC2_SetConfig+0x13c>)
 800e1e8:	4293      	cmp	r3, r2
 800e1ea:	d01f      	beq.n	800e22c <TIM_OC2_SetConfig+0xe8>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	4a25      	ldr	r2, [pc, #148]	@ (800e284 <TIM_OC2_SetConfig+0x140>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d01b      	beq.n	800e22c <TIM_OC2_SetConfig+0xe8>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	4a24      	ldr	r2, [pc, #144]	@ (800e288 <TIM_OC2_SetConfig+0x144>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d017      	beq.n	800e22c <TIM_OC2_SetConfig+0xe8>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	4a23      	ldr	r2, [pc, #140]	@ (800e28c <TIM_OC2_SetConfig+0x148>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d013      	beq.n	800e22c <TIM_OC2_SetConfig+0xe8>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4a22      	ldr	r2, [pc, #136]	@ (800e290 <TIM_OC2_SetConfig+0x14c>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d00f      	beq.n	800e22c <TIM_OC2_SetConfig+0xe8>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4a21      	ldr	r2, [pc, #132]	@ (800e294 <TIM_OC2_SetConfig+0x150>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d00b      	beq.n	800e22c <TIM_OC2_SetConfig+0xe8>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	4a20      	ldr	r2, [pc, #128]	@ (800e298 <TIM_OC2_SetConfig+0x154>)
 800e218:	4293      	cmp	r3, r2
 800e21a:	d007      	beq.n	800e22c <TIM_OC2_SetConfig+0xe8>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	4a1f      	ldr	r2, [pc, #124]	@ (800e29c <TIM_OC2_SetConfig+0x158>)
 800e220:	4293      	cmp	r3, r2
 800e222:	d003      	beq.n	800e22c <TIM_OC2_SetConfig+0xe8>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	4a1e      	ldr	r2, [pc, #120]	@ (800e2a0 <TIM_OC2_SetConfig+0x15c>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d113      	bne.n	800e254 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e23a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	695b      	ldr	r3, [r3, #20]
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	693a      	ldr	r2, [r7, #16]
 800e244:	4313      	orrs	r3, r2
 800e246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	699b      	ldr	r3, [r3, #24]
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	693a      	ldr	r2, [r7, #16]
 800e250:	4313      	orrs	r3, r2
 800e252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	693a      	ldr	r2, [r7, #16]
 800e258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	685a      	ldr	r2, [r3, #4]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	697a      	ldr	r2, [r7, #20]
 800e26c:	621a      	str	r2, [r3, #32]
}
 800e26e:	bf00      	nop
 800e270:	371c      	adds	r7, #28
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop
 800e27c:	40012c00 	.word	0x40012c00
 800e280:	50012c00 	.word	0x50012c00
 800e284:	40013400 	.word	0x40013400
 800e288:	50013400 	.word	0x50013400
 800e28c:	40014000 	.word	0x40014000
 800e290:	50014000 	.word	0x50014000
 800e294:	40014400 	.word	0x40014400
 800e298:	50014400 	.word	0x50014400
 800e29c:	40014800 	.word	0x40014800
 800e2a0:	50014800 	.word	0x50014800

0800e2a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b087      	sub	sp, #28
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a1b      	ldr	r3, [r3, #32]
 800e2b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6a1b      	ldr	r3, [r3, #32]
 800e2b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	69db      	ldr	r3, [r3, #28]
 800e2ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e2d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f023 0303 	bic.w	r3, r3, #3
 800e2de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	68fa      	ldr	r2, [r7, #12]
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e2f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	689b      	ldr	r3, [r3, #8]
 800e2f6:	021b      	lsls	r3, r3, #8
 800e2f8:	697a      	ldr	r2, [r7, #20]
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4a35      	ldr	r2, [pc, #212]	@ (800e3d8 <TIM_OC3_SetConfig+0x134>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d00b      	beq.n	800e31e <TIM_OC3_SetConfig+0x7a>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	4a34      	ldr	r2, [pc, #208]	@ (800e3dc <TIM_OC3_SetConfig+0x138>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d007      	beq.n	800e31e <TIM_OC3_SetConfig+0x7a>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	4a33      	ldr	r2, [pc, #204]	@ (800e3e0 <TIM_OC3_SetConfig+0x13c>)
 800e312:	4293      	cmp	r3, r2
 800e314:	d003      	beq.n	800e31e <TIM_OC3_SetConfig+0x7a>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	4a32      	ldr	r2, [pc, #200]	@ (800e3e4 <TIM_OC3_SetConfig+0x140>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d10d      	bne.n	800e33a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e324:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	021b      	lsls	r3, r3, #8
 800e32c:	697a      	ldr	r2, [r7, #20]
 800e32e:	4313      	orrs	r3, r2
 800e330:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e338:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	4a26      	ldr	r2, [pc, #152]	@ (800e3d8 <TIM_OC3_SetConfig+0x134>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d023      	beq.n	800e38a <TIM_OC3_SetConfig+0xe6>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	4a25      	ldr	r2, [pc, #148]	@ (800e3dc <TIM_OC3_SetConfig+0x138>)
 800e346:	4293      	cmp	r3, r2
 800e348:	d01f      	beq.n	800e38a <TIM_OC3_SetConfig+0xe6>
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4a24      	ldr	r2, [pc, #144]	@ (800e3e0 <TIM_OC3_SetConfig+0x13c>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d01b      	beq.n	800e38a <TIM_OC3_SetConfig+0xe6>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4a23      	ldr	r2, [pc, #140]	@ (800e3e4 <TIM_OC3_SetConfig+0x140>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d017      	beq.n	800e38a <TIM_OC3_SetConfig+0xe6>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4a22      	ldr	r2, [pc, #136]	@ (800e3e8 <TIM_OC3_SetConfig+0x144>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d013      	beq.n	800e38a <TIM_OC3_SetConfig+0xe6>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	4a21      	ldr	r2, [pc, #132]	@ (800e3ec <TIM_OC3_SetConfig+0x148>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d00f      	beq.n	800e38a <TIM_OC3_SetConfig+0xe6>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	4a20      	ldr	r2, [pc, #128]	@ (800e3f0 <TIM_OC3_SetConfig+0x14c>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d00b      	beq.n	800e38a <TIM_OC3_SetConfig+0xe6>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	4a1f      	ldr	r2, [pc, #124]	@ (800e3f4 <TIM_OC3_SetConfig+0x150>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d007      	beq.n	800e38a <TIM_OC3_SetConfig+0xe6>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	4a1e      	ldr	r2, [pc, #120]	@ (800e3f8 <TIM_OC3_SetConfig+0x154>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d003      	beq.n	800e38a <TIM_OC3_SetConfig+0xe6>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	4a1d      	ldr	r2, [pc, #116]	@ (800e3fc <TIM_OC3_SetConfig+0x158>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d113      	bne.n	800e3b2 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	695b      	ldr	r3, [r3, #20]
 800e39e:	011b      	lsls	r3, r3, #4
 800e3a0:	693a      	ldr	r2, [r7, #16]
 800e3a2:	4313      	orrs	r3, r2
 800e3a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	699b      	ldr	r3, [r3, #24]
 800e3aa:	011b      	lsls	r3, r3, #4
 800e3ac:	693a      	ldr	r2, [r7, #16]
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	693a      	ldr	r2, [r7, #16]
 800e3b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	68fa      	ldr	r2, [r7, #12]
 800e3bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	685a      	ldr	r2, [r3, #4]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	697a      	ldr	r2, [r7, #20]
 800e3ca:	621a      	str	r2, [r3, #32]
}
 800e3cc:	bf00      	nop
 800e3ce:	371c      	adds	r7, #28
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr
 800e3d8:	40012c00 	.word	0x40012c00
 800e3dc:	50012c00 	.word	0x50012c00
 800e3e0:	40013400 	.word	0x40013400
 800e3e4:	50013400 	.word	0x50013400
 800e3e8:	40014000 	.word	0x40014000
 800e3ec:	50014000 	.word	0x50014000
 800e3f0:	40014400 	.word	0x40014400
 800e3f4:	50014400 	.word	0x50014400
 800e3f8:	40014800 	.word	0x40014800
 800e3fc:	50014800 	.word	0x50014800

0800e400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e400:	b480      	push	{r7}
 800e402:	b087      	sub	sp, #28
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6a1b      	ldr	r3, [r3, #32]
 800e40e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6a1b      	ldr	r3, [r3, #32]
 800e414:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	685b      	ldr	r3, [r3, #4]
 800e420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	69db      	ldr	r3, [r3, #28]
 800e426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e42e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e43a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	021b      	lsls	r3, r3, #8
 800e442:	68fa      	ldr	r2, [r7, #12]
 800e444:	4313      	orrs	r3, r2
 800e446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e44e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	689b      	ldr	r3, [r3, #8]
 800e454:	031b      	lsls	r3, r3, #12
 800e456:	697a      	ldr	r2, [r7, #20]
 800e458:	4313      	orrs	r3, r2
 800e45a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	4a36      	ldr	r2, [pc, #216]	@ (800e538 <TIM_OC4_SetConfig+0x138>)
 800e460:	4293      	cmp	r3, r2
 800e462:	d00b      	beq.n	800e47c <TIM_OC4_SetConfig+0x7c>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	4a35      	ldr	r2, [pc, #212]	@ (800e53c <TIM_OC4_SetConfig+0x13c>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d007      	beq.n	800e47c <TIM_OC4_SetConfig+0x7c>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	4a34      	ldr	r2, [pc, #208]	@ (800e540 <TIM_OC4_SetConfig+0x140>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d003      	beq.n	800e47c <TIM_OC4_SetConfig+0x7c>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4a33      	ldr	r2, [pc, #204]	@ (800e544 <TIM_OC4_SetConfig+0x144>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d10d      	bne.n	800e498 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	031b      	lsls	r3, r3, #12
 800e48a:	697a      	ldr	r2, [r7, #20]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e496:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4a27      	ldr	r2, [pc, #156]	@ (800e538 <TIM_OC4_SetConfig+0x138>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d023      	beq.n	800e4e8 <TIM_OC4_SetConfig+0xe8>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a26      	ldr	r2, [pc, #152]	@ (800e53c <TIM_OC4_SetConfig+0x13c>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d01f      	beq.n	800e4e8 <TIM_OC4_SetConfig+0xe8>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a25      	ldr	r2, [pc, #148]	@ (800e540 <TIM_OC4_SetConfig+0x140>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d01b      	beq.n	800e4e8 <TIM_OC4_SetConfig+0xe8>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a24      	ldr	r2, [pc, #144]	@ (800e544 <TIM_OC4_SetConfig+0x144>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d017      	beq.n	800e4e8 <TIM_OC4_SetConfig+0xe8>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4a23      	ldr	r2, [pc, #140]	@ (800e548 <TIM_OC4_SetConfig+0x148>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d013      	beq.n	800e4e8 <TIM_OC4_SetConfig+0xe8>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	4a22      	ldr	r2, [pc, #136]	@ (800e54c <TIM_OC4_SetConfig+0x14c>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d00f      	beq.n	800e4e8 <TIM_OC4_SetConfig+0xe8>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	4a21      	ldr	r2, [pc, #132]	@ (800e550 <TIM_OC4_SetConfig+0x150>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d00b      	beq.n	800e4e8 <TIM_OC4_SetConfig+0xe8>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	4a20      	ldr	r2, [pc, #128]	@ (800e554 <TIM_OC4_SetConfig+0x154>)
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	d007      	beq.n	800e4e8 <TIM_OC4_SetConfig+0xe8>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4a1f      	ldr	r2, [pc, #124]	@ (800e558 <TIM_OC4_SetConfig+0x158>)
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	d003      	beq.n	800e4e8 <TIM_OC4_SetConfig+0xe8>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	4a1e      	ldr	r2, [pc, #120]	@ (800e55c <TIM_OC4_SetConfig+0x15c>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d113      	bne.n	800e510 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e4ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e4f0:	693b      	ldr	r3, [r7, #16]
 800e4f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e4f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	695b      	ldr	r3, [r3, #20]
 800e4fc:	019b      	lsls	r3, r3, #6
 800e4fe:	693a      	ldr	r2, [r7, #16]
 800e500:	4313      	orrs	r3, r2
 800e502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	699b      	ldr	r3, [r3, #24]
 800e508:	019b      	lsls	r3, r3, #6
 800e50a:	693a      	ldr	r2, [r7, #16]
 800e50c:	4313      	orrs	r3, r2
 800e50e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	693a      	ldr	r2, [r7, #16]
 800e514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	68fa      	ldr	r2, [r7, #12]
 800e51a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	685a      	ldr	r2, [r3, #4]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	697a      	ldr	r2, [r7, #20]
 800e528:	621a      	str	r2, [r3, #32]
}
 800e52a:	bf00      	nop
 800e52c:	371c      	adds	r7, #28
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	40012c00 	.word	0x40012c00
 800e53c:	50012c00 	.word	0x50012c00
 800e540:	40013400 	.word	0x40013400
 800e544:	50013400 	.word	0x50013400
 800e548:	40014000 	.word	0x40014000
 800e54c:	50014000 	.word	0x50014000
 800e550:	40014400 	.word	0x40014400
 800e554:	50014400 	.word	0x50014400
 800e558:	40014800 	.word	0x40014800
 800e55c:	50014800 	.word	0x50014800

0800e560 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e560:	b480      	push	{r7}
 800e562:	b087      	sub	sp, #28
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a1b      	ldr	r3, [r3, #32]
 800e56e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6a1b      	ldr	r3, [r3, #32]
 800e574:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e58e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	68fa      	ldr	r2, [r7, #12]
 800e59a:	4313      	orrs	r3, r2
 800e59c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e5a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	689b      	ldr	r3, [r3, #8]
 800e5aa:	041b      	lsls	r3, r3, #16
 800e5ac:	693a      	ldr	r2, [r7, #16]
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	4a21      	ldr	r2, [pc, #132]	@ (800e63c <TIM_OC5_SetConfig+0xdc>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d023      	beq.n	800e602 <TIM_OC5_SetConfig+0xa2>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4a20      	ldr	r2, [pc, #128]	@ (800e640 <TIM_OC5_SetConfig+0xe0>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d01f      	beq.n	800e602 <TIM_OC5_SetConfig+0xa2>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4a1f      	ldr	r2, [pc, #124]	@ (800e644 <TIM_OC5_SetConfig+0xe4>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d01b      	beq.n	800e602 <TIM_OC5_SetConfig+0xa2>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	4a1e      	ldr	r2, [pc, #120]	@ (800e648 <TIM_OC5_SetConfig+0xe8>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d017      	beq.n	800e602 <TIM_OC5_SetConfig+0xa2>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	4a1d      	ldr	r2, [pc, #116]	@ (800e64c <TIM_OC5_SetConfig+0xec>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d013      	beq.n	800e602 <TIM_OC5_SetConfig+0xa2>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4a1c      	ldr	r2, [pc, #112]	@ (800e650 <TIM_OC5_SetConfig+0xf0>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d00f      	beq.n	800e602 <TIM_OC5_SetConfig+0xa2>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	4a1b      	ldr	r2, [pc, #108]	@ (800e654 <TIM_OC5_SetConfig+0xf4>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d00b      	beq.n	800e602 <TIM_OC5_SetConfig+0xa2>
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	4a1a      	ldr	r2, [pc, #104]	@ (800e658 <TIM_OC5_SetConfig+0xf8>)
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d007      	beq.n	800e602 <TIM_OC5_SetConfig+0xa2>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	4a19      	ldr	r2, [pc, #100]	@ (800e65c <TIM_OC5_SetConfig+0xfc>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d003      	beq.n	800e602 <TIM_OC5_SetConfig+0xa2>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	4a18      	ldr	r2, [pc, #96]	@ (800e660 <TIM_OC5_SetConfig+0x100>)
 800e5fe:	4293      	cmp	r3, r2
 800e600:	d109      	bne.n	800e616 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e608:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	695b      	ldr	r3, [r3, #20]
 800e60e:	021b      	lsls	r3, r3, #8
 800e610:	697a      	ldr	r2, [r7, #20]
 800e612:	4313      	orrs	r3, r2
 800e614:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	697a      	ldr	r2, [r7, #20]
 800e61a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	685a      	ldr	r2, [r3, #4]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	693a      	ldr	r2, [r7, #16]
 800e62e:	621a      	str	r2, [r3, #32]
}
 800e630:	bf00      	nop
 800e632:	371c      	adds	r7, #28
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr
 800e63c:	40012c00 	.word	0x40012c00
 800e640:	50012c00 	.word	0x50012c00
 800e644:	40013400 	.word	0x40013400
 800e648:	50013400 	.word	0x50013400
 800e64c:	40014000 	.word	0x40014000
 800e650:	50014000 	.word	0x50014000
 800e654:	40014400 	.word	0x40014400
 800e658:	50014400 	.word	0x50014400
 800e65c:	40014800 	.word	0x40014800
 800e660:	50014800 	.word	0x50014800

0800e664 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e664:	b480      	push	{r7}
 800e666:	b087      	sub	sp, #28
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6a1b      	ldr	r3, [r3, #32]
 800e672:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6a1b      	ldr	r3, [r3, #32]
 800e678:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	021b      	lsls	r3, r3, #8
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e6aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	689b      	ldr	r3, [r3, #8]
 800e6b0:	051b      	lsls	r3, r3, #20
 800e6b2:	693a      	ldr	r2, [r7, #16]
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4a22      	ldr	r2, [pc, #136]	@ (800e744 <TIM_OC6_SetConfig+0xe0>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d023      	beq.n	800e708 <TIM_OC6_SetConfig+0xa4>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	4a21      	ldr	r2, [pc, #132]	@ (800e748 <TIM_OC6_SetConfig+0xe4>)
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	d01f      	beq.n	800e708 <TIM_OC6_SetConfig+0xa4>
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4a20      	ldr	r2, [pc, #128]	@ (800e74c <TIM_OC6_SetConfig+0xe8>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d01b      	beq.n	800e708 <TIM_OC6_SetConfig+0xa4>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	4a1f      	ldr	r2, [pc, #124]	@ (800e750 <TIM_OC6_SetConfig+0xec>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d017      	beq.n	800e708 <TIM_OC6_SetConfig+0xa4>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a1e      	ldr	r2, [pc, #120]	@ (800e754 <TIM_OC6_SetConfig+0xf0>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d013      	beq.n	800e708 <TIM_OC6_SetConfig+0xa4>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	4a1d      	ldr	r2, [pc, #116]	@ (800e758 <TIM_OC6_SetConfig+0xf4>)
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	d00f      	beq.n	800e708 <TIM_OC6_SetConfig+0xa4>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	4a1c      	ldr	r2, [pc, #112]	@ (800e75c <TIM_OC6_SetConfig+0xf8>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d00b      	beq.n	800e708 <TIM_OC6_SetConfig+0xa4>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	4a1b      	ldr	r2, [pc, #108]	@ (800e760 <TIM_OC6_SetConfig+0xfc>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d007      	beq.n	800e708 <TIM_OC6_SetConfig+0xa4>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	4a1a      	ldr	r2, [pc, #104]	@ (800e764 <TIM_OC6_SetConfig+0x100>)
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d003      	beq.n	800e708 <TIM_OC6_SetConfig+0xa4>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4a19      	ldr	r2, [pc, #100]	@ (800e768 <TIM_OC6_SetConfig+0x104>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d109      	bne.n	800e71c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e70e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	695b      	ldr	r3, [r3, #20]
 800e714:	029b      	lsls	r3, r3, #10
 800e716:	697a      	ldr	r2, [r7, #20]
 800e718:	4313      	orrs	r3, r2
 800e71a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	697a      	ldr	r2, [r7, #20]
 800e720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	68fa      	ldr	r2, [r7, #12]
 800e726:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	685a      	ldr	r2, [r3, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	693a      	ldr	r2, [r7, #16]
 800e734:	621a      	str	r2, [r3, #32]
}
 800e736:	bf00      	nop
 800e738:	371c      	adds	r7, #28
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr
 800e742:	bf00      	nop
 800e744:	40012c00 	.word	0x40012c00
 800e748:	50012c00 	.word	0x50012c00
 800e74c:	40013400 	.word	0x40013400
 800e750:	50013400 	.word	0x50013400
 800e754:	40014000 	.word	0x40014000
 800e758:	50014000 	.word	0x50014000
 800e75c:	40014400 	.word	0x40014400
 800e760:	50014400 	.word	0x50014400
 800e764:	40014800 	.word	0x40014800
 800e768:	50014800 	.word	0x50014800

0800e76c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b087      	sub	sp, #28
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	6a1b      	ldr	r3, [r3, #32]
 800e77c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	6a1b      	ldr	r3, [r3, #32]
 800e782:	f023 0201 	bic.w	r2, r3, #1
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	699b      	ldr	r3, [r3, #24]
 800e78e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	011b      	lsls	r3, r3, #4
 800e79c:	693a      	ldr	r2, [r7, #16]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f023 030a 	bic.w	r3, r3, #10
 800e7a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e7aa:	697a      	ldr	r2, [r7, #20]
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	693a      	ldr	r2, [r7, #16]
 800e7b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	697a      	ldr	r2, [r7, #20]
 800e7bc:	621a      	str	r2, [r3, #32]
}
 800e7be:	bf00      	nop
 800e7c0:	371c      	adds	r7, #28
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr

0800e7ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7ca:	b480      	push	{r7}
 800e7cc:	b087      	sub	sp, #28
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	60f8      	str	r0, [r7, #12]
 800e7d2:	60b9      	str	r1, [r7, #8]
 800e7d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6a1b      	ldr	r3, [r3, #32]
 800e7da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6a1b      	ldr	r3, [r3, #32]
 800e7e0:	f023 0210 	bic.w	r2, r3, #16
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	699b      	ldr	r3, [r3, #24]
 800e7ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e7f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	031b      	lsls	r3, r3, #12
 800e7fa:	693a      	ldr	r2, [r7, #16]
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e806:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	011b      	lsls	r3, r3, #4
 800e80c:	697a      	ldr	r2, [r7, #20]
 800e80e:	4313      	orrs	r3, r2
 800e810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	693a      	ldr	r2, [r7, #16]
 800e816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	697a      	ldr	r2, [r7, #20]
 800e81c:	621a      	str	r2, [r3, #32]
}
 800e81e:	bf00      	nop
 800e820:	371c      	adds	r7, #28
 800e822:	46bd      	mov	sp, r7
 800e824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e828:	4770      	bx	lr

0800e82a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e82a:	b480      	push	{r7}
 800e82c:	b085      	sub	sp, #20
 800e82e:	af00      	add	r7, sp, #0
 800e830:	6078      	str	r0, [r7, #4]
 800e832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	689b      	ldr	r3, [r3, #8]
 800e838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	4313      	orrs	r3, r2
 800e84c:	f043 0307 	orr.w	r3, r3, #7
 800e850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	68fa      	ldr	r2, [r7, #12]
 800e856:	609a      	str	r2, [r3, #8]
}
 800e858:	bf00      	nop
 800e85a:	3714      	adds	r7, #20
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e864:	b480      	push	{r7}
 800e866:	b087      	sub	sp, #28
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
 800e870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	689b      	ldr	r3, [r3, #8]
 800e876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e878:	697b      	ldr	r3, [r7, #20]
 800e87a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e87e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	021a      	lsls	r2, r3, #8
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	431a      	orrs	r2, r3
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	4313      	orrs	r3, r2
 800e88c:	697a      	ldr	r2, [r7, #20]
 800e88e:	4313      	orrs	r3, r2
 800e890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	697a      	ldr	r2, [r7, #20]
 800e896:	609a      	str	r2, [r3, #8]
}
 800e898:	bf00      	nop
 800e89a:	371c      	adds	r7, #28
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr

0800e8a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b087      	sub	sp, #28
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	60f8      	str	r0, [r7, #12]
 800e8ac:	60b9      	str	r1, [r7, #8]
 800e8ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	f003 031f 	and.w	r3, r3, #31
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	6a1a      	ldr	r2, [r3, #32]
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	43db      	mvns	r3, r3
 800e8c6:	401a      	ands	r2, r3
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6a1a      	ldr	r2, [r3, #32]
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	f003 031f 	and.w	r3, r3, #31
 800e8d6:	6879      	ldr	r1, [r7, #4]
 800e8d8:	fa01 f303 	lsl.w	r3, r1, r3
 800e8dc:	431a      	orrs	r2, r3
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	621a      	str	r2, [r3, #32]
}
 800e8e2:	bf00      	nop
 800e8e4:	371c      	adds	r7, #28
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr
	...

0800e8f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b085      	sub	sp, #20
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e900:	2b01      	cmp	r3, #1
 800e902:	d101      	bne.n	800e908 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e904:	2302      	movs	r3, #2
 800e906:	e0a1      	b.n	800ea4c <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2201      	movs	r2, #1
 800e90c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2202      	movs	r2, #2
 800e914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	689b      	ldr	r3, [r3, #8]
 800e926:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4a4a      	ldr	r2, [pc, #296]	@ (800ea58 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d00e      	beq.n	800e950 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a49      	ldr	r2, [pc, #292]	@ (800ea5c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d009      	beq.n	800e950 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a47      	ldr	r2, [pc, #284]	@ (800ea60 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d004      	beq.n	800e950 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a46      	ldr	r2, [pc, #280]	@ (800ea64 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800e94c:	4293      	cmp	r3, r2
 800e94e:	d108      	bne.n	800e962 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e956:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	4313      	orrs	r3, r2
 800e960:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800e968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e96c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	68fa      	ldr	r2, [r7, #12]
 800e974:	4313      	orrs	r3, r2
 800e976:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4a34      	ldr	r2, [pc, #208]	@ (800ea58 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d04a      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	4a33      	ldr	r2, [pc, #204]	@ (800ea5c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d045      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e99c:	d040      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e9a6:	d03b      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	4a2e      	ldr	r2, [pc, #184]	@ (800ea68 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	d036      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4a2d      	ldr	r2, [pc, #180]	@ (800ea6c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d031      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a2b      	ldr	r2, [pc, #172]	@ (800ea70 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d02c      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	4a2a      	ldr	r2, [pc, #168]	@ (800ea74 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d027      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a28      	ldr	r2, [pc, #160]	@ (800ea78 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d022      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4a27      	ldr	r2, [pc, #156]	@ (800ea7c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d01d      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4a1d      	ldr	r2, [pc, #116]	@ (800ea60 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d018      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	4a1c      	ldr	r2, [pc, #112]	@ (800ea64 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	d013      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a20      	ldr	r2, [pc, #128]	@ (800ea80 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d00e      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	4a1f      	ldr	r2, [pc, #124]	@ (800ea84 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d009      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4a1d      	ldr	r2, [pc, #116]	@ (800ea88 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d004      	beq.n	800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a1c      	ldr	r2, [pc, #112]	@ (800ea8c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d10c      	bne.n	800ea3a <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	689b      	ldr	r3, [r3, #8]
 800ea2c:	68ba      	ldr	r2, [r7, #8]
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	68ba      	ldr	r2, [r7, #8]
 800ea38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ea4a:	2300      	movs	r3, #0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3714      	adds	r7, #20
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	40012c00 	.word	0x40012c00
 800ea5c:	50012c00 	.word	0x50012c00
 800ea60:	40013400 	.word	0x40013400
 800ea64:	50013400 	.word	0x50013400
 800ea68:	40000400 	.word	0x40000400
 800ea6c:	50000400 	.word	0x50000400
 800ea70:	40000800 	.word	0x40000800
 800ea74:	50000800 	.word	0x50000800
 800ea78:	40000c00 	.word	0x40000c00
 800ea7c:	50000c00 	.word	0x50000c00
 800ea80:	40001800 	.word	0x40001800
 800ea84:	50001800 	.word	0x50001800
 800ea88:	40014000 	.word	0x40014000
 800ea8c:	50014000 	.word	0x50014000

0800ea90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b085      	sub	sp, #20
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d101      	bne.n	800eaac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eaa8:	2302      	movs	r3, #2
 800eaaa:	e07d      	b.n	800eba8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2201      	movs	r2, #1
 800eab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	68db      	ldr	r3, [r3, #12]
 800eabe:	4313      	orrs	r3, r2
 800eac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	689b      	ldr	r3, [r3, #8]
 800eacc:	4313      	orrs	r3, r2
 800eace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	685b      	ldr	r3, [r3, #4]
 800eada:	4313      	orrs	r3, r2
 800eadc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4313      	orrs	r3, r2
 800eaea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	691b      	ldr	r3, [r3, #16]
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	695b      	ldr	r3, [r3, #20]
 800eb04:	4313      	orrs	r3, r2
 800eb06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb12:	4313      	orrs	r3, r2
 800eb14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	699b      	ldr	r3, [r3, #24]
 800eb20:	041b      	lsls	r3, r3, #16
 800eb22:	4313      	orrs	r3, r2
 800eb24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	69db      	ldr	r3, [r3, #28]
 800eb30:	4313      	orrs	r3, r2
 800eb32:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a1e      	ldr	r2, [pc, #120]	@ (800ebb4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d00e      	beq.n	800eb5c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a1d      	ldr	r2, [pc, #116]	@ (800ebb8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d009      	beq.n	800eb5c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a1b      	ldr	r2, [pc, #108]	@ (800ebbc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d004      	beq.n	800eb5c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	4a1a      	ldr	r2, [pc, #104]	@ (800ebc0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d11c      	bne.n	800eb96 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb66:	051b      	lsls	r3, r3, #20
 800eb68:	4313      	orrs	r3, r2
 800eb6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	6a1b      	ldr	r3, [r3, #32]
 800eb76:	4313      	orrs	r3, r2
 800eb78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb84:	4313      	orrs	r3, r2
 800eb86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb92:	4313      	orrs	r3, r2
 800eb94:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eba6:	2300      	movs	r3, #0
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3714      	adds	r7, #20
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr
 800ebb4:	40012c00 	.word	0x40012c00
 800ebb8:	50012c00 	.word	0x50012c00
 800ebbc:	40013400 	.word	0x40013400
 800ebc0:	50013400 	.word	0x50013400

0800ebc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ebcc:	bf00      	nop
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ebe0:	bf00      	nop
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr

0800ebec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ebf4:	bf00      	nop
 800ebf6:	370c      	adds	r7, #12
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ec08:	bf00      	nop
 800ec0a:	370c      	adds	r7, #12
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b083      	sub	sp, #12
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ec1c:	bf00      	nop
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ec30:	bf00      	nop
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ec44:	bf00      	nop
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d101      	bne.n	800ec62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e042      	b.n	800ece8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d106      	bne.n	800ec7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7f4 f905 	bl	8002e84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2224      	movs	r2, #36	@ 0x24
 800ec7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f022 0201 	bic.w	r2, r2, #1
 800ec90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d002      	beq.n	800eca0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f000 fdf4 	bl	800f888 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 fc03 	bl	800f4ac <UART_SetConfig>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d101      	bne.n	800ecb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ecac:	2301      	movs	r3, #1
 800ecae:	e01b      	b.n	800ece8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	685a      	ldr	r2, [r3, #4]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ecbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	689a      	ldr	r2, [r3, #8]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ecce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	681a      	ldr	r2, [r3, #0]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f042 0201 	orr.w	r2, r2, #1
 800ecde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f000 fe73 	bl	800f9cc <UART_CheckIdleState>
 800ece6:	4603      	mov	r3, r0
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}

0800ecf0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b08c      	sub	sp, #48	@ 0x30
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800ecfe:	88fb      	ldrh	r3, [r7, #6]
 800ed00:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed08:	2b20      	cmp	r3, #32
 800ed0a:	f040 80ad 	bne.w	800ee68 <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d002      	beq.n	800ed1a <HAL_UART_Transmit_DMA+0x2a>
 800ed14:	88fb      	ldrh	r3, [r7, #6]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d101      	bne.n	800ed1e <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	e0a5      	b.n	800ee6a <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	88fa      	ldrh	r2, [r7, #6]
 800ed28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	88fa      	ldrh	r2, [r7, #6]
 800ed30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2200      	movs	r2, #0
 800ed38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2221      	movs	r2, #33	@ 0x21
 800ed40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2240      	movs	r2, #64	@ 0x40
 800ed4a:	621a      	str	r2, [r3, #32]

#endif /* USART_DMAREQUESTS_SW_WA */
    if (huart->hdmatx != NULL)
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d06d      	beq.n	800ee30 <HAL_UART_Transmit_DMA+0x140>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed58:	4a46      	ldr	r2, [pc, #280]	@ (800ee74 <HAL_UART_Transmit_DMA+0x184>)
 800ed5a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed60:	4a45      	ldr	r2, [pc, #276]	@ (800ee78 <HAL_UART_Transmit_DMA+0x188>)
 800ed62:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed68:	4a44      	ldr	r2, [pc, #272]	@ (800ee7c <HAL_UART_Transmit_DMA+0x18c>)
 800ed6a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed70:	2200      	movs	r2, #0
 800ed72:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed7c:	d106      	bne.n	800ed8c <HAL_UART_Transmit_DMA+0x9c>
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d102      	bne.n	800ed8c <HAL_UART_Transmit_DMA+0x9c>
      {
        nbByte = Size * 2U;
 800ed86:	88fb      	ldrh	r3, [r7, #6]
 800ed88:	005b      	lsls	r3, r3, #1
 800ed8a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d02d      	beq.n	800edf6 <HAL_UART_Transmit_DMA+0x106>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d024      	beq.n	800edee <HAL_UART_Transmit_DMA+0xfe>
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eda8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d01e      	beq.n	800edee <HAL_UART_Transmit_DMA+0xfe>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800edb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800edba:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800edc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f103 0228 	add.w	r2, r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800edd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7f7 fa13 	bl	800620c <HAL_DMAEx_List_Start_IT>
 800ede6:	4603      	mov	r3, r0
 800ede8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800edec:	e012      	b.n	800ee14 <HAL_UART_Transmit_DMA+0x124>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 800edee:	2301      	movs	r3, #1
 800edf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800edf4:	e00e      	b.n	800ee14 <HAL_UART_Transmit_DMA+0x124>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edfe:	4619      	mov	r1, r3
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	3328      	adds	r3, #40	@ 0x28
 800ee06:	461a      	mov	r2, r3
 800ee08:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ee0a:	f7f6 fcad 	bl	8005768 <HAL_DMA_Start_IT>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }

      if (status != HAL_OK)
 800ee14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d009      	beq.n	800ee30 <HAL_UART_Transmit_DMA+0x140>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2210      	movs	r2, #16
 800ee20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2220      	movs	r2, #32
 800ee28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	e01c      	b.n	800ee6a <HAL_UART_Transmit_DMA+0x17a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	3308      	adds	r3, #8
 800ee36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	e853 3f00 	ldrex	r3, [r3]
 800ee3e:	617b      	str	r3, [r7, #20]
   return(result);
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee46:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	3308      	adds	r3, #8
 800ee4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee50:	627a      	str	r2, [r7, #36]	@ 0x24
 800ee52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee54:	6a39      	ldr	r1, [r7, #32]
 800ee56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee58:	e841 2300 	strex	r3, r2, [r1]
 800ee5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d1e5      	bne.n	800ee30 <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 800ee64:	2300      	movs	r3, #0
 800ee66:	e000      	b.n	800ee6a <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 800ee68:	2302      	movs	r3, #2
  }
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3730      	adds	r7, #48	@ 0x30
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	0800ff3b 	.word	0x0800ff3b
 800ee78:	0800ff9b 	.word	0x0800ff9b
 800ee7c:	08010151 	.word	0x08010151

0800ee80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b0ae      	sub	sp, #184	@ 0xb8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	69db      	ldr	r3, [r3, #28]
 800ee8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eea6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800eeaa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800eeae:	4013      	ands	r3, r2
 800eeb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800eeb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d11b      	bne.n	800eef4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eebc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eec0:	f003 0320 	and.w	r3, r3, #32
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d015      	beq.n	800eef4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eec8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800eecc:	f003 0320 	and.w	r3, r3, #32
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d105      	bne.n	800eee0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eed4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d009      	beq.n	800eef4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	f000 82ac 	beq.w	800f442 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	4798      	blx	r3
      }
      return;
 800eef2:	e2a6      	b.n	800f442 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	f000 80fd 	beq.w	800f0f8 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800eefe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ef02:	4b7a      	ldr	r3, [pc, #488]	@ (800f0ec <HAL_UART_IRQHandler+0x26c>)
 800ef04:	4013      	ands	r3, r2
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d106      	bne.n	800ef18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ef0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ef0e:	4b78      	ldr	r3, [pc, #480]	@ (800f0f0 <HAL_UART_IRQHandler+0x270>)
 800ef10:	4013      	ands	r3, r2
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	f000 80f0 	beq.w	800f0f8 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef1c:	f003 0301 	and.w	r3, r3, #1
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d011      	beq.n	800ef48 <HAL_UART_IRQHandler+0xc8>
 800ef24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ef28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d00b      	beq.n	800ef48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	2201      	movs	r2, #1
 800ef36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef3e:	f043 0201 	orr.w	r2, r3, #1
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef4c:	f003 0302 	and.w	r3, r3, #2
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d011      	beq.n	800ef78 <HAL_UART_IRQHandler+0xf8>
 800ef54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef58:	f003 0301 	and.w	r3, r3, #1
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d00b      	beq.n	800ef78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2202      	movs	r2, #2
 800ef66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef6e:	f043 0204 	orr.w	r2, r3, #4
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef7c:	f003 0304 	and.w	r3, r3, #4
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d011      	beq.n	800efa8 <HAL_UART_IRQHandler+0x128>
 800ef84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef88:	f003 0301 	and.w	r3, r3, #1
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d00b      	beq.n	800efa8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2204      	movs	r2, #4
 800ef96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef9e:	f043 0202 	orr.w	r2, r3, #2
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800efa8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800efac:	f003 0308 	and.w	r3, r3, #8
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d017      	beq.n	800efe4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800efb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800efb8:	f003 0320 	and.w	r3, r3, #32
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d105      	bne.n	800efcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800efc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800efc4:	4b49      	ldr	r3, [pc, #292]	@ (800f0ec <HAL_UART_IRQHandler+0x26c>)
 800efc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00b      	beq.n	800efe4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2208      	movs	r2, #8
 800efd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efda:	f043 0208 	orr.w	r2, r3, #8
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800efe4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800efe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800efec:	2b00      	cmp	r3, #0
 800efee:	d012      	beq.n	800f016 <HAL_UART_IRQHandler+0x196>
 800eff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800eff4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d00c      	beq.n	800f016 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f00c:	f043 0220 	orr.w	r2, r3, #32
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	f000 8212 	beq.w	800f446 <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f022:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f026:	f003 0320 	and.w	r3, r3, #32
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d013      	beq.n	800f056 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f02e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f032:	f003 0320 	and.w	r3, r3, #32
 800f036:	2b00      	cmp	r3, #0
 800f038:	d105      	bne.n	800f046 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f03a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f03e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f042:	2b00      	cmp	r3, #0
 800f044:	d007      	beq.n	800f056 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d003      	beq.n	800f056 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f05c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	689b      	ldr	r3, [r3, #8]
 800f066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f06a:	2b40      	cmp	r3, #64	@ 0x40
 800f06c:	d005      	beq.n	800f07a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f06e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f072:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f076:	2b00      	cmp	r3, #0
 800f078:	d02e      	beq.n	800f0d8 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f000 fef7 	bl	800fe6e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	689b      	ldr	r3, [r3, #8]
 800f086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f08a:	2b40      	cmp	r3, #64	@ 0x40
 800f08c:	d120      	bne.n	800f0d0 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f094:	2b00      	cmp	r3, #0
 800f096:	d017      	beq.n	800f0c8 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f09e:	4a15      	ldr	r2, [pc, #84]	@ (800f0f4 <HAL_UART_IRQHandler+0x274>)
 800f0a0:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7f6 fc3f 	bl	800592c <HAL_DMA_Abort_IT>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d019      	beq.n	800f0e8 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f0c2:	4610      	mov	r0, r2
 800f0c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0c6:	e00f      	b.n	800f0e8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f7f3 f941 	bl	8002350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0ce:	e00b      	b.n	800f0e8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f7f3 f93d 	bl	8002350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0d6:	e007      	b.n	800f0e8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7f3 f939 	bl	8002350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f0e6:	e1ae      	b.n	800f446 <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0e8:	bf00      	nop
    return;
 800f0ea:	e1ac      	b.n	800f446 <HAL_UART_IRQHandler+0x5c6>
 800f0ec:	10000001 	.word	0x10000001
 800f0f0:	04000120 	.word	0x04000120
 800f0f4:	080101d1 	.word	0x080101d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	f040 8142 	bne.w	800f386 <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f102:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f106:	f003 0310 	and.w	r3, r3, #16
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	f000 813b 	beq.w	800f386 <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f110:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f114:	f003 0310 	and.w	r3, r3, #16
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f000 8134 	beq.w	800f386 <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	2210      	movs	r2, #16
 800f124:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f130:	2b40      	cmp	r3, #64	@ 0x40
 800f132:	f040 80aa 	bne.w	800f28a <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f140:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800f144:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f000 8084 	beq.w	800f256 <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f154:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800f158:	429a      	cmp	r2, r3
 800f15a:	d27c      	bcs.n	800f256 <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800f162:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f16c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f16e:	2b81      	cmp	r3, #129	@ 0x81
 800f170:	d060      	beq.n	800f234 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f178:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f17a:	e853 3f00 	ldrex	r3, [r3]
 800f17e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f180:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f182:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f186:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	461a      	mov	r2, r3
 800f190:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f194:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f198:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f19a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f19c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f1a0:	e841 2300 	strex	r3, r2, [r1]
 800f1a4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f1a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d1e2      	bne.n	800f172 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	3308      	adds	r3, #8
 800f1b2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1b6:	e853 3f00 	ldrex	r3, [r3]
 800f1ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f1bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f1be:	f023 0301 	bic.w	r3, r3, #1
 800f1c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	3308      	adds	r3, #8
 800f1cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f1d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f1d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f1d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f1d8:	e841 2300 	strex	r3, r2, [r1]
 800f1dc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f1de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d1e3      	bne.n	800f1ac <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2220      	movs	r2, #32
 800f1e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2200      	movs	r2, #0
 800f1f0:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1fa:	e853 3f00 	ldrex	r3, [r3]
 800f1fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f202:	f023 0310 	bic.w	r3, r3, #16
 800f206:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	461a      	mov	r2, r3
 800f210:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f214:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f216:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f218:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f21a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f21c:	e841 2300 	strex	r3, r2, [r1]
 800f220:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f222:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f224:	2b00      	cmp	r3, #0
 800f226:	d1e4      	bne.n	800f1f2 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f22e:	4618      	mov	r0, r3
 800f230:	f7f6 fb00 	bl	8005834 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2202      	movs	r2, #2
 800f238:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f246:	b29b      	uxth	r3, r3
 800f248:	1ad3      	subs	r3, r2, r3
 800f24a:	b29b      	uxth	r3, r3
 800f24c:	4619      	mov	r1, r3
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7f3 f856 	bl	8002300 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f254:	e0f9      	b.n	800f44a <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f25c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800f260:	429a      	cmp	r2, r3
 800f262:	f040 80f2 	bne.w	800f44a <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f26c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f26e:	2b81      	cmp	r3, #129	@ 0x81
 800f270:	f040 80eb 	bne.w	800f44a <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2202      	movs	r2, #2
 800f278:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f280:	4619      	mov	r1, r3
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f7f3 f83c 	bl	8002300 <HAL_UARTEx_RxEventCallback>
      return;
 800f288:	e0df      	b.n	800f44a <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f296:	b29b      	uxth	r3, r3
 800f298:	1ad3      	subs	r3, r2, r3
 800f29a:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f000 80d1 	beq.w	800f44e <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 800f2ac:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	f000 80cc 	beq.w	800f44e <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2be:	e853 3f00 	ldrex	r3, [r3]
 800f2c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f2ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f2d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f2da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f2de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f2e0:	e841 2300 	strex	r3, r2, [r1]
 800f2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f2e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1e4      	bne.n	800f2b6 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	3308      	adds	r3, #8
 800f2f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f6:	e853 3f00 	ldrex	r3, [r3]
 800f2fa:	623b      	str	r3, [r7, #32]
   return(result);
 800f2fc:	6a3b      	ldr	r3, [r7, #32]
 800f2fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f302:	f023 0301 	bic.w	r3, r3, #1
 800f306:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	3308      	adds	r3, #8
 800f310:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f314:	633a      	str	r2, [r7, #48]	@ 0x30
 800f316:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f318:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f31a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f31c:	e841 2300 	strex	r3, r2, [r1]
 800f320:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f324:	2b00      	cmp	r3, #0
 800f326:	d1e1      	bne.n	800f2ec <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2220      	movs	r2, #32
 800f32c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2200      	movs	r2, #0
 800f33a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	e853 3f00 	ldrex	r3, [r3]
 800f348:	60fb      	str	r3, [r7, #12]
   return(result);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f023 0310 	bic.w	r3, r3, #16
 800f350:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	461a      	mov	r2, r3
 800f35a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f35e:	61fb      	str	r3, [r7, #28]
 800f360:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f362:	69b9      	ldr	r1, [r7, #24]
 800f364:	69fa      	ldr	r2, [r7, #28]
 800f366:	e841 2300 	strex	r3, r2, [r1]
 800f36a:	617b      	str	r3, [r7, #20]
   return(result);
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d1e4      	bne.n	800f33c <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2202      	movs	r2, #2
 800f376:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f378:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 800f37c:	4619      	mov	r1, r3
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7f2 ffbe 	bl	8002300 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f384:	e063      	b.n	800f44e <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f38a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d00e      	beq.n	800f3b0 <HAL_UART_IRQHandler+0x530>
 800f392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d008      	beq.n	800f3b0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f3a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f000 ff4e 	bl	801024a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f3ae:	e051      	b.n	800f454 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f3b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d014      	beq.n	800f3e6 <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f3bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f3c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d105      	bne.n	800f3d4 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f3c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f3cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d008      	beq.n	800f3e6 <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d03a      	beq.n	800f452 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	4798      	blx	r3
    }
    return;
 800f3e4:	e035      	b.n	800f452 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f3e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d009      	beq.n	800f406 <HAL_UART_IRQHandler+0x586>
 800f3f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f3f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d003      	beq.n	800f406 <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fef8 	bl	80101f4 <UART_EndTransmit_IT>
    return;
 800f404:	e026      	b.n	800f454 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f40a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d009      	beq.n	800f426 <HAL_UART_IRQHandler+0x5a6>
 800f412:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f416:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d003      	beq.n	800f426 <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f000 ff27 	bl	8010272 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f424:	e016      	b.n	800f454 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f426:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f42a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d010      	beq.n	800f454 <HAL_UART_IRQHandler+0x5d4>
 800f432:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f436:	2b00      	cmp	r3, #0
 800f438:	da0c      	bge.n	800f454 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 ff0f 	bl	801025e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f440:	e008      	b.n	800f454 <HAL_UART_IRQHandler+0x5d4>
      return;
 800f442:	bf00      	nop
 800f444:	e006      	b.n	800f454 <HAL_UART_IRQHandler+0x5d4>
    return;
 800f446:	bf00      	nop
 800f448:	e004      	b.n	800f454 <HAL_UART_IRQHandler+0x5d4>
      return;
 800f44a:	bf00      	nop
 800f44c:	e002      	b.n	800f454 <HAL_UART_IRQHandler+0x5d4>
      return;
 800f44e:	bf00      	nop
 800f450:	e000      	b.n	800f454 <HAL_UART_IRQHandler+0x5d4>
    return;
 800f452:	bf00      	nop
  }
}
 800f454:	37b8      	adds	r7, #184	@ 0xb8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop

0800f45c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f464:	bf00      	nop
 800f466:	370c      	adds	r7, #12
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f478:	bf00      	nop
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr

0800f484 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f484:	b480      	push	{r7}
 800f486:	b083      	sub	sp, #12
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f48c:	bf00      	nop
 800f48e:	370c      	adds	r7, #12
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f4a0:	bf00      	nop
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f4ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4b0:	b094      	sub	sp, #80	@ 0x50
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800f4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	4b78      	ldr	r3, [pc, #480]	@ (800f6a4 <UART_SetConfig+0x1f8>)
 800f4c2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4c6:	689a      	ldr	r2, [r3, #8]
 800f4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ca:	691b      	ldr	r3, [r3, #16]
 800f4cc:	431a      	orrs	r2, r3
 800f4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4d0:	695b      	ldr	r3, [r3, #20]
 800f4d2:	431a      	orrs	r2, r3
 800f4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4d6:	69db      	ldr	r3, [r3, #28]
 800f4d8:	4313      	orrs	r3, r2
 800f4da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	4971      	ldr	r1, [pc, #452]	@ (800f6a8 <UART_SetConfig+0x1fc>)
 800f4e4:	4019      	ands	r1, r3
 800f4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4e8:	681a      	ldr	r2, [r3, #0]
 800f4ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f4ec:	430b      	orrs	r3, r1
 800f4ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	685b      	ldr	r3, [r3, #4]
 800f4f6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800f4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4fc:	68d9      	ldr	r1, [r3, #12]
 800f4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	ea40 0301 	orr.w	r3, r0, r1
 800f506:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f50a:	699b      	ldr	r3, [r3, #24]
 800f50c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	4b64      	ldr	r3, [pc, #400]	@ (800f6a4 <UART_SetConfig+0x1f8>)
 800f514:	429a      	cmp	r2, r3
 800f516:	d009      	beq.n	800f52c <UART_SetConfig+0x80>
 800f518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	4b63      	ldr	r3, [pc, #396]	@ (800f6ac <UART_SetConfig+0x200>)
 800f51e:	429a      	cmp	r2, r3
 800f520:	d004      	beq.n	800f52c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f524:	6a1a      	ldr	r2, [r3, #32]
 800f526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f528:	4313      	orrs	r3, r2
 800f52a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	689b      	ldr	r3, [r3, #8]
 800f532:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800f536:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800f53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f53c:	681a      	ldr	r2, [r3, #0]
 800f53e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f540:	430b      	orrs	r3, r1
 800f542:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f54a:	f023 000f 	bic.w	r0, r3, #15
 800f54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f550:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	ea40 0301 	orr.w	r3, r0, r1
 800f55a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	4b53      	ldr	r3, [pc, #332]	@ (800f6b0 <UART_SetConfig+0x204>)
 800f562:	429a      	cmp	r2, r3
 800f564:	d102      	bne.n	800f56c <UART_SetConfig+0xc0>
 800f566:	2301      	movs	r3, #1
 800f568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f56a:	e066      	b.n	800f63a <UART_SetConfig+0x18e>
 800f56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	4b50      	ldr	r3, [pc, #320]	@ (800f6b4 <UART_SetConfig+0x208>)
 800f572:	429a      	cmp	r2, r3
 800f574:	d102      	bne.n	800f57c <UART_SetConfig+0xd0>
 800f576:	2302      	movs	r3, #2
 800f578:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f57a:	e05e      	b.n	800f63a <UART_SetConfig+0x18e>
 800f57c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	4b4d      	ldr	r3, [pc, #308]	@ (800f6b8 <UART_SetConfig+0x20c>)
 800f582:	429a      	cmp	r2, r3
 800f584:	d102      	bne.n	800f58c <UART_SetConfig+0xe0>
 800f586:	2304      	movs	r3, #4
 800f588:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f58a:	e056      	b.n	800f63a <UART_SetConfig+0x18e>
 800f58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f58e:	681a      	ldr	r2, [r3, #0]
 800f590:	4b4a      	ldr	r3, [pc, #296]	@ (800f6bc <UART_SetConfig+0x210>)
 800f592:	429a      	cmp	r2, r3
 800f594:	d102      	bne.n	800f59c <UART_SetConfig+0xf0>
 800f596:	2308      	movs	r3, #8
 800f598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f59a:	e04e      	b.n	800f63a <UART_SetConfig+0x18e>
 800f59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f59e:	681a      	ldr	r2, [r3, #0]
 800f5a0:	4b47      	ldr	r3, [pc, #284]	@ (800f6c0 <UART_SetConfig+0x214>)
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d102      	bne.n	800f5ac <UART_SetConfig+0x100>
 800f5a6:	2310      	movs	r3, #16
 800f5a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5aa:	e046      	b.n	800f63a <UART_SetConfig+0x18e>
 800f5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	4b44      	ldr	r3, [pc, #272]	@ (800f6c4 <UART_SetConfig+0x218>)
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d102      	bne.n	800f5bc <UART_SetConfig+0x110>
 800f5b6:	2320      	movs	r3, #32
 800f5b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5ba:	e03e      	b.n	800f63a <UART_SetConfig+0x18e>
 800f5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5be:	681a      	ldr	r2, [r3, #0]
 800f5c0:	4b41      	ldr	r3, [pc, #260]	@ (800f6c8 <UART_SetConfig+0x21c>)
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d102      	bne.n	800f5cc <UART_SetConfig+0x120>
 800f5c6:	2340      	movs	r3, #64	@ 0x40
 800f5c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5ca:	e036      	b.n	800f63a <UART_SetConfig+0x18e>
 800f5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	4b3e      	ldr	r3, [pc, #248]	@ (800f6cc <UART_SetConfig+0x220>)
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d102      	bne.n	800f5dc <UART_SetConfig+0x130>
 800f5d6:	2380      	movs	r3, #128	@ 0x80
 800f5d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5da:	e02e      	b.n	800f63a <UART_SetConfig+0x18e>
 800f5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	4b3b      	ldr	r3, [pc, #236]	@ (800f6d0 <UART_SetConfig+0x224>)
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d103      	bne.n	800f5ee <UART_SetConfig+0x142>
 800f5e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f5ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5ec:	e025      	b.n	800f63a <UART_SetConfig+0x18e>
 800f5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	4b38      	ldr	r3, [pc, #224]	@ (800f6d4 <UART_SetConfig+0x228>)
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d103      	bne.n	800f600 <UART_SetConfig+0x154>
 800f5f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f5fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f5fe:	e01c      	b.n	800f63a <UART_SetConfig+0x18e>
 800f600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	4b34      	ldr	r3, [pc, #208]	@ (800f6d8 <UART_SetConfig+0x22c>)
 800f606:	429a      	cmp	r2, r3
 800f608:	d103      	bne.n	800f612 <UART_SetConfig+0x166>
 800f60a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f60e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f610:	e013      	b.n	800f63a <UART_SetConfig+0x18e>
 800f612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	4b31      	ldr	r3, [pc, #196]	@ (800f6dc <UART_SetConfig+0x230>)
 800f618:	429a      	cmp	r2, r3
 800f61a:	d103      	bne.n	800f624 <UART_SetConfig+0x178>
 800f61c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f620:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f622:	e00a      	b.n	800f63a <UART_SetConfig+0x18e>
 800f624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f626:	681a      	ldr	r2, [r3, #0]
 800f628:	4b1e      	ldr	r3, [pc, #120]	@ (800f6a4 <UART_SetConfig+0x1f8>)
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d103      	bne.n	800f636 <UART_SetConfig+0x18a>
 800f62e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f632:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f634:	e001      	b.n	800f63a <UART_SetConfig+0x18e>
 800f636:	2300      	movs	r3, #0
 800f638:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	4b19      	ldr	r3, [pc, #100]	@ (800f6a4 <UART_SetConfig+0x1f8>)
 800f640:	429a      	cmp	r2, r3
 800f642:	d005      	beq.n	800f650 <UART_SetConfig+0x1a4>
 800f644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	4b18      	ldr	r3, [pc, #96]	@ (800f6ac <UART_SetConfig+0x200>)
 800f64a:	429a      	cmp	r2, r3
 800f64c:	f040 8094 	bne.w	800f778 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800f650:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f652:	2200      	movs	r2, #0
 800f654:	623b      	str	r3, [r7, #32]
 800f656:	627a      	str	r2, [r7, #36]	@ 0x24
 800f658:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800f65c:	f7fa fdfc 	bl	800a258 <HAL_RCCEx_GetPeriphCLKFreq>
 800f660:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800f662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f664:	2b00      	cmp	r3, #0
 800f666:	f000 80f7 	beq.w	800f858 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f66c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f66e:	4a1c      	ldr	r2, [pc, #112]	@ (800f6e0 <UART_SetConfig+0x234>)
 800f670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f674:	461a      	mov	r2, r3
 800f676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f678:	fbb3 f3f2 	udiv	r3, r3, r2
 800f67c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f680:	685a      	ldr	r2, [r3, #4]
 800f682:	4613      	mov	r3, r2
 800f684:	005b      	lsls	r3, r3, #1
 800f686:	4413      	add	r3, r2
 800f688:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d305      	bcc.n	800f69a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f696:	429a      	cmp	r2, r3
 800f698:	d924      	bls.n	800f6e4 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800f69a:	2301      	movs	r3, #1
 800f69c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800f6a0:	e069      	b.n	800f776 <UART_SetConfig+0x2ca>
 800f6a2:	bf00      	nop
 800f6a4:	44002400 	.word	0x44002400
 800f6a8:	cfff69f3 	.word	0xcfff69f3
 800f6ac:	54002400 	.word	0x54002400
 800f6b0:	40013800 	.word	0x40013800
 800f6b4:	40004400 	.word	0x40004400
 800f6b8:	40004800 	.word	0x40004800
 800f6bc:	40004c00 	.word	0x40004c00
 800f6c0:	40005000 	.word	0x40005000
 800f6c4:	40006400 	.word	0x40006400
 800f6c8:	40007800 	.word	0x40007800
 800f6cc:	40007c00 	.word	0x40007c00
 800f6d0:	40008000 	.word	0x40008000
 800f6d4:	40006800 	.word	0x40006800
 800f6d8:	40006c00 	.word	0x40006c00
 800f6dc:	40008400 	.word	0x40008400
 800f6e0:	08013cb4 	.word	0x08013cb4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	61bb      	str	r3, [r7, #24]
 800f6ea:	61fa      	str	r2, [r7, #28]
 800f6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6f0:	4a64      	ldr	r2, [pc, #400]	@ (800f884 <UART_SetConfig+0x3d8>)
 800f6f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	613b      	str	r3, [r7, #16]
 800f6fc:	617a      	str	r2, [r7, #20]
 800f6fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f702:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f706:	f7f1 faff 	bl	8000d08 <__aeabi_uldivmod>
 800f70a:	4602      	mov	r2, r0
 800f70c:	460b      	mov	r3, r1
 800f70e:	4610      	mov	r0, r2
 800f710:	4619      	mov	r1, r3
 800f712:	f04f 0200 	mov.w	r2, #0
 800f716:	f04f 0300 	mov.w	r3, #0
 800f71a:	020b      	lsls	r3, r1, #8
 800f71c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f720:	0202      	lsls	r2, r0, #8
 800f722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f724:	6849      	ldr	r1, [r1, #4]
 800f726:	0849      	lsrs	r1, r1, #1
 800f728:	2000      	movs	r0, #0
 800f72a:	460c      	mov	r4, r1
 800f72c:	4605      	mov	r5, r0
 800f72e:	eb12 0804 	adds.w	r8, r2, r4
 800f732:	eb43 0905 	adc.w	r9, r3, r5
 800f736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	2200      	movs	r2, #0
 800f73c:	60bb      	str	r3, [r7, #8]
 800f73e:	60fa      	str	r2, [r7, #12]
 800f740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f744:	4640      	mov	r0, r8
 800f746:	4649      	mov	r1, r9
 800f748:	f7f1 fade 	bl	8000d08 <__aeabi_uldivmod>
 800f74c:	4602      	mov	r2, r0
 800f74e:	460b      	mov	r3, r1
 800f750:	4613      	mov	r3, r2
 800f752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f75a:	d308      	bcc.n	800f76e <UART_SetConfig+0x2c2>
 800f75c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f75e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f762:	d204      	bcs.n	800f76e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800f764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f76a:	60da      	str	r2, [r3, #12]
 800f76c:	e003      	b.n	800f776 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800f76e:	2301      	movs	r3, #1
 800f770:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800f774:	e070      	b.n	800f858 <UART_SetConfig+0x3ac>
 800f776:	e06f      	b.n	800f858 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f77a:	69db      	ldr	r3, [r3, #28]
 800f77c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f780:	d13c      	bne.n	800f7fc <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800f782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f784:	2200      	movs	r2, #0
 800f786:	603b      	str	r3, [r7, #0]
 800f788:	607a      	str	r2, [r7, #4]
 800f78a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f78e:	f7fa fd63 	bl	800a258 <HAL_RCCEx_GetPeriphCLKFreq>
 800f792:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f796:	2b00      	cmp	r3, #0
 800f798:	d05e      	beq.n	800f858 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f79e:	4a39      	ldr	r2, [pc, #228]	@ (800f884 <UART_SetConfig+0x3d8>)
 800f7a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7ac:	005a      	lsls	r2, r3, #1
 800f7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	085b      	lsrs	r3, r3, #1
 800f7b4:	441a      	add	r2, r3
 800f7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f7c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7c2:	2b0f      	cmp	r3, #15
 800f7c4:	d916      	bls.n	800f7f4 <UART_SetConfig+0x348>
 800f7c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f7cc:	d212      	bcs.n	800f7f4 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f7ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	f023 030f 	bic.w	r3, r3, #15
 800f7d6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f7d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7da:	085b      	lsrs	r3, r3, #1
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	f003 0307 	and.w	r3, r3, #7
 800f7e2:	b29a      	uxth	r2, r3
 800f7e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800f7ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800f7f0:	60da      	str	r2, [r3, #12]
 800f7f2:	e031      	b.n	800f858 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800f7fa:	e02d      	b.n	800f858 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800f7fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f7fe:	2200      	movs	r2, #0
 800f800:	469a      	mov	sl, r3
 800f802:	4693      	mov	fp, r2
 800f804:	4650      	mov	r0, sl
 800f806:	4659      	mov	r1, fp
 800f808:	f7fa fd26 	bl	800a258 <HAL_RCCEx_GetPeriphCLKFreq>
 800f80c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800f80e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f810:	2b00      	cmp	r3, #0
 800f812:	d021      	beq.n	800f858 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f818:	4a1a      	ldr	r2, [pc, #104]	@ (800f884 <UART_SetConfig+0x3d8>)
 800f81a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f81e:	461a      	mov	r2, r3
 800f820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f822:	fbb3 f2f2 	udiv	r2, r3, r2
 800f826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	085b      	lsrs	r3, r3, #1
 800f82c:	441a      	add	r2, r3
 800f82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	fbb2 f3f3 	udiv	r3, r2, r3
 800f836:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f83a:	2b0f      	cmp	r3, #15
 800f83c:	d909      	bls.n	800f852 <UART_SetConfig+0x3a6>
 800f83e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f844:	d205      	bcs.n	800f852 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f848:	b29a      	uxth	r2, r3
 800f84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	60da      	str	r2, [r3, #12]
 800f850:	e002      	b.n	800f858 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800f852:	2301      	movs	r3, #1
 800f854:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f85a:	2201      	movs	r2, #1
 800f85c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f862:	2201      	movs	r2, #1
 800f864:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f86a:	2200      	movs	r2, #0
 800f86c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f870:	2200      	movs	r2, #0
 800f872:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f874:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3750      	adds	r7, #80	@ 0x50
 800f87c:	46bd      	mov	sp, r7
 800f87e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f882:	bf00      	nop
 800f884:	08013cb4 	.word	0x08013cb4

0800f888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f888:	b480      	push	{r7}
 800f88a:	b083      	sub	sp, #12
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f894:	f003 0308 	and.w	r3, r3, #8
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d00a      	beq.n	800f8b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	430a      	orrs	r2, r1
 800f8b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8b6:	f003 0301 	and.w	r3, r3, #1
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d00a      	beq.n	800f8d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	430a      	orrs	r2, r1
 800f8d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8d8:	f003 0302 	and.w	r3, r3, #2
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d00a      	beq.n	800f8f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	430a      	orrs	r2, r1
 800f8f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8fa:	f003 0304 	and.w	r3, r3, #4
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d00a      	beq.n	800f918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	430a      	orrs	r2, r1
 800f916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f91c:	f003 0310 	and.w	r3, r3, #16
 800f920:	2b00      	cmp	r3, #0
 800f922:	d00a      	beq.n	800f93a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	689b      	ldr	r3, [r3, #8]
 800f92a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	430a      	orrs	r2, r1
 800f938:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f93e:	f003 0320 	and.w	r3, r3, #32
 800f942:	2b00      	cmp	r3, #0
 800f944:	d00a      	beq.n	800f95c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	689b      	ldr	r3, [r3, #8]
 800f94c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	430a      	orrs	r2, r1
 800f95a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f964:	2b00      	cmp	r3, #0
 800f966:	d01a      	beq.n	800f99e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	430a      	orrs	r2, r1
 800f97c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f986:	d10a      	bne.n	800f99e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	685b      	ldr	r3, [r3, #4]
 800f98e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	430a      	orrs	r2, r1
 800f99c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00a      	beq.n	800f9c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	430a      	orrs	r2, r1
 800f9be:	605a      	str	r2, [r3, #4]
  }
}
 800f9c0:	bf00      	nop
 800f9c2:	370c      	adds	r7, #12
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr

0800f9cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b098      	sub	sp, #96	@ 0x60
 800f9d0:	af02      	add	r7, sp, #8
 800f9d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f9dc:	f7f3 ffca 	bl	8003974 <HAL_GetTick>
 800f9e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f003 0308 	and.w	r3, r3, #8
 800f9ec:	2b08      	cmp	r3, #8
 800f9ee:	d12f      	bne.n	800fa50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f9f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f9f4:	9300      	str	r3, [sp, #0]
 800f9f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 f88e 	bl	800fb20 <UART_WaitOnFlagUntilTimeout>
 800fa04:	4603      	mov	r3, r0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d022      	beq.n	800fa50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa12:	e853 3f00 	ldrex	r3, [r3]
 800fa16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fa18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fa1e:	653b      	str	r3, [r7, #80]	@ 0x50
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	461a      	mov	r2, r3
 800fa26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa28:	647b      	str	r3, [r7, #68]	@ 0x44
 800fa2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fa2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fa30:	e841 2300 	strex	r3, r2, [r1]
 800fa34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fa36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d1e6      	bne.n	800fa0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2220      	movs	r2, #32
 800fa40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2200      	movs	r2, #0
 800fa48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa4c:	2303      	movs	r3, #3
 800fa4e:	e063      	b.n	800fb18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f003 0304 	and.w	r3, r3, #4
 800fa5a:	2b04      	cmp	r3, #4
 800fa5c:	d149      	bne.n	800faf2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fa5e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fa62:	9300      	str	r3, [sp, #0]
 800fa64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fa66:	2200      	movs	r2, #0
 800fa68:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f000 f857 	bl	800fb20 <UART_WaitOnFlagUntilTimeout>
 800fa72:	4603      	mov	r3, r0
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d03c      	beq.n	800faf2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa80:	e853 3f00 	ldrex	r3, [r3]
 800fa84:	623b      	str	r3, [r7, #32]
   return(result);
 800fa86:	6a3b      	ldr	r3, [r7, #32]
 800fa88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fa8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	461a      	mov	r2, r3
 800fa94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa96:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa98:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa9e:	e841 2300 	strex	r3, r2, [r1]
 800faa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800faa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d1e6      	bne.n	800fa78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	3308      	adds	r3, #8
 800fab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	e853 3f00 	ldrex	r3, [r3]
 800fab8:	60fb      	str	r3, [r7, #12]
   return(result);
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f023 0301 	bic.w	r3, r3, #1
 800fac0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	3308      	adds	r3, #8
 800fac8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800faca:	61fa      	str	r2, [r7, #28]
 800facc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800face:	69b9      	ldr	r1, [r7, #24]
 800fad0:	69fa      	ldr	r2, [r7, #28]
 800fad2:	e841 2300 	strex	r3, r2, [r1]
 800fad6:	617b      	str	r3, [r7, #20]
   return(result);
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d1e5      	bne.n	800faaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2220      	movs	r2, #32
 800fae2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800faee:	2303      	movs	r3, #3
 800faf0:	e012      	b.n	800fb18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2220      	movs	r2, #32
 800faf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2220      	movs	r2, #32
 800fafe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2200      	movs	r2, #0
 800fb06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2200      	movs	r2, #0
 800fb12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fb16:	2300      	movs	r3, #0
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3758      	adds	r7, #88	@ 0x58
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b084      	sub	sp, #16
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	603b      	str	r3, [r7, #0]
 800fb2c:	4613      	mov	r3, r2
 800fb2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb30:	e04f      	b.n	800fbd2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb38:	d04b      	beq.n	800fbd2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fb3a:	f7f3 ff1b 	bl	8003974 <HAL_GetTick>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	1ad3      	subs	r3, r2, r3
 800fb44:	69ba      	ldr	r2, [r7, #24]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d302      	bcc.n	800fb50 <UART_WaitOnFlagUntilTimeout+0x30>
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d101      	bne.n	800fb54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fb50:	2303      	movs	r3, #3
 800fb52:	e04e      	b.n	800fbf2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	f003 0304 	and.w	r3, r3, #4
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d037      	beq.n	800fbd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	2b80      	cmp	r3, #128	@ 0x80
 800fb66:	d034      	beq.n	800fbd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	2b40      	cmp	r3, #64	@ 0x40
 800fb6c:	d031      	beq.n	800fbd2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	69db      	ldr	r3, [r3, #28]
 800fb74:	f003 0308 	and.w	r3, r3, #8
 800fb78:	2b08      	cmp	r3, #8
 800fb7a:	d110      	bne.n	800fb9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2208      	movs	r2, #8
 800fb82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb84:	68f8      	ldr	r0, [r7, #12]
 800fb86:	f000 f972 	bl	800fe6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2208      	movs	r2, #8
 800fb8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2200      	movs	r2, #0
 800fb96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	e029      	b.n	800fbf2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	69db      	ldr	r3, [r3, #28]
 800fba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fbac:	d111      	bne.n	800fbd2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fbb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f000 f958 	bl	800fe6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2220      	movs	r2, #32
 800fbc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fbce:	2303      	movs	r3, #3
 800fbd0:	e00f      	b.n	800fbf2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	69da      	ldr	r2, [r3, #28]
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	4013      	ands	r3, r2
 800fbdc:	68ba      	ldr	r2, [r7, #8]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	bf0c      	ite	eq
 800fbe2:	2301      	moveq	r3, #1
 800fbe4:	2300      	movne	r3, #0
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	461a      	mov	r2, r3
 800fbea:	79fb      	ldrb	r3, [r7, #7]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d0a0      	beq.n	800fb32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fbf0:	2300      	movs	r3, #0
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3710      	adds	r7, #16
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
	...

0800fbfc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b098      	sub	sp, #96	@ 0x60
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	60b9      	str	r1, [r7, #8]
 800fc06:	4613      	mov	r3, r2
 800fc08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800fc0a:	88fb      	ldrh	r3, [r7, #6]
 800fc0c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	68ba      	ldr	r2, [r7, #8]
 800fc14:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	88fa      	ldrh	r2, [r7, #6]
 800fc1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2200      	movs	r2, #0
 800fc22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2222      	movs	r2, #34	@ 0x22
 800fc2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d07c      	beq.n	800fd32 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc3e:	4a68      	ldr	r2, [pc, #416]	@ (800fde0 <UART_Start_Receive_DMA+0x1e4>)
 800fc40:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc48:	4a66      	ldr	r2, [pc, #408]	@ (800fde4 <UART_Start_Receive_DMA+0x1e8>)
 800fc4a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc52:	4a65      	ldr	r2, [pc, #404]	@ (800fde8 <UART_Start_Receive_DMA+0x1ec>)
 800fc54:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	689b      	ldr	r3, [r3, #8]
 800fc64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fc68:	d107      	bne.n	800fc7a <UART_Start_Receive_DMA+0x7e>
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	691b      	ldr	r3, [r3, #16]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d103      	bne.n	800fc7a <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800fc72:	88fb      	ldrh	r3, [r7, #6]
 800fc74:	005b      	lsls	r3, r3, #1
 800fc76:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d034      	beq.n	800fcf4 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d02a      	beq.n	800fcec <UART_Start_Receive_DMA+0xf0>
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d023      	beq.n	800fcec <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800fcb2:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7f6 fa94 	bl	800620c <HAL_DMAEx_List_Start_IT>
 800fce4:	4603      	mov	r3, r0
 800fce6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fcea:	e014      	b.n	800fd16 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800fcec:	2301      	movs	r3, #1
 800fcee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fcf2:	e010      	b.n	800fd16 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	3324      	adds	r3, #36	@ 0x24
 800fd00:	4619      	mov	r1, r3
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd06:	461a      	mov	r2, r3
 800fd08:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800fd0c:	f7f5 fd2c 	bl	8005768 <HAL_DMA_Start_IT>
 800fd10:	4603      	mov	r3, r0
 800fd12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 800fd16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d009      	beq.n	800fd32 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2210      	movs	r2, #16
 800fd22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2220      	movs	r2, #32
 800fd2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	e051      	b.n	800fdd6 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	691b      	ldr	r3, [r3, #16]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d018      	beq.n	800fd6c <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd42:	e853 3f00 	ldrex	r3, [r3]
 800fd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fd48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fd4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	461a      	mov	r2, r3
 800fd56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fd58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fd5a:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd5c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800fd5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fd60:	e841 2300 	strex	r3, r2, [r1]
 800fd64:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fd66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d1e6      	bne.n	800fd3a <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	3308      	adds	r3, #8
 800fd72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd76:	e853 3f00 	ldrex	r3, [r3]
 800fd7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fd7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd7e:	f043 0301 	orr.w	r3, r3, #1
 800fd82:	657b      	str	r3, [r7, #84]	@ 0x54
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	3308      	adds	r3, #8
 800fd8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fd8c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800fd8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd90:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fd92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fd94:	e841 2300 	strex	r3, r2, [r1]
 800fd98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d1e5      	bne.n	800fd6c <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	3308      	adds	r3, #8
 800fda6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fda8:	69bb      	ldr	r3, [r7, #24]
 800fdaa:	e853 3f00 	ldrex	r3, [r3]
 800fdae:	617b      	str	r3, [r7, #20]
   return(result);
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdb6:	653b      	str	r3, [r7, #80]	@ 0x50
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	3308      	adds	r3, #8
 800fdbe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fdc0:	627a      	str	r2, [r7, #36]	@ 0x24
 800fdc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdc4:	6a39      	ldr	r1, [r7, #32]
 800fdc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdc8:	e841 2300 	strex	r3, r2, [r1]
 800fdcc:	61fb      	str	r3, [r7, #28]
   return(result);
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d1e5      	bne.n	800fda0 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 800fdd4:	2300      	movs	r3, #0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3760      	adds	r7, #96	@ 0x60
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	0800ffb7 	.word	0x0800ffb7
 800fde4:	080100df 	.word	0x080100df
 800fde8:	08010151 	.word	0x08010151

0800fdec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b08f      	sub	sp, #60	@ 0x3c
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdfa:	6a3b      	ldr	r3, [r7, #32]
 800fdfc:	e853 3f00 	ldrex	r3, [r3]
 800fe00:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe02:	69fb      	ldr	r3, [r7, #28]
 800fe04:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800fe08:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe14:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fe18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe1a:	e841 2300 	strex	r3, r2, [r1]
 800fe1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fe20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d1e6      	bne.n	800fdf4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3308      	adds	r3, #8
 800fe2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	e853 3f00 	ldrex	r3, [r3]
 800fe34:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800fe3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	3308      	adds	r3, #8
 800fe44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe46:	61ba      	str	r2, [r7, #24]
 800fe48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe4a:	6979      	ldr	r1, [r7, #20]
 800fe4c:	69ba      	ldr	r2, [r7, #24]
 800fe4e:	e841 2300 	strex	r3, r2, [r1]
 800fe52:	613b      	str	r3, [r7, #16]
   return(result);
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d1e5      	bne.n	800fe26 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2220      	movs	r2, #32
 800fe5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800fe62:	bf00      	nop
 800fe64:	373c      	adds	r7, #60	@ 0x3c
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr

0800fe6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe6e:	b480      	push	{r7}
 800fe70:	b095      	sub	sp, #84	@ 0x54
 800fe72:	af00      	add	r7, sp, #0
 800fe74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe7e:	e853 3f00 	ldrex	r3, [r3]
 800fe82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fe84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fe8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	461a      	mov	r2, r3
 800fe92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe94:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fe9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fe9c:	e841 2300 	strex	r3, r2, [r1]
 800fea0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d1e6      	bne.n	800fe76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	3308      	adds	r3, #8
 800feae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb0:	6a3b      	ldr	r3, [r7, #32]
 800feb2:	e853 3f00 	ldrex	r3, [r3]
 800feb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800febe:	f023 0301 	bic.w	r3, r3, #1
 800fec2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	3308      	adds	r3, #8
 800feca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fecc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fece:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fed4:	e841 2300 	strex	r3, r2, [r1]
 800fed8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800feda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1e3      	bne.n	800fea8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d118      	bne.n	800ff1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	e853 3f00 	ldrex	r3, [r3]
 800fef4:	60bb      	str	r3, [r7, #8]
   return(result);
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	f023 0310 	bic.w	r3, r3, #16
 800fefc:	647b      	str	r3, [r7, #68]	@ 0x44
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	461a      	mov	r2, r3
 800ff04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ff06:	61bb      	str	r3, [r7, #24]
 800ff08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff0a:	6979      	ldr	r1, [r7, #20]
 800ff0c:	69ba      	ldr	r2, [r7, #24]
 800ff0e:	e841 2300 	strex	r3, r2, [r1]
 800ff12:	613b      	str	r3, [r7, #16]
   return(result);
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d1e6      	bne.n	800fee8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2220      	movs	r2, #32
 800ff1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2200      	movs	r2, #0
 800ff26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ff2e:	bf00      	nop
 800ff30:	3754      	adds	r7, #84	@ 0x54
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr

0800ff3a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b08a      	sub	sp, #40	@ 0x28
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff4c:	2b81      	cmp	r3, #129	@ 0x81
 800ff4e:	d01d      	beq.n	800ff8c <UART_DMATransmitCplt+0x52>
  {
    huart->TxXferCount = 0U;
 800ff50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff52:	2200      	movs	r2, #0
 800ff54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	e853 3f00 	ldrex	r3, [r3]
 800ff64:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff6c:	623b      	str	r3, [r7, #32]
 800ff6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	461a      	mov	r2, r3
 800ff74:	6a3b      	ldr	r3, [r7, #32]
 800ff76:	61fb      	str	r3, [r7, #28]
 800ff78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff7a:	69b9      	ldr	r1, [r7, #24]
 800ff7c:	69fa      	ldr	r2, [r7, #28]
 800ff7e:	e841 2300 	strex	r3, r2, [r1]
 800ff82:	617b      	str	r3, [r7, #20]
   return(result);
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d1e6      	bne.n	800ff58 <UART_DMATransmitCplt+0x1e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ff8a:	e002      	b.n	800ff92 <UART_DMATransmitCplt+0x58>
    HAL_UART_TxCpltCallback(huart);
 800ff8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ff8e:	f7ff fa65 	bl	800f45c <HAL_UART_TxCpltCallback>
}
 800ff92:	bf00      	nop
 800ff94:	3728      	adds	r7, #40	@ 0x28
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}

0800ff9a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ff9a:	b580      	push	{r7, lr}
 800ff9c:	b084      	sub	sp, #16
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ffa6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f7ff fa61 	bl	800f470 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ffae:	bf00      	nop
 800ffb0:	3710      	adds	r7, #16
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}

0800ffb6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ffb6:	b580      	push	{r7, lr}
 800ffb8:	b096      	sub	sp, #88	@ 0x58
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ffc2:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ffc8:	2b81      	cmp	r3, #129	@ 0x81
 800ffca:	d057      	beq.n	801007c <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 800ffcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffce:	2200      	movs	r2, #0
 800ffd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ffd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffdc:	e853 3f00 	ldrex	r3, [r3]
 800ffe0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ffe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffe4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ffe8:	653b      	str	r3, [r7, #80]	@ 0x50
 800ffea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	461a      	mov	r2, r3
 800fff0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fff2:	643b      	str	r3, [r7, #64]	@ 0x40
 800fff4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fff6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fff8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fffa:	e841 2300 	strex	r3, r2, [r1]
 800fffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010002:	2b00      	cmp	r3, #0
 8010004:	d1e6      	bne.n	800ffd4 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	3308      	adds	r3, #8
 801000c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801000e:	6a3b      	ldr	r3, [r7, #32]
 8010010:	e853 3f00 	ldrex	r3, [r3]
 8010014:	61fb      	str	r3, [r7, #28]
   return(result);
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	f023 0301 	bic.w	r3, r3, #1
 801001c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801001e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	3308      	adds	r3, #8
 8010024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010026:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010028:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801002a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801002c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801002e:	e841 2300 	strex	r3, r2, [r1]
 8010032:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010036:	2b00      	cmp	r3, #0
 8010038:	d1e5      	bne.n	8010006 <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801003a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801003c:	2220      	movs	r2, #32
 801003e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010046:	2b01      	cmp	r3, #1
 8010048:	d118      	bne.n	801007c <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801004a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	e853 3f00 	ldrex	r3, [r3]
 8010056:	60bb      	str	r3, [r7, #8]
   return(result);
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	f023 0310 	bic.w	r3, r3, #16
 801005e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	461a      	mov	r2, r3
 8010066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010068:	61bb      	str	r3, [r7, #24]
 801006a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801006c:	6979      	ldr	r1, [r7, #20]
 801006e:	69ba      	ldr	r2, [r7, #24]
 8010070:	e841 2300 	strex	r3, r2, [r1]
 8010074:	613b      	str	r3, [r7, #16]
   return(result);
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d1e6      	bne.n	801004a <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801007c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801007e:	2200      	movs	r2, #0
 8010080:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010086:	2b01      	cmp	r3, #1
 8010088:	d122      	bne.n	80100d0 <UART_DMAReceiveCplt+0x11a>
  {
    huart->RxXferCount = 0;
 801008a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801008c:	2200      	movs	r2, #0
 801008e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010098:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if (nb_remaining_rx_data < huart->RxXferSize)
 801009c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801009e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80100a2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d204      	bcs.n	80100b4 <UART_DMAReceiveCplt+0xfe>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80100aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80100b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80100b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80100ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	1ad3      	subs	r3, r2, r3
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	4619      	mov	r1, r3
 80100c8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80100ca:	f7f2 f919 	bl	8002300 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80100ce:	e002      	b.n	80100d6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80100d0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80100d2:	f7ff f9d7 	bl	800f484 <HAL_UART_RxCpltCallback>
}
 80100d6:	bf00      	nop
 80100d8:	3758      	adds	r7, #88	@ 0x58
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80100de:	b580      	push	{r7, lr}
 80100e0:	b084      	sub	sp, #16
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80100ea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	2201      	movs	r2, #1
 80100f0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d123      	bne.n	8010142 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010100:	085b      	lsrs	r3, r3, #1
 8010102:	b29a      	uxth	r2, r3
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010110:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010118:	897a      	ldrh	r2, [r7, #10]
 801011a:	429a      	cmp	r2, r3
 801011c:	d803      	bhi.n	8010126 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	897a      	ldrh	r2, [r7, #10]
 8010122:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010132:	b29b      	uxth	r3, r3
 8010134:	1ad3      	subs	r3, r2, r3
 8010136:	b29b      	uxth	r3, r3
 8010138:	4619      	mov	r1, r3
 801013a:	68f8      	ldr	r0, [r7, #12]
 801013c:	f7f2 f8e0 	bl	8002300 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010140:	e002      	b.n	8010148 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8010142:	68f8      	ldr	r0, [r7, #12]
 8010144:	f7ff f9a8 	bl	800f498 <HAL_UART_RxHalfCpltCallback>
}
 8010148:	bf00      	nop
 801014a:	3710      	adds	r7, #16
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b086      	sub	sp, #24
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801015c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010164:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801016c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	689b      	ldr	r3, [r3, #8]
 8010174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010178:	2b80      	cmp	r3, #128	@ 0x80
 801017a:	d109      	bne.n	8010190 <UART_DMAError+0x40>
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	2b21      	cmp	r3, #33	@ 0x21
 8010180:	d106      	bne.n	8010190 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	2200      	movs	r2, #0
 8010186:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 801018a:	6978      	ldr	r0, [r7, #20]
 801018c:	f7ff fe2e 	bl	800fdec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	689b      	ldr	r3, [r3, #8]
 8010196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801019a:	2b40      	cmp	r3, #64	@ 0x40
 801019c:	d109      	bne.n	80101b2 <UART_DMAError+0x62>
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	2b22      	cmp	r3, #34	@ 0x22
 80101a2:	d106      	bne.n	80101b2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	2200      	movs	r2, #0
 80101a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80101ac:	6978      	ldr	r0, [r7, #20]
 80101ae:	f7ff fe5e 	bl	800fe6e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101b8:	f043 0210 	orr.w	r2, r3, #16
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80101c2:	6978      	ldr	r0, [r7, #20]
 80101c4:	f7f2 f8c4 	bl	8002350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80101c8:	bf00      	nop
 80101ca:	3718      	adds	r7, #24
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80101dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2200      	movs	r2, #0
 80101e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80101e6:	68f8      	ldr	r0, [r7, #12]
 80101e8:	f7f2 f8b2 	bl	8002350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80101ec:	bf00      	nop
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b088      	sub	sp, #32
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	e853 3f00 	ldrex	r3, [r3]
 8010208:	60bb      	str	r3, [r7, #8]
   return(result);
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010210:	61fb      	str	r3, [r7, #28]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	461a      	mov	r2, r3
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	61bb      	str	r3, [r7, #24]
 801021c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801021e:	6979      	ldr	r1, [r7, #20]
 8010220:	69ba      	ldr	r2, [r7, #24]
 8010222:	e841 2300 	strex	r3, r2, [r1]
 8010226:	613b      	str	r3, [r7, #16]
   return(result);
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d1e6      	bne.n	80101fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2220      	movs	r2, #32
 8010232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2200      	movs	r2, #0
 801023a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f7ff f90d 	bl	800f45c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010242:	bf00      	nop
 8010244:	3720      	adds	r7, #32
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}

0801024a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801024a:	b480      	push	{r7}
 801024c:	b083      	sub	sp, #12
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010252:	bf00      	nop
 8010254:	370c      	adds	r7, #12
 8010256:	46bd      	mov	sp, r7
 8010258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025c:	4770      	bx	lr

0801025e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801025e:	b480      	push	{r7}
 8010260:	b083      	sub	sp, #12
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010266:	bf00      	nop
 8010268:	370c      	adds	r7, #12
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr

08010272 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010272:	b480      	push	{r7}
 8010274:	b083      	sub	sp, #12
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801027a:	bf00      	nop
 801027c:	370c      	adds	r7, #12
 801027e:	46bd      	mov	sp, r7
 8010280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010284:	4770      	bx	lr

08010286 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010286:	b480      	push	{r7}
 8010288:	b085      	sub	sp, #20
 801028a:	af00      	add	r7, sp, #0
 801028c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010294:	2b01      	cmp	r3, #1
 8010296:	d101      	bne.n	801029c <HAL_UARTEx_DisableFifoMode+0x16>
 8010298:	2302      	movs	r3, #2
 801029a:	e027      	b.n	80102ec <HAL_UARTEx_DisableFifoMode+0x66>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2201      	movs	r2, #1
 80102a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2224      	movs	r2, #36	@ 0x24
 80102a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	f022 0201 	bic.w	r2, r2, #1
 80102c2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80102ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	68fa      	ldr	r2, [r7, #12]
 80102d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2220      	movs	r2, #32
 80102de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80102ea:	2300      	movs	r3, #0
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3714      	adds	r7, #20
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr

080102f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010308:	2b01      	cmp	r3, #1
 801030a:	d101      	bne.n	8010310 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801030c:	2302      	movs	r3, #2
 801030e:	e02d      	b.n	801036c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2201      	movs	r2, #1
 8010314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2224      	movs	r2, #36	@ 0x24
 801031c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	f022 0201 	bic.w	r2, r2, #1
 8010336:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	689b      	ldr	r3, [r3, #8]
 801033e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	683a      	ldr	r2, [r7, #0]
 8010348:	430a      	orrs	r2, r1
 801034a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f000 f8af 	bl	80104b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	68fa      	ldr	r2, [r7, #12]
 8010358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2220      	movs	r2, #32
 801035e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2200      	movs	r2, #0
 8010366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801036a:	2300      	movs	r3, #0
}
 801036c:	4618      	mov	r0, r3
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010384:	2b01      	cmp	r3, #1
 8010386:	d101      	bne.n	801038c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010388:	2302      	movs	r3, #2
 801038a:	e02d      	b.n	80103e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2201      	movs	r2, #1
 8010390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2224      	movs	r2, #36	@ 0x24
 8010398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f022 0201 	bic.w	r2, r2, #1
 80103b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	689b      	ldr	r3, [r3, #8]
 80103ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	683a      	ldr	r2, [r7, #0]
 80103c4:	430a      	orrs	r2, r1
 80103c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f000 f871 	bl	80104b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	68fa      	ldr	r2, [r7, #12]
 80103d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2220      	movs	r2, #32
 80103da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2200      	movs	r2, #0
 80103e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80103e6:	2300      	movs	r3, #0
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3710      	adds	r7, #16
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b08c      	sub	sp, #48	@ 0x30
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	60b9      	str	r1, [r7, #8]
 80103fa:	4613      	mov	r3, r2
 80103fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010404:	2b20      	cmp	r3, #32
 8010406:	d142      	bne.n	801048e <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d002      	beq.n	8010414 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 801040e:	88fb      	ldrh	r3, [r7, #6]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d101      	bne.n	8010418 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010414:	2301      	movs	r3, #1
 8010416:	e03b      	b.n	8010490 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2201      	movs	r2, #1
 801041c:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2200      	movs	r2, #0
 8010422:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010424:	88fb      	ldrh	r3, [r7, #6]
 8010426:	461a      	mov	r2, r3
 8010428:	68b9      	ldr	r1, [r7, #8]
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	f7ff fbe6 	bl	800fbfc <UART_Start_Receive_DMA>
 8010430:	4603      	mov	r3, r0
 8010432:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010436:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801043a:	2b00      	cmp	r3, #0
 801043c:	d124      	bne.n	8010488 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010442:	2b01      	cmp	r3, #1
 8010444:	d11d      	bne.n	8010482 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2210      	movs	r2, #16
 801044c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010454:	69bb      	ldr	r3, [r7, #24]
 8010456:	e853 3f00 	ldrex	r3, [r3]
 801045a:	617b      	str	r3, [r7, #20]
   return(result);
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	f043 0310 	orr.w	r3, r3, #16
 8010462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	461a      	mov	r2, r3
 801046a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801046c:	627b      	str	r3, [r7, #36]	@ 0x24
 801046e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010470:	6a39      	ldr	r1, [r7, #32]
 8010472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010474:	e841 2300 	strex	r3, r2, [r1]
 8010478:	61fb      	str	r3, [r7, #28]
   return(result);
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d1e6      	bne.n	801044e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8010480:	e002      	b.n	8010488 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010482:	2301      	movs	r3, #1
 8010484:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8010488:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801048c:	e000      	b.n	8010490 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801048e:	2302      	movs	r3, #2
  }
}
 8010490:	4618      	mov	r0, r3
 8010492:	3730      	adds	r7, #48	@ 0x30
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <HAL_UARTEx_GetRxEventType>:
  *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception process;
  * @param  huart UART handle.
  * @retval Rx Event Type (return vale will be a value of @ref UART_RxEvent_Type_Values)
  */
HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(const UART_HandleTypeDef *huart)
{
 8010498:	b480      	push	{r7}
 801049a:	b083      	sub	sp, #12
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  /* Return Rx Event type value, as stored in UART handle */
  return (huart->RxEventType);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	370c      	adds	r7, #12
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b085      	sub	sp, #20
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d108      	bne.n	80104d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2201      	movs	r2, #1
 80104c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2201      	movs	r2, #1
 80104cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80104d0:	e031      	b.n	8010536 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80104d2:	2308      	movs	r3, #8
 80104d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80104d6:	2308      	movs	r3, #8
 80104d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	689b      	ldr	r3, [r3, #8]
 80104e0:	0e5b      	lsrs	r3, r3, #25
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	f003 0307 	and.w	r3, r3, #7
 80104e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	689b      	ldr	r3, [r3, #8]
 80104f0:	0f5b      	lsrs	r3, r3, #29
 80104f2:	b2db      	uxtb	r3, r3
 80104f4:	f003 0307 	and.w	r3, r3, #7
 80104f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80104fa:	7bbb      	ldrb	r3, [r7, #14]
 80104fc:	7b3a      	ldrb	r2, [r7, #12]
 80104fe:	4911      	ldr	r1, [pc, #68]	@ (8010544 <UARTEx_SetNbDataToProcess+0x94>)
 8010500:	5c8a      	ldrb	r2, [r1, r2]
 8010502:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010506:	7b3a      	ldrb	r2, [r7, #12]
 8010508:	490f      	ldr	r1, [pc, #60]	@ (8010548 <UARTEx_SetNbDataToProcess+0x98>)
 801050a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801050c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010510:	b29a      	uxth	r2, r3
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010518:	7bfb      	ldrb	r3, [r7, #15]
 801051a:	7b7a      	ldrb	r2, [r7, #13]
 801051c:	4909      	ldr	r1, [pc, #36]	@ (8010544 <UARTEx_SetNbDataToProcess+0x94>)
 801051e:	5c8a      	ldrb	r2, [r1, r2]
 8010520:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010524:	7b7a      	ldrb	r2, [r7, #13]
 8010526:	4908      	ldr	r1, [pc, #32]	@ (8010548 <UARTEx_SetNbDataToProcess+0x98>)
 8010528:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801052a:	fb93 f3f2 	sdiv	r3, r3, r2
 801052e:	b29a      	uxth	r2, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010536:	bf00      	nop
 8010538:	3714      	adds	r7, #20
 801053a:	46bd      	mov	sp, r7
 801053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010540:	4770      	bx	lr
 8010542:	bf00      	nop
 8010544:	08013ccc 	.word	0x08013ccc
 8010548:	08013cd4 	.word	0x08013cd4

0801054c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b096      	sub	sp, #88	@ 0x58
 8010550:	af02      	add	r7, sp, #8
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	607a      	str	r2, [r7, #4]
 8010558:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 801055a:	2234      	movs	r2, #52	@ 0x34
 801055c:	2100      	movs	r1, #0
 801055e:	68f8      	ldr	r0, [r7, #12]
 8010560:	f002 fada 	bl	8012b18 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	f023 0303 	bic.w	r3, r3, #3
 801056a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	68ba      	ldr	r2, [r7, #8]
 8010570:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	683a      	ldr	r2, [r7, #0]
 801057c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	f1a3 0208 	sub.w	r2, r3, #8
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2202      	movs	r2, #2
 8010598:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 801059e:	697a      	ldr	r2, [r7, #20]
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	4413      	add	r3, r2
 80105a4:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	3b04      	subs	r3, #4
 80105aa:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	647b      	str	r3, [r7, #68]	@ 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	643b      	str	r3, [r7, #64]	@ 0x40
    *block_indirect_ptr =  temp_ptr;
 80105b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80105b8:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	3b04      	subs	r3, #4
 80105be:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	643b      	str	r3, [r7, #64]	@ 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80105c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	647b      	str	r3, [r7, #68]	@ 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80105ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105d0:	643b      	str	r3, [r7, #64]	@ 0x40
    *block_indirect_ptr =  block_ptr;
 80105d2:	697a      	ldr	r2, [r7, #20]
 80105d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105d6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	3304      	adds	r3, #4
 80105e0:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80105e2:	697b      	ldr	r3, [r7, #20]
 80105e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80105e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105e8:	4a5d      	ldr	r2, [pc, #372]	@ (8010760 <_tx_byte_pool_create+0x214>)
 80105ea:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2200      	movs	r2, #0
 80105f0:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80105f2:	f3ef 8310 	mrs	r3, PRIMASK
 80105f6:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return(posture);
 80105f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 80105fa:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80105fc:	b672      	cpsid	i
#endif
    return(int_posture);
 80105fe:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8010600:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	4a57      	ldr	r2, [pc, #348]	@ (8010764 <_tx_byte_pool_create+0x218>)
 8010606:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8010608:	4b57      	ldr	r3, [pc, #348]	@ (8010768 <_tx_byte_pool_create+0x21c>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d109      	bne.n	8010624 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8010610:	4a56      	ldr	r2, [pc, #344]	@ (801076c <_tx_byte_pool_create+0x220>)
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	68fa      	ldr	r2, [r7, #12]
 801061a:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	68fa      	ldr	r2, [r7, #12]
 8010620:	631a      	str	r2, [r3, #48]	@ 0x30
 8010622:	e011      	b.n	8010648 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8010624:	4b51      	ldr	r3, [pc, #324]	@ (801076c <_tx_byte_pool_create+0x220>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 801062a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801062e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8010630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010632:	68fa      	ldr	r2, [r7, #12]
 8010634:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8010636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010638:	68fa      	ldr	r2, [r7, #12]
 801063a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010640:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010646:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8010648:	4b47      	ldr	r3, [pc, #284]	@ (8010768 <_tx_byte_pool_create+0x21c>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	3301      	adds	r3, #1
 801064e:	4a46      	ldr	r2, [pc, #280]	@ (8010768 <_tx_byte_pool_create+0x21c>)
 8010650:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 8010652:	2300      	movs	r3, #0
 8010654:	9300      	str	r3, [sp, #0]
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	68ba      	ldr	r2, [r7, #8]
 801065a:	68f9      	ldr	r1, [r7, #12]
 801065c:	2008      	movs	r0, #8
 801065e:	f001 ff99 	bl	8012594 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 8010662:	4b43      	ldr	r3, [pc, #268]	@ (8010770 <_tx_byte_pool_create+0x224>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801066a:	2b00      	cmp	r3, #0
 801066c:	d06c      	beq.n	8010748 <_tx_byte_pool_create+0x1fc>
 801066e:	4b41      	ldr	r3, [pc, #260]	@ (8010774 <_tx_byte_pool_create+0x228>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f003 0304 	and.w	r3, r3, #4
 8010676:	2b00      	cmp	r3, #0
 8010678:	d066      	beq.n	8010748 <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801067a:	f3ef 8305 	mrs	r3, IPSR
 801067e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8010680:	69fa      	ldr	r2, [r7, #28]
 8010682:	4b3d      	ldr	r3, [pc, #244]	@ (8010778 <_tx_byte_pool_create+0x22c>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4313      	orrs	r3, r2
 8010688:	62bb      	str	r3, [r7, #40]	@ 0x28
 801068a:	4b3c      	ldr	r3, [pc, #240]	@ (801077c <_tx_byte_pool_create+0x230>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010692:	2b00      	cmp	r3, #0
 8010694:	d10b      	bne.n	80106ae <_tx_byte_pool_create+0x162>
 8010696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801069a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801069c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801069e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106a0:	041a      	lsls	r2, r3, #16
 80106a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106a4:	4313      	orrs	r3, r2
 80106a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80106aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106ac:	e00e      	b.n	80106cc <_tx_byte_pool_create+0x180>
 80106ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106b0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80106b4:	d205      	bcs.n	80106c2 <_tx_byte_pool_create+0x176>
 80106b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80106b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106ba:	f04f 33ff 	mov.w	r3, #4294967295
 80106be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106c0:	e004      	b.n	80106cc <_tx_byte_pool_create+0x180>
 80106c2:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 80106c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106c8:	2300      	movs	r3, #0
 80106ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80106ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106d0:	601a      	str	r2, [r3, #0]
 80106d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80106d6:	605a      	str	r2, [r3, #4]
 80106d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106da:	2215      	movs	r2, #21
 80106dc:	609a      	str	r2, [r3, #8]
 80106de:	4b28      	ldr	r3, [pc, #160]	@ (8010780 <_tx_byte_pool_create+0x234>)
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106e4:	60da      	str	r2, [r3, #12]
 80106e6:	68fa      	ldr	r2, [r7, #12]
 80106e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ea:	611a      	str	r2, [r3, #16]
 80106ec:	687a      	ldr	r2, [r7, #4]
 80106ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f0:	615a      	str	r2, [r3, #20]
 80106f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106f4:	683a      	ldr	r2, [r7, #0]
 80106f6:	619a      	str	r2, [r3, #24]
 80106f8:	f107 0214 	add.w	r2, r7, #20
 80106fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106fe:	61da      	str	r2, [r3, #28]
 8010700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010702:	3320      	adds	r3, #32
 8010704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010706:	4b1f      	ldr	r3, [pc, #124]	@ (8010784 <_tx_byte_pool_create+0x238>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801070c:	429a      	cmp	r2, r3
 801070e:	d314      	bcc.n	801073a <_tx_byte_pool_create+0x1ee>
 8010710:	4b1d      	ldr	r3, [pc, #116]	@ (8010788 <_tx_byte_pool_create+0x23c>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010716:	4a16      	ldr	r2, [pc, #88]	@ (8010770 <_tx_byte_pool_create+0x224>)
 8010718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801071a:	6013      	str	r3, [r2, #0]
 801071c:	4b1b      	ldr	r3, [pc, #108]	@ (801078c <_tx_byte_pool_create+0x240>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010722:	621a      	str	r2, [r3, #32]
 8010724:	4b1a      	ldr	r3, [pc, #104]	@ (8010790 <_tx_byte_pool_create+0x244>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d00d      	beq.n	8010748 <_tx_byte_pool_create+0x1fc>
 801072c:	4b18      	ldr	r3, [pc, #96]	@ (8010790 <_tx_byte_pool_create+0x244>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a16      	ldr	r2, [pc, #88]	@ (801078c <_tx_byte_pool_create+0x240>)
 8010732:	6812      	ldr	r2, [r2, #0]
 8010734:	4610      	mov	r0, r2
 8010736:	4798      	blx	r3
 8010738:	e006      	b.n	8010748 <_tx_byte_pool_create+0x1fc>
 801073a:	4a0d      	ldr	r2, [pc, #52]	@ (8010770 <_tx_byte_pool_create+0x224>)
 801073c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801073e:	6013      	str	r3, [r2, #0]
 8010740:	4b12      	ldr	r3, [pc, #72]	@ (801078c <_tx_byte_pool_create+0x240>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010746:	621a      	str	r2, [r3, #32]
 8010748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801074a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	f383 8810 	msr	PRIMASK, r3
}
 8010752:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010754:	2300      	movs	r3, #0
}
 8010756:	4618      	mov	r0, r3
 8010758:	3750      	adds	r7, #80	@ 0x50
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	ffffeeee 	.word	0xffffeeee
 8010764:	42595445 	.word	0x42595445
 8010768:	20006998 	.word	0x20006998
 801076c:	20006994 	.word	0x20006994
 8010770:	20006fc0 	.word	0x20006fc0
 8010774:	20006fc4 	.word	0x20006fc4
 8010778:	20000048 	.word	0x20000048
 801077c:	200069a4 	.word	0x200069a4
 8010780:	e0001004 	.word	0xe0001004
 8010784:	20006fbc 	.word	0x20006fbc
 8010788:	20006fb8 	.word	0x20006fb8
 801078c:	20006fac 	.word	0x20006fac
 8010790:	20006fc8 	.word	0x20006fc8

08010794 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 8010798:	f001 fed6 	bl	8012548 <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 801079c:	f000 f9ec 	bl	8010b78 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80107a0:	f001 f98a 	bl	8011ab8 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80107a4:	4b12      	ldr	r3, [pc, #72]	@ (80107f0 <_tx_initialize_high_level+0x5c>)
 80107a6:	2200      	movs	r2, #0
 80107a8:	601a      	str	r2, [r3, #0]
 80107aa:	4b12      	ldr	r3, [pc, #72]	@ (80107f4 <_tx_initialize_high_level+0x60>)
 80107ac:	2200      	movs	r2, #0
 80107ae:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80107b0:	4b11      	ldr	r3, [pc, #68]	@ (80107f8 <_tx_initialize_high_level+0x64>)
 80107b2:	2200      	movs	r2, #0
 80107b4:	601a      	str	r2, [r3, #0]
 80107b6:	4b11      	ldr	r3, [pc, #68]	@ (80107fc <_tx_initialize_high_level+0x68>)
 80107b8:	2200      	movs	r2, #0
 80107ba:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80107bc:	4b10      	ldr	r3, [pc, #64]	@ (8010800 <_tx_initialize_high_level+0x6c>)
 80107be:	2200      	movs	r2, #0
 80107c0:	601a      	str	r2, [r3, #0]
 80107c2:	4b10      	ldr	r3, [pc, #64]	@ (8010804 <_tx_initialize_high_level+0x70>)
 80107c4:	2200      	movs	r2, #0
 80107c6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80107c8:	4b0f      	ldr	r3, [pc, #60]	@ (8010808 <_tx_initialize_high_level+0x74>)
 80107ca:	2200      	movs	r2, #0
 80107cc:	601a      	str	r2, [r3, #0]
 80107ce:	4b0f      	ldr	r3, [pc, #60]	@ (801080c <_tx_initialize_high_level+0x78>)
 80107d0:	2200      	movs	r2, #0
 80107d2:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80107d4:	4b0e      	ldr	r3, [pc, #56]	@ (8010810 <_tx_initialize_high_level+0x7c>)
 80107d6:	2200      	movs	r2, #0
 80107d8:	601a      	str	r2, [r3, #0]
 80107da:	4b0e      	ldr	r3, [pc, #56]	@ (8010814 <_tx_initialize_high_level+0x80>)
 80107dc:	2200      	movs	r2, #0
 80107de:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80107e0:	4b0d      	ldr	r3, [pc, #52]	@ (8010818 <_tx_initialize_high_level+0x84>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	601a      	str	r2, [r3, #0]
 80107e6:	4b0d      	ldr	r3, [pc, #52]	@ (801081c <_tx_initialize_high_level+0x88>)
 80107e8:	2200      	movs	r2, #0
 80107ea:	601a      	str	r2, [r3, #0]
#endif
}
 80107ec:	bf00      	nop
 80107ee:	bd80      	pop	{r7, pc}
 80107f0:	2000696c 	.word	0x2000696c
 80107f4:	20006970 	.word	0x20006970
 80107f8:	20006974 	.word	0x20006974
 80107fc:	20006978 	.word	0x20006978
 8010800:	2000697c 	.word	0x2000697c
 8010804:	20006980 	.word	0x20006980
 8010808:	2000698c 	.word	0x2000698c
 801080c:	20006990 	.word	0x20006990
 8010810:	20006994 	.word	0x20006994
 8010814:	20006998 	.word	0x20006998
 8010818:	20006984 	.word	0x20006984
 801081c:	20006988 	.word	0x20006988

08010820 <_tx_initialize_kernel_enter>:
/*                                            initialization,             */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8010824:	4b10      	ldr	r3, [pc, #64]	@ (8010868 <_tx_initialize_kernel_enter+0x48>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 801082c:	d00c      	beq.n	8010848 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801082e:	4b0e      	ldr	r3, [pc, #56]	@ (8010868 <_tx_initialize_kernel_enter+0x48>)
 8010830:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8010834:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8010836:	f7ef fd2b 	bl	8000290 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 801083a:	f7ff ffab 	bl	8010794 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 801083e:	4b0b      	ldr	r3, [pc, #44]	@ (801086c <_tx_initialize_kernel_enter+0x4c>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	3301      	adds	r3, #1
 8010844:	4a09      	ldr	r2, [pc, #36]	@ (801086c <_tx_initialize_kernel_enter+0x4c>)
 8010846:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8010848:	4b07      	ldr	r3, [pc, #28]	@ (8010868 <_tx_initialize_kernel_enter+0x48>)
 801084a:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 801084e:	601a      	str	r2, [r3, #0]
    /* Optional random number generator initialization.  */
    TX_INITIALIZE_RANDOM_GENERATOR_INITIALIZATION

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8010850:	4b07      	ldr	r3, [pc, #28]	@ (8010870 <_tx_initialize_kernel_enter+0x50>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4618      	mov	r0, r3
 8010856:	f7f0 fc15 	bl	8001084 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 801085a:	4b03      	ldr	r3, [pc, #12]	@ (8010868 <_tx_initialize_kernel_enter+0x48>)
 801085c:	2200      	movs	r2, #0
 801085e:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8010860:	f7ef fd52 	bl	8000308 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010864:	bf00      	nop
 8010866:	bd80      	pop	{r7, pc}
 8010868:	20000048 	.word	0x20000048
 801086c:	20006a3c 	.word	0x20006a3c
 8010870:	2000699c 	.word	0x2000699c

08010874 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b09a      	sub	sp, #104	@ 0x68
 8010878:	af02      	add	r7, sp, #8
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
 8010880:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8010882:	2300      	movs	r3, #0
 8010884:	65bb      	str	r3, [r7, #88]	@ 0x58
#endif

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8010886:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010888:	21ef      	movs	r1, #239	@ 0xef
 801088a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 801088c:	f002 f944 	bl	8012b18 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8010890:	22b0      	movs	r2, #176	@ 0xb0
 8010892:	2100      	movs	r1, #0
 8010894:	68f8      	ldr	r0, [r7, #12]
 8010896:	f002 f93f 	bl	8012b18 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	68ba      	ldr	r2, [r7, #8]
 801089e:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	683a      	ldr	r2, [r7, #0]
 80108aa:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80108b0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80108b6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80108bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80108c2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80108ca:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80108d0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2220      	movs	r2, #32
 80108d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80108da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80108dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80108de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108e0:	3b01      	subs	r3, #1
 80108e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80108e4:	4413      	add	r3, r2
 80108e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80108ec:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80108ee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80108f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d007      	beq.n	8010906 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2200      	movs	r2, #0
 80108fa:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2200      	movs	r2, #0
 8010900:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8010904:	e006      	b.n	8010914 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801090a:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010910:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	2203      	movs	r2, #3
 8010918:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	4a86      	ldr	r2, [pc, #536]	@ (8010b38 <_tx_thread_create+0x2c4>)
 801091e:	655a      	str	r2, [r3, #84]	@ 0x54
 8010920:	68fa      	ldr	r2, [r7, #12]
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8010926:	4985      	ldr	r1, [pc, #532]	@ (8010b3c <_tx_thread_create+0x2c8>)
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f7ef fd53 	bl	80003d4 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801092e:	f3ef 8310 	mrs	r3, PRIMASK
 8010932:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8010934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8010936:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8010938:	b672      	cpsid	i
    return(int_posture);
 801093a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 801093c:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	4a7f      	ldr	r2, [pc, #508]	@ (8010b40 <_tx_thread_create+0x2cc>)
 8010942:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8010944:	4b7f      	ldr	r3, [pc, #508]	@ (8010b44 <_tx_thread_create+0x2d0>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d10b      	bne.n	8010964 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 801094c:	4a7e      	ldr	r2, [pc, #504]	@ (8010b48 <_tx_thread_create+0x2d4>)
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	68fa      	ldr	r2, [r7, #12]
 8010956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	68fa      	ldr	r2, [r7, #12]
 801095e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8010962:	e016      	b.n	8010992 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8010964:	4b78      	ldr	r3, [pc, #480]	@ (8010b48 <_tx_thread_create+0x2d4>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	647b      	str	r3, [r7, #68]	@ 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 801096a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801096c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010970:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8010972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010974:	68fa      	ldr	r2, [r7, #12]
 8010976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801097a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801097c:	68fa      	ldr	r2, [r7, #12]
 801097e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801098e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8010992:	4b6c      	ldr	r3, [pc, #432]	@ (8010b44 <_tx_thread_create+0x2d0>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	3301      	adds	r3, #1
 8010998:	4a6a      	ldr	r2, [pc, #424]	@ (8010b44 <_tx_thread_create+0x2d0>)
 801099a:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 801099c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801099e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80109a0:	9300      	str	r3, [sp, #0]
 80109a2:	4613      	mov	r3, r2
 80109a4:	68ba      	ldr	r2, [r7, #8]
 80109a6:	68f9      	ldr	r1, [r7, #12]
 80109a8:	2001      	movs	r0, #1
 80109aa:	f001 fdf3 	bl	8012594 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 80109ae:	4b67      	ldr	r3, [pc, #412]	@ (8010b4c <_tx_thread_create+0x2d8>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80109b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d06b      	beq.n	8010a92 <_tx_thread_create+0x21e>
 80109ba:	4b65      	ldr	r3, [pc, #404]	@ (8010b50 <_tx_thread_create+0x2dc>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d065      	beq.n	8010a92 <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80109c6:	f3ef 8305 	mrs	r3, IPSR
 80109ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 80109cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80109ce:	4b61      	ldr	r3, [pc, #388]	@ (8010b54 <_tx_thread_create+0x2e0>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	4313      	orrs	r3, r2
 80109d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80109d6:	4b60      	ldr	r3, [pc, #384]	@ (8010b58 <_tx_thread_create+0x2e4>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	653b      	str	r3, [r7, #80]	@ 0x50
 80109dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d10b      	bne.n	80109fa <_tx_thread_create+0x186>
 80109e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80109e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80109ec:	041a      	lsls	r2, r3, #16
 80109ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109f0:	4313      	orrs	r3, r2
 80109f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80109f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80109f8:	e00e      	b.n	8010a18 <_tx_thread_create+0x1a4>
 80109fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109fc:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8010a00:	d205      	bcs.n	8010a0e <_tx_thread_create+0x19a>
 8010a02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a04:	657b      	str	r3, [r7, #84]	@ 0x54
 8010a06:	f04f 33ff 	mov.w	r3, #4294967295
 8010a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a0c:	e004      	b.n	8010a18 <_tx_thread_create+0x1a4>
 8010a0e:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8010a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a14:	2300      	movs	r3, #0
 8010a16:	657b      	str	r3, [r7, #84]	@ 0x54
 8010a18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a1c:	601a      	str	r2, [r3, #0]
 8010a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010a22:	605a      	str	r2, [r3, #4]
 8010a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a26:	2264      	movs	r2, #100	@ 0x64
 8010a28:	609a      	str	r2, [r3, #8]
 8010a2a:	4b4c      	ldr	r3, [pc, #304]	@ (8010b5c <_tx_thread_create+0x2e8>)
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a30:	60da      	str	r2, [r3, #12]
 8010a32:	68fa      	ldr	r2, [r7, #12]
 8010a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a36:	611a      	str	r2, [r3, #16]
 8010a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a3a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010a3c:	615a      	str	r2, [r3, #20]
 8010a3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a42:	619a      	str	r2, [r3, #24]
 8010a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a46:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010a48:	61da      	str	r2, [r3, #28]
 8010a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a4c:	3320      	adds	r3, #32
 8010a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010a50:	4b43      	ldr	r3, [pc, #268]	@ (8010b60 <_tx_thread_create+0x2ec>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d314      	bcc.n	8010a84 <_tx_thread_create+0x210>
 8010a5a:	4b42      	ldr	r3, [pc, #264]	@ (8010b64 <_tx_thread_create+0x2f0>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010a60:	4a3a      	ldr	r2, [pc, #232]	@ (8010b4c <_tx_thread_create+0x2d8>)
 8010a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a64:	6013      	str	r3, [r2, #0]
 8010a66:	4b40      	ldr	r3, [pc, #256]	@ (8010b68 <_tx_thread_create+0x2f4>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010a6c:	621a      	str	r2, [r3, #32]
 8010a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8010b6c <_tx_thread_create+0x2f8>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d00d      	beq.n	8010a92 <_tx_thread_create+0x21e>
 8010a76:	4b3d      	ldr	r3, [pc, #244]	@ (8010b6c <_tx_thread_create+0x2f8>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	4a3b      	ldr	r2, [pc, #236]	@ (8010b68 <_tx_thread_create+0x2f4>)
 8010a7c:	6812      	ldr	r2, [r2, #0]
 8010a7e:	4610      	mov	r0, r2
 8010a80:	4798      	blx	r3
 8010a82:	e006      	b.n	8010a92 <_tx_thread_create+0x21e>
 8010a84:	4a31      	ldr	r2, [pc, #196]	@ (8010b4c <_tx_thread_create+0x2d8>)
 8010a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a88:	6013      	str	r3, [r2, #0]
 8010a8a:	4b37      	ldr	r3, [pc, #220]	@ (8010b68 <_tx_thread_create+0x2f4>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010a90:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010a92:	4b37      	ldr	r3, [pc, #220]	@ (8010b70 <_tx_thread_create+0x2fc>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	3301      	adds	r3, #1
 8010a98:	4a35      	ldr	r2, [pc, #212]	@ (8010b70 <_tx_thread_create+0x2fc>)
 8010a9a:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8010a9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d129      	bne.n	8010af6 <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010aa2:	f3ef 8305 	mrs	r3, IPSR
 8010aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8010aa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8010aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8010b54 <_tx_thread_create+0x2e0>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8010ab4:	d30d      	bcc.n	8010ad2 <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8010ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8010b74 <_tx_thread_create+0x300>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8010abc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d009      	beq.n	8010ad6 <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8010ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ac6:	65bb      	str	r3, [r7, #88]	@ 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8010ac8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ace:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010ad0:	e001      	b.n	8010ad6 <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010adc:	f383 8810 	msr	PRIMASK, r3
}
 8010ae0:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8010ae2:	68f8      	ldr	r0, [r7, #12]
 8010ae4:	f000 fb00 	bl	80110e8 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8010ae8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d01e      	beq.n	8010b2c <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8010aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010af0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010af2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010af4:	e01a      	b.n	8010b2c <_tx_thread_create+0x2b8>
 8010af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010af8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	f383 8810 	msr	PRIMASK, r3
}
 8010b00:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b02:	f3ef 8310 	mrs	r3, PRIMASK
 8010b06:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010b08:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010b0a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b0c:	b672      	cpsid	i
    return(int_posture);
 8010b0e:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8010b10:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8010b12:	4b17      	ldr	r3, [pc, #92]	@ (8010b70 <_tx_thread_create+0x2fc>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	3b01      	subs	r3, #1
 8010b18:	4a15      	ldr	r2, [pc, #84]	@ (8010b70 <_tx_thread_create+0x2fc>)
 8010b1a:	6013      	str	r3, [r2, #0]
 8010b1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b1e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b20:	6a3b      	ldr	r3, [r7, #32]
 8010b22:	f383 8810 	msr	PRIMASK, r3
}
 8010b26:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8010b28:	f000 faa4 	bl	8011074 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8010b2c:	2300      	movs	r3, #0
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3760      	adds	r7, #96	@ 0x60
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}
 8010b36:	bf00      	nop
 8010b38:	080119fd 	.word	0x080119fd
 8010b3c:	08010bf5 	.word	0x08010bf5
 8010b40:	54485244 	.word	0x54485244
 8010b44:	200069b0 	.word	0x200069b0
 8010b48:	200069ac 	.word	0x200069ac
 8010b4c:	20006fc0 	.word	0x20006fc0
 8010b50:	20006fc4 	.word	0x20006fc4
 8010b54:	20000048 	.word	0x20000048
 8010b58:	200069a4 	.word	0x200069a4
 8010b5c:	e0001004 	.word	0xe0001004
 8010b60:	20006fbc 	.word	0x20006fbc
 8010b64:	20006fb8 	.word	0x20006fb8
 8010b68:	20006fac 	.word	0x20006fac
 8010b6c:	20006fc8 	.word	0x20006fc8
 8010b70:	20006a3c 	.word	0x20006a3c
 8010b74:	200069a8 	.word	0x200069a8

08010b78 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8010b7c:	4b13      	ldr	r3, [pc, #76]	@ (8010bcc <_tx_thread_initialize+0x54>)
 8010b7e:	2200      	movs	r2, #0
 8010b80:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8010b82:	4b13      	ldr	r3, [pc, #76]	@ (8010bd0 <_tx_thread_initialize+0x58>)
 8010b84:	2200      	movs	r2, #0
 8010b86:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8010b88:	4b12      	ldr	r3, [pc, #72]	@ (8010bd4 <_tx_thread_initialize+0x5c>)
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010b8e:	4b12      	ldr	r3, [pc, #72]	@ (8010bd8 <_tx_thread_initialize+0x60>)
 8010b90:	2220      	movs	r2, #32
 8010b92:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8010b94:	2280      	movs	r2, #128	@ 0x80
 8010b96:	2100      	movs	r1, #0
 8010b98:	4810      	ldr	r0, [pc, #64]	@ (8010bdc <_tx_thread_initialize+0x64>)
 8010b9a:	f001 ffbd 	bl	8012b18 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8010b9e:	4b10      	ldr	r3, [pc, #64]	@ (8010be0 <_tx_thread_initialize+0x68>)
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8010ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8010be4 <_tx_thread_initialize+0x6c>)
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8010baa:	4b0f      	ldr	r3, [pc, #60]	@ (8010be8 <_tx_thread_initialize+0x70>)
 8010bac:	2200      	movs	r2, #0
 8010bae:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8010bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8010bec <_tx_thread_initialize+0x74>)
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 8010bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8010bf0 <_tx_thread_initialize+0x78>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	f043 2301 	orr.w	r3, r3, #16777472	@ 0x1000100
 8010bbe:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
    _tx_build_options =  _tx_build_options 
 8010bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8010bf0 <_tx_thread_initialize+0x78>)
 8010bc4:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8010bc6:	bf00      	nop
 8010bc8:	bd80      	pop	{r7, pc}
 8010bca:	bf00      	nop
 8010bcc:	200069a4 	.word	0x200069a4
 8010bd0:	200069a8 	.word	0x200069a8
 8010bd4:	200069b4 	.word	0x200069b4
 8010bd8:	200069b8 	.word	0x200069b8
 8010bdc:	200069bc 	.word	0x200069bc
 8010be0:	200069ac 	.word	0x200069ac
 8010be4:	200069b0 	.word	0x200069b0
 8010be8:	20006a3c 	.word	0x20006a3c
 8010bec:	20006a40 	.word	0x20006a40
 8010bf0:	20006a44 	.word	0x20006a44

08010bf4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b088      	sub	sp, #32
 8010bf8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010bfa:	4b21      	ldr	r3, [pc, #132]	@ (8010c80 <_tx_thread_shell_entry+0x8c>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8010c00:	69fb      	ldr	r3, [r7, #28]
 8010c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c04:	69fa      	ldr	r2, [r7, #28]
 8010c06:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8010c08:	4610      	mov	r0, r2
 8010c0a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8010c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8010c84 <_tx_thread_shell_entry+0x90>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d003      	beq.n	8010c1c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8010c14:	4b1b      	ldr	r3, [pc, #108]	@ (8010c84 <_tx_thread_shell_entry+0x90>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	69f8      	ldr	r0, [r7, #28]
 8010c1a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8010c20:	607b      	str	r3, [r7, #4]
    return(posture);
 8010c22:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8010c24:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c26:	b672      	cpsid	i
    return(int_posture);
 8010c28:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8010c2a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	2201      	movs	r2, #1
 8010c36:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010c3e:	4b12      	ldr	r3, [pc, #72]	@ (8010c88 <_tx_thread_shell_entry+0x94>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	3301      	adds	r3, #1
 8010c44:	4a10      	ldr	r2, [pc, #64]	@ (8010c88 <_tx_thread_shell_entry+0x94>)
 8010c46:	6013      	str	r3, [r2, #0]
 8010c48:	69bb      	ldr	r3, [r7, #24]
 8010c4a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	f383 8810 	msr	PRIMASK, r3
}
 8010c52:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8010c54:	f3ef 8314 	mrs	r3, CONTROL
 8010c58:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8010c5a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8010c5c:	617b      	str	r3, [r7, #20]
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	f023 0304 	bic.w	r3, r3, #4
 8010c64:	617b      	str	r3, [r7, #20]
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	f383 8814 	msr	CONTROL, r3
}
 8010c70:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8010c72:	69f8      	ldr	r0, [r7, #28]
 8010c74:	f000 fbf2 	bl	801145c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010c78:	bf00      	nop
 8010c7a:	3720      	adds	r7, #32
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	200069a4 	.word	0x200069a4
 8010c84:	20006a40 	.word	0x20006a40
 8010c88:	20006a3c 	.word	0x20006a3c

08010c8c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b094      	sub	sp, #80	@ 0x50
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c94:	f3ef 8310 	mrs	r3, PRIMASK
 8010c98:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8010c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8010c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c9e:	b672      	cpsid	i
    return(int_posture);
 8010ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8010ca2:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8010e64 <_tx_thread_sleep+0x1d8>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8010caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d108      	bne.n	8010cc2 <_tx_thread_sleep+0x36>
 8010cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cb6:	f383 8810 	msr	PRIMASK, r3
}
 8010cba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8010cbc:	2313      	movs	r3, #19
 8010cbe:	60fb      	str	r3, [r7, #12]
 8010cc0:	e0ca      	b.n	8010e58 <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010cc2:	f3ef 8305 	mrs	r3, IPSR
 8010cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8010cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8010cca:	4b67      	ldr	r3, [pc, #412]	@ (8010e68 <_tx_thread_sleep+0x1dc>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	4313      	orrs	r3, r2
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d008      	beq.n	8010ce6 <_tx_thread_sleep+0x5a>
 8010cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cda:	f383 8810 	msr	PRIMASK, r3
}
 8010cde:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8010ce0:	2313      	movs	r3, #19
 8010ce2:	60fb      	str	r3, [r7, #12]
 8010ce4:	e0b8      	b.n	8010e58 <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8010ce6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ce8:	4a60      	ldr	r2, [pc, #384]	@ (8010e6c <_tx_thread_sleep+0x1e0>)
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d108      	bne.n	8010d00 <_tx_thread_sleep+0x74>
 8010cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cf0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010cf2:	6a3b      	ldr	r3, [r7, #32]
 8010cf4:	f383 8810 	msr	PRIMASK, r3
}
 8010cf8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8010cfa:	2313      	movs	r3, #19
 8010cfc:	60fb      	str	r3, [r7, #12]
 8010cfe:	e0ab      	b.n	8010e58 <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d108      	bne.n	8010d18 <_tx_thread_sleep+0x8c>
 8010d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d08:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d0a:	69fb      	ldr	r3, [r7, #28]
 8010d0c:	f383 8810 	msr	PRIMASK, r3
}
 8010d10:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8010d12:	2300      	movs	r3, #0
 8010d14:	60fb      	str	r3, [r7, #12]
 8010d16:	e09f      	b.n	8010e58 <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8010d18:	4b55      	ldr	r3, [pc, #340]	@ (8010e70 <_tx_thread_sleep+0x1e4>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d008      	beq.n	8010d32 <_tx_thread_sleep+0xa6>
 8010d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d22:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d24:	69bb      	ldr	r3, [r7, #24]
 8010d26:	f383 8810 	msr	PRIMASK, r3
}
 8010d2a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8010d2c:	2313      	movs	r3, #19
 8010d2e:	60fb      	str	r3, [r7, #12]
 8010d30:	e092      	b.n	8010e58 <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 8010d32:	4b50      	ldr	r3, [pc, #320]	@ (8010e74 <_tx_thread_sleep+0x1e8>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d06d      	beq.n	8010e1a <_tx_thread_sleep+0x18e>
 8010d3e:	4b4e      	ldr	r3, [pc, #312]	@ (8010e78 <_tx_thread_sleep+0x1ec>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d067      	beq.n	8010e1a <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010d4a:	f3ef 8305 	mrs	r3, IPSR
 8010d4e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8010d50:	697a      	ldr	r2, [r7, #20]
 8010d52:	4b45      	ldr	r3, [pc, #276]	@ (8010e68 <_tx_thread_sleep+0x1dc>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	4313      	orrs	r3, r2
 8010d58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010d5a:	4b42      	ldr	r3, [pc, #264]	@ (8010e64 <_tx_thread_sleep+0x1d8>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d10b      	bne.n	8010d7e <_tx_thread_sleep+0xf2>
 8010d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d70:	041a      	lsls	r2, r3, #16
 8010d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d74:	4313      	orrs	r3, r2
 8010d76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d7c:	e00e      	b.n	8010d9c <_tx_thread_sleep+0x110>
 8010d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d80:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8010d84:	d205      	bcs.n	8010d92 <_tx_thread_sleep+0x106>
 8010d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8010d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d90:	e004      	b.n	8010d9c <_tx_thread_sleep+0x110>
 8010d92:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8010d96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d98:	2300      	movs	r3, #0
 8010d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010da0:	601a      	str	r2, [r3, #0]
 8010da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010da4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010da6:	605a      	str	r2, [r3, #4]
 8010da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010daa:	2270      	movs	r2, #112	@ 0x70
 8010dac:	609a      	str	r2, [r3, #8]
 8010dae:	4b33      	ldr	r3, [pc, #204]	@ (8010e7c <_tx_thread_sleep+0x1f0>)
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010db4:	60da      	str	r2, [r3, #12]
 8010db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	611a      	str	r2, [r3, #16]
 8010dbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dc2:	615a      	str	r2, [r3, #20]
 8010dc4:	f107 020c 	add.w	r2, r7, #12
 8010dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dca:	619a      	str	r2, [r3, #24]
 8010dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dce:	2200      	movs	r2, #0
 8010dd0:	61da      	str	r2, [r3, #28]
 8010dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dd4:	3320      	adds	r3, #32
 8010dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010dd8:	4b29      	ldr	r3, [pc, #164]	@ (8010e80 <_tx_thread_sleep+0x1f4>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d314      	bcc.n	8010e0c <_tx_thread_sleep+0x180>
 8010de2:	4b28      	ldr	r3, [pc, #160]	@ (8010e84 <_tx_thread_sleep+0x1f8>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010de8:	4a22      	ldr	r2, [pc, #136]	@ (8010e74 <_tx_thread_sleep+0x1e8>)
 8010dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dec:	6013      	str	r3, [r2, #0]
 8010dee:	4b26      	ldr	r3, [pc, #152]	@ (8010e88 <_tx_thread_sleep+0x1fc>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010df4:	621a      	str	r2, [r3, #32]
 8010df6:	4b25      	ldr	r3, [pc, #148]	@ (8010e8c <_tx_thread_sleep+0x200>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d00d      	beq.n	8010e1a <_tx_thread_sleep+0x18e>
 8010dfe:	4b23      	ldr	r3, [pc, #140]	@ (8010e8c <_tx_thread_sleep+0x200>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	4a21      	ldr	r2, [pc, #132]	@ (8010e88 <_tx_thread_sleep+0x1fc>)
 8010e04:	6812      	ldr	r2, [r2, #0]
 8010e06:	4610      	mov	r0, r2
 8010e08:	4798      	blx	r3
 8010e0a:	e006      	b.n	8010e1a <_tx_thread_sleep+0x18e>
 8010e0c:	4a19      	ldr	r2, [pc, #100]	@ (8010e74 <_tx_thread_sleep+0x1e8>)
 8010e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e10:	6013      	str	r3, [r2, #0]
 8010e12:	4b1d      	ldr	r3, [pc, #116]	@ (8010e88 <_tx_thread_sleep+0x1fc>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010e18:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8010e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e1c:	2204      	movs	r2, #4
 8010e1e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010e20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e22:	2201      	movs	r2, #1
 8010e24:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e28:	2200      	movs	r2, #0
 8010e2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8010e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010e34:	4b0e      	ldr	r3, [pc, #56]	@ (8010e70 <_tx_thread_sleep+0x1e4>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	3301      	adds	r3, #1
 8010e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8010e70 <_tx_thread_sleep+0x1e4>)
 8010e3c:	6013      	str	r3, [r2, #0]
 8010e3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e40:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	f383 8810 	msr	PRIMASK, r3
}
 8010e48:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010e4a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010e4c:	f000 fb06 	bl	801145c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8010e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010e56:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 8010e58:	68fb      	ldr	r3, [r7, #12]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3750      	adds	r7, #80	@ 0x50
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	200069a4 	.word	0x200069a4
 8010e68:	20000048 	.word	0x20000048
 8010e6c:	20006aec 	.word	0x20006aec
 8010e70:	20006a3c 	.word	0x20006a3c
 8010e74:	20006fc0 	.word	0x20006fc0
 8010e78:	20006fc4 	.word	0x20006fc4
 8010e7c:	e0001004 	.word	0xe0001004
 8010e80:	20006fbc 	.word	0x20006fbc
 8010e84:	20006fb8 	.word	0x20006fb8
 8010e88:	20006fac 	.word	0x20006fac
 8010e8c:	20006fc8 	.word	0x20006fc8

08010e90 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b090      	sub	sp, #64	@ 0x40
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010e98:	f3ef 8310 	mrs	r3, PRIMASK
 8010e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8010e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8010ea0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010ea2:	b672      	cpsid	i
    return(int_posture);
 8010ea4:	6a3b      	ldr	r3, [r7, #32]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8010ea6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8010ea8:	4b68      	ldr	r3, [pc, #416]	@ (801104c <_tx_thread_suspend+0x1bc>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	633b      	str	r3, [r7, #48]	@ 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND_API, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 8010eae:	4b68      	ldr	r3, [pc, #416]	@ (8011050 <_tx_thread_suspend+0x1c0>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d06d      	beq.n	8010f96 <_tx_thread_suspend+0x106>
 8010eba:	4b66      	ldr	r3, [pc, #408]	@ (8011054 <_tx_thread_suspend+0x1c4>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d067      	beq.n	8010f96 <_tx_thread_suspend+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010ec6:	f3ef 8305 	mrs	r3, IPSR
 8010eca:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8010ecc:	69fa      	ldr	r2, [r7, #28]
 8010ece:	4b62      	ldr	r3, [pc, #392]	@ (8011058 <_tx_thread_suspend+0x1c8>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	4313      	orrs	r3, r2
 8010ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010ed6:	4b5d      	ldr	r3, [pc, #372]	@ (801104c <_tx_thread_suspend+0x1bc>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d10b      	bne.n	8010efa <_tx_thread_suspend+0x6a>
 8010ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010eec:	041a      	lsls	r2, r3, #16
 8010eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ef0:	4313      	orrs	r3, r2
 8010ef2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010ef8:	e00e      	b.n	8010f18 <_tx_thread_suspend+0x88>
 8010efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010efc:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8010f00:	d205      	bcs.n	8010f0e <_tx_thread_suspend+0x7e>
 8010f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f06:	f04f 33ff 	mov.w	r3, #4294967295
 8010f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f0c:	e004      	b.n	8010f18 <_tx_thread_suspend+0x88>
 8010f0e:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8010f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f14:	2300      	movs	r3, #0
 8010f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f1c:	601a      	str	r2, [r3, #0]
 8010f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010f22:	605a      	str	r2, [r3, #4]
 8010f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f26:	2272      	movs	r2, #114	@ 0x72
 8010f28:	609a      	str	r2, [r3, #8]
 8010f2a:	4b4c      	ldr	r3, [pc, #304]	@ (801105c <_tx_thread_suspend+0x1cc>)
 8010f2c:	681a      	ldr	r2, [r3, #0]
 8010f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f30:	60da      	str	r2, [r3, #12]
 8010f32:	687a      	ldr	r2, [r7, #4]
 8010f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f36:	611a      	str	r2, [r3, #16]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f3e:	615a      	str	r2, [r3, #20]
 8010f40:	f107 020c 	add.w	r2, r7, #12
 8010f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f46:	619a      	str	r2, [r3, #24]
 8010f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	61da      	str	r2, [r3, #28]
 8010f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f50:	3320      	adds	r3, #32
 8010f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f54:	4b42      	ldr	r3, [pc, #264]	@ (8011060 <_tx_thread_suspend+0x1d0>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d314      	bcc.n	8010f88 <_tx_thread_suspend+0xf8>
 8010f5e:	4b41      	ldr	r3, [pc, #260]	@ (8011064 <_tx_thread_suspend+0x1d4>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f64:	4a3a      	ldr	r2, [pc, #232]	@ (8011050 <_tx_thread_suspend+0x1c0>)
 8010f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f68:	6013      	str	r3, [r2, #0]
 8010f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8011068 <_tx_thread_suspend+0x1d8>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f70:	621a      	str	r2, [r3, #32]
 8010f72:	4b3e      	ldr	r3, [pc, #248]	@ (801106c <_tx_thread_suspend+0x1dc>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d00d      	beq.n	8010f96 <_tx_thread_suspend+0x106>
 8010f7a:	4b3c      	ldr	r3, [pc, #240]	@ (801106c <_tx_thread_suspend+0x1dc>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8011068 <_tx_thread_suspend+0x1d8>)
 8010f80:	6812      	ldr	r2, [r2, #0]
 8010f82:	4610      	mov	r0, r2
 8010f84:	4798      	blx	r3
 8010f86:	e006      	b.n	8010f96 <_tx_thread_suspend+0x106>
 8010f88:	4a31      	ldr	r2, [pc, #196]	@ (8011050 <_tx_thread_suspend+0x1c0>)
 8010f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f8c:	6013      	str	r3, [r2, #0]
 8010f8e:	4b36      	ldr	r3, [pc, #216]	@ (8011068 <_tx_thread_suspend+0x1d8>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f94:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d130      	bne.n	8011000 <_tx_thread_suspend+0x170>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010fa2:	f3ef 8305 	mrs	r3, IPSR
 8010fa6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010fa8:	69ba      	ldr	r2, [r7, #24]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8010faa:	4b2b      	ldr	r3, [pc, #172]	@ (8011058 <_tx_thread_suspend+0x1c8>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	4313      	orrs	r3, r2
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d109      	bne.n	8010fc8 <_tx_thread_suspend+0x138>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8010fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d105      	bne.n	8010fc8 <_tx_thread_suspend+0x138>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8010fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8011070 <_tx_thread_suspend+0x1e0>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d001      	beq.n	8010fc8 <_tx_thread_suspend+0x138>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 8010fc4:	2314      	movs	r3, #20
 8010fc6:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d132      	bne.n	8011034 <_tx_thread_suspend+0x1a4>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2203      	movs	r2, #3
 8010fd2:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010fe0:	4b23      	ldr	r3, [pc, #140]	@ (8011070 <_tx_thread_suspend+0x1e0>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	4a22      	ldr	r2, [pc, #136]	@ (8011070 <_tx_thread_suspend+0x1e0>)
 8010fe8:	6013      	str	r3, [r2, #0]
 8010fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	f383 8810 	msr	PRIMASK, r3
}
 8010ff4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 fa30 	bl	801145c <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	e020      	b.n	8011042 <_tx_thread_suspend+0x1b2>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011004:	2b02      	cmp	r3, #2
 8011006:	d102      	bne.n	801100e <_tx_thread_suspend+0x17e>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8011008:	2314      	movs	r3, #20
 801100a:	60fb      	str	r3, [r7, #12]
 801100c:	e012      	b.n	8011034 <_tx_thread_suspend+0x1a4>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011012:	2b01      	cmp	r3, #1
 8011014:	d102      	bne.n	801101c <_tx_thread_suspend+0x18c>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8011016:	2314      	movs	r3, #20
 8011018:	60fb      	str	r3, [r7, #12]
 801101a:	e00b      	b.n	8011034 <_tx_thread_suspend+0x1a4>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011020:	2b03      	cmp	r3, #3
 8011022:	d102      	bne.n	801102a <_tx_thread_suspend+0x19a>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8011024:	2300      	movs	r3, #0
 8011026:	60fb      	str	r3, [r7, #12]
 8011028:	e004      	b.n	8011034 <_tx_thread_suspend+0x1a4>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2201      	movs	r2, #1
 801102e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8011030:	2300      	movs	r3, #0
 8011032:	60fb      	str	r3, [r7, #12]
 8011034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011036:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	f383 8810 	msr	PRIMASK, r3
}
 801103e:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8011040:	68fb      	ldr	r3, [r7, #12]
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8011042:	4618      	mov	r0, r3
 8011044:	3740      	adds	r7, #64	@ 0x40
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	200069a4 	.word	0x200069a4
 8011050:	20006fc0 	.word	0x20006fc0
 8011054:	20006fc4 	.word	0x20006fc4
 8011058:	20000048 	.word	0x20000048
 801105c:	e0001004 	.word	0xe0001004
 8011060:	20006fbc 	.word	0x20006fbc
 8011064:	20006fb8 	.word	0x20006fb8
 8011068:	20006fac 	.word	0x20006fac
 801106c:	20006fc8 	.word	0x20006fc8
 8011070:	20006a3c 	.word	0x20006a3c

08011074 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8011074:	b480      	push	{r7}
 8011076:	b089      	sub	sp, #36	@ 0x24
 8011078:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801107a:	4b17      	ldr	r3, [pc, #92]	@ (80110d8 <_tx_thread_system_preempt_check+0x64>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8011080:	69fb      	ldr	r3, [r7, #28]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d121      	bne.n	80110ca <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8011086:	4b15      	ldr	r3, [pc, #84]	@ (80110dc <_tx_thread_system_preempt_check+0x68>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 801108c:	4b14      	ldr	r3, [pc, #80]	@ (80110e0 <_tx_thread_system_preempt_check+0x6c>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8011092:	69ba      	ldr	r2, [r7, #24]
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	429a      	cmp	r2, r3
 8011098:	d017      	beq.n	80110ca <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801109a:	4b12      	ldr	r3, [pc, #72]	@ (80110e4 <_tx_thread_system_preempt_check+0x70>)
 801109c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80110a0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80110a2:	f3ef 8305 	mrs	r3, IPSR
 80110a6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80110a8:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d10c      	bne.n	80110c8 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80110ae:	f3ef 8310 	mrs	r3, PRIMASK
 80110b2:	60fb      	str	r3, [r7, #12]
    return(posture);
 80110b4:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80110b6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80110b8:	b662      	cpsie	i
}
 80110ba:	bf00      	nop
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	f383 8810 	msr	PRIMASK, r3
}
 80110c6:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80110c8:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80110ca:	bf00      	nop
 80110cc:	3724      	adds	r7, #36	@ 0x24
 80110ce:	46bd      	mov	sp, r7
 80110d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d4:	4770      	bx	lr
 80110d6:	bf00      	nop
 80110d8:	20006a3c 	.word	0x20006a3c
 80110dc:	200069a4 	.word	0x200069a4
 80110e0:	200069a8 	.word	0x200069a8
 80110e4:	e000ed04 	.word	0xe000ed04

080110e8 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b09e      	sub	sp, #120	@ 0x78
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 80110f0:	2300      	movs	r3, #0
 80110f2:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80110f4:	f3ef 8310 	mrs	r3, PRIMASK
 80110f8:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 80110fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 80110fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80110fe:	b672      	cpsid	i
    return(int_posture);
 8011100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011102:	66bb      	str	r3, [r7, #104]	@ 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011108:	2b00      	cmp	r3, #0
 801110a:	d005      	beq.n	8011118 <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	334c      	adds	r3, #76	@ 0x4c
 8011110:	4618      	mov	r0, r3
 8011112:	f000 fdaf 	bl	8011c74 <_tx_timer_system_deactivate>
 8011116:	e002      	b.n	801111e <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	2200      	movs	r2, #0
 801111c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 801111e:	4b8b      	ldr	r3, [pc, #556]	@ (801134c <_tx_thread_system_resume+0x264>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	667b      	str	r3, [r7, #100]	@ 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8011124:	4b89      	ldr	r3, [pc, #548]	@ (801134c <_tx_thread_system_resume+0x264>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	663b      	str	r3, [r7, #96]	@ 0x60
 801112a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801112c:	2b00      	cmp	r3, #0
 801112e:	d06f      	beq.n	8011210 <_tx_thread_system_resume+0x128>
 8011130:	4b87      	ldr	r3, [pc, #540]	@ (8011350 <_tx_thread_system_resume+0x268>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f003 0301 	and.w	r3, r3, #1
 8011138:	2b00      	cmp	r3, #0
 801113a:	d069      	beq.n	8011210 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801113c:	f3ef 8305 	mrs	r3, IPSR
 8011140:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(ipsr_value);
 8011142:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011144:	4b83      	ldr	r3, [pc, #524]	@ (8011354 <_tx_thread_system_resume+0x26c>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4313      	orrs	r3, r2
 801114a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801114c:	4b82      	ldr	r3, [pc, #520]	@ (8011358 <_tx_thread_system_resume+0x270>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011152:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011154:	2b00      	cmp	r3, #0
 8011156:	d10b      	bne.n	8011170 <_tx_thread_system_resume+0x88>
 8011158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801115a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801115c:	673b      	str	r3, [r7, #112]	@ 0x70
 801115e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011162:	041a      	lsls	r2, r3, #16
 8011164:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011166:	4313      	orrs	r3, r2
 8011168:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801116c:	673b      	str	r3, [r7, #112]	@ 0x70
 801116e:	e00e      	b.n	801118e <_tx_thread_system_resume+0xa6>
 8011170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011172:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8011176:	d205      	bcs.n	8011184 <_tx_thread_system_resume+0x9c>
 8011178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801117a:	673b      	str	r3, [r7, #112]	@ 0x70
 801117c:	f04f 33ff 	mov.w	r3, #4294967295
 8011180:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011182:	e004      	b.n	801118e <_tx_thread_system_resume+0xa6>
 8011184:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8011188:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801118a:	2300      	movs	r3, #0
 801118c:	673b      	str	r3, [r7, #112]	@ 0x70
 801118e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011192:	601a      	str	r2, [r3, #0]
 8011194:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011196:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011198:	605a      	str	r2, [r3, #4]
 801119a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801119c:	2201      	movs	r2, #1
 801119e:	609a      	str	r2, [r3, #8]
 80111a0:	4b6e      	ldr	r3, [pc, #440]	@ (801135c <_tx_thread_system_resume+0x274>)
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80111a6:	60da      	str	r2, [r3, #12]
 80111a8:	687a      	ldr	r2, [r7, #4]
 80111aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80111ac:	611a      	str	r2, [r3, #16]
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80111b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80111b4:	615a      	str	r2, [r3, #20]
 80111b6:	f107 020c 	add.w	r2, r7, #12
 80111ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80111bc:	619a      	str	r2, [r3, #24]
 80111be:	4b68      	ldr	r3, [pc, #416]	@ (8011360 <_tx_thread_system_resume+0x278>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	461a      	mov	r2, r3
 80111c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80111c6:	61da      	str	r2, [r3, #28]
 80111c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80111ca:	3320      	adds	r3, #32
 80111cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80111ce:	4b65      	ldr	r3, [pc, #404]	@ (8011364 <_tx_thread_system_resume+0x27c>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d314      	bcc.n	8011202 <_tx_thread_system_resume+0x11a>
 80111d8:	4b63      	ldr	r3, [pc, #396]	@ (8011368 <_tx_thread_system_resume+0x280>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80111de:	4a5b      	ldr	r2, [pc, #364]	@ (801134c <_tx_thread_system_resume+0x264>)
 80111e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80111e2:	6013      	str	r3, [r2, #0]
 80111e4:	4b61      	ldr	r3, [pc, #388]	@ (801136c <_tx_thread_system_resume+0x284>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80111ea:	621a      	str	r2, [r3, #32]
 80111ec:	4b60      	ldr	r3, [pc, #384]	@ (8011370 <_tx_thread_system_resume+0x288>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d00d      	beq.n	8011210 <_tx_thread_system_resume+0x128>
 80111f4:	4b5e      	ldr	r3, [pc, #376]	@ (8011370 <_tx_thread_system_resume+0x288>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	4a5c      	ldr	r2, [pc, #368]	@ (801136c <_tx_thread_system_resume+0x284>)
 80111fa:	6812      	ldr	r2, [r2, #0]
 80111fc:	4610      	mov	r0, r2
 80111fe:	4798      	blx	r3
 8011200:	e006      	b.n	8011210 <_tx_thread_system_resume+0x128>
 8011202:	4a52      	ldr	r2, [pc, #328]	@ (801134c <_tx_thread_system_resume+0x264>)
 8011204:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011206:	6013      	str	r3, [r2, #0]
 8011208:	4b58      	ldr	r3, [pc, #352]	@ (801136c <_tx_thread_system_resume+0x284>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801120e:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 8011210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011212:	2b00      	cmp	r3, #0
 8011214:	d002      	beq.n	801121c <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8011216:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011218:	68db      	ldr	r3, [r3, #12]
 801121a:	677b      	str	r3, [r7, #116]	@ 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801121c:	4b55      	ldr	r3, [pc, #340]	@ (8011374 <_tx_thread_system_resume+0x28c>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	3b01      	subs	r3, #1
 8011222:	4a54      	ldr	r2, [pc, #336]	@ (8011374 <_tx_thread_system_resume+0x28c>)
 8011224:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801122a:	2b00      	cmp	r3, #0
 801122c:	f040 80b3 	bne.w	8011396 <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011234:	2b00      	cmp	r3, #0
 8011236:	f000 80c7 	beq.w	80113c8 <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801123e:	2b00      	cmp	r3, #0
 8011240:	f040 80a2 	bne.w	8011388 <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2200      	movs	r2, #0
 8011248:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801124e:	65bb      	str	r3, [r7, #88]	@ 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8011250:	4a49      	ldr	r2, [pc, #292]	@ (8011378 <_tx_thread_system_resume+0x290>)
 8011252:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011258:	657b      	str	r3, [r7, #84]	@ 0x54
                if (head_ptr == TX_NULL)
 801125a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801125c:	2b00      	cmp	r3, #0
 801125e:	d164      	bne.n	801132a <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8011260:	4945      	ldr	r1, [pc, #276]	@ (8011378 <_tx_thread_system_resume+0x290>)
 8011262:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	687a      	ldr	r2, [r7, #4]
 801126e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8011276:	2201      	movs	r2, #1
 8011278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801127a:	fa02 f303 	lsl.w	r3, r2, r3
 801127e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8011280:	4b3e      	ldr	r3, [pc, #248]	@ (801137c <_tx_thread_system_resume+0x294>)
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011286:	4313      	orrs	r3, r2
 8011288:	4a3c      	ldr	r2, [pc, #240]	@ (801137c <_tx_thread_system_resume+0x294>)
 801128a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 801128c:	4b3c      	ldr	r3, [pc, #240]	@ (8011380 <_tx_thread_system_resume+0x298>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011292:	429a      	cmp	r2, r3
 8011294:	f080 8098 	bcs.w	80113c8 <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8011298:	4a39      	ldr	r2, [pc, #228]	@ (8011380 <_tx_thread_system_resume+0x298>)
 801129a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801129c:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 801129e:	4b30      	ldr	r3, [pc, #192]	@ (8011360 <_tx_thread_system_resume+0x278>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d103      	bne.n	80112b2 <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80112aa:	4a2d      	ldr	r2, [pc, #180]	@ (8011360 <_tx_thread_system_resume+0x278>)
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6013      	str	r3, [r2, #0]
 80112b0:	e08a      	b.n	80113c8 <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80112b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80112b8:	429a      	cmp	r2, r3
 80112ba:	f080 8085 	bcs.w	80113c8 <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80112be:	4a28      	ldr	r2, [pc, #160]	@ (8011360 <_tx_thread_system_resume+0x278>)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 80112c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d009      	beq.n	80112de <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80112ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80112cc:	68db      	ldr	r3, [r3, #12]
 80112ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d104      	bne.n	80112de <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80112d4:	4b22      	ldr	r3, [pc, #136]	@ (8011360 <_tx_thread_system_resume+0x278>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	461a      	mov	r2, r3
 80112da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80112dc:	61da      	str	r2, [r3, #28]
 80112de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80112e0:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80112e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112e4:	f383 8810 	msr	PRIMASK, r3
}
 80112e8:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80112ea:	4b22      	ldr	r3, [pc, #136]	@ (8011374 <_tx_thread_system_resume+0x28c>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	64bb      	str	r3, [r7, #72]	@ 0x48
                                if (combined_flags == ((ULONG) 0))
 80112f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	f040 80a1 	bne.w	801143a <_tx_thread_system_resume+0x352>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80112f8:	4b22      	ldr	r3, [pc, #136]	@ (8011384 <_tx_thread_system_resume+0x29c>)
 80112fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112fe:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011300:	f3ef 8305 	mrs	r3, IPSR
 8011304:	633b      	str	r3, [r7, #48]	@ 0x30
    return(ipsr_value);
 8011306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    if (_tx_ipsr_get() == 0)
 8011308:	2b00      	cmp	r3, #0
 801130a:	f040 8098 	bne.w	801143e <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801130e:	f3ef 8310 	mrs	r3, PRIMASK
 8011312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8011314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        interrupt_save = __get_interrupt_posture();
 8011316:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011318:	b662      	cpsie	i
}
 801131a:	bf00      	nop
 801131c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801131e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011322:	f383 8810 	msr	PRIMASK, r3
}
 8011326:	bf00      	nop
}
 8011328:	e089      	b.n	801143e <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 801132a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801132c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801132e:	653b      	str	r3, [r7, #80]	@ 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8011330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8011336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011338:	687a      	ldr	r2, [r7, #4]
 801133a:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011340:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011346:	621a      	str	r2, [r3, #32]
 8011348:	e03e      	b.n	80113c8 <_tx_thread_system_resume+0x2e0>
 801134a:	bf00      	nop
 801134c:	20006fc0 	.word	0x20006fc0
 8011350:	20006fc4 	.word	0x20006fc4
 8011354:	20000048 	.word	0x20000048
 8011358:	200069a4 	.word	0x200069a4
 801135c:	e0001004 	.word	0xe0001004
 8011360:	200069a8 	.word	0x200069a8
 8011364:	20006fbc 	.word	0x20006fbc
 8011368:	20006fb8 	.word	0x20006fb8
 801136c:	20006fac 	.word	0x20006fac
 8011370:	20006fc8 	.word	0x20006fc8
 8011374:	20006a3c 	.word	0x20006a3c
 8011378:	200069bc 	.word	0x200069bc
 801137c:	200069b4 	.word	0x200069b4
 8011380:	200069b8 	.word	0x200069b8
 8011384:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2200      	movs	r2, #0
 801138c:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2203      	movs	r2, #3
 8011392:	631a      	str	r2, [r3, #48]	@ 0x30
 8011394:	e018      	b.n	80113c8 <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801139a:	2b01      	cmp	r3, #1
 801139c:	d014      	beq.n	80113c8 <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113a2:	2b02      	cmp	r3, #2
 80113a4:	d010      	beq.n	80113c8 <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d106      	bne.n	80113bc <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2200      	movs	r2, #0
 80113b2:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2200      	movs	r2, #0
 80113b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80113ba:	e005      	b.n	80113c8 <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2200      	movs	r2, #0
 80113c0:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2203      	movs	r2, #3
 80113c6:	631a      	str	r2, [r3, #48]	@ 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 80113c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d009      	beq.n	80113e2 <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80113ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80113d0:	68db      	ldr	r3, [r3, #12]
 80113d2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d104      	bne.n	80113e2 <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80113d8:	4b1c      	ldr	r3, [pc, #112]	@ (801144c <_tx_thread_system_resume+0x364>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	461a      	mov	r2, r3
 80113de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80113e0:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80113e2:	4b1b      	ldr	r3, [pc, #108]	@ (8011450 <_tx_thread_system_resume+0x368>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80113e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80113ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80113ec:	6a3b      	ldr	r3, [r7, #32]
 80113ee:	f383 8810 	msr	PRIMASK, r3
}
 80113f2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80113f4:	4b15      	ldr	r3, [pc, #84]	@ (801144c <_tx_thread_system_resume+0x364>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d022      	beq.n	8011444 <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80113fe:	4b15      	ldr	r3, [pc, #84]	@ (8011454 <_tx_thread_system_resume+0x36c>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (combined_flags == ((ULONG) 0))
 8011404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011406:	2b00      	cmp	r3, #0
 8011408:	d11c      	bne.n	8011444 <_tx_thread_system_resume+0x35c>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801140a:	4b13      	ldr	r3, [pc, #76]	@ (8011458 <_tx_thread_system_resume+0x370>)
 801140c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011410:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011412:	f3ef 8305 	mrs	r3, IPSR
 8011416:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8011418:	69fb      	ldr	r3, [r7, #28]
    if (_tx_ipsr_get() == 0)
 801141a:	2b00      	cmp	r3, #0
 801141c:	d111      	bne.n	8011442 <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801141e:	f3ef 8310 	mrs	r3, PRIMASK
 8011422:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011424:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 8011426:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011428:	b662      	cpsie	i
}
 801142a:	bf00      	nop
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	f383 8810 	msr	PRIMASK, r3
}
 8011436:	bf00      	nop
}
 8011438:	e003      	b.n	8011442 <_tx_thread_system_resume+0x35a>
                                return;
 801143a:	bf00      	nop
 801143c:	e002      	b.n	8011444 <_tx_thread_system_resume+0x35c>
 801143e:	bf00      	nop
 8011440:	e000      	b.n	8011444 <_tx_thread_system_resume+0x35c>
 8011442:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8011444:	3778      	adds	r7, #120	@ 0x78
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}
 801144a:	bf00      	nop
 801144c:	200069a8 	.word	0x200069a8
 8011450:	200069a4 	.word	0x200069a4
 8011454:	20006a3c 	.word	0x20006a3c
 8011458:	e000ed04 	.word	0xe000ed04

0801145c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b0a4      	sub	sp, #144	@ 0x90
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8011464:	2300      	movs	r3, #0
 8011466:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801146a:	4b98      	ldr	r3, [pc, #608]	@ (80116cc <_tx_thread_system_suspend+0x270>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011472:	f3ef 8310 	mrs	r3, PRIMASK
 8011476:	653b      	str	r3, [r7, #80]	@ 0x50
    return(posture);
 8011478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    int_posture = __get_interrupt_posture();
 801147a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 801147c:	b672      	cpsid	i
    return(int_posture);
 801147e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8011480:	67fb      	str	r3, [r7, #124]	@ 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011488:	429a      	cmp	r2, r3
 801148a:	d112      	bne.n	80114b2 <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011490:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8011492:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011494:	2b00      	cmp	r3, #0
 8011496:	d008      	beq.n	80114aa <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8011498:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801149a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801149e:	d004      	beq.n	80114aa <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	334c      	adds	r3, #76	@ 0x4c
 80114a4:	4618      	mov	r0, r3
 80114a6:	f000 fb83 	bl	8011bb0 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	69db      	ldr	r3, [r3, #28]
 80114ae:	4a88      	ldr	r2, [pc, #544]	@ (80116d0 <_tx_thread_system_suspend+0x274>)
 80114b0:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80114b2:	4b88      	ldr	r3, [pc, #544]	@ (80116d4 <_tx_thread_system_suspend+0x278>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	3b01      	subs	r3, #1
 80114b8:	4a86      	ldr	r2, [pc, #536]	@ (80116d4 <_tx_thread_system_suspend+0x278>)
 80114ba:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	f040 817d 	bne.w	80117c0 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 80114c6:	4b84      	ldr	r3, [pc, #528]	@ (80116d8 <_tx_thread_system_suspend+0x27c>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	677b      	str	r3, [r7, #116]	@ 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 80114cc:	4b82      	ldr	r3, [pc, #520]	@ (80116d8 <_tx_thread_system_suspend+0x27c>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80114d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d07c      	beq.n	80115d2 <_tx_thread_system_suspend+0x176>
 80114d8:	4b80      	ldr	r3, [pc, #512]	@ (80116dc <_tx_thread_system_suspend+0x280>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f003 0301 	and.w	r3, r3, #1
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d076      	beq.n	80115d2 <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80114e4:	f3ef 8305 	mrs	r3, IPSR
 80114e8:	64bb      	str	r3, [r7, #72]	@ 0x48
    return(ipsr_value);
 80114ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80114ec:	4b7c      	ldr	r3, [pc, #496]	@ (80116e0 <_tx_thread_system_suspend+0x284>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	4313      	orrs	r3, r2
 80114f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80114f4:	4b75      	ldr	r3, [pc, #468]	@ (80116cc <_tx_thread_system_suspend+0x270>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80114fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d110      	bne.n	8011524 <_tx_thread_system_suspend+0xc8>
 8011502:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801150c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011512:	041a      	lsls	r2, r3, #16
 8011514:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011518:	4313      	orrs	r3, r2
 801151a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801151e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011522:	e013      	b.n	801154c <_tx_thread_system_suspend+0xf0>
 8011524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011526:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 801152a:	d208      	bcs.n	801153e <_tx_thread_system_suspend+0xe2>
 801152c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011530:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011534:	f04f 33ff 	mov.w	r3, #4294967295
 8011538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801153c:	e006      	b.n	801154c <_tx_thread_system_suspend+0xf0>
 801153e:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8011542:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011546:	2300      	movs	r3, #0
 8011548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801154c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011550:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011552:	601a      	str	r2, [r3, #0]
 8011554:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011556:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801155a:	605a      	str	r2, [r3, #4]
 801155c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801155e:	2202      	movs	r2, #2
 8011560:	609a      	str	r2, [r3, #8]
 8011562:	4b60      	ldr	r3, [pc, #384]	@ (80116e4 <_tx_thread_system_suspend+0x288>)
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011568:	60da      	str	r2, [r3, #12]
 801156a:	687a      	ldr	r2, [r7, #4]
 801156c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801156e:	611a      	str	r2, [r3, #16]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011574:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011576:	615a      	str	r2, [r3, #20]
 8011578:	f107 0208 	add.w	r2, r7, #8
 801157c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801157e:	619a      	str	r2, [r3, #24]
 8011580:	4b59      	ldr	r3, [pc, #356]	@ (80116e8 <_tx_thread_system_suspend+0x28c>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	461a      	mov	r2, r3
 8011586:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011588:	61da      	str	r2, [r3, #28]
 801158a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801158c:	3320      	adds	r3, #32
 801158e:	673b      	str	r3, [r7, #112]	@ 0x70
 8011590:	4b56      	ldr	r3, [pc, #344]	@ (80116ec <_tx_thread_system_suspend+0x290>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011596:	429a      	cmp	r2, r3
 8011598:	d314      	bcc.n	80115c4 <_tx_thread_system_suspend+0x168>
 801159a:	4b55      	ldr	r3, [pc, #340]	@ (80116f0 <_tx_thread_system_suspend+0x294>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	673b      	str	r3, [r7, #112]	@ 0x70
 80115a0:	4a4d      	ldr	r2, [pc, #308]	@ (80116d8 <_tx_thread_system_suspend+0x27c>)
 80115a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80115a4:	6013      	str	r3, [r2, #0]
 80115a6:	4b53      	ldr	r3, [pc, #332]	@ (80116f4 <_tx_thread_system_suspend+0x298>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80115ac:	621a      	str	r2, [r3, #32]
 80115ae:	4b52      	ldr	r3, [pc, #328]	@ (80116f8 <_tx_thread_system_suspend+0x29c>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d00d      	beq.n	80115d2 <_tx_thread_system_suspend+0x176>
 80115b6:	4b50      	ldr	r3, [pc, #320]	@ (80116f8 <_tx_thread_system_suspend+0x29c>)
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	4a4e      	ldr	r2, [pc, #312]	@ (80116f4 <_tx_thread_system_suspend+0x298>)
 80115bc:	6812      	ldr	r2, [r2, #0]
 80115be:	4610      	mov	r0, r2
 80115c0:	4798      	blx	r3
 80115c2:	e006      	b.n	80115d2 <_tx_thread_system_suspend+0x176>
 80115c4:	4a44      	ldr	r2, [pc, #272]	@ (80116d8 <_tx_thread_system_suspend+0x27c>)
 80115c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80115c8:	6013      	str	r3, [r2, #0]
 80115ca:	4b4a      	ldr	r3, [pc, #296]	@ (80116f4 <_tx_thread_system_suspend+0x298>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80115d0:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 80115d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d003      	beq.n	80115e0 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 80115d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2200      	movs	r2, #0
 80115e4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115ea:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	6a1b      	ldr	r3, [r3, #32]
 80115f0:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80115f2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d016      	beq.n	8011628 <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115fe:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8011600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011602:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011604:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8011606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011608:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801160a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 801160c:	68bb      	ldr	r3, [r7, #8]
 801160e:	4a3b      	ldr	r2, [pc, #236]	@ (80116fc <_tx_thread_system_suspend+0x2a0>)
 8011610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	429a      	cmp	r2, r3
 8011618:	f040 8085 	bne.w	8011726 <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	4937      	ldr	r1, [pc, #220]	@ (80116fc <_tx_thread_system_suspend+0x2a0>)
 8011620:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011626:	e07e      	b.n	8011726 <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	4a34      	ldr	r2, [pc, #208]	@ (80116fc <_tx_thread_system_suspend+0x2a0>)
 801162c:	2100      	movs	r1, #0
 801162e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	2201      	movs	r2, #1
 8011636:	fa02 f303 	lsl.w	r3, r2, r3
 801163a:	667b      	str	r3, [r7, #100]	@ 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801163c:	4b30      	ldr	r3, [pc, #192]	@ (8011700 <_tx_thread_system_suspend+0x2a4>)
 801163e:	681a      	ldr	r2, [r3, #0]
 8011640:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011642:	43db      	mvns	r3, r3
 8011644:	4013      	ands	r3, r2
 8011646:	4a2e      	ldr	r2, [pc, #184]	@ (8011700 <_tx_thread_system_suspend+0x2a4>)
 8011648:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 801164a:	2300      	movs	r3, #0
 801164c:	663b      	str	r3, [r7, #96]	@ 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 801164e:	4b2c      	ldr	r3, [pc, #176]	@ (8011700 <_tx_thread_system_suspend+0x2a4>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8011654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011656:	2b00      	cmp	r3, #0
 8011658:	d158      	bne.n	801170c <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801165a:	4b2a      	ldr	r3, [pc, #168]	@ (8011704 <_tx_thread_system_suspend+0x2a8>)
 801165c:	2220      	movs	r2, #32
 801165e:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8011660:	4b21      	ldr	r3, [pc, #132]	@ (80116e8 <_tx_thread_system_suspend+0x28c>)
 8011662:	2200      	movs	r2, #0
 8011664:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 8011666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011668:	2b00      	cmp	r3, #0
 801166a:	d008      	beq.n	801167e <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 801166c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011674:	429a      	cmp	r2, r3
 8011676:	d102      	bne.n	801167e <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 8011678:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801167a:	2200      	movs	r2, #0
 801167c:	61da      	str	r2, [r3, #28]
 801167e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011680:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011684:	f383 8810 	msr	PRIMASK, r3
}
 8011688:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801168a:	4b12      	ldr	r3, [pc, #72]	@ (80116d4 <_tx_thread_system_suspend+0x278>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	65bb      	str	r3, [r7, #88]	@ 0x58
                if (combined_flags == ((ULONG) 0))
 8011690:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011692:	2b00      	cmp	r3, #0
 8011694:	f040 80bf 	bne.w	8011816 <_tx_thread_system_suspend+0x3ba>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011698:	4b1b      	ldr	r3, [pc, #108]	@ (8011708 <_tx_thread_system_suspend+0x2ac>)
 801169a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801169e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80116a0:	f3ef 8305 	mrs	r3, IPSR
 80116a4:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 80116a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d10c      	bne.n	80116c6 <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80116ac:	f3ef 8310 	mrs	r3, PRIMASK
 80116b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 80116b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 80116b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80116b6:	b662      	cpsie	i
}
 80116b8:	bf00      	nop
 80116ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116bc:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116c0:	f383 8810 	msr	PRIMASK, r3
}
 80116c4:	bf00      	nop
}
 80116c6:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80116c8:	e0a5      	b.n	8011816 <_tx_thread_system_suspend+0x3ba>
 80116ca:	bf00      	nop
 80116cc:	200069a4 	.word	0x200069a4
 80116d0:	20006fa8 	.word	0x20006fa8
 80116d4:	20006a3c 	.word	0x20006a3c
 80116d8:	20006fc0 	.word	0x20006fc0
 80116dc:	20006fc4 	.word	0x20006fc4
 80116e0:	20000048 	.word	0x20000048
 80116e4:	e0001004 	.word	0xe0001004
 80116e8:	200069a8 	.word	0x200069a8
 80116ec:	20006fbc 	.word	0x20006fbc
 80116f0:	20006fb8 	.word	0x20006fb8
 80116f4:	20006fac 	.word	0x20006fac
 80116f8:	20006fc8 	.word	0x20006fc8
 80116fc:	200069bc 	.word	0x200069bc
 8011700:	200069b4 	.word	0x200069b4
 8011704:	200069b8 	.word	0x200069b8
 8011708:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 801170c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801170e:	fa93 f3a3 	rbit	r3, r3
 8011712:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011714:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011716:	fab3 f383 	clz	r3, r3
 801171a:	667b      	str	r3, [r7, #100]	@ 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 801171c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801171e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011720:	4413      	add	r3, r2
 8011722:	4a41      	ldr	r2, [pc, #260]	@ (8011828 <_tx_thread_system_suspend+0x3cc>)
 8011724:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8011726:	4b41      	ldr	r3, [pc, #260]	@ (801182c <_tx_thread_system_suspend+0x3d0>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	429a      	cmp	r2, r3
 801172e:	d139      	bne.n	80117a4 <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011730:	4b3d      	ldr	r3, [pc, #244]	@ (8011828 <_tx_thread_system_suspend+0x3cc>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	4a3e      	ldr	r2, [pc, #248]	@ (8011830 <_tx_thread_system_suspend+0x3d4>)
 8011736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801173a:	4a3c      	ldr	r2, [pc, #240]	@ (801182c <_tx_thread_system_suspend+0x3d0>)
 801173c:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 801173e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011740:	2b00      	cmp	r3, #0
 8011742:	d00a      	beq.n	801175a <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8011744:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801174c:	429a      	cmp	r2, r3
 801174e:	d104      	bne.n	801175a <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8011750:	4b36      	ldr	r3, [pc, #216]	@ (801182c <_tx_thread_system_suspend+0x3d0>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	461a      	mov	r2, r3
 8011756:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011758:	61da      	str	r2, [r3, #28]
 801175a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801175c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801175e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011760:	f383 8810 	msr	PRIMASK, r3
}
 8011764:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011766:	4b33      	ldr	r3, [pc, #204]	@ (8011834 <_tx_thread_system_suspend+0x3d8>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	65bb      	str	r3, [r7, #88]	@ 0x58
            if (combined_flags == ((ULONG) 0))
 801176c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801176e:	2b00      	cmp	r3, #0
 8011770:	d153      	bne.n	801181a <_tx_thread_system_suspend+0x3be>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011772:	4b31      	ldr	r3, [pc, #196]	@ (8011838 <_tx_thread_system_suspend+0x3dc>)
 8011774:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011778:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801177a:	f3ef 8305 	mrs	r3, IPSR
 801177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 8011780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 8011782:	2b00      	cmp	r3, #0
 8011784:	d10c      	bne.n	80117a0 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011786:	f3ef 8310 	mrs	r3, PRIMASK
 801178a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 801178c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 801178e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011790:	b662      	cpsie	i
}
 8011792:	bf00      	nop
 8011794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011796:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011798:	6a3b      	ldr	r3, [r7, #32]
 801179a:	f383 8810 	msr	PRIMASK, r3
}
 801179e:	bf00      	nop
}
 80117a0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80117a2:	e03a      	b.n	801181a <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 80117a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d00a      	beq.n	80117c0 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80117aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d104      	bne.n	80117c0 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80117b6:	4b1d      	ldr	r3, [pc, #116]	@ (801182c <_tx_thread_system_suspend+0x3d0>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	461a      	mov	r2, r3
 80117bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117be:	61da      	str	r2, [r3, #28]
 80117c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80117c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	f383 8810 	msr	PRIMASK, r3
}
 80117ca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80117cc:	4b17      	ldr	r3, [pc, #92]	@ (801182c <_tx_thread_system_suspend+0x3d0>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d022      	beq.n	801181e <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80117d8:	4b16      	ldr	r3, [pc, #88]	@ (8011834 <_tx_thread_system_suspend+0x3d8>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (combined_flags == ((ULONG) 0))
 80117de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d11c      	bne.n	801181e <_tx_thread_system_suspend+0x3c2>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80117e4:	4b14      	ldr	r3, [pc, #80]	@ (8011838 <_tx_thread_system_suspend+0x3dc>)
 80117e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80117ea:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80117ec:	f3ef 8305 	mrs	r3, IPSR
 80117f0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80117f2:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d10c      	bne.n	8011812 <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80117f8:	f3ef 8310 	mrs	r3, PRIMASK
 80117fc:	617b      	str	r3, [r7, #20]
    return(posture);
 80117fe:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8011800:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011802:	b662      	cpsie	i
}
 8011804:	bf00      	nop
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	f383 8810 	msr	PRIMASK, r3
}
 8011810:	bf00      	nop
}
 8011812:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8011814:	e003      	b.n	801181e <_tx_thread_system_suspend+0x3c2>
                return;
 8011816:	bf00      	nop
 8011818:	e002      	b.n	8011820 <_tx_thread_system_suspend+0x3c4>
            return;
 801181a:	bf00      	nop
 801181c:	e000      	b.n	8011820 <_tx_thread_system_suspend+0x3c4>
    return;
 801181e:	bf00      	nop
}
 8011820:	3790      	adds	r7, #144	@ 0x90
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
 8011826:	bf00      	nop
 8011828:	200069b8 	.word	0x200069b8
 801182c:	200069a8 	.word	0x200069a8
 8011830:	200069bc 	.word	0x200069bc
 8011834:	20006a3c 	.word	0x20006a3c
 8011838:	e000ed04 	.word	0xe000ed04

0801183c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b08e      	sub	sp, #56	@ 0x38
 8011840:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011842:	4b5f      	ldr	r3, [pc, #380]	@ (80119c0 <_tx_thread_time_slice+0x184>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011848:	f3ef 8310 	mrs	r3, PRIMASK
 801184c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801184e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011850:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011852:	b672      	cpsid	i
    return(int_posture);
 8011854:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8011856:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8011858:	4b5a      	ldr	r3, [pc, #360]	@ (80119c4 <_tx_thread_time_slice+0x188>)
 801185a:	2200      	movs	r2, #0
 801185c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d024      	beq.n	80118ae <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011868:	2b00      	cmp	r3, #0
 801186a:	d120      	bne.n	80118ae <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	69d2      	ldr	r2, [r2, #28]
 8011872:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	699b      	ldr	r3, [r3, #24]
 8011878:	4a53      	ldr	r2, [pc, #332]	@ (80119c8 <_tx_thread_time_slice+0x18c>)
 801187a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6a1a      	ldr	r2, [r3, #32]
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	429a      	cmp	r2, r3
 8011884:	d013      	beq.n	80118ae <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801188e:	429a      	cmp	r2, r3
 8011890:	d10d      	bne.n	80118ae <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8011892:	687a      	ldr	r2, [r7, #4]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011898:	6a12      	ldr	r2, [r2, #32]
 801189a:	494c      	ldr	r1, [pc, #304]	@ (80119cc <_tx_thread_time_slice+0x190>)
 801189c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80118a0:	4b4b      	ldr	r3, [pc, #300]	@ (80119d0 <_tx_thread_time_slice+0x194>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	4a49      	ldr	r2, [pc, #292]	@ (80119cc <_tx_thread_time_slice+0x190>)
 80118a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118aa:	4a4a      	ldr	r2, [pc, #296]	@ (80119d4 <_tx_thread_time_slice+0x198>)
 80118ac:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80118ae:	f3ef 8305 	mrs	r3, IPSR
 80118b2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80118b4:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 80118b6:	4b48      	ldr	r3, [pc, #288]	@ (80119d8 <_tx_thread_time_slice+0x19c>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4313      	orrs	r3, r2
 80118bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 80118be:	4b47      	ldr	r3, [pc, #284]	@ (80119dc <_tx_thread_time_slice+0x1a0>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 80118c4:	4b46      	ldr	r3, [pc, #280]	@ (80119e0 <_tx_thread_time_slice+0x1a4>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	623b      	str	r3, [r7, #32]
 80118ca:	6a3b      	ldr	r3, [r7, #32]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d06d      	beq.n	80119ac <_tx_thread_time_slice+0x170>
 80118d0:	4b44      	ldr	r3, [pc, #272]	@ (80119e4 <_tx_thread_time_slice+0x1a8>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	f003 0301 	and.w	r3, r3, #1
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d067      	beq.n	80119ac <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80118dc:	f3ef 8305 	mrs	r3, IPSR
 80118e0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80118e2:	68fa      	ldr	r2, [r7, #12]
 80118e4:	4b3c      	ldr	r3, [pc, #240]	@ (80119d8 <_tx_thread_time_slice+0x19c>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	4313      	orrs	r3, r2
 80118ea:	61fb      	str	r3, [r7, #28]
 80118ec:	4b34      	ldr	r3, [pc, #208]	@ (80119c0 <_tx_thread_time_slice+0x184>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80118f2:	69fb      	ldr	r3, [r7, #28]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d10b      	bne.n	8011910 <_tx_thread_time_slice+0xd4>
 80118f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80118fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011902:	041a      	lsls	r2, r3, #16
 8011904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011906:	4313      	orrs	r3, r2
 8011908:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801190c:	637b      	str	r3, [r7, #52]	@ 0x34
 801190e:	e00e      	b.n	801192e <_tx_thread_time_slice+0xf2>
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8011916:	d205      	bcs.n	8011924 <_tx_thread_time_slice+0xe8>
 8011918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801191a:	637b      	str	r3, [r7, #52]	@ 0x34
 801191c:	f04f 33ff 	mov.w	r3, #4294967295
 8011920:	633b      	str	r3, [r7, #48]	@ 0x30
 8011922:	e004      	b.n	801192e <_tx_thread_time_slice+0xf2>
 8011924:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8011928:	633b      	str	r3, [r7, #48]	@ 0x30
 801192a:	2300      	movs	r3, #0
 801192c:	637b      	str	r3, [r7, #52]	@ 0x34
 801192e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011930:	6a3b      	ldr	r3, [r7, #32]
 8011932:	601a      	str	r2, [r3, #0]
 8011934:	6a3b      	ldr	r3, [r7, #32]
 8011936:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011938:	605a      	str	r2, [r3, #4]
 801193a:	6a3b      	ldr	r3, [r7, #32]
 801193c:	2205      	movs	r2, #5
 801193e:	609a      	str	r2, [r3, #8]
 8011940:	4b29      	ldr	r3, [pc, #164]	@ (80119e8 <_tx_thread_time_slice+0x1ac>)
 8011942:	681a      	ldr	r2, [r3, #0]
 8011944:	6a3b      	ldr	r3, [r7, #32]
 8011946:	60da      	str	r2, [r3, #12]
 8011948:	4b22      	ldr	r3, [pc, #136]	@ (80119d4 <_tx_thread_time_slice+0x198>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	461a      	mov	r2, r3
 801194e:	6a3b      	ldr	r3, [r7, #32]
 8011950:	611a      	str	r2, [r3, #16]
 8011952:	6a3b      	ldr	r3, [r7, #32]
 8011954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011956:	615a      	str	r2, [r3, #20]
 8011958:	6a3b      	ldr	r3, [r7, #32]
 801195a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801195c:	619a      	str	r2, [r3, #24]
 801195e:	1d3a      	adds	r2, r7, #4
 8011960:	6a3b      	ldr	r3, [r7, #32]
 8011962:	61da      	str	r2, [r3, #28]
 8011964:	6a3b      	ldr	r3, [r7, #32]
 8011966:	3320      	adds	r3, #32
 8011968:	623b      	str	r3, [r7, #32]
 801196a:	4b20      	ldr	r3, [pc, #128]	@ (80119ec <_tx_thread_time_slice+0x1b0>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	6a3a      	ldr	r2, [r7, #32]
 8011970:	429a      	cmp	r2, r3
 8011972:	d314      	bcc.n	801199e <_tx_thread_time_slice+0x162>
 8011974:	4b1e      	ldr	r3, [pc, #120]	@ (80119f0 <_tx_thread_time_slice+0x1b4>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	623b      	str	r3, [r7, #32]
 801197a:	4a19      	ldr	r2, [pc, #100]	@ (80119e0 <_tx_thread_time_slice+0x1a4>)
 801197c:	6a3b      	ldr	r3, [r7, #32]
 801197e:	6013      	str	r3, [r2, #0]
 8011980:	4b1c      	ldr	r3, [pc, #112]	@ (80119f4 <_tx_thread_time_slice+0x1b8>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	6a3a      	ldr	r2, [r7, #32]
 8011986:	621a      	str	r2, [r3, #32]
 8011988:	4b1b      	ldr	r3, [pc, #108]	@ (80119f8 <_tx_thread_time_slice+0x1bc>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d00d      	beq.n	80119ac <_tx_thread_time_slice+0x170>
 8011990:	4b19      	ldr	r3, [pc, #100]	@ (80119f8 <_tx_thread_time_slice+0x1bc>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	4a17      	ldr	r2, [pc, #92]	@ (80119f4 <_tx_thread_time_slice+0x1b8>)
 8011996:	6812      	ldr	r2, [r2, #0]
 8011998:	4610      	mov	r0, r2
 801199a:	4798      	blx	r3
 801199c:	e006      	b.n	80119ac <_tx_thread_time_slice+0x170>
 801199e:	4a10      	ldr	r2, [pc, #64]	@ (80119e0 <_tx_thread_time_slice+0x1a4>)
 80119a0:	6a3b      	ldr	r3, [r7, #32]
 80119a2:	6013      	str	r3, [r2, #0]
 80119a4:	4b13      	ldr	r3, [pc, #76]	@ (80119f4 <_tx_thread_time_slice+0x1b8>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	6a3a      	ldr	r2, [r7, #32]
 80119aa:	621a      	str	r2, [r3, #32]
 80119ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	f383 8810 	msr	PRIMASK, r3
}
 80119b6:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80119b8:	bf00      	nop
 80119ba:	3738      	adds	r7, #56	@ 0x38
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}
 80119c0:	200069a4 	.word	0x200069a4
 80119c4:	20006a4c 	.word	0x20006a4c
 80119c8:	20006fa8 	.word	0x20006fa8
 80119cc:	200069bc 	.word	0x200069bc
 80119d0:	200069b8 	.word	0x200069b8
 80119d4:	200069a8 	.word	0x200069a8
 80119d8:	20000048 	.word	0x20000048
 80119dc:	20006a3c 	.word	0x20006a3c
 80119e0:	20006fc0 	.word	0x20006fc0
 80119e4:	20006fc4 	.word	0x20006fc4
 80119e8:	e0001004 	.word	0xe0001004
 80119ec:	20006fbc 	.word	0x20006fbc
 80119f0:	20006fb8 	.word	0x20006fb8
 80119f4:	20006fac 	.word	0x20006fac
 80119f8:	20006fc8 	.word	0x20006fc8

080119fc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b08a      	sub	sp, #40	@ 0x28
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011a08:	f3ef 8310 	mrs	r3, PRIMASK
 8011a0c:	617b      	str	r3, [r7, #20]
    return(posture);
 8011a0e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011a10:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011a12:	b672      	cpsid	i
    return(int_posture);
 8011a14:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8011a16:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8011a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a1c:	2b04      	cmp	r3, #4
 8011a1e:	d10e      	bne.n	8011a3e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8011a20:	4b13      	ldr	r3, [pc, #76]	@ (8011a70 <_tx_thread_timeout+0x74>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	3301      	adds	r3, #1
 8011a26:	4a12      	ldr	r2, [pc, #72]	@ (8011a70 <_tx_thread_timeout+0x74>)
 8011a28:	6013      	str	r3, [r2, #0]
 8011a2a:	6a3b      	ldr	r3, [r7, #32]
 8011a2c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	f383 8810 	msr	PRIMASK, r3
}
 8011a34:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011a36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011a38:	f7ff fb56 	bl	80110e8 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8011a3c:	e013      	b.n	8011a66 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8011a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011a42:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8011a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8011a4a:	61bb      	str	r3, [r7, #24]
 8011a4c:	6a3b      	ldr	r3, [r7, #32]
 8011a4e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	f383 8810 	msr	PRIMASK, r3
}
 8011a56:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8011a58:	69fb      	ldr	r3, [r7, #28]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d003      	beq.n	8011a66 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8011a5e:	69fb      	ldr	r3, [r7, #28]
 8011a60:	69b9      	ldr	r1, [r7, #24]
 8011a62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011a64:	4798      	blx	r3
}
 8011a66:	bf00      	nop
 8011a68:	3728      	adds	r7, #40	@ 0x28
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	20006a3c 	.word	0x20006a3c

08011a74 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b084      	sub	sp, #16
 8011a78:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8011a7e:	607b      	str	r3, [r7, #4]
    return(posture);
 8011a80:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8011a82:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011a84:	b672      	cpsid	i
    return(int_posture);
 8011a86:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8011a88:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8011a8a:	4b09      	ldr	r3, [pc, #36]	@ (8011ab0 <_tx_timer_expiration_process+0x3c>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	4a07      	ldr	r2, [pc, #28]	@ (8011ab0 <_tx_timer_expiration_process+0x3c>)
 8011a92:	6013      	str	r3, [r2, #0]
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	f383 8810 	msr	PRIMASK, r3
}
 8011a9e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8011aa0:	4804      	ldr	r0, [pc, #16]	@ (8011ab4 <_tx_timer_expiration_process+0x40>)
 8011aa2:	f7ff fb21 	bl	80110e8 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011aa6:	bf00      	nop
 8011aa8:	3710      	adds	r7, #16
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	20006a3c 	.word	0x20006a3c
 8011ab4:	20006aec 	.word	0x20006aec

08011ab8 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8011ab8:	b590      	push	{r4, r7, lr}
 8011aba:	b089      	sub	sp, #36	@ 0x24
 8011abc:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8011abe:	4b28      	ldr	r3, [pc, #160]	@ (8011b60 <_tx_timer_initialize+0xa8>)
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8011ac4:	4b27      	ldr	r3, [pc, #156]	@ (8011b64 <_tx_timer_initialize+0xac>)
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8011aca:	4b27      	ldr	r3, [pc, #156]	@ (8011b68 <_tx_timer_initialize+0xb0>)
 8011acc:	2200      	movs	r2, #0
 8011ace:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8011ad0:	4b26      	ldr	r3, [pc, #152]	@ (8011b6c <_tx_timer_initialize+0xb4>)
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8011ad6:	4b26      	ldr	r3, [pc, #152]	@ (8011b70 <_tx_timer_initialize+0xb8>)
 8011ad8:	2200      	movs	r2, #0
 8011ada:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8011adc:	2280      	movs	r2, #128	@ 0x80
 8011ade:	2100      	movs	r1, #0
 8011ae0:	4824      	ldr	r0, [pc, #144]	@ (8011b74 <_tx_timer_initialize+0xbc>)
 8011ae2:	f001 f819 	bl	8012b18 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8011ae6:	4b24      	ldr	r3, [pc, #144]	@ (8011b78 <_tx_timer_initialize+0xc0>)
 8011ae8:	4a22      	ldr	r2, [pc, #136]	@ (8011b74 <_tx_timer_initialize+0xbc>)
 8011aea:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8011aec:	4b23      	ldr	r3, [pc, #140]	@ (8011b7c <_tx_timer_initialize+0xc4>)
 8011aee:	4a21      	ldr	r2, [pc, #132]	@ (8011b74 <_tx_timer_initialize+0xbc>)
 8011af0:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8011af2:	4b23      	ldr	r3, [pc, #140]	@ (8011b80 <_tx_timer_initialize+0xc8>)
 8011af4:	4a23      	ldr	r2, [pc, #140]	@ (8011b84 <_tx_timer_initialize+0xcc>)
 8011af6:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8011af8:	4b21      	ldr	r3, [pc, #132]	@ (8011b80 <_tx_timer_initialize+0xc8>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	3304      	adds	r3, #4
 8011afe:	4a20      	ldr	r2, [pc, #128]	@ (8011b80 <_tx_timer_initialize+0xc8>)
 8011b00:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8011b02:	4b21      	ldr	r3, [pc, #132]	@ (8011b88 <_tx_timer_initialize+0xd0>)
 8011b04:	4a21      	ldr	r2, [pc, #132]	@ (8011b8c <_tx_timer_initialize+0xd4>)
 8011b06:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8011b08:	4b21      	ldr	r3, [pc, #132]	@ (8011b90 <_tx_timer_initialize+0xd8>)
 8011b0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8011b0e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8011b10:	4b20      	ldr	r3, [pc, #128]	@ (8011b94 <_tx_timer_initialize+0xdc>)
 8011b12:	2200      	movs	r2, #0
 8011b14:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8011b16:	4b1c      	ldr	r3, [pc, #112]	@ (8011b88 <_tx_timer_initialize+0xd0>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8011b90 <_tx_timer_initialize+0xd8>)
 8011b1c:	6812      	ldr	r2, [r2, #0]
 8011b1e:	491d      	ldr	r1, [pc, #116]	@ (8011b94 <_tx_timer_initialize+0xdc>)
 8011b20:	6809      	ldr	r1, [r1, #0]
 8011b22:	481c      	ldr	r0, [pc, #112]	@ (8011b94 <_tx_timer_initialize+0xdc>)
 8011b24:	6800      	ldr	r0, [r0, #0]
 8011b26:	2400      	movs	r4, #0
 8011b28:	9405      	str	r4, [sp, #20]
 8011b2a:	2400      	movs	r4, #0
 8011b2c:	9404      	str	r4, [sp, #16]
 8011b2e:	9003      	str	r0, [sp, #12]
 8011b30:	9102      	str	r1, [sp, #8]
 8011b32:	9201      	str	r2, [sp, #4]
 8011b34:	9300      	str	r3, [sp, #0]
 8011b36:	4b18      	ldr	r3, [pc, #96]	@ (8011b98 <_tx_timer_initialize+0xe0>)
 8011b38:	4a18      	ldr	r2, [pc, #96]	@ (8011b9c <_tx_timer_initialize+0xe4>)
 8011b3a:	4919      	ldr	r1, [pc, #100]	@ (8011ba0 <_tx_timer_initialize+0xe8>)
 8011b3c:	4819      	ldr	r0, [pc, #100]	@ (8011ba4 <_tx_timer_initialize+0xec>)
 8011b3e:	f7fe fe99 	bl	8010874 <_tx_thread_create>
 8011b42:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d1e5      	bne.n	8011b16 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8011b4a:	4b17      	ldr	r3, [pc, #92]	@ (8011ba8 <_tx_timer_initialize+0xf0>)
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8011b50:	4b16      	ldr	r3, [pc, #88]	@ (8011bac <_tx_timer_initialize+0xf4>)
 8011b52:	2200      	movs	r2, #0
 8011b54:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8011b56:	bf00      	nop
 8011b58:	370c      	adds	r7, #12
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd90      	pop	{r4, r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	20006a48 	.word	0x20006a48
 8011b64:	20006fa8 	.word	0x20006fa8
 8011b68:	20006a4c 	.word	0x20006a4c
 8011b6c:	20006adc 	.word	0x20006adc
 8011b70:	20006ae8 	.word	0x20006ae8
 8011b74:	20006a50 	.word	0x20006a50
 8011b78:	20006ad0 	.word	0x20006ad0
 8011b7c:	20006ad8 	.word	0x20006ad8
 8011b80:	20006ad4 	.word	0x20006ad4
 8011b84:	20006acc 	.word	0x20006acc
 8011b88:	20006b9c 	.word	0x20006b9c
 8011b8c:	20006ba8 	.word	0x20006ba8
 8011b90:	20006ba0 	.word	0x20006ba0
 8011b94:	20006ba4 	.word	0x20006ba4
 8011b98:	4154494d 	.word	0x4154494d
 8011b9c:	08011ce5 	.word	0x08011ce5
 8011ba0:	08013c88 	.word	0x08013c88
 8011ba4:	20006aec 	.word	0x20006aec
 8011ba8:	20006ae0 	.word	0x20006ae0
 8011bac:	20006ae4 	.word	0x20006ae4

08011bb0 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b089      	sub	sp, #36	@ 0x24
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d04a      	beq.n	8011c5a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bca:	d046      	beq.n	8011c5a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	699b      	ldr	r3, [r3, #24]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d142      	bne.n	8011c5a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	2b20      	cmp	r3, #32
 8011bd8:	d902      	bls.n	8011be0 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8011bda:	231f      	movs	r3, #31
 8011bdc:	61bb      	str	r3, [r7, #24]
 8011bde:	e002      	b.n	8011be6 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	3b01      	subs	r3, #1
 8011be4:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8011be6:	4b20      	ldr	r3, [pc, #128]	@ (8011c68 <_tx_timer_system_activate+0xb8>)
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	69bb      	ldr	r3, [r7, #24]
 8011bec:	009b      	lsls	r3, r3, #2
 8011bee:	4413      	add	r3, r2
 8011bf0:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8011bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8011c6c <_tx_timer_system_activate+0xbc>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	69fa      	ldr	r2, [r7, #28]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d30b      	bcc.n	8011c14 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8011bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8011c6c <_tx_timer_system_activate+0xbc>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	69fa      	ldr	r2, [r7, #28]
 8011c02:	1ad3      	subs	r3, r2, r3
 8011c04:	109b      	asrs	r3, r3, #2
 8011c06:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8011c08:	4b19      	ldr	r3, [pc, #100]	@ (8011c70 <_tx_timer_system_activate+0xc0>)
 8011c0a:	681a      	ldr	r2, [r3, #0]
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	009b      	lsls	r3, r3, #2
 8011c10:	4413      	add	r3, r2
 8011c12:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8011c14:	69fb      	ldr	r3, [r7, #28]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d109      	bne.n	8011c30 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	687a      	ldr	r2, [r7, #4]
 8011c20:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8011c28:	69fb      	ldr	r3, [r7, #28]
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	601a      	str	r2, [r3, #0]
 8011c2e:	e011      	b.n	8011c54 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8011c30:	69fb      	ldr	r3, [r7, #28]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	695b      	ldr	r3, [r3, #20]
 8011c3a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	68fa      	ldr	r2, [r7, #12]
 8011c4c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	68ba      	ldr	r2, [r7, #8]
 8011c52:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	69fa      	ldr	r2, [r7, #28]
 8011c58:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8011c5a:	bf00      	nop
 8011c5c:	3724      	adds	r7, #36	@ 0x24
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c64:	4770      	bx	lr
 8011c66:	bf00      	nop
 8011c68:	20006ad8 	.word	0x20006ad8
 8011c6c:	20006ad4 	.word	0x20006ad4
 8011c70:	20006ad0 	.word	0x20006ad0

08011c74 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8011c74:	b480      	push	{r7}
 8011c76:	b087      	sub	sp, #28
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	699b      	ldr	r3, [r3, #24]
 8011c80:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d026      	beq.n	8011cd6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	691b      	ldr	r3, [r3, #16]
 8011c8c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8011c8e:	687a      	ldr	r2, [r7, #4]
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d108      	bne.n	8011ca8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d117      	bne.n	8011cd0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	601a      	str	r2, [r3, #0]
 8011ca6:	e013      	b.n	8011cd0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	695b      	ldr	r3, [r3, #20]
 8011cac:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	68fa      	ldr	r2, [r7, #12]
 8011cb2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	693a      	ldr	r2, [r7, #16]
 8011cb8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d105      	bne.n	8011cd0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	697a      	ldr	r2, [r7, #20]
 8011cc8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	693a      	ldr	r2, [r7, #16]
 8011cce:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	619a      	str	r2, [r3, #24]
    }
}
 8011cd6:	bf00      	nop
 8011cd8:	371c      	adds	r7, #28
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr
	...

08011ce4 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b098      	sub	sp, #96	@ 0x60
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8011cec:	2300      	movs	r3, #0
 8011cee:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	4a73      	ldr	r2, [pc, #460]	@ (8011ec0 <_tx_timer_thread_entry+0x1dc>)
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	f040 80de 	bne.w	8011eb6 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8011cfe:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8011d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8011d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d04:	b672      	cpsid	i
    return(int_posture);
 8011d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8011d08:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8011d0a:	4b6e      	ldr	r3, [pc, #440]	@ (8011ec4 <_tx_timer_thread_entry+0x1e0>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d003      	beq.n	8011d20 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	f107 020c 	add.w	r2, r7, #12
 8011d1e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8011d20:	4b68      	ldr	r3, [pc, #416]	@ (8011ec4 <_tx_timer_thread_entry+0x1e0>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	2200      	movs	r2, #0
 8011d26:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8011d28:	4b66      	ldr	r3, [pc, #408]	@ (8011ec4 <_tx_timer_thread_entry+0x1e0>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	3304      	adds	r3, #4
 8011d2e:	4a65      	ldr	r2, [pc, #404]	@ (8011ec4 <_tx_timer_thread_entry+0x1e0>)
 8011d30:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8011d32:	4b64      	ldr	r3, [pc, #400]	@ (8011ec4 <_tx_timer_thread_entry+0x1e0>)
 8011d34:	681a      	ldr	r2, [r3, #0]
 8011d36:	4b64      	ldr	r3, [pc, #400]	@ (8011ec8 <_tx_timer_thread_entry+0x1e4>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	d103      	bne.n	8011d46 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8011d3e:	4b63      	ldr	r3, [pc, #396]	@ (8011ecc <_tx_timer_thread_entry+0x1e8>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	4a60      	ldr	r2, [pc, #384]	@ (8011ec4 <_tx_timer_thread_entry+0x1e0>)
 8011d44:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8011d46:	4b62      	ldr	r3, [pc, #392]	@ (8011ed0 <_tx_timer_thread_entry+0x1ec>)
 8011d48:	2200      	movs	r2, #0
 8011d4a:	601a      	str	r2, [r3, #0]
 8011d4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d4e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d52:	f383 8810 	msr	PRIMASK, r3
}
 8011d56:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011d58:	f3ef 8310 	mrs	r3, PRIMASK
 8011d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8011d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8011d60:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d62:	b672      	cpsid	i
    return(int_posture);
 8011d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8011d66:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8011d68:	e07f      	b.n	8011e6a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	691b      	ldr	r3, [r3, #16]
 8011d72:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8011d74:	2300      	movs	r3, #0
 8011d76:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8011d78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d102      	bne.n	8011d86 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8011d80:	2300      	movs	r3, #0
 8011d82:	60fb      	str	r3, [r7, #12]
 8011d84:	e00e      	b.n	8011da4 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8011d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d88:	695b      	ldr	r3, [r3, #20]
 8011d8a:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8011d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011d8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011d90:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8011d92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011d96:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8011d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011d9a:	f107 020c 	add.w	r2, r7, #12
 8011d9e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8011da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011da2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8011da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	2b20      	cmp	r3, #32
 8011daa:	d911      	bls.n	8011dd0 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8011dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8011db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011db6:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8011db8:	2300      	movs	r3, #0
 8011dba:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8011dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dbe:	f107 0208 	add.w	r2, r7, #8
 8011dc2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8011dc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011dc8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8011dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dcc:	60bb      	str	r3, [r7, #8]
 8011dce:	e01a      	b.n	8011e06 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8011dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dd2:	689b      	ldr	r3, [r3, #8]
 8011dd4:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8011dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dd8:	68db      	ldr	r3, [r3, #12]
 8011dda:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8011ddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dde:	685a      	ldr	r2, [r3, #4]
 8011de0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011de2:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8011de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d009      	beq.n	8011e00 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8011dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dee:	f107 0208 	add.w	r2, r7, #8
 8011df2:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8011df4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011df6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011df8:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8011dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011dfc:	60bb      	str	r3, [r7, #8]
 8011dfe:	e002      	b.n	8011e06 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8011e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e02:	2200      	movs	r2, #0
 8011e04:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8011e06:	4a33      	ldr	r2, [pc, #204]	@ (8011ed4 <_tx_timer_thread_entry+0x1f0>)
 8011e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e0a:	6013      	str	r3, [r2, #0]
 8011e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e12:	f383 8810 	msr	PRIMASK, r3
}
 8011e16:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8011e18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d002      	beq.n	8011e24 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8011e1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e20:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011e22:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e24:	f3ef 8310 	mrs	r3, PRIMASK
 8011e28:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8011e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8011e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e2e:	b672      	cpsid	i
    return(int_posture);
 8011e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8011e32:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8011e34:	4b27      	ldr	r3, [pc, #156]	@ (8011ed4 <_tx_timer_thread_entry+0x1f0>)
 8011e36:	2200      	movs	r2, #0
 8011e38:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8011e3a:	68bb      	ldr	r3, [r7, #8]
 8011e3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d105      	bne.n	8011e4e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8011e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e44:	2200      	movs	r2, #0
 8011e46:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8011e48:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011e4a:	f7ff feb1 	bl	8011bb0 <_tx_timer_system_activate>
 8011e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011e50:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e52:	69bb      	ldr	r3, [r7, #24]
 8011e54:	f383 8810 	msr	PRIMASK, r3
}
 8011e58:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8011e5e:	623b      	str	r3, [r7, #32]
    return(posture);
 8011e60:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011e62:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e64:	b672      	cpsid	i
    return(int_posture);
 8011e66:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8011e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	f47f af7c 	bne.w	8011d6a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8011e72:	4b17      	ldr	r3, [pc, #92]	@ (8011ed0 <_tx_timer_thread_entry+0x1ec>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d116      	bne.n	8011ea8 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8011e7a:	4b17      	ldr	r3, [pc, #92]	@ (8011ed8 <_tx_timer_thread_entry+0x1f4>)
 8011e7c:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e80:	2203      	movs	r2, #3
 8011e82:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011e84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e86:	2201      	movs	r2, #1
 8011e88:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8011e8a:	4b14      	ldr	r3, [pc, #80]	@ (8011edc <_tx_timer_thread_entry+0x1f8>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	3301      	adds	r3, #1
 8011e90:	4a12      	ldr	r2, [pc, #72]	@ (8011edc <_tx_timer_thread_entry+0x1f8>)
 8011e92:	6013      	str	r3, [r2, #0]
 8011e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011e96:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	f383 8810 	msr	PRIMASK, r3
}
 8011e9e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8011ea0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011ea2:	f7ff fadb 	bl	801145c <_tx_thread_system_suspend>
 8011ea6:	e728      	b.n	8011cfa <_tx_timer_thread_entry+0x16>
 8011ea8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011eaa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	f383 8810 	msr	PRIMASK, r3
}
 8011eb2:	bf00      	nop
            TX_DISABLE
 8011eb4:	e721      	b.n	8011cfa <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8011eb6:	bf00      	nop
 8011eb8:	3760      	adds	r7, #96	@ 0x60
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	4154494d 	.word	0x4154494d
 8011ec4:	20006ad8 	.word	0x20006ad8
 8011ec8:	20006ad4 	.word	0x20006ad4
 8011ecc:	20006ad0 	.word	0x20006ad0
 8011ed0:	20006adc 	.word	0x20006adc
 8011ed4:	20006ae8 	.word	0x20006ae8
 8011ed8:	20006aec 	.word	0x20006aec
 8011edc:	20006a3c 	.word	0x20006a3c

08011ee0 <_tx_trace_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b0a6      	sub	sp, #152	@ 0x98
 8011ee4:	af02      	add	r7, sp, #8
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	60b9      	str	r1, [r7, #8]
 8011eea:	607a      	str	r2, [r7, #4]
UINT                            status;


    /* First, see if there is enough room for the control header, the registry entries, and at least one event in
       memory supplied to this call.  */
    if (trace_buffer_size < ((sizeof(TX_TRACE_HEADER)) + ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entries) + (sizeof(TX_TRACE_BUFFER_ENTRY))))
 8011eec:	687a      	ldr	r2, [r7, #4]
 8011eee:	4613      	mov	r3, r2
 8011ef0:	005b      	lsls	r3, r3, #1
 8011ef2:	4413      	add	r3, r2
 8011ef4:	011b      	lsls	r3, r3, #4
 8011ef6:	3350      	adds	r3, #80	@ 0x50
 8011ef8:	68ba      	ldr	r2, [r7, #8]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d202      	bcs.n	8011f04 <_tx_trace_enable+0x24>
    {

        /* No, the memory isn't big enough to hold one trace buffer entry.  Return an error.  */
        status =  TX_SIZE_ERROR;
 8011efe:	2305      	movs	r3, #5
 8011f00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011f02:	e30a      	b.n	801251a <_tx_trace_enable+0x63a>
    }

    /* Determine if trace is already enabled.  */
    else if (_tx_trace_buffer_current_ptr != TX_NULL)
 8011f04:	4b8f      	ldr	r3, [pc, #572]	@ (8012144 <_tx_trace_enable+0x264>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d002      	beq.n	8011f12 <_tx_trace_enable+0x32>
    {

        /* Yes, trace is already enabled.  */
        status =  TX_NOT_DONE;
 8011f0c:	2320      	movs	r3, #32
 8011f0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011f10:	e303      	b.n	801251a <_tx_trace_enable+0x63a>
    }
    else
    {

        /* Set the enable bits for all events enabled.  */
        _tx_trace_event_enable_bits =  0xFFFFFFFFUL;
 8011f12:	4b8d      	ldr	r3, [pc, #564]	@ (8012148 <_tx_trace_enable+0x268>)
 8011f14:	f04f 32ff 	mov.w	r2, #4294967295
 8011f18:	601a      	str	r2, [r3, #0]

        /* Setup working pointer to the supplied memory.  */
        work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(trace_buffer_start);
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Setup pointer to the trace control area.  */
        _tx_trace_header_ptr =  TX_UCHAR_TO_HEADER_POINTER_CONVERT(work_ptr);
 8011f1e:	4a8b      	ldr	r2, [pc, #556]	@ (801214c <_tx_trace_enable+0x26c>)
 8011f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f22:	6013      	str	r3, [r2, #0]

        /* Move the working pointer past the control area.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_HEADER)));
 8011f24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f26:	3330      	adds	r3, #48	@ 0x30
 8011f28:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Save the start of the trace object registry.  */
        _tx_trace_registry_start_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8011f2a:	4a89      	ldr	r2, [pc, #548]	@ (8012150 <_tx_trace_enable+0x270>)
 8011f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f2e:	6013      	str	r3, [r2, #0]

        /* Setup the end of the trace object registry.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*registry_entries);
 8011f30:	687a      	ldr	r2, [r7, #4]
 8011f32:	4613      	mov	r3, r2
 8011f34:	005b      	lsls	r3, r3, #1
 8011f36:	4413      	add	r3, r2
 8011f38:	011b      	lsls	r3, r3, #4
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f3e:	4413      	add	r3, r2
 8011f40:	657b      	str	r3, [r7, #84]	@ 0x54
        _tx_trace_registry_end_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8011f42:	4a84      	ldr	r2, [pc, #528]	@ (8012154 <_tx_trace_enable+0x274>)
 8011f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f46:	6013      	str	r3, [r2, #0]

        /* Loop to make all trace object registry entries empty and valid.  */
        for (i = ((ULONG) 0); i < registry_entries; i++)
 8011f48:	2300      	movs	r3, #0
 8011f4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011f4c:	e01f      	b.n	8011f8e <_tx_trace_enable+0xae>
        {

            /* Setup the work pointer.  */
            work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8011f4e:	4b80      	ldr	r3, [pc, #512]	@ (8012150 <_tx_trace_enable+0x270>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	657b      	str	r3, [r7, #84]	@ 0x54
            work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*i);
 8011f54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f56:	4613      	mov	r3, r2
 8011f58:	005b      	lsls	r3, r3, #1
 8011f5a:	4413      	add	r3, r2
 8011f5c:	011b      	lsls	r3, r3, #4
 8011f5e:	461a      	mov	r2, r3
 8011f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f62:	4413      	add	r3, r2
 8011f64:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Convert to a registry entry pointer.  */
            entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8011f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f68:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Initialize object registry entry.  */
            entry_ptr -> tx_trace_object_entry_available =         (UCHAR) TX_TRUE;
 8011f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	701a      	strb	r2, [r3, #0]
            entry_ptr -> tx_trace_object_entry_type =              (UCHAR) TX_TRACE_OBJECT_TYPE_NOT_VALID;
 8011f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f72:	2200      	movs	r2, #0
 8011f74:	705a      	strb	r2, [r3, #1]
            entry_ptr -> tx_trace_object_entry_reserved1 =         (UCHAR) 0;
 8011f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f78:	2200      	movs	r2, #0
 8011f7a:	709a      	strb	r2, [r3, #2]
            entry_ptr -> tx_trace_object_entry_reserved2 =         (UCHAR) 0;
 8011f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f7e:	2200      	movs	r2, #0
 8011f80:	70da      	strb	r2, [r3, #3]
            entry_ptr -> tx_trace_object_entry_thread_pointer =    (ULONG) 0;
 8011f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f84:	2200      	movs	r2, #0
 8011f86:	605a      	str	r2, [r3, #4]
        for (i = ((ULONG) 0); i < registry_entries; i++)
 8011f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011f8e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d3db      	bcc.n	8011f4e <_tx_trace_enable+0x6e>
        }

        /* Setup the total number of registry entries.  */
        _tx_trace_total_registry_entries =  registry_entries;
 8011f96:	4a70      	ldr	r2, [pc, #448]	@ (8012158 <_tx_trace_enable+0x278>)
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6013      	str	r3, [r2, #0]

        /* Setup the object registry available count to the total number of registry entries.  */
        _tx_trace_available_registry_entries =  registry_entries;
 8011f9c:	4a6f      	ldr	r2, [pc, #444]	@ (801215c <_tx_trace_enable+0x27c>)
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6013      	str	r3, [r2, #0]

        /* Setup the search starting index to the first entry.  */
        _tx_trace_registry_search_start =  ((ULONG) 0);
 8011fa2:	4b6f      	ldr	r3, [pc, #444]	@ (8012160 <_tx_trace_enable+0x280>)
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	601a      	str	r2, [r3, #0]

        /* Setup the work pointer to after the trace object registry.  */
        work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_end_ptr);
 8011fa8:	4b6a      	ldr	r3, [pc, #424]	@ (8012154 <_tx_trace_enable+0x274>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Adjust the remaining trace buffer size.  */
        trace_buffer_size =  trace_buffer_size - ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entries) - (sizeof(TX_TRACE_HEADER));
 8011fae:	687a      	ldr	r2, [r7, #4]
 8011fb0:	4613      	mov	r3, r2
 8011fb2:	005b      	lsls	r3, r3, #1
 8011fb4:	4413      	add	r3, r2
 8011fb6:	011b      	lsls	r3, r3, #4
 8011fb8:	461a      	mov	r2, r3
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	1a9b      	subs	r3, r3, r2
 8011fbe:	3b30      	subs	r3, #48	@ 0x30
 8011fc0:	60bb      	str	r3, [r7, #8]

        /* Setup pointer to the start of the actual event trace log.  */
        _tx_trace_buffer_start_ptr =      TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8011fc2:	4a68      	ldr	r2, [pc, #416]	@ (8012164 <_tx_trace_enable+0x284>)
 8011fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fc6:	6013      	str	r3, [r2, #0]

        /* Save the event trace log start address.  */
        event_start_ptr =  work_ptr;
 8011fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fca:	653b      	str	r3, [r7, #80]	@ 0x50

        /* Calculate the end of the trace buffer.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, ((trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY)))*(sizeof(TX_TRACE_BUFFER_ENTRY))));
 8011fcc:	68bb      	ldr	r3, [r7, #8]
 8011fce:	f023 031f 	bic.w	r3, r3, #31
 8011fd2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011fd4:	4413      	add	r3, r2
 8011fd6:	657b      	str	r3, [r7, #84]	@ 0x54
        _tx_trace_buffer_end_ptr =        TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8011fd8:	4a63      	ldr	r2, [pc, #396]	@ (8012168 <_tx_trace_enable+0x288>)
 8011fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fdc:	6013      	str	r3, [r2, #0]

        /* Loop to mark all entries in the trace buffer as invalid.  */
        for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
 8011fde:	2300      	movs	r3, #0
 8011fe0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011fe2:	e00c      	b.n	8011ffe <_tx_trace_enable+0x11e>
        {

            /* Setup the work pointer.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(event_start_ptr, (sizeof(TX_TRACE_BUFFER_ENTRY))*i);
 8011fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011fe6:	015b      	lsls	r3, r3, #5
 8011fe8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011fea:	4413      	add	r3, r2
 8011fec:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Convert to a trace event pointer.  */
            event_ptr =  TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8011fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ff0:	63bb      	str	r3, [r7, #56]	@ 0x38

            /* Mark this trace event as invalid.  */
            event_ptr -> tx_trace_buffer_entry_thread_pointer =  ((ULONG) 0);
 8011ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	601a      	str	r2, [r3, #0]
        for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
 8011ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ffa:	3301      	adds	r3, #1
 8011ffc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	095b      	lsrs	r3, r3, #5
 8012002:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012004:	429a      	cmp	r2, r3
 8012006:	d3ed      	bcc.n	8011fe4 <_tx_trace_enable+0x104>
        }

        /* Now, fill in the event trace control header.  */
        _tx_trace_header_ptr -> tx_trace_header_id =                             TX_TRACE_VALID;
 8012008:	4b50      	ldr	r3, [pc, #320]	@ (801214c <_tx_trace_enable+0x26c>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	4a57      	ldr	r2, [pc, #348]	@ (801216c <_tx_trace_enable+0x28c>)
 801200e:	601a      	str	r2, [r3, #0]
        _tx_trace_header_ptr -> tx_trace_header_timer_valid_mask =               TX_TRACE_TIME_MASK;
 8012010:	4b4e      	ldr	r3, [pc, #312]	@ (801214c <_tx_trace_enable+0x26c>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	f04f 32ff 	mov.w	r2, #4294967295
 8012018:	605a      	str	r2, [r3, #4]
        _tx_trace_header_ptr -> tx_trace_header_trace_base_address =             TX_POINTER_TO_ULONG_CONVERT(trace_buffer_start);
 801201a:	4b4c      	ldr	r3, [pc, #304]	@ (801214c <_tx_trace_enable+0x26c>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	68fa      	ldr	r2, [r7, #12]
 8012020:	609a      	str	r2, [r3, #8]
        _tx_trace_header_ptr -> tx_trace_header_registry_start_pointer =         TX_POINTER_TO_ULONG_CONVERT(_tx_trace_registry_start_ptr);
 8012022:	4b4b      	ldr	r3, [pc, #300]	@ (8012150 <_tx_trace_enable+0x270>)
 8012024:	681a      	ldr	r2, [r3, #0]
 8012026:	4b49      	ldr	r3, [pc, #292]	@ (801214c <_tx_trace_enable+0x26c>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	60da      	str	r2, [r3, #12]
        _tx_trace_header_ptr -> tx_trace_header_reserved1 =                      ((USHORT) 0);
 801202c:	4b47      	ldr	r3, [pc, #284]	@ (801214c <_tx_trace_enable+0x26c>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	2200      	movs	r2, #0
 8012032:	821a      	strh	r2, [r3, #16]
        _tx_trace_header_ptr -> tx_trace_header_object_name_size =               ((USHORT) TX_TRACE_OBJECT_REGISTRY_NAME);
 8012034:	4b45      	ldr	r3, [pc, #276]	@ (801214c <_tx_trace_enable+0x26c>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	2220      	movs	r2, #32
 801203a:	825a      	strh	r2, [r3, #18]
        _tx_trace_header_ptr -> tx_trace_header_registry_end_pointer =           TX_POINTER_TO_ULONG_CONVERT(_tx_trace_registry_end_ptr);
 801203c:	4b45      	ldr	r3, [pc, #276]	@ (8012154 <_tx_trace_enable+0x274>)
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	4b42      	ldr	r3, [pc, #264]	@ (801214c <_tx_trace_enable+0x26c>)
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	615a      	str	r2, [r3, #20]
        _tx_trace_header_ptr -> tx_trace_header_buffer_start_pointer =           TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_start_ptr);
 8012046:	4b47      	ldr	r3, [pc, #284]	@ (8012164 <_tx_trace_enable+0x284>)
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	4b40      	ldr	r3, [pc, #256]	@ (801214c <_tx_trace_enable+0x26c>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	619a      	str	r2, [r3, #24]
        _tx_trace_header_ptr -> tx_trace_header_buffer_end_pointer =             TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_end_ptr);
 8012050:	4b45      	ldr	r3, [pc, #276]	@ (8012168 <_tx_trace_enable+0x288>)
 8012052:	681a      	ldr	r2, [r3, #0]
 8012054:	4b3d      	ldr	r3, [pc, #244]	@ (801214c <_tx_trace_enable+0x26c>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	61da      	str	r2, [r3, #28]
        _tx_trace_header_ptr -> tx_trace_header_buffer_current_pointer =         TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_start_ptr);
 801205a:	4b42      	ldr	r3, [pc, #264]	@ (8012164 <_tx_trace_enable+0x284>)
 801205c:	681a      	ldr	r2, [r3, #0]
 801205e:	4b3b      	ldr	r3, [pc, #236]	@ (801214c <_tx_trace_enable+0x26c>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	621a      	str	r2, [r3, #32]
        _tx_trace_header_ptr -> tx_trace_header_reserved2 =                      0xAAAAAAAAUL;
 8012064:	4b39      	ldr	r3, [pc, #228]	@ (801214c <_tx_trace_enable+0x26c>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 801206c:	625a      	str	r2, [r3, #36]	@ 0x24
        _tx_trace_header_ptr -> tx_trace_header_reserved3 =                      0xBBBBBBBBUL;
 801206e:	4b37      	ldr	r3, [pc, #220]	@ (801214c <_tx_trace_enable+0x26c>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	f04f 32bb 	mov.w	r2, #3149642683	@ 0xbbbbbbbb
 8012076:	629a      	str	r2, [r3, #40]	@ 0x28
        _tx_trace_header_ptr -> tx_trace_header_reserved4 =                      0xCCCCCCCCUL;
 8012078:	4b34      	ldr	r3, [pc, #208]	@ (801214c <_tx_trace_enable+0x26c>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f04f 32cc 	mov.w	r2, #3435973836	@ 0xcccccccc
 8012080:	62da      	str	r2, [r3, #44]	@ 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012082:	f3ef 8310 	mrs	r3, PRIMASK
 8012086:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 8012088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 801208a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801208c:	b672      	cpsid	i
    return(int_posture);
 801208e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Now, loop through all existing ThreadX objects and register them in the newly setup trace buffer.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8012090:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* First, disable preemption.  */
        _tx_thread_preempt_disable++;
 8012092:	4b37      	ldr	r3, [pc, #220]	@ (8012170 <_tx_trace_enable+0x290>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	3301      	adds	r3, #1
 8012098:	4a35      	ldr	r2, [pc, #212]	@ (8012170 <_tx_trace_enable+0x290>)
 801209a:	6013      	str	r3, [r2, #0]
 801209c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120a2:	f383 8810 	msr	PRIMASK, r3
}
 80120a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Pickup the first thread and the number of created threads.  */
        thread_ptr =  _tx_thread_created_ptr;
 80120a8:	4b32      	ldr	r3, [pc, #200]	@ (8012174 <_tx_trace_enable+0x294>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        i =           _tx_thread_created_count;
 80120b0:	4b31      	ldr	r3, [pc, #196]	@ (8012178 <_tx_trace_enable+0x298>)
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all threads.  */
        while (i != ((ULONG) 0))
 80120b6:	e019      	b.n	80120ec <_tx_trace_enable+0x20c>
        {

            /* Decrement the counter.  */
            i--;
 80120b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120ba:	3b01      	subs	r3, #1
 80120bc:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this thread.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name,
 80120be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80120c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                        TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_start), (ULONG) thread_ptr -> tx_thread_stack_size);
 80120c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80120c8:	68db      	ldr	r3, [r3, #12]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name,
 80120ca:	4619      	mov	r1, r3
                                        TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_start), (ULONG) thread_ptr -> tx_thread_stack_size);
 80120cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80120d0:	695b      	ldr	r3, [r3, #20]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name,
 80120d2:	9300      	str	r3, [sp, #0]
 80120d4:	460b      	mov	r3, r1
 80120d6:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80120da:	2001      	movs	r0, #1
 80120dc:	f000 fa5a 	bl	8012594 <_tx_trace_object_register>

            /* Move to the next thread.  */
            thread_ptr =  thread_ptr -> tx_thread_created_next;
 80120e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80120e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80120e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        while (i != ((ULONG) 0))
 80120ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d1e2      	bne.n	80120b8 <_tx_trace_enable+0x1d8>
        }

        /* Pickup the first timer and the number of created timers.  */
        timer_ptr =  _tx_timer_created_ptr;
 80120f2:	4b22      	ldr	r3, [pc, #136]	@ (801217c <_tx_trace_enable+0x29c>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        i =          _tx_timer_created_count;
 80120fa:	4b21      	ldr	r3, [pc, #132]	@ (8012180 <_tx_trace_enable+0x2a0>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all timers.  */
        while (i != ((ULONG) 0))
 8012100:	e014      	b.n	801212c <_tx_trace_enable+0x24c>
        {

            /* Decrement the counter.  */
            i--;
 8012102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012104:	3b01      	subs	r3, #1
 8012106:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this timer.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_TIMER, timer_ptr, timer_ptr -> tx_timer_name,
 8012108:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801210c:	685a      	ldr	r2, [r3, #4]
 801210e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012112:	68db      	ldr	r3, [r3, #12]
 8012114:	9300      	str	r3, [sp, #0]
 8012116:	2300      	movs	r3, #0
 8012118:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801211c:	2002      	movs	r0, #2
 801211e:	f000 fa39 	bl	8012594 <_tx_trace_object_register>
                                                       ((ULONG) 0), timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks);

            /* Move to the next timer.  */
            timer_ptr =  timer_ptr -> tx_timer_created_next;
 8012122:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (i != ((ULONG) 0))
 801212c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801212e:	2b00      	cmp	r3, #0
 8012130:	d1e7      	bne.n	8012102 <_tx_trace_enable+0x222>
        }


        /* Pickup the first event flag group and the number of created groups.  */
        event_flags_ptr =  _tx_event_flags_created_ptr;
 8012132:	4b14      	ldr	r3, [pc, #80]	@ (8012184 <_tx_trace_enable+0x2a4>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        i =                _tx_event_flags_created_count;
 801213a:	4b13      	ldr	r3, [pc, #76]	@ (8012188 <_tx_trace_enable+0x2a8>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all event flags groups.  */
        while (i != ((ULONG) 0))
 8012140:	e037      	b.n	80121b2 <_tx_trace_enable+0x2d2>
 8012142:	bf00      	nop
 8012144:	20006fc0 	.word	0x20006fc0
 8012148:	20006fc4 	.word	0x20006fc4
 801214c:	20006fac 	.word	0x20006fac
 8012150:	20006fb0 	.word	0x20006fb0
 8012154:	20006fb4 	.word	0x20006fb4
 8012158:	20006fcc 	.word	0x20006fcc
 801215c:	20006fd0 	.word	0x20006fd0
 8012160:	20006fd4 	.word	0x20006fd4
 8012164:	20006fb8 	.word	0x20006fb8
 8012168:	20006fbc 	.word	0x20006fbc
 801216c:	54585442 	.word	0x54585442
 8012170:	20006a3c 	.word	0x20006a3c
 8012174:	200069ac 	.word	0x200069ac
 8012178:	200069b0 	.word	0x200069b0
 801217c:	20006ae0 	.word	0x20006ae0
 8012180:	20006ae4 	.word	0x20006ae4
 8012184:	2000697c 	.word	0x2000697c
 8012188:	20006980 	.word	0x20006980
        {

            /* Decrement the counter.  */
            i--;
 801218c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801218e:	3b01      	subs	r3, #1
 8012190:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this event flags group.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_EVENT_FLAGS, event_flags_ptr, event_flags_ptr -> tx_event_flags_group_name, ((ULONG) 0), ((ULONG) 0));
 8012192:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012196:	685a      	ldr	r2, [r3, #4]
 8012198:	2300      	movs	r3, #0
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	2300      	movs	r3, #0
 801219e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80121a2:	2006      	movs	r0, #6
 80121a4:	f000 f9f6 	bl	8012594 <_tx_trace_object_register>

            /* Move to the next event flags group.  */
            event_flags_ptr =  event_flags_ptr -> tx_event_flags_group_created_next;
 80121a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80121ac:	699b      	ldr	r3, [r3, #24]
 80121ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        while (i != ((ULONG) 0))
 80121b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d1e9      	bne.n	801218c <_tx_trace_enable+0x2ac>
        }

        /* Pickup the first queue and the number of created queues.  */
        queue_ptr =  _tx_queue_created_ptr;
 80121b8:	4b82      	ldr	r3, [pc, #520]	@ (80123c4 <_tx_trace_enable+0x4e4>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        i =          _tx_queue_created_count;
 80121c0:	4b81      	ldr	r3, [pc, #516]	@ (80123c8 <_tx_trace_enable+0x4e8>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all queues.  */
        while (i != ((ULONG) 0))
 80121c6:	e015      	b.n	80121f4 <_tx_trace_enable+0x314>
        {

            /* Decrement the counter.  */
            i--;
 80121c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121ca:	3b01      	subs	r3, #1
 80121cc:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this queue.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_name,
 80121ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80121d2:	685a      	ldr	r2, [r3, #4]
                                                                    (queue_ptr -> tx_queue_capacity * (sizeof(ULONG))), ((ULONG) 0));
 80121d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80121d8:	68db      	ldr	r3, [r3, #12]
 80121da:	009b      	lsls	r3, r3, #2
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_name,
 80121dc:	2100      	movs	r1, #0
 80121de:	9100      	str	r1, [sp, #0]
 80121e0:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80121e4:	2003      	movs	r0, #3
 80121e6:	f000 f9d5 	bl	8012594 <_tx_trace_object_register>

            /* Move to the next queue.  */
            queue_ptr =  queue_ptr -> tx_queue_created_next;
 80121ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80121ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        while (i != ((ULONG) 0))
 80121f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d1e6      	bne.n	80121c8 <_tx_trace_enable+0x2e8>
        }

        /* Pickup the first semaphore and the number of created semaphores.  */
        semaphore_ptr =  _tx_semaphore_created_ptr;
 80121fa:	4b74      	ldr	r3, [pc, #464]	@ (80123cc <_tx_trace_enable+0x4ec>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
        i =              _tx_semaphore_created_count;
 8012200:	4b73      	ldr	r3, [pc, #460]	@ (80123d0 <_tx_trace_enable+0x4f0>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all semaphores.  */
        while (i != ((ULONG) 0))
 8012206:	e00e      	b.n	8012226 <_tx_trace_enable+0x346>
        {

            /* Decrement the counter.  */
            i--;
 8012208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801220a:	3b01      	subs	r3, #1
 801220c:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this semaphore.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, semaphore_ptr -> tx_semaphore_name, ((ULONG) 0), ((ULONG) 0));
 801220e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012210:	685a      	ldr	r2, [r3, #4]
 8012212:	2300      	movs	r3, #0
 8012214:	9300      	str	r3, [sp, #0]
 8012216:	2300      	movs	r3, #0
 8012218:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801221a:	2004      	movs	r0, #4
 801221c:	f000 f9ba 	bl	8012594 <_tx_trace_object_register>

            /* Move to the next semaphore.  */
            semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
 8012220:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012222:	695b      	ldr	r3, [r3, #20]
 8012224:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (i != ((ULONG) 0))
 8012226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012228:	2b00      	cmp	r3, #0
 801222a:	d1ed      	bne.n	8012208 <_tx_trace_enable+0x328>
        }

        /* Pickup the first mutex and the number of created mutexes.  */
        mutex_ptr =  _tx_mutex_created_ptr;
 801222c:	4b69      	ldr	r3, [pc, #420]	@ (80123d4 <_tx_trace_enable+0x4f4>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	67bb      	str	r3, [r7, #120]	@ 0x78
        i =          _tx_mutex_created_count;
 8012232:	4b69      	ldr	r3, [pc, #420]	@ (80123d8 <_tx_trace_enable+0x4f8>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all mutexes.  */
        while (i != ((ULONG) 0))
 8012238:	e00f      	b.n	801225a <_tx_trace_enable+0x37a>
        {

            /* Decrement the counter.  */
            i--;
 801223a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801223c:	3b01      	subs	r3, #1
 801223e:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this mutex.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_name,
 8012240:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012242:	685a      	ldr	r2, [r3, #4]
                                                                        (ULONG) mutex_ptr -> tx_mutex_inherit, ((ULONG) 0));
 8012244:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012246:	691b      	ldr	r3, [r3, #16]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_name,
 8012248:	2100      	movs	r1, #0
 801224a:	9100      	str	r1, [sp, #0]
 801224c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801224e:	2005      	movs	r0, #5
 8012250:	f000 f9a0 	bl	8012594 <_tx_trace_object_register>

            /* Move to the next mutex.  */
            mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
 8012254:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012256:	6a1b      	ldr	r3, [r3, #32]
 8012258:	67bb      	str	r3, [r7, #120]	@ 0x78
        while (i != ((ULONG) 0))
 801225a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801225c:	2b00      	cmp	r3, #0
 801225e:	d1ec      	bne.n	801223a <_tx_trace_enable+0x35a>
        }

        /* Pickup the first block pool and the number of created block pools.  */
        block_pool_ptr =  _tx_block_pool_created_ptr;
 8012260:	4b5e      	ldr	r3, [pc, #376]	@ (80123dc <_tx_trace_enable+0x4fc>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	677b      	str	r3, [r7, #116]	@ 0x74
        i =               _tx_block_pool_created_count;
 8012266:	4b5e      	ldr	r3, [pc, #376]	@ (80123e0 <_tx_trace_enable+0x500>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all block pools.  */
        while (i != ((ULONG) 0))
 801226c:	e00f      	b.n	801228e <_tx_trace_enable+0x3ae>
        {

             /* Decrement the counter.  */
            i--;
 801226e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012270:	3b01      	subs	r3, #1
 8012272:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this block pool.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BLOCK_POOL, block_pool_ptr, block_pool_ptr -> tx_block_pool_name,
 8012274:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012276:	685a      	ldr	r2, [r3, #4]
 8012278:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801227a:	699b      	ldr	r3, [r3, #24]
 801227c:	2100      	movs	r1, #0
 801227e:	9100      	str	r1, [sp, #0]
 8012280:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8012282:	2007      	movs	r0, #7
 8012284:	f000 f986 	bl	8012594 <_tx_trace_object_register>
                                                                            block_pool_ptr -> tx_block_pool_size, ((ULONG) 0));

            /* Move to the next block pool.  */
            block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
 8012288:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801228c:	677b      	str	r3, [r7, #116]	@ 0x74
        while (i != ((ULONG) 0))
 801228e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012290:	2b00      	cmp	r3, #0
 8012292:	d1ec      	bne.n	801226e <_tx_trace_enable+0x38e>
        }

        /* Pickup the first byte pool and the number of created byte pools.  */
        byte_pool_ptr =  _tx_byte_pool_created_ptr;
 8012294:	4b53      	ldr	r3, [pc, #332]	@ (80123e4 <_tx_trace_enable+0x504>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	673b      	str	r3, [r7, #112]	@ 0x70
        i =              _tx_byte_pool_created_count;
 801229a:	4b53      	ldr	r3, [pc, #332]	@ (80123e8 <_tx_trace_enable+0x508>)
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all byte pools.  */
        while (i != ((ULONG) 0))
 80122a0:	e00f      	b.n	80122c2 <_tx_trace_enable+0x3e2>
        {

            /* Decrement the counter.  */
            i--;
 80122a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80122a4:	3b01      	subs	r3, #1
 80122a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this byte pool.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BYTE_POOL, byte_pool_ptr, byte_pool_ptr -> tx_byte_pool_name,
 80122a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122aa:	685a      	ldr	r2, [r3, #4]
 80122ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122ae:	69db      	ldr	r3, [r3, #28]
 80122b0:	2100      	movs	r1, #0
 80122b2:	9100      	str	r1, [sp, #0]
 80122b4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80122b6:	2008      	movs	r0, #8
 80122b8:	f000 f96c 	bl	8012594 <_tx_trace_object_register>
                                                                            byte_pool_ptr -> tx_byte_pool_size, ((ULONG) 0));

            /* Move to the next byte pool.  */
            byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
 80122bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122c0:	673b      	str	r3, [r7, #112]	@ 0x70
        while (i != ((ULONG) 0))
 80122c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d1ec      	bne.n	80122a2 <_tx_trace_enable+0x3c2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80122c8:	f3ef 8310 	mrs	r3, PRIMASK
 80122cc:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 80122ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 80122d0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80122d2:	b672      	cpsid	i
    return(int_posture);
 80122d4:	6a3b      	ldr	r3, [r7, #32]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80122d6:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Release the preeemption.  */
        _tx_thread_preempt_disable--;
 80122d8:	4b44      	ldr	r3, [pc, #272]	@ (80123ec <_tx_trace_enable+0x50c>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	3b01      	subs	r3, #1
 80122de:	4a43      	ldr	r2, [pc, #268]	@ (80123ec <_tx_trace_enable+0x50c>)
 80122e0:	6013      	str	r3, [r2, #0]

        /* Finally, setup the current buffer pointer, which effectively enables the trace!  */
        _tx_trace_buffer_current_ptr =    (TX_TRACE_BUFFER_ENTRY *) _tx_trace_buffer_start_ptr;
 80122e2:	4b43      	ldr	r3, [pc, #268]	@ (80123f0 <_tx_trace_enable+0x510>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	4a43      	ldr	r2, [pc, #268]	@ (80123f4 <_tx_trace_enable+0x514>)
 80122e8:	6013      	str	r3, [r2, #0]

        /* Insert two RUNNING events so the buffer is not empty.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
 80122ea:	4b42      	ldr	r3, [pc, #264]	@ (80123f4 <_tx_trace_enable+0x514>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80122f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	f000 8095 	beq.w	8012422 <_tx_trace_enable+0x542>
 80122f8:	4b3f      	ldr	r3, [pc, #252]	@ (80123f8 <_tx_trace_enable+0x518>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	f003 0301 	and.w	r3, r3, #1
 8012300:	2b00      	cmp	r3, #0
 8012302:	f000 808e 	beq.w	8012422 <_tx_trace_enable+0x542>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012306:	f3ef 8305 	mrs	r3, IPSR
 801230a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801230c:	69fa      	ldr	r2, [r7, #28]
 801230e:	4b3b      	ldr	r3, [pc, #236]	@ (80123fc <_tx_trace_enable+0x51c>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	4313      	orrs	r3, r2
 8012314:	647b      	str	r3, [r7, #68]	@ 0x44
 8012316:	4b3a      	ldr	r3, [pc, #232]	@ (8012400 <_tx_trace_enable+0x520>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	663b      	str	r3, [r7, #96]	@ 0x60
 801231c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801231e:	2b00      	cmp	r3, #0
 8012320:	d10b      	bne.n	801233a <_tx_trace_enable+0x45a>
 8012322:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012326:	667b      	str	r3, [r7, #100]	@ 0x64
 8012328:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801232a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801232c:	041a      	lsls	r2, r3, #16
 801232e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012330:	4313      	orrs	r3, r2
 8012332:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012336:	667b      	str	r3, [r7, #100]	@ 0x64
 8012338:	e00e      	b.n	8012358 <_tx_trace_enable+0x478>
 801233a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801233c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8012340:	d205      	bcs.n	801234e <_tx_trace_enable+0x46e>
 8012342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012344:	667b      	str	r3, [r7, #100]	@ 0x64
 8012346:	f04f 33ff 	mov.w	r3, #4294967295
 801234a:	663b      	str	r3, [r7, #96]	@ 0x60
 801234c:	e004      	b.n	8012358 <_tx_trace_enable+0x478>
 801234e:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8012352:	663b      	str	r3, [r7, #96]	@ 0x60
 8012354:	2300      	movs	r3, #0
 8012356:	667b      	str	r3, [r7, #100]	@ 0x64
 8012358:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801235a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801235c:	601a      	str	r2, [r3, #0]
 801235e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012360:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012362:	605a      	str	r2, [r3, #4]
 8012364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012366:	2206      	movs	r2, #6
 8012368:	609a      	str	r2, [r3, #8]
 801236a:	4b26      	ldr	r3, [pc, #152]	@ (8012404 <_tx_trace_enable+0x524>)
 801236c:	681a      	ldr	r2, [r3, #0]
 801236e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012370:	60da      	str	r2, [r3, #12]
 8012372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012374:	2200      	movs	r2, #0
 8012376:	611a      	str	r2, [r3, #16]
 8012378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801237a:	2200      	movs	r2, #0
 801237c:	615a      	str	r2, [r3, #20]
 801237e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012380:	2200      	movs	r2, #0
 8012382:	619a      	str	r2, [r3, #24]
 8012384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012386:	2200      	movs	r2, #0
 8012388:	61da      	str	r2, [r3, #28]
 801238a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801238c:	3320      	adds	r3, #32
 801238e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012390:	4b1d      	ldr	r3, [pc, #116]	@ (8012408 <_tx_trace_enable+0x528>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012396:	429a      	cmp	r2, r3
 8012398:	d33c      	bcc.n	8012414 <_tx_trace_enable+0x534>
 801239a:	4b15      	ldr	r3, [pc, #84]	@ (80123f0 <_tx_trace_enable+0x510>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80123a0:	4a14      	ldr	r2, [pc, #80]	@ (80123f4 <_tx_trace_enable+0x514>)
 80123a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80123a4:	6013      	str	r3, [r2, #0]
 80123a6:	4b19      	ldr	r3, [pc, #100]	@ (801240c <_tx_trace_enable+0x52c>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80123ac:	621a      	str	r2, [r3, #32]
 80123ae:	4b18      	ldr	r3, [pc, #96]	@ (8012410 <_tx_trace_enable+0x530>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d035      	beq.n	8012422 <_tx_trace_enable+0x542>
 80123b6:	4b16      	ldr	r3, [pc, #88]	@ (8012410 <_tx_trace_enable+0x530>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	4a14      	ldr	r2, [pc, #80]	@ (801240c <_tx_trace_enable+0x52c>)
 80123bc:	6812      	ldr	r2, [r2, #0]
 80123be:	4610      	mov	r0, r2
 80123c0:	4798      	blx	r3
 80123c2:	e02e      	b.n	8012422 <_tx_trace_enable+0x542>
 80123c4:	20006974 	.word	0x20006974
 80123c8:	20006978 	.word	0x20006978
 80123cc:	2000696c 	.word	0x2000696c
 80123d0:	20006970 	.word	0x20006970
 80123d4:	20006984 	.word	0x20006984
 80123d8:	20006988 	.word	0x20006988
 80123dc:	2000698c 	.word	0x2000698c
 80123e0:	20006990 	.word	0x20006990
 80123e4:	20006994 	.word	0x20006994
 80123e8:	20006998 	.word	0x20006998
 80123ec:	20006a3c 	.word	0x20006a3c
 80123f0:	20006fb8 	.word	0x20006fb8
 80123f4:	20006fc0 	.word	0x20006fc0
 80123f8:	20006fc4 	.word	0x20006fc4
 80123fc:	20000048 	.word	0x20000048
 8012400:	200069a4 	.word	0x200069a4
 8012404:	e0001004 	.word	0xe0001004
 8012408:	20006fbc 	.word	0x20006fbc
 801240c:	20006fac 	.word	0x20006fac
 8012410:	20006fc8 	.word	0x20006fc8
 8012414:	4a43      	ldr	r2, [pc, #268]	@ (8012524 <_tx_trace_enable+0x644>)
 8012416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012418:	6013      	str	r3, [r2, #0]
 801241a:	4b43      	ldr	r3, [pc, #268]	@ (8012528 <_tx_trace_enable+0x648>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012420:	621a      	str	r2, [r3, #32]
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
 8012422:	4b40      	ldr	r3, [pc, #256]	@ (8012524 <_tx_trace_enable+0x644>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	643b      	str	r3, [r7, #64]	@ 0x40
 8012428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801242a:	2b00      	cmp	r3, #0
 801242c:	d06b      	beq.n	8012506 <_tx_trace_enable+0x626>
 801242e:	4b3f      	ldr	r3, [pc, #252]	@ (801252c <_tx_trace_enable+0x64c>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f003 0301 	and.w	r3, r3, #1
 8012436:	2b00      	cmp	r3, #0
 8012438:	d065      	beq.n	8012506 <_tx_trace_enable+0x626>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801243a:	f3ef 8305 	mrs	r3, IPSR
 801243e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012440:	69ba      	ldr	r2, [r7, #24]
 8012442:	4b3b      	ldr	r3, [pc, #236]	@ (8012530 <_tx_trace_enable+0x650>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	4313      	orrs	r3, r2
 8012448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801244a:	4b3a      	ldr	r3, [pc, #232]	@ (8012534 <_tx_trace_enable+0x654>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012452:	2b00      	cmp	r3, #0
 8012454:	d10b      	bne.n	801246e <_tx_trace_enable+0x58e>
 8012456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801245a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801245c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801245e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012460:	041a      	lsls	r2, r3, #16
 8012462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012464:	4313      	orrs	r3, r2
 8012466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801246a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801246c:	e00e      	b.n	801248c <_tx_trace_enable+0x5ac>
 801246e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012470:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8012474:	d205      	bcs.n	8012482 <_tx_trace_enable+0x5a2>
 8012476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012478:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801247a:	f04f 33ff 	mov.w	r3, #4294967295
 801247e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012480:	e004      	b.n	801248c <_tx_trace_enable+0x5ac>
 8012482:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8012486:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012488:	2300      	movs	r3, #0
 801248a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801248c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801248e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012490:	601a      	str	r2, [r3, #0]
 8012492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012494:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012496:	605a      	str	r2, [r3, #4]
 8012498:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801249a:	2206      	movs	r2, #6
 801249c:	609a      	str	r2, [r3, #8]
 801249e:	4b26      	ldr	r3, [pc, #152]	@ (8012538 <_tx_trace_enable+0x658>)
 80124a0:	681a      	ldr	r2, [r3, #0]
 80124a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124a4:	60da      	str	r2, [r3, #12]
 80124a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124a8:	2200      	movs	r2, #0
 80124aa:	611a      	str	r2, [r3, #16]
 80124ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124ae:	2200      	movs	r2, #0
 80124b0:	615a      	str	r2, [r3, #20]
 80124b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124b4:	2200      	movs	r2, #0
 80124b6:	619a      	str	r2, [r3, #24]
 80124b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124ba:	2200      	movs	r2, #0
 80124bc:	61da      	str	r2, [r3, #28]
 80124be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124c0:	3320      	adds	r3, #32
 80124c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80124c4:	4b1d      	ldr	r3, [pc, #116]	@ (801253c <_tx_trace_enable+0x65c>)
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d314      	bcc.n	80124f8 <_tx_trace_enable+0x618>
 80124ce:	4b1c      	ldr	r3, [pc, #112]	@ (8012540 <_tx_trace_enable+0x660>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80124d4:	4a13      	ldr	r2, [pc, #76]	@ (8012524 <_tx_trace_enable+0x644>)
 80124d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124d8:	6013      	str	r3, [r2, #0]
 80124da:	4b13      	ldr	r3, [pc, #76]	@ (8012528 <_tx_trace_enable+0x648>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80124e0:	621a      	str	r2, [r3, #32]
 80124e2:	4b18      	ldr	r3, [pc, #96]	@ (8012544 <_tx_trace_enable+0x664>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d00d      	beq.n	8012506 <_tx_trace_enable+0x626>
 80124ea:	4b16      	ldr	r3, [pc, #88]	@ (8012544 <_tx_trace_enable+0x664>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	4a0e      	ldr	r2, [pc, #56]	@ (8012528 <_tx_trace_enable+0x648>)
 80124f0:	6812      	ldr	r2, [r2, #0]
 80124f2:	4610      	mov	r0, r2
 80124f4:	4798      	blx	r3
 80124f6:	e006      	b.n	8012506 <_tx_trace_enable+0x626>
 80124f8:	4a0a      	ldr	r2, [pc, #40]	@ (8012524 <_tx_trace_enable+0x644>)
 80124fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124fc:	6013      	str	r3, [r2, #0]
 80124fe:	4b0a      	ldr	r3, [pc, #40]	@ (8012528 <_tx_trace_enable+0x648>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012504:	621a      	str	r2, [r3, #32]
 8012506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012508:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	f383 8810 	msr	PRIMASK, r3
}
 8012510:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012512:	f7fe fdaf 	bl	8011074 <_tx_thread_system_preempt_check>

        /* Return successful completion.  */
        status =  TX_SUCCESS;
 8012516:	2300      	movs	r3, #0
 8012518:	66bb      	str	r3, [r7, #104]	@ 0x68
    }

    /* Return completion status.  */
    return(status);
 801251a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    }

    /* Return completion status.  */
    return(status);
#endif
}
 801251c:	4618      	mov	r0, r3
 801251e:	3790      	adds	r7, #144	@ 0x90
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}
 8012524:	20006fc0 	.word	0x20006fc0
 8012528:	20006fac 	.word	0x20006fac
 801252c:	20006fc4 	.word	0x20006fc4
 8012530:	20000048 	.word	0x20000048
 8012534:	200069a4 	.word	0x200069a4
 8012538:	e0001004 	.word	0xe0001004
 801253c:	20006fbc 	.word	0x20006fbc
 8012540:	20006fb8 	.word	0x20006fb8
 8012544:	20006fc8 	.word	0x20006fc8

08012548 <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 8012548:	b480      	push	{r7}
 801254a:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 801254c:	4b0b      	ldr	r3, [pc, #44]	@ (801257c <_tx_trace_initialize+0x34>)
 801254e:	2200      	movs	r2, #0
 8012550:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 8012552:	4b0b      	ldr	r3, [pc, #44]	@ (8012580 <_tx_trace_initialize+0x38>)
 8012554:	2200      	movs	r2, #0
 8012556:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 8012558:	4b0a      	ldr	r3, [pc, #40]	@ (8012584 <_tx_trace_initialize+0x3c>)
 801255a:	2200      	movs	r2, #0
 801255c:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 801255e:	4b0a      	ldr	r3, [pc, #40]	@ (8012588 <_tx_trace_initialize+0x40>)
 8012560:	2200      	movs	r2, #0
 8012562:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 8012564:	4b09      	ldr	r3, [pc, #36]	@ (801258c <_tx_trace_initialize+0x44>)
 8012566:	2200      	movs	r2, #0
 8012568:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 801256a:	4b09      	ldr	r3, [pc, #36]	@ (8012590 <_tx_trace_initialize+0x48>)
 801256c:	2200      	movs	r2, #0
 801256e:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 8012570:	bf00      	nop
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr
 801257a:	bf00      	nop
 801257c:	20006fac 	.word	0x20006fac
 8012580:	20006fb0 	.word	0x20006fb0
 8012584:	20006fb4 	.word	0x20006fb4
 8012588:	20006fb8 	.word	0x20006fb8
 801258c:	20006fbc 	.word	0x20006fbc
 8012590:	20006fc0 	.word	0x20006fc0

08012594 <_tx_trace_object_register>:
/*                                            check for null name,        */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 8012594:	b480      	push	{r7}
 8012596:	b08d      	sub	sp, #52	@ 0x34
 8012598:	af00      	add	r7, sp, #0
 801259a:	60b9      	str	r1, [r7, #8]
 801259c:	607a      	str	r2, [r7, #4]
 801259e:	603b      	str	r3, [r7, #0]
 80125a0:	4603      	mov	r3, r0
 80125a2:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 80125a4:	4b6f      	ldr	r3, [pc, #444]	@ (8012764 <_tx_trace_object_register+0x1d0>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	f000 80d5 	beq.w	8012758 <_tx_trace_object_register+0x1c4>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 80125ae:	4b6e      	ldr	r3, [pc, #440]	@ (8012768 <_tx_trace_object_register+0x1d4>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 80125b4:	4b6d      	ldr	r3, [pc, #436]	@ (801276c <_tx_trace_object_register+0x1d8>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	f000 80cd 	beq.w	8012758 <_tx_trace_object_register+0x1c4>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 80125be:	6a3b      	ldr	r3, [r7, #32]
 80125c0:	62bb      	str	r3, [r7, #40]	@ 0x28
            loop_break =  TX_FALSE;
 80125c2:	2300      	movs	r3, #0
 80125c4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 80125c6:	4b6a      	ldr	r3, [pc, #424]	@ (8012770 <_tx_trace_object_register+0x1dc>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80125cc:	4b65      	ldr	r3, [pc, #404]	@ (8012764 <_tx_trace_object_register+0x1d0>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 80125d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80125d4:	4613      	mov	r3, r2
 80125d6:	005b      	lsls	r3, r3, #1
 80125d8:	4413      	add	r3, r2
 80125da:	011b      	lsls	r3, r3, #4
 80125dc:	461a      	mov	r2, r3
 80125de:	69fb      	ldr	r3, [r7, #28]
 80125e0:	4413      	add	r3, r2
 80125e2:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 80125e8:	69bb      	ldr	r3, [r7, #24]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d103      	bne.n	80125f8 <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 80125f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125f2:	62bb      	str	r3, [r7, #40]	@ 0x28
                    loop_break =  TX_TRUE;
 80125f4:	2301      	movs	r3, #1
 80125f6:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 80125f8:	69bb      	ldr	r3, [r7, #24]
 80125fa:	685a      	ldr	r2, [r3, #4]
 80125fc:	68bb      	ldr	r3, [r7, #8]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d103      	bne.n	801260a <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8012602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012604:	62bb      	str	r3, [r7, #40]	@ 0x28
                    loop_break =  TX_TRUE;
 8012606:	2301      	movs	r3, #1
 8012608:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 801260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801260c:	2b01      	cmp	r3, #1
 801260e:	d02d      	beq.n	801266c <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 8012610:	69bb      	ldr	r3, [r7, #24]
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	2b01      	cmp	r3, #1
 8012616:	d11a      	bne.n	801264e <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 8012618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801261a:	6a3b      	ldr	r3, [r7, #32]
 801261c:	429a      	cmp	r2, r3
 801261e:	d102      	bne.n	8012626 <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 8012620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012622:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012624:	e013      	b.n	801264e <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8012626:	4b4f      	ldr	r3, [pc, #316]	@ (8012764 <_tx_trace_object_register+0x1d0>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 801262c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801262e:	4613      	mov	r3, r2
 8012630:	005b      	lsls	r3, r3, #1
 8012632:	4413      	add	r3, r2
 8012634:	011b      	lsls	r3, r3, #4
 8012636:	461a      	mov	r2, r3
 8012638:	69fb      	ldr	r3, [r7, #28]
 801263a:	4413      	add	r3, r2
 801263c:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	785b      	ldrb	r3, [r3, #1]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d001      	beq.n	801264e <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 801264a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801264c:	62bb      	str	r3, [r7, #40]	@ 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 801264e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012650:	3301      	adds	r3, #1
 8012652:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 8012654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012656:	6a3b      	ldr	r3, [r7, #32]
 8012658:	429a      	cmp	r2, r3
 801265a:	d301      	bcc.n	8012660 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 801265c:	2300      	movs	r3, #0
 801265e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 8012660:	4b43      	ldr	r3, [pc, #268]	@ (8012770 <_tx_trace_object_register+0x1dc>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012666:	429a      	cmp	r2, r3
 8012668:	d1b0      	bne.n	80125cc <_tx_trace_object_register+0x38>
 801266a:	e000      	b.n	801266e <_tx_trace_object_register+0xda>
                    break;
 801266c:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 801266e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012670:	6a3b      	ldr	r3, [r7, #32]
 8012672:	429a      	cmp	r2, r3
 8012674:	d270      	bcs.n	8012758 <_tx_trace_object_register+0x1c4>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 8012676:	4b3d      	ldr	r3, [pc, #244]	@ (801276c <_tx_trace_object_register+0x1d8>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	3b01      	subs	r3, #1
 801267c:	4a3b      	ldr	r2, [pc, #236]	@ (801276c <_tx_trace_object_register+0x1d8>)
 801267e:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 8012680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012682:	3301      	adds	r3, #1
 8012684:	6a3a      	ldr	r2, [r7, #32]
 8012686:	429a      	cmp	r2, r3
 8012688:	d904      	bls.n	8012694 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 801268a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801268c:	3301      	adds	r3, #1
 801268e:	4a38      	ldr	r2, [pc, #224]	@ (8012770 <_tx_trace_object_register+0x1dc>)
 8012690:	6013      	str	r3, [r2, #0]
 8012692:	e002      	b.n	801269a <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 8012694:	4b36      	ldr	r3, [pc, #216]	@ (8012770 <_tx_trace_object_register+0x1dc>)
 8012696:	2200      	movs	r2, #0
 8012698:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 801269a:	4b32      	ldr	r3, [pc, #200]	@ (8012764 <_tx_trace_object_register+0x1d0>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 80126a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126a2:	4613      	mov	r3, r2
 80126a4:	005b      	lsls	r3, r3, #1
 80126a6:	4413      	add	r3, r2
 80126a8:	011b      	lsls	r3, r3, #4
 80126aa:	461a      	mov	r2, r3
 80126ac:	69fb      	ldr	r3, [r7, #28]
 80126ae:	4413      	add	r3, r2
 80126b0:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80126b2:	69fb      	ldr	r3, [r7, #28]
 80126b4:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 80126b6:	69bb      	ldr	r3, [r7, #24]
 80126b8:	2200      	movs	r2, #0
 80126ba:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 80126bc:	69bb      	ldr	r3, [r7, #24]
 80126be:	7bfa      	ldrb	r2, [r7, #15]
 80126c0:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	69bb      	ldr	r3, [r7, #24]
 80126c6:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 80126c8:	69bb      	ldr	r3, [r7, #24]
 80126ca:	683a      	ldr	r2, [r7, #0]
 80126cc:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 80126ce:	69bb      	ldr	r3, [r7, #24]
 80126d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80126d2:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 80126d4:	2300      	movs	r3, #0
 80126d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80126d8:	e017      	b.n	801270a <_tx_trace_object_register+0x176>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 80126de:	69fa      	ldr	r2, [r7, #28]
 80126e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126e2:	4413      	add	r3, r2
 80126e4:	61fb      	str	r3, [r7, #28]

                    /* Determine if object_name (work_ptr) is null.  */
                    if (work_ptr == TX_NULL)
 80126e6:	69fb      	ldr	r3, [r7, #28]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d012      	beq.n	8012712 <_tx_trace_object_register+0x17e>
                    {
                        break;
                    }

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 80126ec:	69fb      	ldr	r3, [r7, #28]
 80126ee:	7819      	ldrb	r1, [r3, #0]
 80126f0:	69ba      	ldr	r2, [r7, #24]
 80126f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126f4:	4413      	add	r3, r2
 80126f6:	3310      	adds	r3, #16
 80126f8:	460a      	mov	r2, r1
 80126fa:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d008      	beq.n	8012716 <_tx_trace_object_register+0x182>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8012704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012706:	3301      	adds	r3, #1
 8012708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801270a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801270c:	2b1e      	cmp	r3, #30
 801270e:	d9e4      	bls.n	80126da <_tx_trace_object_register+0x146>
 8012710:	e002      	b.n	8012718 <_tx_trace_object_register+0x184>
                        break;
 8012712:	bf00      	nop
 8012714:	e000      	b.n	8012718 <_tx_trace_object_register+0x184>
                    {
                        break;
 8012716:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 8012718:	69ba      	ldr	r2, [r7, #24]
 801271a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801271c:	4413      	add	r3, r2
 801271e:	3310      	adds	r3, #16
 8012720:	2200      	movs	r2, #0
 8012722:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 8012724:	7bfb      	ldrb	r3, [r7, #15]
 8012726:	2b01      	cmp	r3, #1
 8012728:	d110      	bne.n	801274c <_tx_trace_object_register+0x1b8>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012732:	0a1b      	lsrs	r3, r3, #8
 8012734:	b2db      	uxtb	r3, r3
 8012736:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801273a:	b2da      	uxtb	r2, r3
 801273c:	69bb      	ldr	r3, [r7, #24]
 801273e:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012744:	b2da      	uxtb	r2, r3
 8012746:	69bb      	ldr	r3, [r7, #24]
 8012748:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 801274a:	e005      	b.n	8012758 <_tx_trace_object_register+0x1c4>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 801274c:	69bb      	ldr	r3, [r7, #24]
 801274e:	2200      	movs	r2, #0
 8012750:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 8012752:	69bb      	ldr	r3, [r7, #24]
 8012754:	2200      	movs	r2, #0
 8012756:	70da      	strb	r2, [r3, #3]
}
 8012758:	bf00      	nop
 801275a:	3734      	adds	r7, #52	@ 0x34
 801275c:	46bd      	mov	sp, r7
 801275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012762:	4770      	bx	lr
 8012764:	20006fb0 	.word	0x20006fb0
 8012768:	20006fcc 	.word	0x20006fcc
 801276c:	20006fd0 	.word	0x20006fd0
 8012770:	20006fd4 	.word	0x20006fd4

08012774 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b092      	sub	sp, #72	@ 0x48
 8012778:	af00      	add	r7, sp, #0
 801277a:	60f8      	str	r0, [r7, #12]
 801277c:	60b9      	str	r1, [r7, #8]
 801277e:	607a      	str	r2, [r7, #4]
 8012780:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012782:	2300      	movs	r3, #0
 8012784:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d102      	bne.n	8012792 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801278c:	2302      	movs	r3, #2
 801278e:	647b      	str	r3, [r7, #68]	@ 0x44
 8012790:	e075      	b.n	801287e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8012792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012794:	2b34      	cmp	r3, #52	@ 0x34
 8012796:	d002      	beq.n	801279e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012798:	2302      	movs	r3, #2
 801279a:	647b      	str	r3, [r7, #68]	@ 0x44
 801279c:	e06f      	b.n	801287e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801279e:	f3ef 8310 	mrs	r3, PRIMASK
 80127a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80127a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80127a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80127a8:	b672      	cpsid	i
    return(int_posture);
 80127aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80127ac:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80127ae:	4b3b      	ldr	r3, [pc, #236]	@ (801289c <_txe_byte_pool_create+0x128>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	3301      	adds	r3, #1
 80127b4:	4a39      	ldr	r2, [pc, #228]	@ (801289c <_txe_byte_pool_create+0x128>)
 80127b6:	6013      	str	r3, [r2, #0]
 80127b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127ba:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127be:	f383 8810 	msr	PRIMASK, r3
}
 80127c2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80127c4:	4b36      	ldr	r3, [pc, #216]	@ (80128a0 <_txe_byte_pool_create+0x12c>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80127ca:	2300      	movs	r3, #0
 80127cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80127ce:	e009      	b.n	80127e4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80127d0:	68fa      	ldr	r2, [r7, #12]
 80127d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d00b      	beq.n	80127f0 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80127d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80127de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80127e0:	3301      	adds	r3, #1
 80127e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80127e4:	4b2f      	ldr	r3, [pc, #188]	@ (80128a4 <_txe_byte_pool_create+0x130>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d3f0      	bcc.n	80127d0 <_txe_byte_pool_create+0x5c>
 80127ee:	e000      	b.n	80127f2 <_txe_byte_pool_create+0x7e>
                break;
 80127f0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80127f2:	f3ef 8310 	mrs	r3, PRIMASK
 80127f6:	623b      	str	r3, [r7, #32]
    return(posture);
 80127f8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80127fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80127fc:	b672      	cpsid	i
    return(int_posture);
 80127fe:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012800:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012802:	4b26      	ldr	r3, [pc, #152]	@ (801289c <_txe_byte_pool_create+0x128>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	3b01      	subs	r3, #1
 8012808:	4a24      	ldr	r2, [pc, #144]	@ (801289c <_txe_byte_pool_create+0x128>)
 801280a:	6013      	str	r3, [r2, #0]
 801280c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801280e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012812:	f383 8810 	msr	PRIMASK, r3
}
 8012816:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012818:	f7fe fc2c 	bl	8011074 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 801281c:	68fa      	ldr	r2, [r7, #12]
 801281e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012820:	429a      	cmp	r2, r3
 8012822:	d102      	bne.n	801282a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8012824:	2302      	movs	r3, #2
 8012826:	647b      	str	r3, [r7, #68]	@ 0x44
 8012828:	e029      	b.n	801287e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d102      	bne.n	8012836 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8012830:	2303      	movs	r3, #3
 8012832:	647b      	str	r3, [r7, #68]	@ 0x44
 8012834:	e023      	b.n	801287e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	2b63      	cmp	r3, #99	@ 0x63
 801283a:	d802      	bhi.n	8012842 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 801283c:	2305      	movs	r3, #5
 801283e:	647b      	str	r3, [r7, #68]	@ 0x44
 8012840:	e01d      	b.n	801287e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012842:	4b19      	ldr	r3, [pc, #100]	@ (80128a8 <_txe_byte_pool_create+0x134>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8012848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801284a:	4a18      	ldr	r2, [pc, #96]	@ (80128ac <_txe_byte_pool_create+0x138>)
 801284c:	4293      	cmp	r3, r2
 801284e:	d101      	bne.n	8012854 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012850:	2313      	movs	r3, #19
 8012852:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012854:	f3ef 8305 	mrs	r3, IPSR
 8012858:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801285a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801285c:	4b14      	ldr	r3, [pc, #80]	@ (80128b0 <_txe_byte_pool_create+0x13c>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	4313      	orrs	r3, r2
 8012862:	2b00      	cmp	r3, #0
 8012864:	d00b      	beq.n	801287e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012866:	f3ef 8305 	mrs	r3, IPSR
 801286a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801286c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801286e:	4b10      	ldr	r3, [pc, #64]	@ (80128b0 <_txe_byte_pool_create+0x13c>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	4313      	orrs	r3, r2
 8012874:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8012878:	d201      	bcs.n	801287e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801287a:	2313      	movs	r3, #19
 801287c:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801287e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012880:	2b00      	cmp	r3, #0
 8012882:	d106      	bne.n	8012892 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	687a      	ldr	r2, [r7, #4]
 8012888:	68b9      	ldr	r1, [r7, #8]
 801288a:	68f8      	ldr	r0, [r7, #12]
 801288c:	f7fd fe5e 	bl	801054c <_tx_byte_pool_create>
 8012890:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 8012892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8012894:	4618      	mov	r0, r3
 8012896:	3748      	adds	r7, #72	@ 0x48
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}
 801289c:	20006a3c 	.word	0x20006a3c
 80128a0:	20006994 	.word	0x20006994
 80128a4:	20006998 	.word	0x20006998
 80128a8:	200069a4 	.word	0x200069a4
 80128ac:	20006aec 	.word	0x20006aec
 80128b0:	20000048 	.word	0x20000048

080128b4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b09a      	sub	sp, #104	@ 0x68
 80128b8:	af06      	add	r7, sp, #24
 80128ba:	60f8      	str	r0, [r7, #12]
 80128bc:	60b9      	str	r1, [r7, #8]
 80128be:	607a      	str	r2, [r7, #4]
 80128c0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80128c2:	2300      	movs	r3, #0
 80128c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d102      	bne.n	80128d2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80128cc:	230e      	movs	r3, #14
 80128ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128d0:	e0bb      	b.n	8012a4a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80128d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80128d4:	2bb0      	cmp	r3, #176	@ 0xb0
 80128d6:	d002      	beq.n	80128de <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80128d8:	230e      	movs	r3, #14
 80128da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128dc:	e0b5      	b.n	8012a4a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80128de:	f3ef 8310 	mrs	r3, PRIMASK
 80128e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 80128e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 80128e6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80128e8:	b672      	cpsid	i
    return(int_posture);
 80128ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80128ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80128ee:	4b64      	ldr	r3, [pc, #400]	@ (8012a80 <_txe_thread_create+0x1cc>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	3301      	adds	r3, #1
 80128f4:	4a62      	ldr	r2, [pc, #392]	@ (8012a80 <_txe_thread_create+0x1cc>)
 80128f6:	6013      	str	r3, [r2, #0]
 80128f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80128fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128fe:	f383 8810 	msr	PRIMASK, r3
}
 8012902:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8012904:	2300      	movs	r3, #0
 8012906:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 8012908:	4b5e      	ldr	r3, [pc, #376]	@ (8012a84 <_txe_thread_create+0x1d0>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801290e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012910:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8012912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012914:	3b01      	subs	r3, #1
 8012916:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012918:	4413      	add	r3, r2
 801291a:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 801291c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801291e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8012920:	2300      	movs	r3, #0
 8012922:	647b      	str	r3, [r7, #68]	@ 0x44
 8012924:	e02b      	b.n	801297e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801292a:	429a      	cmp	r2, r3
 801292c:	d101      	bne.n	8012932 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801292e:	2301      	movs	r3, #1
 8012930:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8012932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012934:	2b01      	cmp	r3, #1
 8012936:	d028      	beq.n	801298a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8012938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801293e:	429a      	cmp	r2, r3
 8012940:	d308      	bcc.n	8012954 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8012942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012944:	691b      	ldr	r3, [r3, #16]
 8012946:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012948:	429a      	cmp	r2, r3
 801294a:	d203      	bcs.n	8012954 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801294c:	2300      	movs	r3, #0
 801294e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8012950:	2301      	movs	r3, #1
 8012952:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8012954:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012956:	68db      	ldr	r3, [r3, #12]
 8012958:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801295a:	429a      	cmp	r2, r3
 801295c:	d308      	bcc.n	8012970 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801295e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012960:	691b      	ldr	r3, [r3, #16]
 8012962:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012964:	429a      	cmp	r2, r3
 8012966:	d203      	bcs.n	8012970 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8012968:	2300      	movs	r3, #0
 801296a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801296c:	2301      	movs	r3, #1
 801296e:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8012970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012976:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8012978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801297a:	3301      	adds	r3, #1
 801297c:	647b      	str	r3, [r7, #68]	@ 0x44
 801297e:	4b42      	ldr	r3, [pc, #264]	@ (8012a88 <_txe_thread_create+0x1d4>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012984:	429a      	cmp	r2, r3
 8012986:	d3ce      	bcc.n	8012926 <_txe_thread_create+0x72>
 8012988:	e000      	b.n	801298c <_txe_thread_create+0xd8>
                break;
 801298a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801298c:	f3ef 8310 	mrs	r3, PRIMASK
 8012990:	61fb      	str	r3, [r7, #28]
    return(posture);
 8012992:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8012994:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012996:	b672      	cpsid	i
    return(int_posture);
 8012998:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801299a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801299c:	4b38      	ldr	r3, [pc, #224]	@ (8012a80 <_txe_thread_create+0x1cc>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	3b01      	subs	r3, #1
 80129a2:	4a37      	ldr	r2, [pc, #220]	@ (8012a80 <_txe_thread_create+0x1cc>)
 80129a4:	6013      	str	r3, [r2, #0]
 80129a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129a8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80129aa:	6a3b      	ldr	r3, [r7, #32]
 80129ac:	f383 8810 	msr	PRIMASK, r3
}
 80129b0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80129b2:	f7fe fb5f 	bl	8011074 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80129b6:	68fa      	ldr	r2, [r7, #12]
 80129b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d102      	bne.n	80129c4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80129be:	230e      	movs	r3, #14
 80129c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80129c2:	e042      	b.n	8012a4a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80129c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d102      	bne.n	80129d0 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80129ca:	2303      	movs	r3, #3
 80129cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80129ce:	e03c      	b.n	8012a4a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d102      	bne.n	80129dc <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80129d6:	2303      	movs	r3, #3
 80129d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80129da:	e036      	b.n	8012a4a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80129dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80129de:	2bc7      	cmp	r3, #199	@ 0xc7
 80129e0:	d802      	bhi.n	80129e8 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80129e2:	2305      	movs	r3, #5
 80129e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80129e6:	e030      	b.n	8012a4a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80129e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80129ea:	2b1f      	cmp	r3, #31
 80129ec:	d902      	bls.n	80129f4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80129ee:	230f      	movs	r3, #15
 80129f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80129f2:	e02a      	b.n	8012a4a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80129f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80129f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d902      	bls.n	8012a02 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80129fc:	2318      	movs	r3, #24
 80129fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012a00:	e023      	b.n	8012a4a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8012a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012a04:	2b01      	cmp	r3, #1
 8012a06:	d902      	bls.n	8012a0e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8012a08:	2310      	movs	r3, #16
 8012a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012a0c:	e01d      	b.n	8012a4a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8012a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8012a8c <_txe_thread_create+0x1d8>)
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8012a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a16:	4a1e      	ldr	r2, [pc, #120]	@ (8012a90 <_txe_thread_create+0x1dc>)
 8012a18:	4293      	cmp	r3, r2
 8012a1a:	d101      	bne.n	8012a20 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012a1c:	2313      	movs	r3, #19
 8012a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012a20:	f3ef 8305 	mrs	r3, IPSR
 8012a24:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012a26:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012a28:	4b1a      	ldr	r3, [pc, #104]	@ (8012a94 <_txe_thread_create+0x1e0>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	4313      	orrs	r3, r2
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d00b      	beq.n	8012a4a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012a32:	f3ef 8305 	mrs	r3, IPSR
 8012a36:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012a38:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012a3a:	4b16      	ldr	r3, [pc, #88]	@ (8012a94 <_txe_thread_create+0x1e0>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	4313      	orrs	r3, r2
 8012a40:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8012a44:	d201      	bcs.n	8012a4a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8012a46:	2313      	movs	r3, #19
 8012a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d112      	bne.n	8012a76 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8012a50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012a52:	9305      	str	r3, [sp, #20]
 8012a54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012a56:	9304      	str	r3, [sp, #16]
 8012a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012a5a:	9303      	str	r3, [sp, #12]
 8012a5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012a5e:	9302      	str	r3, [sp, #8]
 8012a60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012a62:	9301      	str	r3, [sp, #4]
 8012a64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a66:	9300      	str	r3, [sp, #0]
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	687a      	ldr	r2, [r7, #4]
 8012a6c:	68b9      	ldr	r1, [r7, #8]
 8012a6e:	68f8      	ldr	r0, [r7, #12]
 8012a70:	f7fd ff00 	bl	8010874 <_tx_thread_create>
 8012a74:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8012a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3750      	adds	r7, #80	@ 0x50
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	20006a3c 	.word	0x20006a3c
 8012a84:	200069ac 	.word	0x200069ac
 8012a88:	200069b0 	.word	0x200069b0
 8012a8c:	200069a4 	.word	0x200069a4
 8012a90:	20006aec 	.word	0x20006aec
 8012a94:	20000048 	.word	0x20000048

08012a98 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b084      	sub	sp, #16
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d102      	bne.n	8012aac <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012aa6:	230e      	movs	r3, #14
 8012aa8:	60fb      	str	r3, [r7, #12]
 8012aaa:	e00b      	b.n	8012ac4 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	4a07      	ldr	r2, [pc, #28]	@ (8012ad0 <_txe_thread_suspend+0x38>)
 8012ab2:	4293      	cmp	r3, r2
 8012ab4:	d002      	beq.n	8012abc <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8012ab6:	230e      	movs	r3, #14
 8012ab8:	60fb      	str	r3, [r7, #12]
 8012aba:	e003      	b.n	8012ac4 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f7fe f9e7 	bl	8010e90 <_tx_thread_suspend>
 8012ac2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8012ac4:	68fb      	ldr	r3, [r7, #12]
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3710      	adds	r7, #16
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}
 8012ace:	bf00      	nop
 8012ad0:	54485244 	.word	0x54485244

08012ad4 <siprintf>:
 8012ad4:	b40e      	push	{r1, r2, r3}
 8012ad6:	b510      	push	{r4, lr}
 8012ad8:	b09d      	sub	sp, #116	@ 0x74
 8012ada:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012ade:	2400      	movs	r4, #0
 8012ae0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8012ae2:	9002      	str	r0, [sp, #8]
 8012ae4:	9006      	str	r0, [sp, #24]
 8012ae6:	9107      	str	r1, [sp, #28]
 8012ae8:	9104      	str	r1, [sp, #16]
 8012aea:	4809      	ldr	r0, [pc, #36]	@ (8012b10 <siprintf+0x3c>)
 8012aec:	4909      	ldr	r1, [pc, #36]	@ (8012b14 <siprintf+0x40>)
 8012aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8012af2:	9105      	str	r1, [sp, #20]
 8012af4:	a902      	add	r1, sp, #8
 8012af6:	6800      	ldr	r0, [r0, #0]
 8012af8:	9301      	str	r3, [sp, #4]
 8012afa:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012afc:	f000 f994 	bl	8012e28 <_svfiprintf_r>
 8012b00:	9b02      	ldr	r3, [sp, #8]
 8012b02:	701c      	strb	r4, [r3, #0]
 8012b04:	b01d      	add	sp, #116	@ 0x74
 8012b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b0a:	b003      	add	sp, #12
 8012b0c:	4770      	bx	lr
 8012b0e:	bf00      	nop
 8012b10:	2000004c 	.word	0x2000004c
 8012b14:	ffff0208 	.word	0xffff0208

08012b18 <memset>:
 8012b18:	4402      	add	r2, r0
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	4293      	cmp	r3, r2
 8012b1e:	d100      	bne.n	8012b22 <memset+0xa>
 8012b20:	4770      	bx	lr
 8012b22:	f803 1b01 	strb.w	r1, [r3], #1
 8012b26:	e7f9      	b.n	8012b1c <memset+0x4>

08012b28 <__errno>:
 8012b28:	4b01      	ldr	r3, [pc, #4]	@ (8012b30 <__errno+0x8>)
 8012b2a:	6818      	ldr	r0, [r3, #0]
 8012b2c:	4770      	bx	lr
 8012b2e:	bf00      	nop
 8012b30:	2000004c 	.word	0x2000004c

08012b34 <__libc_init_array>:
 8012b34:	b570      	push	{r4, r5, r6, lr}
 8012b36:	4d0d      	ldr	r5, [pc, #52]	@ (8012b6c <__libc_init_array+0x38>)
 8012b38:	2600      	movs	r6, #0
 8012b3a:	4c0d      	ldr	r4, [pc, #52]	@ (8012b70 <__libc_init_array+0x3c>)
 8012b3c:	1b64      	subs	r4, r4, r5
 8012b3e:	10a4      	asrs	r4, r4, #2
 8012b40:	42a6      	cmp	r6, r4
 8012b42:	d109      	bne.n	8012b58 <__libc_init_array+0x24>
 8012b44:	4d0b      	ldr	r5, [pc, #44]	@ (8012b74 <__libc_init_array+0x40>)
 8012b46:	2600      	movs	r6, #0
 8012b48:	4c0b      	ldr	r4, [pc, #44]	@ (8012b78 <__libc_init_array+0x44>)
 8012b4a:	f001 f83f 	bl	8013bcc <_init>
 8012b4e:	1b64      	subs	r4, r4, r5
 8012b50:	10a4      	asrs	r4, r4, #2
 8012b52:	42a6      	cmp	r6, r4
 8012b54:	d105      	bne.n	8012b62 <__libc_init_array+0x2e>
 8012b56:	bd70      	pop	{r4, r5, r6, pc}
 8012b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b5c:	3601      	adds	r6, #1
 8012b5e:	4798      	blx	r3
 8012b60:	e7ee      	b.n	8012b40 <__libc_init_array+0xc>
 8012b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b66:	3601      	adds	r6, #1
 8012b68:	4798      	blx	r3
 8012b6a:	e7f2      	b.n	8012b52 <__libc_init_array+0x1e>
 8012b6c:	08013d30 	.word	0x08013d30
 8012b70:	08013d30 	.word	0x08013d30
 8012b74:	08013d30 	.word	0x08013d30
 8012b78:	08013d34 	.word	0x08013d34

08012b7c <__retarget_lock_acquire_recursive>:
 8012b7c:	4770      	bx	lr

08012b7e <__retarget_lock_release_recursive>:
 8012b7e:	4770      	bx	lr

08012b80 <_free_r>:
 8012b80:	b538      	push	{r3, r4, r5, lr}
 8012b82:	4605      	mov	r5, r0
 8012b84:	2900      	cmp	r1, #0
 8012b86:	d041      	beq.n	8012c0c <_free_r+0x8c>
 8012b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b8c:	1f0c      	subs	r4, r1, #4
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	bfb8      	it	lt
 8012b92:	18e4      	addlt	r4, r4, r3
 8012b94:	f000 f8e0 	bl	8012d58 <__malloc_lock>
 8012b98:	4a1d      	ldr	r2, [pc, #116]	@ (8012c10 <_free_r+0x90>)
 8012b9a:	6813      	ldr	r3, [r2, #0]
 8012b9c:	b933      	cbnz	r3, 8012bac <_free_r+0x2c>
 8012b9e:	6063      	str	r3, [r4, #4]
 8012ba0:	6014      	str	r4, [r2, #0]
 8012ba2:	4628      	mov	r0, r5
 8012ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ba8:	f000 b8dc 	b.w	8012d64 <__malloc_unlock>
 8012bac:	42a3      	cmp	r3, r4
 8012bae:	d908      	bls.n	8012bc2 <_free_r+0x42>
 8012bb0:	6820      	ldr	r0, [r4, #0]
 8012bb2:	1821      	adds	r1, r4, r0
 8012bb4:	428b      	cmp	r3, r1
 8012bb6:	bf01      	itttt	eq
 8012bb8:	6819      	ldreq	r1, [r3, #0]
 8012bba:	685b      	ldreq	r3, [r3, #4]
 8012bbc:	1809      	addeq	r1, r1, r0
 8012bbe:	6021      	streq	r1, [r4, #0]
 8012bc0:	e7ed      	b.n	8012b9e <_free_r+0x1e>
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	b10b      	cbz	r3, 8012bcc <_free_r+0x4c>
 8012bc8:	42a3      	cmp	r3, r4
 8012bca:	d9fa      	bls.n	8012bc2 <_free_r+0x42>
 8012bcc:	6811      	ldr	r1, [r2, #0]
 8012bce:	1850      	adds	r0, r2, r1
 8012bd0:	42a0      	cmp	r0, r4
 8012bd2:	d10b      	bne.n	8012bec <_free_r+0x6c>
 8012bd4:	6820      	ldr	r0, [r4, #0]
 8012bd6:	4401      	add	r1, r0
 8012bd8:	1850      	adds	r0, r2, r1
 8012bda:	6011      	str	r1, [r2, #0]
 8012bdc:	4283      	cmp	r3, r0
 8012bde:	d1e0      	bne.n	8012ba2 <_free_r+0x22>
 8012be0:	6818      	ldr	r0, [r3, #0]
 8012be2:	685b      	ldr	r3, [r3, #4]
 8012be4:	4408      	add	r0, r1
 8012be6:	6053      	str	r3, [r2, #4]
 8012be8:	6010      	str	r0, [r2, #0]
 8012bea:	e7da      	b.n	8012ba2 <_free_r+0x22>
 8012bec:	d902      	bls.n	8012bf4 <_free_r+0x74>
 8012bee:	230c      	movs	r3, #12
 8012bf0:	602b      	str	r3, [r5, #0]
 8012bf2:	e7d6      	b.n	8012ba2 <_free_r+0x22>
 8012bf4:	6820      	ldr	r0, [r4, #0]
 8012bf6:	1821      	adds	r1, r4, r0
 8012bf8:	428b      	cmp	r3, r1
 8012bfa:	bf02      	ittt	eq
 8012bfc:	6819      	ldreq	r1, [r3, #0]
 8012bfe:	685b      	ldreq	r3, [r3, #4]
 8012c00:	1809      	addeq	r1, r1, r0
 8012c02:	6063      	str	r3, [r4, #4]
 8012c04:	bf08      	it	eq
 8012c06:	6021      	streq	r1, [r4, #0]
 8012c08:	6054      	str	r4, [r2, #4]
 8012c0a:	e7ca      	b.n	8012ba2 <_free_r+0x22>
 8012c0c:	bd38      	pop	{r3, r4, r5, pc}
 8012c0e:	bf00      	nop
 8012c10:	2000711c 	.word	0x2000711c

08012c14 <sbrk_aligned>:
 8012c14:	b570      	push	{r4, r5, r6, lr}
 8012c16:	4e0f      	ldr	r6, [pc, #60]	@ (8012c54 <sbrk_aligned+0x40>)
 8012c18:	460c      	mov	r4, r1
 8012c1a:	4605      	mov	r5, r0
 8012c1c:	6831      	ldr	r1, [r6, #0]
 8012c1e:	b911      	cbnz	r1, 8012c26 <sbrk_aligned+0x12>
 8012c20:	f000 fba8 	bl	8013374 <_sbrk_r>
 8012c24:	6030      	str	r0, [r6, #0]
 8012c26:	4621      	mov	r1, r4
 8012c28:	4628      	mov	r0, r5
 8012c2a:	f000 fba3 	bl	8013374 <_sbrk_r>
 8012c2e:	1c43      	adds	r3, r0, #1
 8012c30:	d103      	bne.n	8012c3a <sbrk_aligned+0x26>
 8012c32:	f04f 34ff 	mov.w	r4, #4294967295
 8012c36:	4620      	mov	r0, r4
 8012c38:	bd70      	pop	{r4, r5, r6, pc}
 8012c3a:	1cc4      	adds	r4, r0, #3
 8012c3c:	f024 0403 	bic.w	r4, r4, #3
 8012c40:	42a0      	cmp	r0, r4
 8012c42:	d0f8      	beq.n	8012c36 <sbrk_aligned+0x22>
 8012c44:	1a21      	subs	r1, r4, r0
 8012c46:	4628      	mov	r0, r5
 8012c48:	f000 fb94 	bl	8013374 <_sbrk_r>
 8012c4c:	3001      	adds	r0, #1
 8012c4e:	d1f2      	bne.n	8012c36 <sbrk_aligned+0x22>
 8012c50:	e7ef      	b.n	8012c32 <sbrk_aligned+0x1e>
 8012c52:	bf00      	nop
 8012c54:	20007118 	.word	0x20007118

08012c58 <_malloc_r>:
 8012c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c5c:	1ccd      	adds	r5, r1, #3
 8012c5e:	4606      	mov	r6, r0
 8012c60:	f025 0503 	bic.w	r5, r5, #3
 8012c64:	3508      	adds	r5, #8
 8012c66:	2d0c      	cmp	r5, #12
 8012c68:	bf38      	it	cc
 8012c6a:	250c      	movcc	r5, #12
 8012c6c:	2d00      	cmp	r5, #0
 8012c6e:	db01      	blt.n	8012c74 <_malloc_r+0x1c>
 8012c70:	42a9      	cmp	r1, r5
 8012c72:	d904      	bls.n	8012c7e <_malloc_r+0x26>
 8012c74:	230c      	movs	r3, #12
 8012c76:	6033      	str	r3, [r6, #0]
 8012c78:	2000      	movs	r0, #0
 8012c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012d54 <_malloc_r+0xfc>
 8012c82:	f000 f869 	bl	8012d58 <__malloc_lock>
 8012c86:	f8d8 3000 	ldr.w	r3, [r8]
 8012c8a:	461c      	mov	r4, r3
 8012c8c:	bb44      	cbnz	r4, 8012ce0 <_malloc_r+0x88>
 8012c8e:	4629      	mov	r1, r5
 8012c90:	4630      	mov	r0, r6
 8012c92:	f7ff ffbf 	bl	8012c14 <sbrk_aligned>
 8012c96:	1c43      	adds	r3, r0, #1
 8012c98:	4604      	mov	r4, r0
 8012c9a:	d158      	bne.n	8012d4e <_malloc_r+0xf6>
 8012c9c:	f8d8 4000 	ldr.w	r4, [r8]
 8012ca0:	4627      	mov	r7, r4
 8012ca2:	2f00      	cmp	r7, #0
 8012ca4:	d143      	bne.n	8012d2e <_malloc_r+0xd6>
 8012ca6:	2c00      	cmp	r4, #0
 8012ca8:	d04b      	beq.n	8012d42 <_malloc_r+0xea>
 8012caa:	6823      	ldr	r3, [r4, #0]
 8012cac:	4639      	mov	r1, r7
 8012cae:	4630      	mov	r0, r6
 8012cb0:	eb04 0903 	add.w	r9, r4, r3
 8012cb4:	f000 fb5e 	bl	8013374 <_sbrk_r>
 8012cb8:	4581      	cmp	r9, r0
 8012cba:	d142      	bne.n	8012d42 <_malloc_r+0xea>
 8012cbc:	6821      	ldr	r1, [r4, #0]
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	1a6d      	subs	r5, r5, r1
 8012cc2:	4629      	mov	r1, r5
 8012cc4:	f7ff ffa6 	bl	8012c14 <sbrk_aligned>
 8012cc8:	3001      	adds	r0, #1
 8012cca:	d03a      	beq.n	8012d42 <_malloc_r+0xea>
 8012ccc:	6823      	ldr	r3, [r4, #0]
 8012cce:	442b      	add	r3, r5
 8012cd0:	6023      	str	r3, [r4, #0]
 8012cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8012cd6:	685a      	ldr	r2, [r3, #4]
 8012cd8:	bb62      	cbnz	r2, 8012d34 <_malloc_r+0xdc>
 8012cda:	f8c8 7000 	str.w	r7, [r8]
 8012cde:	e00f      	b.n	8012d00 <_malloc_r+0xa8>
 8012ce0:	6822      	ldr	r2, [r4, #0]
 8012ce2:	1b52      	subs	r2, r2, r5
 8012ce4:	d420      	bmi.n	8012d28 <_malloc_r+0xd0>
 8012ce6:	2a0b      	cmp	r2, #11
 8012ce8:	d917      	bls.n	8012d1a <_malloc_r+0xc2>
 8012cea:	1961      	adds	r1, r4, r5
 8012cec:	42a3      	cmp	r3, r4
 8012cee:	6025      	str	r5, [r4, #0]
 8012cf0:	bf18      	it	ne
 8012cf2:	6059      	strne	r1, [r3, #4]
 8012cf4:	6863      	ldr	r3, [r4, #4]
 8012cf6:	bf08      	it	eq
 8012cf8:	f8c8 1000 	streq.w	r1, [r8]
 8012cfc:	5162      	str	r2, [r4, r5]
 8012cfe:	604b      	str	r3, [r1, #4]
 8012d00:	4630      	mov	r0, r6
 8012d02:	f000 f82f 	bl	8012d64 <__malloc_unlock>
 8012d06:	f104 000b 	add.w	r0, r4, #11
 8012d0a:	1d23      	adds	r3, r4, #4
 8012d0c:	f020 0007 	bic.w	r0, r0, #7
 8012d10:	1ac2      	subs	r2, r0, r3
 8012d12:	bf1c      	itt	ne
 8012d14:	1a1b      	subne	r3, r3, r0
 8012d16:	50a3      	strne	r3, [r4, r2]
 8012d18:	e7af      	b.n	8012c7a <_malloc_r+0x22>
 8012d1a:	6862      	ldr	r2, [r4, #4]
 8012d1c:	42a3      	cmp	r3, r4
 8012d1e:	bf0c      	ite	eq
 8012d20:	f8c8 2000 	streq.w	r2, [r8]
 8012d24:	605a      	strne	r2, [r3, #4]
 8012d26:	e7eb      	b.n	8012d00 <_malloc_r+0xa8>
 8012d28:	4623      	mov	r3, r4
 8012d2a:	6864      	ldr	r4, [r4, #4]
 8012d2c:	e7ae      	b.n	8012c8c <_malloc_r+0x34>
 8012d2e:	463c      	mov	r4, r7
 8012d30:	687f      	ldr	r7, [r7, #4]
 8012d32:	e7b6      	b.n	8012ca2 <_malloc_r+0x4a>
 8012d34:	461a      	mov	r2, r3
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	42a3      	cmp	r3, r4
 8012d3a:	d1fb      	bne.n	8012d34 <_malloc_r+0xdc>
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	6053      	str	r3, [r2, #4]
 8012d40:	e7de      	b.n	8012d00 <_malloc_r+0xa8>
 8012d42:	230c      	movs	r3, #12
 8012d44:	4630      	mov	r0, r6
 8012d46:	6033      	str	r3, [r6, #0]
 8012d48:	f000 f80c 	bl	8012d64 <__malloc_unlock>
 8012d4c:	e794      	b.n	8012c78 <_malloc_r+0x20>
 8012d4e:	6005      	str	r5, [r0, #0]
 8012d50:	e7d6      	b.n	8012d00 <_malloc_r+0xa8>
 8012d52:	bf00      	nop
 8012d54:	2000711c 	.word	0x2000711c

08012d58 <__malloc_lock>:
 8012d58:	4801      	ldr	r0, [pc, #4]	@ (8012d60 <__malloc_lock+0x8>)
 8012d5a:	f7ff bf0f 	b.w	8012b7c <__retarget_lock_acquire_recursive>
 8012d5e:	bf00      	nop
 8012d60:	20007114 	.word	0x20007114

08012d64 <__malloc_unlock>:
 8012d64:	4801      	ldr	r0, [pc, #4]	@ (8012d6c <__malloc_unlock+0x8>)
 8012d66:	f7ff bf0a 	b.w	8012b7e <__retarget_lock_release_recursive>
 8012d6a:	bf00      	nop
 8012d6c:	20007114 	.word	0x20007114

08012d70 <__ssputs_r>:
 8012d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d74:	461f      	mov	r7, r3
 8012d76:	688e      	ldr	r6, [r1, #8]
 8012d78:	4682      	mov	sl, r0
 8012d7a:	460c      	mov	r4, r1
 8012d7c:	42be      	cmp	r6, r7
 8012d7e:	4690      	mov	r8, r2
 8012d80:	680b      	ldr	r3, [r1, #0]
 8012d82:	d82d      	bhi.n	8012de0 <__ssputs_r+0x70>
 8012d84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012d88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012d8c:	d026      	beq.n	8012ddc <__ssputs_r+0x6c>
 8012d8e:	6965      	ldr	r5, [r4, #20]
 8012d90:	6909      	ldr	r1, [r1, #16]
 8012d92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d96:	eba3 0901 	sub.w	r9, r3, r1
 8012d9a:	1c7b      	adds	r3, r7, #1
 8012d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012da0:	444b      	add	r3, r9
 8012da2:	106d      	asrs	r5, r5, #1
 8012da4:	429d      	cmp	r5, r3
 8012da6:	bf38      	it	cc
 8012da8:	461d      	movcc	r5, r3
 8012daa:	0553      	lsls	r3, r2, #21
 8012dac:	d527      	bpl.n	8012dfe <__ssputs_r+0x8e>
 8012dae:	4629      	mov	r1, r5
 8012db0:	f7ff ff52 	bl	8012c58 <_malloc_r>
 8012db4:	4606      	mov	r6, r0
 8012db6:	b360      	cbz	r0, 8012e12 <__ssputs_r+0xa2>
 8012db8:	464a      	mov	r2, r9
 8012dba:	6921      	ldr	r1, [r4, #16]
 8012dbc:	f000 faf8 	bl	80133b0 <memcpy>
 8012dc0:	89a3      	ldrh	r3, [r4, #12]
 8012dc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012dca:	81a3      	strh	r3, [r4, #12]
 8012dcc:	6126      	str	r6, [r4, #16]
 8012dce:	444e      	add	r6, r9
 8012dd0:	6165      	str	r5, [r4, #20]
 8012dd2:	eba5 0509 	sub.w	r5, r5, r9
 8012dd6:	6026      	str	r6, [r4, #0]
 8012dd8:	463e      	mov	r6, r7
 8012dda:	60a5      	str	r5, [r4, #8]
 8012ddc:	42be      	cmp	r6, r7
 8012dde:	d900      	bls.n	8012de2 <__ssputs_r+0x72>
 8012de0:	463e      	mov	r6, r7
 8012de2:	4632      	mov	r2, r6
 8012de4:	4641      	mov	r1, r8
 8012de6:	6820      	ldr	r0, [r4, #0]
 8012de8:	f000 faaa 	bl	8013340 <memmove>
 8012dec:	68a3      	ldr	r3, [r4, #8]
 8012dee:	2000      	movs	r0, #0
 8012df0:	1b9b      	subs	r3, r3, r6
 8012df2:	60a3      	str	r3, [r4, #8]
 8012df4:	6823      	ldr	r3, [r4, #0]
 8012df6:	4433      	add	r3, r6
 8012df8:	6023      	str	r3, [r4, #0]
 8012dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dfe:	462a      	mov	r2, r5
 8012e00:	f000 fae3 	bl	80133ca <_realloc_r>
 8012e04:	4606      	mov	r6, r0
 8012e06:	2800      	cmp	r0, #0
 8012e08:	d1e0      	bne.n	8012dcc <__ssputs_r+0x5c>
 8012e0a:	6921      	ldr	r1, [r4, #16]
 8012e0c:	4650      	mov	r0, sl
 8012e0e:	f7ff feb7 	bl	8012b80 <_free_r>
 8012e12:	230c      	movs	r3, #12
 8012e14:	f04f 30ff 	mov.w	r0, #4294967295
 8012e18:	f8ca 3000 	str.w	r3, [sl]
 8012e1c:	89a3      	ldrh	r3, [r4, #12]
 8012e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e22:	81a3      	strh	r3, [r4, #12]
 8012e24:	e7e9      	b.n	8012dfa <__ssputs_r+0x8a>
	...

08012e28 <_svfiprintf_r>:
 8012e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e2c:	4698      	mov	r8, r3
 8012e2e:	898b      	ldrh	r3, [r1, #12]
 8012e30:	b09d      	sub	sp, #116	@ 0x74
 8012e32:	4607      	mov	r7, r0
 8012e34:	061b      	lsls	r3, r3, #24
 8012e36:	460d      	mov	r5, r1
 8012e38:	4614      	mov	r4, r2
 8012e3a:	d510      	bpl.n	8012e5e <_svfiprintf_r+0x36>
 8012e3c:	690b      	ldr	r3, [r1, #16]
 8012e3e:	b973      	cbnz	r3, 8012e5e <_svfiprintf_r+0x36>
 8012e40:	2140      	movs	r1, #64	@ 0x40
 8012e42:	f7ff ff09 	bl	8012c58 <_malloc_r>
 8012e46:	6028      	str	r0, [r5, #0]
 8012e48:	6128      	str	r0, [r5, #16]
 8012e4a:	b930      	cbnz	r0, 8012e5a <_svfiprintf_r+0x32>
 8012e4c:	230c      	movs	r3, #12
 8012e4e:	603b      	str	r3, [r7, #0]
 8012e50:	f04f 30ff 	mov.w	r0, #4294967295
 8012e54:	b01d      	add	sp, #116	@ 0x74
 8012e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e5a:	2340      	movs	r3, #64	@ 0x40
 8012e5c:	616b      	str	r3, [r5, #20]
 8012e5e:	2300      	movs	r3, #0
 8012e60:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e64:	f04f 0901 	mov.w	r9, #1
 8012e68:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 801300c <_svfiprintf_r+0x1e4>
 8012e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e6e:	2320      	movs	r3, #32
 8012e70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e74:	2330      	movs	r3, #48	@ 0x30
 8012e76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e7a:	4623      	mov	r3, r4
 8012e7c:	469a      	mov	sl, r3
 8012e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e82:	b10a      	cbz	r2, 8012e88 <_svfiprintf_r+0x60>
 8012e84:	2a25      	cmp	r2, #37	@ 0x25
 8012e86:	d1f9      	bne.n	8012e7c <_svfiprintf_r+0x54>
 8012e88:	ebba 0b04 	subs.w	fp, sl, r4
 8012e8c:	d00b      	beq.n	8012ea6 <_svfiprintf_r+0x7e>
 8012e8e:	465b      	mov	r3, fp
 8012e90:	4622      	mov	r2, r4
 8012e92:	4629      	mov	r1, r5
 8012e94:	4638      	mov	r0, r7
 8012e96:	f7ff ff6b 	bl	8012d70 <__ssputs_r>
 8012e9a:	3001      	adds	r0, #1
 8012e9c:	f000 80a7 	beq.w	8012fee <_svfiprintf_r+0x1c6>
 8012ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ea2:	445a      	add	r2, fp
 8012ea4:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	f000 809f 	beq.w	8012fee <_svfiprintf_r+0x1c6>
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8012eb6:	f10a 0a01 	add.w	sl, sl, #1
 8012eba:	9304      	str	r3, [sp, #16]
 8012ebc:	9307      	str	r3, [sp, #28]
 8012ebe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012ec2:	931a      	str	r3, [sp, #104]	@ 0x68
 8012ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012ec8:	4654      	mov	r4, sl
 8012eca:	2205      	movs	r2, #5
 8012ecc:	484f      	ldr	r0, [pc, #316]	@ (801300c <_svfiprintf_r+0x1e4>)
 8012ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ed2:	f000 fa5f 	bl	8013394 <memchr>
 8012ed6:	9a04      	ldr	r2, [sp, #16]
 8012ed8:	b9d8      	cbnz	r0, 8012f12 <_svfiprintf_r+0xea>
 8012eda:	06d0      	lsls	r0, r2, #27
 8012edc:	bf44      	itt	mi
 8012ede:	2320      	movmi	r3, #32
 8012ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ee4:	0711      	lsls	r1, r2, #28
 8012ee6:	bf44      	itt	mi
 8012ee8:	232b      	movmi	r3, #43	@ 0x2b
 8012eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012eee:	f89a 3000 	ldrb.w	r3, [sl]
 8012ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ef4:	d015      	beq.n	8012f22 <_svfiprintf_r+0xfa>
 8012ef6:	9a07      	ldr	r2, [sp, #28]
 8012ef8:	4654      	mov	r4, sl
 8012efa:	2000      	movs	r0, #0
 8012efc:	f04f 0c0a 	mov.w	ip, #10
 8012f00:	4621      	mov	r1, r4
 8012f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f06:	3b30      	subs	r3, #48	@ 0x30
 8012f08:	2b09      	cmp	r3, #9
 8012f0a:	d94b      	bls.n	8012fa4 <_svfiprintf_r+0x17c>
 8012f0c:	b1b0      	cbz	r0, 8012f3c <_svfiprintf_r+0x114>
 8012f0e:	9207      	str	r2, [sp, #28]
 8012f10:	e014      	b.n	8012f3c <_svfiprintf_r+0x114>
 8012f12:	eba0 0308 	sub.w	r3, r0, r8
 8012f16:	46a2      	mov	sl, r4
 8012f18:	fa09 f303 	lsl.w	r3, r9, r3
 8012f1c:	4313      	orrs	r3, r2
 8012f1e:	9304      	str	r3, [sp, #16]
 8012f20:	e7d2      	b.n	8012ec8 <_svfiprintf_r+0xa0>
 8012f22:	9b03      	ldr	r3, [sp, #12]
 8012f24:	1d19      	adds	r1, r3, #4
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	9103      	str	r1, [sp, #12]
 8012f2c:	bfbb      	ittet	lt
 8012f2e:	425b      	neglt	r3, r3
 8012f30:	f042 0202 	orrlt.w	r2, r2, #2
 8012f34:	9307      	strge	r3, [sp, #28]
 8012f36:	9307      	strlt	r3, [sp, #28]
 8012f38:	bfb8      	it	lt
 8012f3a:	9204      	strlt	r2, [sp, #16]
 8012f3c:	7823      	ldrb	r3, [r4, #0]
 8012f3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f40:	d10a      	bne.n	8012f58 <_svfiprintf_r+0x130>
 8012f42:	7863      	ldrb	r3, [r4, #1]
 8012f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f46:	d132      	bne.n	8012fae <_svfiprintf_r+0x186>
 8012f48:	9b03      	ldr	r3, [sp, #12]
 8012f4a:	3402      	adds	r4, #2
 8012f4c:	1d1a      	adds	r2, r3, #4
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f54:	9203      	str	r2, [sp, #12]
 8012f56:	9305      	str	r3, [sp, #20]
 8012f58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801301c <_svfiprintf_r+0x1f4>
 8012f5c:	2203      	movs	r2, #3
 8012f5e:	7821      	ldrb	r1, [r4, #0]
 8012f60:	4650      	mov	r0, sl
 8012f62:	f000 fa17 	bl	8013394 <memchr>
 8012f66:	b138      	cbz	r0, 8012f78 <_svfiprintf_r+0x150>
 8012f68:	eba0 000a 	sub.w	r0, r0, sl
 8012f6c:	2240      	movs	r2, #64	@ 0x40
 8012f6e:	9b04      	ldr	r3, [sp, #16]
 8012f70:	3401      	adds	r4, #1
 8012f72:	4082      	lsls	r2, r0
 8012f74:	4313      	orrs	r3, r2
 8012f76:	9304      	str	r3, [sp, #16]
 8012f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f7c:	2206      	movs	r2, #6
 8012f7e:	4824      	ldr	r0, [pc, #144]	@ (8013010 <_svfiprintf_r+0x1e8>)
 8012f80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012f84:	f000 fa06 	bl	8013394 <memchr>
 8012f88:	2800      	cmp	r0, #0
 8012f8a:	d036      	beq.n	8012ffa <_svfiprintf_r+0x1d2>
 8012f8c:	4b21      	ldr	r3, [pc, #132]	@ (8013014 <_svfiprintf_r+0x1ec>)
 8012f8e:	bb1b      	cbnz	r3, 8012fd8 <_svfiprintf_r+0x1b0>
 8012f90:	9b03      	ldr	r3, [sp, #12]
 8012f92:	3307      	adds	r3, #7
 8012f94:	f023 0307 	bic.w	r3, r3, #7
 8012f98:	3308      	adds	r3, #8
 8012f9a:	9303      	str	r3, [sp, #12]
 8012f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f9e:	4433      	add	r3, r6
 8012fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8012fa2:	e76a      	b.n	8012e7a <_svfiprintf_r+0x52>
 8012fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fa8:	460c      	mov	r4, r1
 8012faa:	2001      	movs	r0, #1
 8012fac:	e7a8      	b.n	8012f00 <_svfiprintf_r+0xd8>
 8012fae:	2300      	movs	r3, #0
 8012fb0:	3401      	adds	r4, #1
 8012fb2:	f04f 0c0a 	mov.w	ip, #10
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	9305      	str	r3, [sp, #20]
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012fc0:	3a30      	subs	r2, #48	@ 0x30
 8012fc2:	2a09      	cmp	r2, #9
 8012fc4:	d903      	bls.n	8012fce <_svfiprintf_r+0x1a6>
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d0c6      	beq.n	8012f58 <_svfiprintf_r+0x130>
 8012fca:	9105      	str	r1, [sp, #20]
 8012fcc:	e7c4      	b.n	8012f58 <_svfiprintf_r+0x130>
 8012fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fd2:	4604      	mov	r4, r0
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	e7f0      	b.n	8012fba <_svfiprintf_r+0x192>
 8012fd8:	ab03      	add	r3, sp, #12
 8012fda:	462a      	mov	r2, r5
 8012fdc:	a904      	add	r1, sp, #16
 8012fde:	4638      	mov	r0, r7
 8012fe0:	9300      	str	r3, [sp, #0]
 8012fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8013018 <_svfiprintf_r+0x1f0>)
 8012fe4:	f3af 8000 	nop.w
 8012fe8:	1c42      	adds	r2, r0, #1
 8012fea:	4606      	mov	r6, r0
 8012fec:	d1d6      	bne.n	8012f9c <_svfiprintf_r+0x174>
 8012fee:	89ab      	ldrh	r3, [r5, #12]
 8012ff0:	065b      	lsls	r3, r3, #25
 8012ff2:	f53f af2d 	bmi.w	8012e50 <_svfiprintf_r+0x28>
 8012ff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012ff8:	e72c      	b.n	8012e54 <_svfiprintf_r+0x2c>
 8012ffa:	ab03      	add	r3, sp, #12
 8012ffc:	462a      	mov	r2, r5
 8012ffe:	a904      	add	r1, sp, #16
 8013000:	4638      	mov	r0, r7
 8013002:	9300      	str	r3, [sp, #0]
 8013004:	4b04      	ldr	r3, [pc, #16]	@ (8013018 <_svfiprintf_r+0x1f0>)
 8013006:	f000 f87d 	bl	8013104 <_printf_i>
 801300a:	e7ed      	b.n	8012fe8 <_svfiprintf_r+0x1c0>
 801300c:	08013cdc 	.word	0x08013cdc
 8013010:	08013ce6 	.word	0x08013ce6
 8013014:	00000000 	.word	0x00000000
 8013018:	08012d71 	.word	0x08012d71
 801301c:	08013ce2 	.word	0x08013ce2

08013020 <_printf_common>:
 8013020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013024:	4616      	mov	r6, r2
 8013026:	4698      	mov	r8, r3
 8013028:	688a      	ldr	r2, [r1, #8]
 801302a:	4607      	mov	r7, r0
 801302c:	690b      	ldr	r3, [r1, #16]
 801302e:	460c      	mov	r4, r1
 8013030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013034:	4293      	cmp	r3, r2
 8013036:	bfb8      	it	lt
 8013038:	4613      	movlt	r3, r2
 801303a:	6033      	str	r3, [r6, #0]
 801303c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013040:	b10a      	cbz	r2, 8013046 <_printf_common+0x26>
 8013042:	3301      	adds	r3, #1
 8013044:	6033      	str	r3, [r6, #0]
 8013046:	6823      	ldr	r3, [r4, #0]
 8013048:	0699      	lsls	r1, r3, #26
 801304a:	bf42      	ittt	mi
 801304c:	6833      	ldrmi	r3, [r6, #0]
 801304e:	3302      	addmi	r3, #2
 8013050:	6033      	strmi	r3, [r6, #0]
 8013052:	6825      	ldr	r5, [r4, #0]
 8013054:	f015 0506 	ands.w	r5, r5, #6
 8013058:	d106      	bne.n	8013068 <_printf_common+0x48>
 801305a:	f104 0a19 	add.w	sl, r4, #25
 801305e:	68e3      	ldr	r3, [r4, #12]
 8013060:	6832      	ldr	r2, [r6, #0]
 8013062:	1a9b      	subs	r3, r3, r2
 8013064:	42ab      	cmp	r3, r5
 8013066:	dc2b      	bgt.n	80130c0 <_printf_common+0xa0>
 8013068:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801306c:	6822      	ldr	r2, [r4, #0]
 801306e:	3b00      	subs	r3, #0
 8013070:	bf18      	it	ne
 8013072:	2301      	movne	r3, #1
 8013074:	0692      	lsls	r2, r2, #26
 8013076:	d430      	bmi.n	80130da <_printf_common+0xba>
 8013078:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801307c:	4641      	mov	r1, r8
 801307e:	4638      	mov	r0, r7
 8013080:	47c8      	blx	r9
 8013082:	3001      	adds	r0, #1
 8013084:	d023      	beq.n	80130ce <_printf_common+0xae>
 8013086:	6823      	ldr	r3, [r4, #0]
 8013088:	341a      	adds	r4, #26
 801308a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801308e:	f003 0306 	and.w	r3, r3, #6
 8013092:	2b04      	cmp	r3, #4
 8013094:	bf0a      	itet	eq
 8013096:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 801309a:	2500      	movne	r5, #0
 801309c:	6833      	ldreq	r3, [r6, #0]
 801309e:	f04f 0600 	mov.w	r6, #0
 80130a2:	bf08      	it	eq
 80130a4:	1aed      	subeq	r5, r5, r3
 80130a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80130aa:	bf08      	it	eq
 80130ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80130b0:	4293      	cmp	r3, r2
 80130b2:	bfc4      	itt	gt
 80130b4:	1a9b      	subgt	r3, r3, r2
 80130b6:	18ed      	addgt	r5, r5, r3
 80130b8:	42b5      	cmp	r5, r6
 80130ba:	d11a      	bne.n	80130f2 <_printf_common+0xd2>
 80130bc:	2000      	movs	r0, #0
 80130be:	e008      	b.n	80130d2 <_printf_common+0xb2>
 80130c0:	2301      	movs	r3, #1
 80130c2:	4652      	mov	r2, sl
 80130c4:	4641      	mov	r1, r8
 80130c6:	4638      	mov	r0, r7
 80130c8:	47c8      	blx	r9
 80130ca:	3001      	adds	r0, #1
 80130cc:	d103      	bne.n	80130d6 <_printf_common+0xb6>
 80130ce:	f04f 30ff 	mov.w	r0, #4294967295
 80130d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130d6:	3501      	adds	r5, #1
 80130d8:	e7c1      	b.n	801305e <_printf_common+0x3e>
 80130da:	18e1      	adds	r1, r4, r3
 80130dc:	1c5a      	adds	r2, r3, #1
 80130de:	2030      	movs	r0, #48	@ 0x30
 80130e0:	3302      	adds	r3, #2
 80130e2:	4422      	add	r2, r4
 80130e4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80130e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80130ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80130f0:	e7c2      	b.n	8013078 <_printf_common+0x58>
 80130f2:	2301      	movs	r3, #1
 80130f4:	4622      	mov	r2, r4
 80130f6:	4641      	mov	r1, r8
 80130f8:	4638      	mov	r0, r7
 80130fa:	47c8      	blx	r9
 80130fc:	3001      	adds	r0, #1
 80130fe:	d0e6      	beq.n	80130ce <_printf_common+0xae>
 8013100:	3601      	adds	r6, #1
 8013102:	e7d9      	b.n	80130b8 <_printf_common+0x98>

08013104 <_printf_i>:
 8013104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013108:	7e0f      	ldrb	r7, [r1, #24]
 801310a:	4691      	mov	r9, r2
 801310c:	4680      	mov	r8, r0
 801310e:	460c      	mov	r4, r1
 8013110:	2f78      	cmp	r7, #120	@ 0x78
 8013112:	469a      	mov	sl, r3
 8013114:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013116:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801311a:	d807      	bhi.n	801312c <_printf_i+0x28>
 801311c:	2f62      	cmp	r7, #98	@ 0x62
 801311e:	d80a      	bhi.n	8013136 <_printf_i+0x32>
 8013120:	2f00      	cmp	r7, #0
 8013122:	f000 80d1 	beq.w	80132c8 <_printf_i+0x1c4>
 8013126:	2f58      	cmp	r7, #88	@ 0x58
 8013128:	f000 80b8 	beq.w	801329c <_printf_i+0x198>
 801312c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013130:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013134:	e03a      	b.n	80131ac <_printf_i+0xa8>
 8013136:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801313a:	2b15      	cmp	r3, #21
 801313c:	d8f6      	bhi.n	801312c <_printf_i+0x28>
 801313e:	a101      	add	r1, pc, #4	@ (adr r1, 8013144 <_printf_i+0x40>)
 8013140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013144:	0801319d 	.word	0x0801319d
 8013148:	080131b1 	.word	0x080131b1
 801314c:	0801312d 	.word	0x0801312d
 8013150:	0801312d 	.word	0x0801312d
 8013154:	0801312d 	.word	0x0801312d
 8013158:	0801312d 	.word	0x0801312d
 801315c:	080131b1 	.word	0x080131b1
 8013160:	0801312d 	.word	0x0801312d
 8013164:	0801312d 	.word	0x0801312d
 8013168:	0801312d 	.word	0x0801312d
 801316c:	0801312d 	.word	0x0801312d
 8013170:	080132af 	.word	0x080132af
 8013174:	080131db 	.word	0x080131db
 8013178:	08013269 	.word	0x08013269
 801317c:	0801312d 	.word	0x0801312d
 8013180:	0801312d 	.word	0x0801312d
 8013184:	080132d1 	.word	0x080132d1
 8013188:	0801312d 	.word	0x0801312d
 801318c:	080131db 	.word	0x080131db
 8013190:	0801312d 	.word	0x0801312d
 8013194:	0801312d 	.word	0x0801312d
 8013198:	08013271 	.word	0x08013271
 801319c:	6833      	ldr	r3, [r6, #0]
 801319e:	1d1a      	adds	r2, r3, #4
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	6032      	str	r2, [r6, #0]
 80131a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80131a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80131ac:	2301      	movs	r3, #1
 80131ae:	e09c      	b.n	80132ea <_printf_i+0x1e6>
 80131b0:	6833      	ldr	r3, [r6, #0]
 80131b2:	6820      	ldr	r0, [r4, #0]
 80131b4:	1d19      	adds	r1, r3, #4
 80131b6:	6031      	str	r1, [r6, #0]
 80131b8:	0606      	lsls	r6, r0, #24
 80131ba:	d501      	bpl.n	80131c0 <_printf_i+0xbc>
 80131bc:	681d      	ldr	r5, [r3, #0]
 80131be:	e003      	b.n	80131c8 <_printf_i+0xc4>
 80131c0:	0645      	lsls	r5, r0, #25
 80131c2:	d5fb      	bpl.n	80131bc <_printf_i+0xb8>
 80131c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80131c8:	2d00      	cmp	r5, #0
 80131ca:	da03      	bge.n	80131d4 <_printf_i+0xd0>
 80131cc:	232d      	movs	r3, #45	@ 0x2d
 80131ce:	426d      	negs	r5, r5
 80131d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80131d4:	4858      	ldr	r0, [pc, #352]	@ (8013338 <_printf_i+0x234>)
 80131d6:	230a      	movs	r3, #10
 80131d8:	e011      	b.n	80131fe <_printf_i+0xfa>
 80131da:	6821      	ldr	r1, [r4, #0]
 80131dc:	6833      	ldr	r3, [r6, #0]
 80131de:	0608      	lsls	r0, r1, #24
 80131e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80131e4:	d402      	bmi.n	80131ec <_printf_i+0xe8>
 80131e6:	0649      	lsls	r1, r1, #25
 80131e8:	bf48      	it	mi
 80131ea:	b2ad      	uxthmi	r5, r5
 80131ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80131ee:	6033      	str	r3, [r6, #0]
 80131f0:	4851      	ldr	r0, [pc, #324]	@ (8013338 <_printf_i+0x234>)
 80131f2:	bf14      	ite	ne
 80131f4:	230a      	movne	r3, #10
 80131f6:	2308      	moveq	r3, #8
 80131f8:	2100      	movs	r1, #0
 80131fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80131fe:	6866      	ldr	r6, [r4, #4]
 8013200:	2e00      	cmp	r6, #0
 8013202:	60a6      	str	r6, [r4, #8]
 8013204:	db05      	blt.n	8013212 <_printf_i+0x10e>
 8013206:	6821      	ldr	r1, [r4, #0]
 8013208:	432e      	orrs	r6, r5
 801320a:	f021 0104 	bic.w	r1, r1, #4
 801320e:	6021      	str	r1, [r4, #0]
 8013210:	d04b      	beq.n	80132aa <_printf_i+0x1a6>
 8013212:	4616      	mov	r6, r2
 8013214:	fbb5 f1f3 	udiv	r1, r5, r3
 8013218:	fb03 5711 	mls	r7, r3, r1, r5
 801321c:	5dc7      	ldrb	r7, [r0, r7]
 801321e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013222:	462f      	mov	r7, r5
 8013224:	460d      	mov	r5, r1
 8013226:	42bb      	cmp	r3, r7
 8013228:	d9f4      	bls.n	8013214 <_printf_i+0x110>
 801322a:	2b08      	cmp	r3, #8
 801322c:	d10b      	bne.n	8013246 <_printf_i+0x142>
 801322e:	6823      	ldr	r3, [r4, #0]
 8013230:	07df      	lsls	r7, r3, #31
 8013232:	d508      	bpl.n	8013246 <_printf_i+0x142>
 8013234:	6923      	ldr	r3, [r4, #16]
 8013236:	6861      	ldr	r1, [r4, #4]
 8013238:	4299      	cmp	r1, r3
 801323a:	bfde      	ittt	le
 801323c:	2330      	movle	r3, #48	@ 0x30
 801323e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013242:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013246:	1b92      	subs	r2, r2, r6
 8013248:	6122      	str	r2, [r4, #16]
 801324a:	464b      	mov	r3, r9
 801324c:	aa03      	add	r2, sp, #12
 801324e:	4621      	mov	r1, r4
 8013250:	4640      	mov	r0, r8
 8013252:	f8cd a000 	str.w	sl, [sp]
 8013256:	f7ff fee3 	bl	8013020 <_printf_common>
 801325a:	3001      	adds	r0, #1
 801325c:	d14a      	bne.n	80132f4 <_printf_i+0x1f0>
 801325e:	f04f 30ff 	mov.w	r0, #4294967295
 8013262:	b004      	add	sp, #16
 8013264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013268:	6823      	ldr	r3, [r4, #0]
 801326a:	f043 0320 	orr.w	r3, r3, #32
 801326e:	6023      	str	r3, [r4, #0]
 8013270:	2778      	movs	r7, #120	@ 0x78
 8013272:	4832      	ldr	r0, [pc, #200]	@ (801333c <_printf_i+0x238>)
 8013274:	6823      	ldr	r3, [r4, #0]
 8013276:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801327a:	061f      	lsls	r7, r3, #24
 801327c:	6831      	ldr	r1, [r6, #0]
 801327e:	f851 5b04 	ldr.w	r5, [r1], #4
 8013282:	d402      	bmi.n	801328a <_printf_i+0x186>
 8013284:	065f      	lsls	r7, r3, #25
 8013286:	bf48      	it	mi
 8013288:	b2ad      	uxthmi	r5, r5
 801328a:	6031      	str	r1, [r6, #0]
 801328c:	07d9      	lsls	r1, r3, #31
 801328e:	bf44      	itt	mi
 8013290:	f043 0320 	orrmi.w	r3, r3, #32
 8013294:	6023      	strmi	r3, [r4, #0]
 8013296:	b11d      	cbz	r5, 80132a0 <_printf_i+0x19c>
 8013298:	2310      	movs	r3, #16
 801329a:	e7ad      	b.n	80131f8 <_printf_i+0xf4>
 801329c:	4826      	ldr	r0, [pc, #152]	@ (8013338 <_printf_i+0x234>)
 801329e:	e7e9      	b.n	8013274 <_printf_i+0x170>
 80132a0:	6823      	ldr	r3, [r4, #0]
 80132a2:	f023 0320 	bic.w	r3, r3, #32
 80132a6:	6023      	str	r3, [r4, #0]
 80132a8:	e7f6      	b.n	8013298 <_printf_i+0x194>
 80132aa:	4616      	mov	r6, r2
 80132ac:	e7bd      	b.n	801322a <_printf_i+0x126>
 80132ae:	6833      	ldr	r3, [r6, #0]
 80132b0:	6825      	ldr	r5, [r4, #0]
 80132b2:	1d18      	adds	r0, r3, #4
 80132b4:	6961      	ldr	r1, [r4, #20]
 80132b6:	6030      	str	r0, [r6, #0]
 80132b8:	062e      	lsls	r6, r5, #24
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	d501      	bpl.n	80132c2 <_printf_i+0x1be>
 80132be:	6019      	str	r1, [r3, #0]
 80132c0:	e002      	b.n	80132c8 <_printf_i+0x1c4>
 80132c2:	0668      	lsls	r0, r5, #25
 80132c4:	d5fb      	bpl.n	80132be <_printf_i+0x1ba>
 80132c6:	8019      	strh	r1, [r3, #0]
 80132c8:	2300      	movs	r3, #0
 80132ca:	4616      	mov	r6, r2
 80132cc:	6123      	str	r3, [r4, #16]
 80132ce:	e7bc      	b.n	801324a <_printf_i+0x146>
 80132d0:	6833      	ldr	r3, [r6, #0]
 80132d2:	2100      	movs	r1, #0
 80132d4:	1d1a      	adds	r2, r3, #4
 80132d6:	6032      	str	r2, [r6, #0]
 80132d8:	681e      	ldr	r6, [r3, #0]
 80132da:	6862      	ldr	r2, [r4, #4]
 80132dc:	4630      	mov	r0, r6
 80132de:	f000 f859 	bl	8013394 <memchr>
 80132e2:	b108      	cbz	r0, 80132e8 <_printf_i+0x1e4>
 80132e4:	1b80      	subs	r0, r0, r6
 80132e6:	6060      	str	r0, [r4, #4]
 80132e8:	6863      	ldr	r3, [r4, #4]
 80132ea:	6123      	str	r3, [r4, #16]
 80132ec:	2300      	movs	r3, #0
 80132ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80132f2:	e7aa      	b.n	801324a <_printf_i+0x146>
 80132f4:	6923      	ldr	r3, [r4, #16]
 80132f6:	4632      	mov	r2, r6
 80132f8:	4649      	mov	r1, r9
 80132fa:	4640      	mov	r0, r8
 80132fc:	47d0      	blx	sl
 80132fe:	3001      	adds	r0, #1
 8013300:	d0ad      	beq.n	801325e <_printf_i+0x15a>
 8013302:	6823      	ldr	r3, [r4, #0]
 8013304:	079b      	lsls	r3, r3, #30
 8013306:	d413      	bmi.n	8013330 <_printf_i+0x22c>
 8013308:	68e0      	ldr	r0, [r4, #12]
 801330a:	9b03      	ldr	r3, [sp, #12]
 801330c:	4298      	cmp	r0, r3
 801330e:	bfb8      	it	lt
 8013310:	4618      	movlt	r0, r3
 8013312:	e7a6      	b.n	8013262 <_printf_i+0x15e>
 8013314:	2301      	movs	r3, #1
 8013316:	4632      	mov	r2, r6
 8013318:	4649      	mov	r1, r9
 801331a:	4640      	mov	r0, r8
 801331c:	47d0      	blx	sl
 801331e:	3001      	adds	r0, #1
 8013320:	d09d      	beq.n	801325e <_printf_i+0x15a>
 8013322:	3501      	adds	r5, #1
 8013324:	68e3      	ldr	r3, [r4, #12]
 8013326:	9903      	ldr	r1, [sp, #12]
 8013328:	1a5b      	subs	r3, r3, r1
 801332a:	42ab      	cmp	r3, r5
 801332c:	dcf2      	bgt.n	8013314 <_printf_i+0x210>
 801332e:	e7eb      	b.n	8013308 <_printf_i+0x204>
 8013330:	2500      	movs	r5, #0
 8013332:	f104 0619 	add.w	r6, r4, #25
 8013336:	e7f5      	b.n	8013324 <_printf_i+0x220>
 8013338:	08013ced 	.word	0x08013ced
 801333c:	08013cfe 	.word	0x08013cfe

08013340 <memmove>:
 8013340:	4288      	cmp	r0, r1
 8013342:	b510      	push	{r4, lr}
 8013344:	eb01 0402 	add.w	r4, r1, r2
 8013348:	d902      	bls.n	8013350 <memmove+0x10>
 801334a:	4284      	cmp	r4, r0
 801334c:	4623      	mov	r3, r4
 801334e:	d807      	bhi.n	8013360 <memmove+0x20>
 8013350:	1e43      	subs	r3, r0, #1
 8013352:	42a1      	cmp	r1, r4
 8013354:	d008      	beq.n	8013368 <memmove+0x28>
 8013356:	f811 2b01 	ldrb.w	r2, [r1], #1
 801335a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801335e:	e7f8      	b.n	8013352 <memmove+0x12>
 8013360:	4402      	add	r2, r0
 8013362:	4601      	mov	r1, r0
 8013364:	428a      	cmp	r2, r1
 8013366:	d100      	bne.n	801336a <memmove+0x2a>
 8013368:	bd10      	pop	{r4, pc}
 801336a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801336e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013372:	e7f7      	b.n	8013364 <memmove+0x24>

08013374 <_sbrk_r>:
 8013374:	b538      	push	{r3, r4, r5, lr}
 8013376:	2300      	movs	r3, #0
 8013378:	4d05      	ldr	r5, [pc, #20]	@ (8013390 <_sbrk_r+0x1c>)
 801337a:	4604      	mov	r4, r0
 801337c:	4608      	mov	r0, r1
 801337e:	602b      	str	r3, [r5, #0]
 8013380:	f7f0 f9e0 	bl	8003744 <_sbrk>
 8013384:	1c43      	adds	r3, r0, #1
 8013386:	d102      	bne.n	801338e <_sbrk_r+0x1a>
 8013388:	682b      	ldr	r3, [r5, #0]
 801338a:	b103      	cbz	r3, 801338e <_sbrk_r+0x1a>
 801338c:	6023      	str	r3, [r4, #0]
 801338e:	bd38      	pop	{r3, r4, r5, pc}
 8013390:	20007110 	.word	0x20007110

08013394 <memchr>:
 8013394:	b2c9      	uxtb	r1, r1
 8013396:	4603      	mov	r3, r0
 8013398:	4402      	add	r2, r0
 801339a:	b510      	push	{r4, lr}
 801339c:	4293      	cmp	r3, r2
 801339e:	4618      	mov	r0, r3
 80133a0:	d101      	bne.n	80133a6 <memchr+0x12>
 80133a2:	2000      	movs	r0, #0
 80133a4:	e003      	b.n	80133ae <memchr+0x1a>
 80133a6:	7804      	ldrb	r4, [r0, #0]
 80133a8:	3301      	adds	r3, #1
 80133aa:	428c      	cmp	r4, r1
 80133ac:	d1f6      	bne.n	801339c <memchr+0x8>
 80133ae:	bd10      	pop	{r4, pc}

080133b0 <memcpy>:
 80133b0:	440a      	add	r2, r1
 80133b2:	1e43      	subs	r3, r0, #1
 80133b4:	4291      	cmp	r1, r2
 80133b6:	d100      	bne.n	80133ba <memcpy+0xa>
 80133b8:	4770      	bx	lr
 80133ba:	b510      	push	{r4, lr}
 80133bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133c0:	4291      	cmp	r1, r2
 80133c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80133c6:	d1f9      	bne.n	80133bc <memcpy+0xc>
 80133c8:	bd10      	pop	{r4, pc}

080133ca <_realloc_r>:
 80133ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ce:	4607      	mov	r7, r0
 80133d0:	4614      	mov	r4, r2
 80133d2:	460d      	mov	r5, r1
 80133d4:	b921      	cbnz	r1, 80133e0 <_realloc_r+0x16>
 80133d6:	4611      	mov	r1, r2
 80133d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133dc:	f7ff bc3c 	b.w	8012c58 <_malloc_r>
 80133e0:	b92a      	cbnz	r2, 80133ee <_realloc_r+0x24>
 80133e2:	4625      	mov	r5, r4
 80133e4:	f7ff fbcc 	bl	8012b80 <_free_r>
 80133e8:	4628      	mov	r0, r5
 80133ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ee:	f000 f81a 	bl	8013426 <_malloc_usable_size_r>
 80133f2:	4284      	cmp	r4, r0
 80133f4:	4606      	mov	r6, r0
 80133f6:	d802      	bhi.n	80133fe <_realloc_r+0x34>
 80133f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80133fc:	d8f4      	bhi.n	80133e8 <_realloc_r+0x1e>
 80133fe:	4621      	mov	r1, r4
 8013400:	4638      	mov	r0, r7
 8013402:	f7ff fc29 	bl	8012c58 <_malloc_r>
 8013406:	4680      	mov	r8, r0
 8013408:	b908      	cbnz	r0, 801340e <_realloc_r+0x44>
 801340a:	4645      	mov	r5, r8
 801340c:	e7ec      	b.n	80133e8 <_realloc_r+0x1e>
 801340e:	42b4      	cmp	r4, r6
 8013410:	4622      	mov	r2, r4
 8013412:	4629      	mov	r1, r5
 8013414:	bf28      	it	cs
 8013416:	4632      	movcs	r2, r6
 8013418:	f7ff ffca 	bl	80133b0 <memcpy>
 801341c:	4629      	mov	r1, r5
 801341e:	4638      	mov	r0, r7
 8013420:	f7ff fbae 	bl	8012b80 <_free_r>
 8013424:	e7f1      	b.n	801340a <_realloc_r+0x40>

08013426 <_malloc_usable_size_r>:
 8013426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801342a:	1f18      	subs	r0, r3, #4
 801342c:	2b00      	cmp	r3, #0
 801342e:	bfbc      	itt	lt
 8013430:	580b      	ldrlt	r3, [r1, r0]
 8013432:	18c0      	addlt	r0, r0, r3
 8013434:	4770      	bx	lr

08013436 <powf>:
 8013436:	b508      	push	{r3, lr}
 8013438:	ed2d 8b04 	vpush	{d8-d9}
 801343c:	eeb0 8a60 	vmov.f32	s16, s1
 8013440:	eeb0 9a40 	vmov.f32	s18, s0
 8013444:	f000 f85c 	bl	8013500 <__ieee754_powf>
 8013448:	eef0 8a40 	vmov.f32	s17, s0
 801344c:	eeb4 8a48 	vcmp.f32	s16, s16
 8013450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013454:	d63e      	bvs.n	80134d4 <powf+0x9e>
 8013456:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801345e:	d112      	bne.n	8013486 <powf+0x50>
 8013460:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013468:	d039      	beq.n	80134de <powf+0xa8>
 801346a:	eeb0 0a48 	vmov.f32	s0, s16
 801346e:	f000 f839 	bl	80134e4 <finitef>
 8013472:	b378      	cbz	r0, 80134d4 <powf+0x9e>
 8013474:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801347c:	d52a      	bpl.n	80134d4 <powf+0x9e>
 801347e:	f7ff fb53 	bl	8012b28 <__errno>
 8013482:	2322      	movs	r3, #34	@ 0x22
 8013484:	e014      	b.n	80134b0 <powf+0x7a>
 8013486:	f000 f82d 	bl	80134e4 <finitef>
 801348a:	b998      	cbnz	r0, 80134b4 <powf+0x7e>
 801348c:	eeb0 0a49 	vmov.f32	s0, s18
 8013490:	f000 f828 	bl	80134e4 <finitef>
 8013494:	b170      	cbz	r0, 80134b4 <powf+0x7e>
 8013496:	eeb0 0a48 	vmov.f32	s0, s16
 801349a:	f000 f823 	bl	80134e4 <finitef>
 801349e:	b148      	cbz	r0, 80134b4 <powf+0x7e>
 80134a0:	eef4 8a68 	vcmp.f32	s17, s17
 80134a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a8:	d7e9      	bvc.n	801347e <powf+0x48>
 80134aa:	f7ff fb3d 	bl	8012b28 <__errno>
 80134ae:	2321      	movs	r3, #33	@ 0x21
 80134b0:	6003      	str	r3, [r0, #0]
 80134b2:	e00f      	b.n	80134d4 <powf+0x9e>
 80134b4:	eef5 8a40 	vcmp.f32	s17, #0.0
 80134b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134bc:	d10a      	bne.n	80134d4 <powf+0x9e>
 80134be:	eeb0 0a49 	vmov.f32	s0, s18
 80134c2:	f000 f80f 	bl	80134e4 <finitef>
 80134c6:	b128      	cbz	r0, 80134d4 <powf+0x9e>
 80134c8:	eeb0 0a48 	vmov.f32	s0, s16
 80134cc:	f000 f80a 	bl	80134e4 <finitef>
 80134d0:	2800      	cmp	r0, #0
 80134d2:	d1d4      	bne.n	801347e <powf+0x48>
 80134d4:	eeb0 0a68 	vmov.f32	s0, s17
 80134d8:	ecbd 8b04 	vpop	{d8-d9}
 80134dc:	bd08      	pop	{r3, pc}
 80134de:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80134e2:	e7f7      	b.n	80134d4 <powf+0x9e>

080134e4 <finitef>:
 80134e4:	ee10 3a10 	vmov	r3, s0
 80134e8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80134ec:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80134f0:	bfac      	ite	ge
 80134f2:	2000      	movge	r0, #0
 80134f4:	2001      	movlt	r0, #1
 80134f6:	4770      	bx	lr

080134f8 <roundf>:
 80134f8:	feb8 0a40 	vrinta.f32	s0, s0
 80134fc:	4770      	bx	lr
	...

08013500 <__ieee754_powf>:
 8013500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013504:	ee10 4a90 	vmov	r4, s1
 8013508:	ee10 6a10 	vmov	r6, s0
 801350c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8013510:	ed2d 8b02 	vpush	{d8}
 8013514:	eeb0 8a40 	vmov.f32	s16, s0
 8013518:	eef0 8a60 	vmov.f32	s17, s1
 801351c:	d10c      	bne.n	8013538 <__ieee754_powf+0x38>
 801351e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8013522:	0076      	lsls	r6, r6, #1
 8013524:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8013528:	f240 8275 	bls.w	8013a16 <__ieee754_powf+0x516>
 801352c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8013530:	ecbd 8b02 	vpop	{d8}
 8013534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013538:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801353c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8013540:	d802      	bhi.n	8013548 <__ieee754_powf+0x48>
 8013542:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8013546:	d908      	bls.n	801355a <__ieee754_powf+0x5a>
 8013548:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801354c:	d1ee      	bne.n	801352c <__ieee754_powf+0x2c>
 801354e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8013552:	0064      	lsls	r4, r4, #1
 8013554:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8013558:	e7e6      	b.n	8013528 <__ieee754_powf+0x28>
 801355a:	2e00      	cmp	r6, #0
 801355c:	da1f      	bge.n	801359e <__ieee754_powf+0x9e>
 801355e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8013562:	f080 8261 	bcs.w	8013a28 <__ieee754_powf+0x528>
 8013566:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801356a:	d32e      	bcc.n	80135ca <__ieee754_powf+0xca>
 801356c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8013570:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8013574:	fa49 f503 	asr.w	r5, r9, r3
 8013578:	fa05 f303 	lsl.w	r3, r5, r3
 801357c:	454b      	cmp	r3, r9
 801357e:	d122      	bne.n	80135c6 <__ieee754_powf+0xc6>
 8013580:	f005 0501 	and.w	r5, r5, #1
 8013584:	f1c5 0502 	rsb	r5, r5, #2
 8013588:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801358c:	d11e      	bne.n	80135cc <__ieee754_powf+0xcc>
 801358e:	2c00      	cmp	r4, #0
 8013590:	f280 8247 	bge.w	8013a22 <__ieee754_powf+0x522>
 8013594:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8013598:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801359c:	e7c8      	b.n	8013530 <__ieee754_powf+0x30>
 801359e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80135a2:	d110      	bne.n	80135c6 <__ieee754_powf+0xc6>
 80135a4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80135a8:	f000 8235 	beq.w	8013a16 <__ieee754_powf+0x516>
 80135ac:	d905      	bls.n	80135ba <__ieee754_powf+0xba>
 80135ae:	2c00      	cmp	r4, #0
 80135b0:	ed9f 0ac2 	vldr	s0, [pc, #776]	@ 80138bc <__ieee754_powf+0x3bc>
 80135b4:	fe28 0a80 	vselge.f32	s0, s17, s0
 80135b8:	e7ba      	b.n	8013530 <__ieee754_powf+0x30>
 80135ba:	2c00      	cmp	r4, #0
 80135bc:	f280 822e 	bge.w	8013a1c <__ieee754_powf+0x51c>
 80135c0:	eeb1 0a68 	vneg.f32	s0, s17
 80135c4:	e7b4      	b.n	8013530 <__ieee754_powf+0x30>
 80135c6:	2500      	movs	r5, #0
 80135c8:	e7de      	b.n	8013588 <__ieee754_powf+0x88>
 80135ca:	2500      	movs	r5, #0
 80135cc:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80135d0:	d102      	bne.n	80135d8 <__ieee754_powf+0xd8>
 80135d2:	ee28 0a08 	vmul.f32	s0, s16, s16
 80135d6:	e7ab      	b.n	8013530 <__ieee754_powf+0x30>
 80135d8:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80135dc:	f040 8229 	bne.w	8013a32 <__ieee754_powf+0x532>
 80135e0:	2e00      	cmp	r6, #0
 80135e2:	f2c0 8226 	blt.w	8013a32 <__ieee754_powf+0x532>
 80135e6:	eeb0 0a48 	vmov.f32	s0, s16
 80135ea:	ecbd 8b02 	vpop	{d8}
 80135ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135f2:	f000 bae7 	b.w	8013bc4 <__ieee754_sqrtf>
 80135f6:	2d01      	cmp	r5, #1
 80135f8:	d19a      	bne.n	8013530 <__ieee754_powf+0x30>
 80135fa:	eeb1 0a40 	vneg.f32	s0, s0
 80135fe:	e797      	b.n	8013530 <__ieee754_powf+0x30>
 8013600:	0ff0      	lsrs	r0, r6, #31
 8013602:	3801      	subs	r0, #1
 8013604:	ea55 0300 	orrs.w	r3, r5, r0
 8013608:	d104      	bne.n	8013614 <__ieee754_powf+0x114>
 801360a:	ee38 8a48 	vsub.f32	s16, s16, s16
 801360e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013612:	e78d      	b.n	8013530 <__ieee754_powf+0x30>
 8013614:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8013618:	d96c      	bls.n	80136f4 <__ieee754_powf+0x1f4>
 801361a:	4ba9      	ldr	r3, [pc, #676]	@ (80138c0 <__ieee754_powf+0x3c0>)
 801361c:	4598      	cmp	r8, r3
 801361e:	d808      	bhi.n	8013632 <__ieee754_powf+0x132>
 8013620:	2c00      	cmp	r4, #0
 8013622:	da0b      	bge.n	801363c <__ieee754_powf+0x13c>
 8013624:	2000      	movs	r0, #0
 8013626:	ecbd 8b02 	vpop	{d8}
 801362a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801362e:	f000 bac3 	b.w	8013bb8 <__math_oflowf>
 8013632:	4ba4      	ldr	r3, [pc, #656]	@ (80138c4 <__ieee754_powf+0x3c4>)
 8013634:	4598      	cmp	r8, r3
 8013636:	d908      	bls.n	801364a <__ieee754_powf+0x14a>
 8013638:	2c00      	cmp	r4, #0
 801363a:	dcf3      	bgt.n	8013624 <__ieee754_powf+0x124>
 801363c:	2000      	movs	r0, #0
 801363e:	ecbd 8b02 	vpop	{d8}
 8013642:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013646:	f000 bab1 	b.w	8013bac <__math_uflowf>
 801364a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801364e:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 80138c8 <__ieee754_powf+0x3c8>
 8013652:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013656:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801365a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801365e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8013662:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013666:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801366a:	eddf 6a98 	vldr	s13, [pc, #608]	@ 80138cc <__ieee754_powf+0x3cc>
 801366e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013672:	eddf 7a97 	vldr	s15, [pc, #604]	@ 80138d0 <__ieee754_powf+0x3d0>
 8013676:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801367a:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 80138d4 <__ieee754_powf+0x3d4>
 801367e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013682:	eeb0 7a67 	vmov.f32	s14, s15
 8013686:	eea0 7a26 	vfma.f32	s14, s0, s13
 801368a:	ee17 3a10 	vmov	r3, s14
 801368e:	f36f 030b 	bfc	r3, #0, #12
 8013692:	ee07 3a10 	vmov	s14, r3
 8013696:	eeb0 6a47 	vmov.f32	s12, s14
 801369a:	eea0 6a66 	vfms.f32	s12, s0, s13
 801369e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80136a2:	3d01      	subs	r5, #1
 80136a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80136a8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80136ac:	f36f 040b 	bfc	r4, #0, #12
 80136b0:	4305      	orrs	r5, r0
 80136b2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80136b6:	fe08 8a26 	vseleq.f32	s16, s16, s13
 80136ba:	ee06 4a90 	vmov	s13, r4
 80136be:	ee38 6ae6 	vsub.f32	s12, s17, s13
 80136c2:	ee67 7a26 	vmul.f32	s15, s14, s13
 80136c6:	eee6 0a07 	vfma.f32	s1, s12, s14
 80136ca:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80136ce:	ee17 1a10 	vmov	r1, s14
 80136d2:	2900      	cmp	r1, #0
 80136d4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80136d8:	f340 80dc 	ble.w	8013894 <__ieee754_powf+0x394>
 80136dc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80136e0:	f240 80c9 	bls.w	8013876 <__ieee754_powf+0x376>
 80136e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80136e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ec:	bf4c      	ite	mi
 80136ee:	2001      	movmi	r0, #1
 80136f0:	2000      	movpl	r0, #0
 80136f2:	e798      	b.n	8013626 <__ieee754_powf+0x126>
 80136f4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80136f8:	bf05      	ittet	eq
 80136fa:	eddf 7a77 	vldreq	s15, [pc, #476]	@ 80138d8 <__ieee754_powf+0x3d8>
 80136fe:	f06f 0317 	mvneq.w	r3, #23
 8013702:	2300      	movne	r3, #0
 8013704:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8013708:	bf08      	it	eq
 801370a:	ee17 7a90 	vmoveq	r7, s15
 801370e:	15fa      	asrs	r2, r7, #23
 8013710:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8013714:	3a7f      	subs	r2, #127	@ 0x7f
 8013716:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801371a:	441a      	add	r2, r3
 801371c:	4b6f      	ldr	r3, [pc, #444]	@ (80138dc <__ieee754_powf+0x3dc>)
 801371e:	429f      	cmp	r7, r3
 8013720:	dd06      	ble.n	8013730 <__ieee754_powf+0x230>
 8013722:	4b6f      	ldr	r3, [pc, #444]	@ (80138e0 <__ieee754_powf+0x3e0>)
 8013724:	429f      	cmp	r7, r3
 8013726:	f340 80a4 	ble.w	8013872 <__ieee754_powf+0x372>
 801372a:	3201      	adds	r2, #1
 801372c:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8013730:	2600      	movs	r6, #0
 8013732:	4b6c      	ldr	r3, [pc, #432]	@ (80138e4 <__ieee754_powf+0x3e4>)
 8013734:	ee07 1a10 	vmov	s14, r1
 8013738:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801373c:	1049      	asrs	r1, r1, #1
 801373e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8013742:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8013746:	edd3 5a00 	vldr	s11, [r3]
 801374a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801374e:	4b66      	ldr	r3, [pc, #408]	@ (80138e8 <__ieee754_powf+0x3e8>)
 8013750:	ee75 7a87 	vadd.f32	s15, s11, s14
 8013754:	ee37 6a65 	vsub.f32	s12, s14, s11
 8013758:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801375c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8013760:	ee07 1a90 	vmov	s15, r1
 8013764:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8013768:	ee37 7a65 	vsub.f32	s14, s14, s11
 801376c:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 80138ec <__ieee754_powf+0x3ec>
 8013770:	ee26 5a24 	vmul.f32	s10, s12, s9
 8013774:	ee15 7a10 	vmov	r7, s10
 8013778:	401f      	ands	r7, r3
 801377a:	ee06 7a90 	vmov	s13, r7
 801377e:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8013782:	ee65 7a05 	vmul.f32	s15, s10, s10
 8013786:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801378a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80138f0 <__ieee754_powf+0x3f0>
 801378e:	eee7 5a87 	vfma.f32	s11, s15, s14
 8013792:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80138f4 <__ieee754_powf+0x3f4>
 8013796:	ee26 6a24 	vmul.f32	s12, s12, s9
 801379a:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801379e:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80137a2:	eddf 5a49 	vldr	s11, [pc, #292]	@ 80138c8 <__ieee754_powf+0x3c8>
 80137a6:	eee7 5a27 	vfma.f32	s11, s14, s15
 80137aa:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80138f8 <__ieee754_powf+0x3f8>
 80137ae:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80137b2:	eddf 5a52 	vldr	s11, [pc, #328]	@ 80138fc <__ieee754_powf+0x3fc>
 80137b6:	eee7 5a27 	vfma.f32	s11, s14, s15
 80137ba:	ee35 7a26 	vadd.f32	s14, s10, s13
 80137be:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80137c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80137c6:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80137ca:	eef0 5a67 	vmov.f32	s11, s15
 80137ce:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80137d2:	ee75 5a87 	vadd.f32	s11, s11, s14
 80137d6:	ee15 1a90 	vmov	r1, s11
 80137da:	4019      	ands	r1, r3
 80137dc:	ee05 1a90 	vmov	s11, r1
 80137e0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80137e4:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80137e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137ec:	ee67 7a85 	vmul.f32	s15, s15, s10
 80137f0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80137f4:	eeb0 6a67 	vmov.f32	s12, s15
 80137f8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80137fc:	ee16 1a10 	vmov	r1, s12
 8013800:	4019      	ands	r1, r3
 8013802:	ee06 1a10 	vmov	s12, r1
 8013806:	493e      	ldr	r1, [pc, #248]	@ (8013900 <__ieee754_powf+0x400>)
 8013808:	eeb0 7a46 	vmov.f32	s14, s12
 801380c:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8013810:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8013814:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8013904 <__ieee754_powf+0x404>
 8013818:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801381c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8013908 <__ieee754_powf+0x408>
 8013820:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013824:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 801390c <__ieee754_powf+0x40c>
 8013828:	eee6 7a07 	vfma.f32	s15, s12, s14
 801382c:	ed91 7a00 	vldr	s14, [r1]
 8013830:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013834:	ee07 2a10 	vmov	s14, r2
 8013838:	4a35      	ldr	r2, [pc, #212]	@ (8013910 <__ieee754_powf+0x410>)
 801383a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801383e:	eeb0 7a67 	vmov.f32	s14, s15
 8013842:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8013846:	ed92 5a00 	vldr	s10, [r2]
 801384a:	eea6 7a25 	vfma.f32	s14, s12, s11
 801384e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8013852:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013856:	ee17 2a10 	vmov	r2, s14
 801385a:	401a      	ands	r2, r3
 801385c:	ee07 2a10 	vmov	s14, r2
 8013860:	ee77 6a66 	vsub.f32	s13, s14, s13
 8013864:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8013868:	eee6 6a65 	vfms.f32	s13, s12, s11
 801386c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013870:	e717      	b.n	80136a2 <__ieee754_powf+0x1a2>
 8013872:	2601      	movs	r6, #1
 8013874:	e75d      	b.n	8013732 <__ieee754_powf+0x232>
 8013876:	d151      	bne.n	801391c <__ieee754_powf+0x41c>
 8013878:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8013914 <__ieee754_powf+0x414>
 801387c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013880:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8013884:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388c:	f73f af2a 	bgt.w	80136e4 <__ieee754_powf+0x1e4>
 8013890:	2386      	movs	r3, #134	@ 0x86
 8013892:	e047      	b.n	8013924 <__ieee754_powf+0x424>
 8013894:	4a20      	ldr	r2, [pc, #128]	@ (8013918 <__ieee754_powf+0x418>)
 8013896:	4293      	cmp	r3, r2
 8013898:	d907      	bls.n	80138aa <__ieee754_powf+0x3aa>
 801389a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801389e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a2:	bf4c      	ite	mi
 80138a4:	2001      	movmi	r0, #1
 80138a6:	2000      	movpl	r0, #0
 80138a8:	e6c9      	b.n	801363e <__ieee754_powf+0x13e>
 80138aa:	d137      	bne.n	801391c <__ieee754_powf+0x41c>
 80138ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80138b0:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80138b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138b8:	dbea      	blt.n	8013890 <__ieee754_powf+0x390>
 80138ba:	e7ee      	b.n	801389a <__ieee754_powf+0x39a>
 80138bc:	00000000 	.word	0x00000000
 80138c0:	3f7ffff3 	.word	0x3f7ffff3
 80138c4:	3f800007 	.word	0x3f800007
 80138c8:	3eaaaaab 	.word	0x3eaaaaab
 80138cc:	3fb8aa00 	.word	0x3fb8aa00
 80138d0:	3fb8aa3b 	.word	0x3fb8aa3b
 80138d4:	36eca570 	.word	0x36eca570
 80138d8:	4b800000 	.word	0x4b800000
 80138dc:	001cc471 	.word	0x001cc471
 80138e0:	005db3d6 	.word	0x005db3d6
 80138e4:	08013d20 	.word	0x08013d20
 80138e8:	fffff000 	.word	0xfffff000
 80138ec:	3e6c3255 	.word	0x3e6c3255
 80138f0:	3e53f142 	.word	0x3e53f142
 80138f4:	3e8ba305 	.word	0x3e8ba305
 80138f8:	3edb6db7 	.word	0x3edb6db7
 80138fc:	3f19999a 	.word	0x3f19999a
 8013900:	08013d10 	.word	0x08013d10
 8013904:	3f763800 	.word	0x3f763800
 8013908:	3f76384f 	.word	0x3f76384f
 801390c:	369dc3a0 	.word	0x369dc3a0
 8013910:	08013d18 	.word	0x08013d18
 8013914:	3338aa3c 	.word	0x3338aa3c
 8013918:	43160000 	.word	0x43160000
 801391c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8013920:	d974      	bls.n	8013a0c <__ieee754_powf+0x50c>
 8013922:	15db      	asrs	r3, r3, #23
 8013924:	3b7e      	subs	r3, #126	@ 0x7e
 8013926:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801392a:	4a53      	ldr	r2, [pc, #332]	@ (8013a78 <__ieee754_powf+0x578>)
 801392c:	2900      	cmp	r1, #0
 801392e:	fa40 f003 	asr.w	r0, r0, r3
 8013932:	4408      	add	r0, r1
 8013934:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013938:	f1a3 037f 	sub.w	r3, r3, #127	@ 0x7f
 801393c:	fa42 f203 	asr.w	r2, r2, r3
 8013940:	f1c3 0317 	rsb	r3, r3, #23
 8013944:	ea02 0200 	and.w	r2, r2, r0
 8013948:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801394c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8013950:	ee07 2a10 	vmov	s14, r2
 8013954:	fa40 f003 	asr.w	r0, r0, r3
 8013958:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801395c:	bfb8      	it	lt
 801395e:	4240      	neglt	r0, r0
 8013960:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8013964:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8013a7c <__ieee754_powf+0x57c>
 8013968:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8013a80 <__ieee754_powf+0x580>
 801396c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013970:	ee16 3a90 	vmov	r3, s13
 8013974:	f36f 030b 	bfc	r3, #0, #12
 8013978:	ee06 3a90 	vmov	s13, r3
 801397c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8013980:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013984:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8013a84 <__ieee754_powf+0x584>
 8013988:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801398c:	eee0 7a87 	vfma.f32	s15, s1, s14
 8013990:	eeb0 7a67 	vmov.f32	s14, s15
 8013994:	eea6 7a86 	vfma.f32	s14, s13, s12
 8013998:	eef0 5a47 	vmov.f32	s11, s14
 801399c:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80139a0:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 8013a88 <__ieee754_powf+0x588>
 80139a4:	ee67 6a07 	vmul.f32	s13, s14, s14
 80139a8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80139ac:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8013a8c <__ieee754_powf+0x58c>
 80139b0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80139b4:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8013a90 <__ieee754_powf+0x590>
 80139b8:	eee7 7a27 	vfma.f32	s15, s14, s15
 80139bc:	eee6 5a26 	vfma.f32	s11, s12, s13
 80139c0:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 8013a94 <__ieee754_powf+0x594>
 80139c4:	eea5 6aa6 	vfma.f32	s12, s11, s13
 80139c8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8013a98 <__ieee754_powf+0x598>
 80139cc:	eee6 5a26 	vfma.f32	s11, s12, s13
 80139d0:	eeb0 6a47 	vmov.f32	s12, s14
 80139d4:	eea5 6ae6 	vfms.f32	s12, s11, s13
 80139d8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80139dc:	ee67 5a06 	vmul.f32	s11, s14, s12
 80139e0:	ee36 6a66 	vsub.f32	s12, s12, s13
 80139e4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80139e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80139ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80139f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80139f4:	ee10 3a10 	vmov	r3, s0
 80139f8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80139fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013a00:	da06      	bge.n	8013a10 <__ieee754_powf+0x510>
 8013a02:	f000 f855 	bl	8013ab0 <scalbnf>
 8013a06:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013a0a:	e591      	b.n	8013530 <__ieee754_powf+0x30>
 8013a0c:	2000      	movs	r0, #0
 8013a0e:	e7a7      	b.n	8013960 <__ieee754_powf+0x460>
 8013a10:	ee00 3a10 	vmov	s0, r3
 8013a14:	e7f7      	b.n	8013a06 <__ieee754_powf+0x506>
 8013a16:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013a1a:	e589      	b.n	8013530 <__ieee754_powf+0x30>
 8013a1c:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8013a9c <__ieee754_powf+0x59c>
 8013a20:	e586      	b.n	8013530 <__ieee754_powf+0x30>
 8013a22:	eeb0 0a48 	vmov.f32	s0, s16
 8013a26:	e583      	b.n	8013530 <__ieee754_powf+0x30>
 8013a28:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8013a2c:	f43f adba 	beq.w	80135a4 <__ieee754_powf+0xa4>
 8013a30:	2502      	movs	r5, #2
 8013a32:	eeb0 0a48 	vmov.f32	s0, s16
 8013a36:	4647      	mov	r7, r8
 8013a38:	f000 f832 	bl	8013aa0 <fabsf>
 8013a3c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8013a40:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8013a44:	d003      	beq.n	8013a4e <__ieee754_powf+0x54e>
 8013a46:	f1b8 0f00 	cmp.w	r8, #0
 8013a4a:	f47f add9 	bne.w	8013600 <__ieee754_powf+0x100>
 8013a4e:	2c00      	cmp	r4, #0
 8013a50:	bfbc      	itt	lt
 8013a52:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8013a56:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8013a5a:	2e00      	cmp	r6, #0
 8013a5c:	f6bf ad68 	bge.w	8013530 <__ieee754_powf+0x30>
 8013a60:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8013a64:	ea58 0805 	orrs.w	r8, r8, r5
 8013a68:	f47f adc5 	bne.w	80135f6 <__ieee754_powf+0xf6>
 8013a6c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013a70:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013a74:	e55c      	b.n	8013530 <__ieee754_powf+0x30>
 8013a76:	bf00      	nop
 8013a78:	ff800000 	.word	0xff800000
 8013a7c:	3f317218 	.word	0x3f317218
 8013a80:	3f317200 	.word	0x3f317200
 8013a84:	35bfbe8c 	.word	0x35bfbe8c
 8013a88:	b5ddea0e 	.word	0xb5ddea0e
 8013a8c:	3331bb4c 	.word	0x3331bb4c
 8013a90:	388ab355 	.word	0x388ab355
 8013a94:	bb360b61 	.word	0xbb360b61
 8013a98:	3e2aaaab 	.word	0x3e2aaaab
 8013a9c:	00000000 	.word	0x00000000

08013aa0 <fabsf>:
 8013aa0:	ee10 3a10 	vmov	r3, s0
 8013aa4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013aa8:	ee00 3a10 	vmov	s0, r3
 8013aac:	4770      	bx	lr
	...

08013ab0 <scalbnf>:
 8013ab0:	ee10 3a10 	vmov	r3, s0
 8013ab4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8013ab8:	d02a      	beq.n	8013b10 <scalbnf+0x60>
 8013aba:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013abe:	d302      	bcc.n	8013ac6 <scalbnf+0x16>
 8013ac0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013ac4:	4770      	bx	lr
 8013ac6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8013aca:	d122      	bne.n	8013b12 <scalbnf+0x62>
 8013acc:	4b23      	ldr	r3, [pc, #140]	@ (8013b5c <scalbnf+0xac>)
 8013ace:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8013b60 <scalbnf+0xb0>
 8013ad2:	4298      	cmp	r0, r3
 8013ad4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013ad8:	db16      	blt.n	8013b08 <scalbnf+0x58>
 8013ada:	ee10 3a10 	vmov	r3, s0
 8013ade:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013ae2:	3a19      	subs	r2, #25
 8013ae4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013ae8:	4288      	cmp	r0, r1
 8013aea:	dd14      	ble.n	8013b16 <scalbnf+0x66>
 8013aec:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8013b64 <scalbnf+0xb4>
 8013af0:	ee10 3a10 	vmov	r3, s0
 8013af4:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8013b68 <scalbnf+0xb8>
 8013af8:	eeb0 7a67 	vmov.f32	s14, s15
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8013b02:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013b06:	4770      	bx	lr
 8013b08:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8013b6c <scalbnf+0xbc>
 8013b0c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013b10:	4770      	bx	lr
 8013b12:	0dd2      	lsrs	r2, r2, #23
 8013b14:	e7e6      	b.n	8013ae4 <scalbnf+0x34>
 8013b16:	4410      	add	r0, r2
 8013b18:	28fe      	cmp	r0, #254	@ 0xfe
 8013b1a:	dce7      	bgt.n	8013aec <scalbnf+0x3c>
 8013b1c:	2800      	cmp	r0, #0
 8013b1e:	dd06      	ble.n	8013b2e <scalbnf+0x7e>
 8013b20:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013b24:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013b28:	ee00 3a10 	vmov	s0, r3
 8013b2c:	4770      	bx	lr
 8013b2e:	f110 0f16 	cmn.w	r0, #22
 8013b32:	da09      	bge.n	8013b48 <scalbnf+0x98>
 8013b34:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8013b6c <scalbnf+0xbc>
 8013b38:	ee10 3a10 	vmov	r3, s0
 8013b3c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8013b70 <scalbnf+0xc0>
 8013b40:	eeb0 7a67 	vmov.f32	s14, s15
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	e7da      	b.n	8013afe <scalbnf+0x4e>
 8013b48:	3019      	adds	r0, #25
 8013b4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013b4e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8013b74 <scalbnf+0xc4>
 8013b52:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013b56:	ee07 3a90 	vmov	s15, r3
 8013b5a:	e7d7      	b.n	8013b0c <scalbnf+0x5c>
 8013b5c:	ffff3cb0 	.word	0xffff3cb0
 8013b60:	4c000000 	.word	0x4c000000
 8013b64:	7149f2ca 	.word	0x7149f2ca
 8013b68:	f149f2ca 	.word	0xf149f2ca
 8013b6c:	0da24260 	.word	0x0da24260
 8013b70:	8da24260 	.word	0x8da24260
 8013b74:	33000000 	.word	0x33000000

08013b78 <with_errnof>:
 8013b78:	b510      	push	{r4, lr}
 8013b7a:	ed2d 8b02 	vpush	{d8}
 8013b7e:	eeb0 8a40 	vmov.f32	s16, s0
 8013b82:	4604      	mov	r4, r0
 8013b84:	f7fe ffd0 	bl	8012b28 <__errno>
 8013b88:	6004      	str	r4, [r0, #0]
 8013b8a:	eeb0 0a48 	vmov.f32	s0, s16
 8013b8e:	ecbd 8b02 	vpop	{d8}
 8013b92:	bd10      	pop	{r4, pc}

08013b94 <xflowf>:
 8013b94:	b130      	cbz	r0, 8013ba4 <xflowf+0x10>
 8013b96:	eef1 7a40 	vneg.f32	s15, s0
 8013b9a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013b9e:	2022      	movs	r0, #34	@ 0x22
 8013ba0:	f7ff bfea 	b.w	8013b78 <with_errnof>
 8013ba4:	eef0 7a40 	vmov.f32	s15, s0
 8013ba8:	e7f7      	b.n	8013b9a <xflowf+0x6>
	...

08013bac <__math_uflowf>:
 8013bac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013bb4 <__math_uflowf+0x8>
 8013bb0:	f7ff bff0 	b.w	8013b94 <xflowf>
 8013bb4:	10000000 	.word	0x10000000

08013bb8 <__math_oflowf>:
 8013bb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013bc0 <__math_oflowf+0x8>
 8013bbc:	f7ff bfea 	b.w	8013b94 <xflowf>
 8013bc0:	70000000 	.word	0x70000000

08013bc4 <__ieee754_sqrtf>:
 8013bc4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013bc8:	4770      	bx	lr
	...

08013bcc <_init>:
 8013bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bce:	bf00      	nop
 8013bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bd2:	bc08      	pop	{r3}
 8013bd4:	469e      	mov	lr, r3
 8013bd6:	4770      	bx	lr

08013bd8 <_fini>:
 8013bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bda:	bf00      	nop
 8013bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bde:	bc08      	pop	{r3}
 8013be0:	469e      	mov	lr, r3
 8013be2:	4770      	bx	lr
