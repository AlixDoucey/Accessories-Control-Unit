
H562-ACU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014708  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08014958  08014958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a9c  08014a9c  000161d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014a9c  08014a9c  00015a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014aa4  08014aa4  000161d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014aa4  08014aa4  00015aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014aa8  08014aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  08014aac  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007218  200001d0  08014c7c  000161d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200073e8  08014c7c  000163e8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000161d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032973  00000000  00000000  00016206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000725c  00000000  00000000  00048b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023d0  00000000  00000000  0004fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b03  00000000  00000000  000521a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000372ab  00000000  00000000  00053cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003552d  00000000  00000000  0008af56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00151424  00000000  00000000  000c0483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002118a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009668  00000000  00000000  002118ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000fa  00000000  00000000  0021af54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001d0 	.word	0x200001d0
 800026c:	00000000 	.word	0x00000000
 8000270:	08014940 	.word	0x08014940

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001d4 	.word	0x200001d4
 800028c:	08014940 	.word	0x08014940

08000290 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000290:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000292:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000296:	4917      	ldr	r1, [pc, #92]	@ (80002f4 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000298:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 800029c:	4816      	ldr	r0, [pc, #88]	@ (80002f8 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 800029e:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 80002a0:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 80002a4:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002a6:	4815      	ldr	r0, [pc, #84]	@ (80002fc <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002a8:	4912      	ldr	r1, [pc, #72]	@ (80002f4 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 80002aa:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 80002ac:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 80002ae:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80002b2:	4913      	ldr	r1, [pc, #76]	@ (8000300 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 80002b4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002b6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002ba:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002bc:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002c0:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002c4:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002c8:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002cc:	490d      	ldr	r1, [pc, #52]	@ (8000304 <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002ce:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_BadHandler>

080002d8 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002d8:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002de:	4770      	bx	lr

080002e0 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002e0:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002e2:	f000 f897 	bl	8000414 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ea:	4770      	bx	lr

080002ec <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002ec:	f7ff bffe 	b.w	80002ec <__tx_NMIHandler>

080002f0 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002f0:	f7ff bffe 	b.w	80002f0 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002f4:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002f8:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002fc:	20006c68 	.word	0x20006c68
    LDR     r1, =SYSTICK_CYCLES
 8000300:	0003d08f 	.word	0x0003d08f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000304:	40ff0000 	.word	0x40ff0000

08000308 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000308:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800030c:	4a2d      	ldr	r2, [pc, #180]	@ (80003c4 <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800030e:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000310:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000314:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000318:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 800031c:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800031e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 8000322:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000326:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 800032a:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800032e:	f3bf 8f6f 	isb	sy

08000332 <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 8000332:	e7fe      	b.n	8000332 <__tx_wait_here>

08000334 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000334:	4824      	ldr	r0, [pc, #144]	@ (80003c8 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000336:	4a25      	ldr	r2, [pc, #148]	@ (80003cc <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000338:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 800033c:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800033e:	b191      	cbz	r1, 8000366 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000340:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 8000342:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000346:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800034a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 800034e:	d101      	bne.n	8000354 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000350:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

08000354 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000354:	4c1e      	ldr	r4, [pc, #120]	@ (80003d0 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000356:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800035a:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800035e:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000360:	b10d      	cbz	r5, 8000366 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000362:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000364:	6023      	str	r3, [r4, #0]

08000366 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000366:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000368:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800036a:	b1d1      	cbz	r1, 80003a2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 800036c:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800036e:	b662      	cpsie	i

08000370 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000370:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000372:	4c17      	ldr	r4, [pc, #92]	@ (80003d0 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000374:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000376:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800037a:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 800037c:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 800037e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 8000382:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000386:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800038a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800038e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000392:	d101      	bne.n	8000398 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000394:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000398 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000398:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800039c:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 80003a0:	4770      	bx	lr

080003a2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003a2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003a4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003a6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003a8:	b909      	cbnz	r1, 80003ae <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003aa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003ac:	e7f9      	b.n	80003a2 <__tx_ts_wait>

080003ae <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003ae:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003b2:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003b6:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003ba:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003bc:	e7d8      	b.n	8000370 <__tx_ts_restore>
 80003be:	bf00      	nop

080003c0 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003c0:	4770      	bx	lr
 80003c2:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c4:	20006d04 	.word	0x20006d04
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c8:	20006c6c 	.word	0x20006c6c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003cc:	20006c70 	.word	0x20006c70
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003d0:	20007270 	.word	0x20007270

080003d4 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003d4:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003d6:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003da:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003de:	f06f 0343 	mvn.w	r3, #67	@ 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003e2:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003e4:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e8:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003ea:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003ec:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003ee:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003f0:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003f2:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003f4:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003f6:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f8:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003fa:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 8000400:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000406:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000408:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 800040a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800040e:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000410:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000412:	4770      	bx	lr

08000414 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000414:	4922      	ldr	r1, [pc, #136]	@ (80004a0 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000416:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000418:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 800041c:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800041e:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000420:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 8000422:	b13a      	cbz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000424:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000428:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 800042a:	b91a      	cbnz	r2, 8000434 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 800042c:	4b1e      	ldr	r3, [pc, #120]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 800042e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 8000432:	6018      	str	r0, [r3, #0]

08000434 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000434:	491d      	ldr	r1, [pc, #116]	@ (80004ac <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000436:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000438:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 800043a:	b122      	cbz	r2, 8000446 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	4b1c      	ldr	r3, [pc, #112]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 800043e:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 8000442:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000444:	e008      	b.n	8000458 <__tx_timer_done>

08000446 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000446:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 800044c:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800044e:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000450:	d101      	bne.n	8000456 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000452:	4b19      	ldr	r3, [pc, #100]	@ (80004b8 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000454:	6818      	ldr	r0, [r3, #0]

08000456 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000456:	6008      	str	r0, [r1, #0]

08000458 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 800045a:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 800045c:	b912      	cbnz	r2, 8000464 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800045e:	4914      	ldr	r1, [pc, #80]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 8000462:	b1c8      	cbz	r0, 8000498 <__tx_timer_nothing_expired>

08000464 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 8000464:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000466:	4912      	ldr	r1, [pc, #72]	@ (80004b0 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000468:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 800046a:	b108      	cbz	r0, 8000470 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800046c:	f012 f9b4 	bl	80127d8 <_tx_timer_expiration_process>

08000470 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000470:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000472:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000474:	b172      	cbz	r2, 8000494 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000476:	f012 f893 	bl	80125a0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800047a:	4810      	ldr	r0, [pc, #64]	@ (80004bc <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800047c:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800047e:	b949      	cbnz	r1, 8000494 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000480:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000482:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000484:	4a0f      	ldr	r2, [pc, #60]	@ (80004c4 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000486:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000488:	480f      	ldr	r0, [pc, #60]	@ (80004c8 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 800048a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800048e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000490:	d000      	beq.n	8000494 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000492:	6002      	str	r2, [r0, #0]

08000494 <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 8000494:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000498 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000498:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800049c:	4770      	bx	lr
 800049e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004a0:	20006d10 	.word	0x20006d10
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004a4:	20007270 	.word	0x20007270
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a8:	20006d14 	.word	0x20006d14
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004ac:	20006da0 	.word	0x20006da0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004b0:	20006da4 	.word	0x20006da4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004b4:	20006d9c 	.word	0x20006d9c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b8:	20006d98 	.word	0x20006d98
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004bc:	20006d04 	.word	0x20006d04
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004c0:	20006c6c 	.word	0x20006c6c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004c4:	20006c70 	.word	0x20006c70
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c8:	e000ed04 	.word	0xe000ed04

080004cc <strlen>:
 80004cc:	4603      	mov	r3, r0
 80004ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d1fb      	bne.n	80004ce <strlen+0x2>
 80004d6:	1a18      	subs	r0, r3, r0
 80004d8:	3801      	subs	r0, #1
 80004da:	4770      	bx	lr

080004dc <__aeabi_drsub>:
 80004dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e002      	b.n	80004e8 <__adddf3>
 80004e2:	bf00      	nop

080004e4 <__aeabi_dsub>:
 80004e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e8 <__adddf3>:
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004f2:	ea94 0f05 	teq	r4, r5
 80004f6:	bf08      	it	eq
 80004f8:	ea90 0f02 	teqeq	r0, r2
 80004fc:	bf1f      	itttt	ne
 80004fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000502:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000506:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800050a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800050e:	f000 80e2 	beq.w	80006d6 <__adddf3+0x1ee>
 8000512:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000516:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800051a:	bfb8      	it	lt
 800051c:	426d      	neglt	r5, r5
 800051e:	dd0c      	ble.n	800053a <__adddf3+0x52>
 8000520:	442c      	add	r4, r5
 8000522:	ea80 0202 	eor.w	r2, r0, r2
 8000526:	ea81 0303 	eor.w	r3, r1, r3
 800052a:	ea82 0000 	eor.w	r0, r2, r0
 800052e:	ea83 0101 	eor.w	r1, r3, r1
 8000532:	ea80 0202 	eor.w	r2, r0, r2
 8000536:	ea81 0303 	eor.w	r3, r1, r3
 800053a:	2d36      	cmp	r5, #54	@ 0x36
 800053c:	bf88      	it	hi
 800053e:	bd30      	pophi	{r4, r5, pc}
 8000540:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000544:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000548:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800054c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000550:	d002      	beq.n	8000558 <__adddf3+0x70>
 8000552:	4240      	negs	r0, r0
 8000554:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000558:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800055c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000560:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000564:	d002      	beq.n	800056c <__adddf3+0x84>
 8000566:	4252      	negs	r2, r2
 8000568:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800056c:	ea94 0f05 	teq	r4, r5
 8000570:	f000 80a7 	beq.w	80006c2 <__adddf3+0x1da>
 8000574:	f1a4 0401 	sub.w	r4, r4, #1
 8000578:	f1d5 0e20 	rsbs	lr, r5, #32
 800057c:	db0d      	blt.n	800059a <__adddf3+0xb2>
 800057e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000582:	fa22 f205 	lsr.w	r2, r2, r5
 8000586:	1880      	adds	r0, r0, r2
 8000588:	f141 0100 	adc.w	r1, r1, #0
 800058c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000590:	1880      	adds	r0, r0, r2
 8000592:	fa43 f305 	asr.w	r3, r3, r5
 8000596:	4159      	adcs	r1, r3
 8000598:	e00e      	b.n	80005b8 <__adddf3+0xd0>
 800059a:	f1a5 0520 	sub.w	r5, r5, #32
 800059e:	f10e 0e20 	add.w	lr, lr, #32
 80005a2:	2a01      	cmp	r2, #1
 80005a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a8:	bf28      	it	cs
 80005aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ae:	fa43 f305 	asr.w	r3, r3, r5
 80005b2:	18c0      	adds	r0, r0, r3
 80005b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	d507      	bpl.n	80005ce <__adddf3+0xe6>
 80005be:	f04f 0e00 	mov.w	lr, #0
 80005c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80005ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005d2:	d31b      	bcc.n	800060c <__adddf3+0x124>
 80005d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d8:	d30c      	bcc.n	80005f4 <__adddf3+0x10c>
 80005da:	0849      	lsrs	r1, r1, #1
 80005dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005e4:	f104 0401 	add.w	r4, r4, #1
 80005e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f0:	f080 809a 	bcs.w	8000728 <__adddf3+0x240>
 80005f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f8:	bf08      	it	eq
 80005fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005fe:	f150 0000 	adcs.w	r0, r0, #0
 8000602:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000606:	ea41 0105 	orr.w	r1, r1, r5
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000610:	4140      	adcs	r0, r0
 8000612:	eb41 0101 	adc.w	r1, r1, r1
 8000616:	3c01      	subs	r4, #1
 8000618:	bf28      	it	cs
 800061a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800061e:	d2e9      	bcs.n	80005f4 <__adddf3+0x10c>
 8000620:	f091 0f00 	teq	r1, #0
 8000624:	bf04      	itt	eq
 8000626:	4601      	moveq	r1, r0
 8000628:	2000      	moveq	r0, #0
 800062a:	fab1 f381 	clz	r3, r1
 800062e:	bf08      	it	eq
 8000630:	3320      	addeq	r3, #32
 8000632:	f1a3 030b 	sub.w	r3, r3, #11
 8000636:	f1b3 0220 	subs.w	r2, r3, #32
 800063a:	da0c      	bge.n	8000656 <__adddf3+0x16e>
 800063c:	320c      	adds	r2, #12
 800063e:	dd08      	ble.n	8000652 <__adddf3+0x16a>
 8000640:	f102 0c14 	add.w	ip, r2, #20
 8000644:	f1c2 020c 	rsb	r2, r2, #12
 8000648:	fa01 f00c 	lsl.w	r0, r1, ip
 800064c:	fa21 f102 	lsr.w	r1, r1, r2
 8000650:	e00c      	b.n	800066c <__adddf3+0x184>
 8000652:	f102 0214 	add.w	r2, r2, #20
 8000656:	bfd8      	it	le
 8000658:	f1c2 0c20 	rsble	ip, r2, #32
 800065c:	fa01 f102 	lsl.w	r1, r1, r2
 8000660:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000664:	bfdc      	itt	le
 8000666:	ea41 010c 	orrle.w	r1, r1, ip
 800066a:	4090      	lslle	r0, r2
 800066c:	1ae4      	subs	r4, r4, r3
 800066e:	bfa2      	ittt	ge
 8000670:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000674:	4329      	orrge	r1, r5
 8000676:	bd30      	popge	{r4, r5, pc}
 8000678:	ea6f 0404 	mvn.w	r4, r4
 800067c:	3c1f      	subs	r4, #31
 800067e:	da1c      	bge.n	80006ba <__adddf3+0x1d2>
 8000680:	340c      	adds	r4, #12
 8000682:	dc0e      	bgt.n	80006a2 <__adddf3+0x1ba>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0220 	rsb	r2, r4, #32
 800068c:	fa20 f004 	lsr.w	r0, r0, r4
 8000690:	fa01 f302 	lsl.w	r3, r1, r2
 8000694:	ea40 0003 	orr.w	r0, r0, r3
 8000698:	fa21 f304 	lsr.w	r3, r1, r4
 800069c:	ea45 0103 	orr.w	r1, r5, r3
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	f1c4 040c 	rsb	r4, r4, #12
 80006a6:	f1c4 0220 	rsb	r2, r4, #32
 80006aa:	fa20 f002 	lsr.w	r0, r0, r2
 80006ae:	fa01 f304 	lsl.w	r3, r1, r4
 80006b2:	ea40 0003 	orr.w	r0, r0, r3
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	fa21 f004 	lsr.w	r0, r1, r4
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	f094 0f00 	teq	r4, #0
 80006c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006ca:	bf06      	itte	eq
 80006cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d0:	3401      	addeq	r4, #1
 80006d2:	3d01      	subne	r5, #1
 80006d4:	e74e      	b.n	8000574 <__adddf3+0x8c>
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf18      	it	ne
 80006dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e0:	d029      	beq.n	8000736 <__adddf3+0x24e>
 80006e2:	ea94 0f05 	teq	r4, r5
 80006e6:	bf08      	it	eq
 80006e8:	ea90 0f02 	teqeq	r0, r2
 80006ec:	d005      	beq.n	80006fa <__adddf3+0x212>
 80006ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80006f2:	bf04      	itt	eq
 80006f4:	4619      	moveq	r1, r3
 80006f6:	4610      	moveq	r0, r2
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	ea91 0f03 	teq	r1, r3
 80006fe:	bf1e      	ittt	ne
 8000700:	2100      	movne	r1, #0
 8000702:	2000      	movne	r0, #0
 8000704:	bd30      	popne	{r4, r5, pc}
 8000706:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800070a:	d105      	bne.n	8000718 <__adddf3+0x230>
 800070c:	0040      	lsls	r0, r0, #1
 800070e:	4149      	adcs	r1, r1
 8000710:	bf28      	it	cs
 8000712:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd30      	pop	{r4, r5, pc}
 8000718:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800071c:	bf3c      	itt	cc
 800071e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000722:	bd30      	popcc	{r4, r5, pc}
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000728:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd30      	pop	{r4, r5, pc}
 8000736:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800073a:	bf1a      	itte	ne
 800073c:	4619      	movne	r1, r3
 800073e:	4610      	movne	r0, r2
 8000740:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000744:	bf1c      	itt	ne
 8000746:	460b      	movne	r3, r1
 8000748:	4602      	movne	r2, r0
 800074a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800074e:	bf06      	itte	eq
 8000750:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000754:	ea91 0f03 	teqeq	r1, r3
 8000758:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	bf00      	nop

08000760 <__aeabi_ui2d>:
 8000760:	f090 0f00 	teq	r0, #0
 8000764:	bf04      	itt	eq
 8000766:	2100      	moveq	r1, #0
 8000768:	4770      	bxeq	lr
 800076a:	b530      	push	{r4, r5, lr}
 800076c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000770:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000774:	f04f 0500 	mov.w	r5, #0
 8000778:	f04f 0100 	mov.w	r1, #0
 800077c:	e750      	b.n	8000620 <__adddf3+0x138>
 800077e:	bf00      	nop

08000780 <__aeabi_i2d>:
 8000780:	f090 0f00 	teq	r0, #0
 8000784:	bf04      	itt	eq
 8000786:	2100      	moveq	r1, #0
 8000788:	4770      	bxeq	lr
 800078a:	b530      	push	{r4, r5, lr}
 800078c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000790:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000794:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000798:	bf48      	it	mi
 800079a:	4240      	negmi	r0, r0
 800079c:	f04f 0100 	mov.w	r1, #0
 80007a0:	e73e      	b.n	8000620 <__adddf3+0x138>
 80007a2:	bf00      	nop

080007a4 <__aeabi_f2d>:
 80007a4:	0042      	lsls	r2, r0, #1
 80007a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007b2:	bf1f      	itttt	ne
 80007b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c0:	4770      	bxne	lr
 80007c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007c6:	bf08      	it	eq
 80007c8:	4770      	bxeq	lr
 80007ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007ce:	bf04      	itt	eq
 80007d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007d4:	4770      	bxeq	lr
 80007d6:	b530      	push	{r4, r5, lr}
 80007d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	e71c      	b.n	8000620 <__adddf3+0x138>
 80007e6:	bf00      	nop

080007e8 <__aeabi_ul2d>:
 80007e8:	ea50 0201 	orrs.w	r2, r0, r1
 80007ec:	bf08      	it	eq
 80007ee:	4770      	bxeq	lr
 80007f0:	b530      	push	{r4, r5, lr}
 80007f2:	f04f 0500 	mov.w	r5, #0
 80007f6:	e00a      	b.n	800080e <__aeabi_l2d+0x16>

080007f8 <__aeabi_l2d>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	b530      	push	{r4, r5, lr}
 8000802:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000806:	d502      	bpl.n	800080e <__aeabi_l2d+0x16>
 8000808:	4240      	negs	r0, r0
 800080a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800080e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000812:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000816:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800081a:	f43f aed8 	beq.w	80005ce <__adddf3+0xe6>
 800081e:	f04f 0203 	mov.w	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000836:	f1c2 0320 	rsb	r3, r2, #32
 800083a:	fa00 fc03 	lsl.w	ip, r0, r3
 800083e:	fa20 f002 	lsr.w	r0, r0, r2
 8000842:	fa01 fe03 	lsl.w	lr, r1, r3
 8000846:	ea40 000e 	orr.w	r0, r0, lr
 800084a:	fa21 f102 	lsr.w	r1, r1, r2
 800084e:	4414      	add	r4, r2
 8000850:	e6bd      	b.n	80005ce <__adddf3+0xe6>
 8000852:	bf00      	nop

08000854 <__aeabi_d2f>:
 8000854:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000858:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800085c:	bf24      	itt	cs
 800085e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000862:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000866:	d90d      	bls.n	8000884 <__aeabi_d2f+0x30>
 8000868:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800086c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000870:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000874:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000878:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800087c:	bf08      	it	eq
 800087e:	f020 0001 	biceq.w	r0, r0, #1
 8000882:	4770      	bx	lr
 8000884:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000888:	d121      	bne.n	80008ce <__aeabi_d2f+0x7a>
 800088a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800088e:	bfbc      	itt	lt
 8000890:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000894:	4770      	bxlt	lr
 8000896:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800089a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800089e:	f1c2 0218 	rsb	r2, r2, #24
 80008a2:	f1c2 0c20 	rsb	ip, r2, #32
 80008a6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008aa:	fa20 f002 	lsr.w	r0, r0, r2
 80008ae:	bf18      	it	ne
 80008b0:	f040 0001 	orrne.w	r0, r0, #1
 80008b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c0:	ea40 000c 	orr.w	r0, r0, ip
 80008c4:	fa23 f302 	lsr.w	r3, r3, r2
 80008c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008cc:	e7cc      	b.n	8000868 <__aeabi_d2f+0x14>
 80008ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008d2:	d107      	bne.n	80008e4 <__aeabi_d2f+0x90>
 80008d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d8:	bf1e      	ittt	ne
 80008da:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008de:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008e2:	4770      	bxne	lr
 80008e4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008e8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008ec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <__aeabi_uldivmod>:
 80008f4:	b953      	cbnz	r3, 800090c <__aeabi_uldivmod+0x18>
 80008f6:	b94a      	cbnz	r2, 800090c <__aeabi_uldivmod+0x18>
 80008f8:	2900      	cmp	r1, #0
 80008fa:	bf08      	it	eq
 80008fc:	2800      	cmpeq	r0, #0
 80008fe:	bf1c      	itt	ne
 8000900:	f04f 31ff 	movne.w	r1, #4294967295
 8000904:	f04f 30ff 	movne.w	r0, #4294967295
 8000908:	f000 b9b0 	b.w	8000c6c <__aeabi_idiv0>
 800090c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000910:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000914:	f000 f806 	bl	8000924 <__udivmoddi4>
 8000918:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000920:	b004      	add	sp, #16
 8000922:	4770      	bx	lr

08000924 <__udivmoddi4>:
 8000924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000928:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800092a:	4688      	mov	r8, r1
 800092c:	4604      	mov	r4, r0
 800092e:	468e      	mov	lr, r1
 8000930:	2b00      	cmp	r3, #0
 8000932:	d14a      	bne.n	80009ca <__udivmoddi4+0xa6>
 8000934:	428a      	cmp	r2, r1
 8000936:	4617      	mov	r7, r2
 8000938:	d95f      	bls.n	80009fa <__udivmoddi4+0xd6>
 800093a:	fab2 f682 	clz	r6, r2
 800093e:	b14e      	cbz	r6, 8000954 <__udivmoddi4+0x30>
 8000940:	f1c6 0320 	rsb	r3, r6, #32
 8000944:	fa01 fe06 	lsl.w	lr, r1, r6
 8000948:	40b7      	lsls	r7, r6
 800094a:	40b4      	lsls	r4, r6
 800094c:	fa20 f303 	lsr.w	r3, r0, r3
 8000950:	ea43 0e0e 	orr.w	lr, r3, lr
 8000954:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000958:	fa1f fc87 	uxth.w	ip, r7
 800095c:	0c23      	lsrs	r3, r4, #16
 800095e:	fbbe f1f8 	udiv	r1, lr, r8
 8000962:	fb08 ee11 	mls	lr, r8, r1, lr
 8000966:	fb01 f20c 	mul.w	r2, r1, ip
 800096a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800096e:	429a      	cmp	r2, r3
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x5e>
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	f101 30ff 	add.w	r0, r1, #4294967295
 8000978:	d202      	bcs.n	8000980 <__udivmoddi4+0x5c>
 800097a:	429a      	cmp	r2, r3
 800097c:	f200 8154 	bhi.w	8000c28 <__udivmoddi4+0x304>
 8000980:	4601      	mov	r1, r0
 8000982:	1a9b      	subs	r3, r3, r2
 8000984:	b2a2      	uxth	r2, r4
 8000986:	fbb3 f0f8 	udiv	r0, r3, r8
 800098a:	fb08 3310 	mls	r3, r8, r0, r3
 800098e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000992:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000996:	4594      	cmp	ip, r2
 8000998:	d90b      	bls.n	80009b2 <__udivmoddi4+0x8e>
 800099a:	18ba      	adds	r2, r7, r2
 800099c:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a0:	bf2c      	ite	cs
 80009a2:	2401      	movcs	r4, #1
 80009a4:	2400      	movcc	r4, #0
 80009a6:	4594      	cmp	ip, r2
 80009a8:	d902      	bls.n	80009b0 <__udivmoddi4+0x8c>
 80009aa:	2c00      	cmp	r4, #0
 80009ac:	f000 813f 	beq.w	8000c2e <__udivmoddi4+0x30a>
 80009b0:	4618      	mov	r0, r3
 80009b2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009b6:	eba2 020c 	sub.w	r2, r2, ip
 80009ba:	2100      	movs	r1, #0
 80009bc:	b11d      	cbz	r5, 80009c6 <__udivmoddi4+0xa2>
 80009be:	40f2      	lsrs	r2, r6
 80009c0:	2300      	movs	r3, #0
 80009c2:	e9c5 2300 	strd	r2, r3, [r5]
 80009c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d905      	bls.n	80009da <__udivmoddi4+0xb6>
 80009ce:	b10d      	cbz	r5, 80009d4 <__udivmoddi4+0xb0>
 80009d0:	e9c5 0100 	strd	r0, r1, [r5]
 80009d4:	2100      	movs	r1, #0
 80009d6:	4608      	mov	r0, r1
 80009d8:	e7f5      	b.n	80009c6 <__udivmoddi4+0xa2>
 80009da:	fab3 f183 	clz	r1, r3
 80009de:	2900      	cmp	r1, #0
 80009e0:	d14e      	bne.n	8000a80 <__udivmoddi4+0x15c>
 80009e2:	4543      	cmp	r3, r8
 80009e4:	f0c0 8112 	bcc.w	8000c0c <__udivmoddi4+0x2e8>
 80009e8:	4282      	cmp	r2, r0
 80009ea:	f240 810f 	bls.w	8000c0c <__udivmoddi4+0x2e8>
 80009ee:	4608      	mov	r0, r1
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d0e8      	beq.n	80009c6 <__udivmoddi4+0xa2>
 80009f4:	e9c5 4e00 	strd	r4, lr, [r5]
 80009f8:	e7e5      	b.n	80009c6 <__udivmoddi4+0xa2>
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	f000 80ac 	beq.w	8000b58 <__udivmoddi4+0x234>
 8000a00:	fab2 f682 	clz	r6, r2
 8000a04:	2e00      	cmp	r6, #0
 8000a06:	f040 80bb 	bne.w	8000b80 <__udivmoddi4+0x25c>
 8000a0a:	1a8b      	subs	r3, r1, r2
 8000a0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000a10:	b2bc      	uxth	r4, r7
 8000a12:	2101      	movs	r1, #1
 8000a14:	0c02      	lsrs	r2, r0, #16
 8000a16:	b280      	uxth	r0, r0
 8000a18:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a20:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000a24:	fb04 f20c 	mul.w	r2, r4, ip
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d90e      	bls.n	8000a4a <__udivmoddi4+0x126>
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a32:	bf2c      	ite	cs
 8000a34:	f04f 0901 	movcs.w	r9, #1
 8000a38:	f04f 0900 	movcc.w	r9, #0
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d903      	bls.n	8000a48 <__udivmoddi4+0x124>
 8000a40:	f1b9 0f00 	cmp.w	r9, #0
 8000a44:	f000 80ec 	beq.w	8000c20 <__udivmoddi4+0x2fc>
 8000a48:	46c4      	mov	ip, r8
 8000a4a:	1a9b      	subs	r3, r3, r2
 8000a4c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a50:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a54:	fb04 f408 	mul.w	r4, r4, r8
 8000a58:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000a5c:	4294      	cmp	r4, r2
 8000a5e:	d90b      	bls.n	8000a78 <__udivmoddi4+0x154>
 8000a60:	18ba      	adds	r2, r7, r2
 8000a62:	f108 33ff 	add.w	r3, r8, #4294967295
 8000a66:	bf2c      	ite	cs
 8000a68:	2001      	movcs	r0, #1
 8000a6a:	2000      	movcc	r0, #0
 8000a6c:	4294      	cmp	r4, r2
 8000a6e:	d902      	bls.n	8000a76 <__udivmoddi4+0x152>
 8000a70:	2800      	cmp	r0, #0
 8000a72:	f000 80d1 	beq.w	8000c18 <__udivmoddi4+0x2f4>
 8000a76:	4698      	mov	r8, r3
 8000a78:	1b12      	subs	r2, r2, r4
 8000a7a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000a7e:	e79d      	b.n	80009bc <__udivmoddi4+0x98>
 8000a80:	f1c1 0620 	rsb	r6, r1, #32
 8000a84:	408b      	lsls	r3, r1
 8000a86:	fa08 f401 	lsl.w	r4, r8, r1
 8000a8a:	fa00 f901 	lsl.w	r9, r0, r1
 8000a8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a92:	fa28 f806 	lsr.w	r8, r8, r6
 8000a96:	408a      	lsls	r2, r1
 8000a98:	431f      	orrs	r7, r3
 8000a9a:	fa20 f306 	lsr.w	r3, r0, r6
 8000a9e:	0c38      	lsrs	r0, r7, #16
 8000aa0:	4323      	orrs	r3, r4
 8000aa2:	fa1f fc87 	uxth.w	ip, r7
 8000aa6:	0c1c      	lsrs	r4, r3, #16
 8000aa8:	fbb8 fef0 	udiv	lr, r8, r0
 8000aac:	fb00 881e 	mls	r8, r0, lr, r8
 8000ab0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ab4:	fb0e f80c 	mul.w	r8, lr, ip
 8000ab8:	45a0      	cmp	r8, r4
 8000aba:	d90e      	bls.n	8000ada <__udivmoddi4+0x1b6>
 8000abc:	193c      	adds	r4, r7, r4
 8000abe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ac2:	bf2c      	ite	cs
 8000ac4:	f04f 0b01 	movcs.w	fp, #1
 8000ac8:	f04f 0b00 	movcc.w	fp, #0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d903      	bls.n	8000ad8 <__udivmoddi4+0x1b4>
 8000ad0:	f1bb 0f00 	cmp.w	fp, #0
 8000ad4:	f000 80b8 	beq.w	8000c48 <__udivmoddi4+0x324>
 8000ad8:	46d6      	mov	lr, sl
 8000ada:	eba4 0408 	sub.w	r4, r4, r8
 8000ade:	fa1f f883 	uxth.w	r8, r3
 8000ae2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ae6:	fb00 4413 	mls	r4, r0, r3, r4
 8000aea:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aee:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000af2:	45a4      	cmp	ip, r4
 8000af4:	d90e      	bls.n	8000b14 <__udivmoddi4+0x1f0>
 8000af6:	193c      	adds	r4, r7, r4
 8000af8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000afc:	bf2c      	ite	cs
 8000afe:	f04f 0801 	movcs.w	r8, #1
 8000b02:	f04f 0800 	movcc.w	r8, #0
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	d903      	bls.n	8000b12 <__udivmoddi4+0x1ee>
 8000b0a:	f1b8 0f00 	cmp.w	r8, #0
 8000b0e:	f000 809f 	beq.w	8000c50 <__udivmoddi4+0x32c>
 8000b12:	4603      	mov	r3, r0
 8000b14:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b18:	eba4 040c 	sub.w	r4, r4, ip
 8000b1c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b20:	4564      	cmp	r4, ip
 8000b22:	4673      	mov	r3, lr
 8000b24:	46e0      	mov	r8, ip
 8000b26:	d302      	bcc.n	8000b2e <__udivmoddi4+0x20a>
 8000b28:	d107      	bne.n	8000b3a <__udivmoddi4+0x216>
 8000b2a:	45f1      	cmp	r9, lr
 8000b2c:	d205      	bcs.n	8000b3a <__udivmoddi4+0x216>
 8000b2e:	ebbe 0302 	subs.w	r3, lr, r2
 8000b32:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b36:	3801      	subs	r0, #1
 8000b38:	46e0      	mov	r8, ip
 8000b3a:	b15d      	cbz	r5, 8000b54 <__udivmoddi4+0x230>
 8000b3c:	ebb9 0203 	subs.w	r2, r9, r3
 8000b40:	eb64 0408 	sbc.w	r4, r4, r8
 8000b44:	fa04 f606 	lsl.w	r6, r4, r6
 8000b48:	fa22 f301 	lsr.w	r3, r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	431e      	orrs	r6, r3
 8000b50:	e9c5 6400 	strd	r6, r4, [r5]
 8000b54:	2100      	movs	r1, #0
 8000b56:	e736      	b.n	80009c6 <__udivmoddi4+0xa2>
 8000b58:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b5c:	0c01      	lsrs	r1, r0, #16
 8000b5e:	4614      	mov	r4, r2
 8000b60:	b280      	uxth	r0, r0
 8000b62:	4696      	mov	lr, r2
 8000b64:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000b68:	2620      	movs	r6, #32
 8000b6a:	4690      	mov	r8, r2
 8000b6c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000b70:	4610      	mov	r0, r2
 8000b72:	fbb1 f1f2 	udiv	r1, r1, r2
 8000b76:	eba3 0308 	sub.w	r3, r3, r8
 8000b7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b7e:	e74b      	b.n	8000a18 <__udivmoddi4+0xf4>
 8000b80:	40b7      	lsls	r7, r6
 8000b82:	f1c6 0320 	rsb	r3, r6, #32
 8000b86:	fa01 f206 	lsl.w	r2, r1, r6
 8000b8a:	fa21 f803 	lsr.w	r8, r1, r3
 8000b8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b92:	fa20 f303 	lsr.w	r3, r0, r3
 8000b96:	b2bc      	uxth	r4, r7
 8000b98:	40b0      	lsls	r0, r6
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	0c02      	lsrs	r2, r0, #16
 8000b9e:	0c19      	lsrs	r1, r3, #16
 8000ba0:	b280      	uxth	r0, r0
 8000ba2:	fbb8 f9fe 	udiv	r9, r8, lr
 8000ba6:	fb0e 8819 	mls	r8, lr, r9, r8
 8000baa:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000bae:	fb09 f804 	mul.w	r8, r9, r4
 8000bb2:	4588      	cmp	r8, r1
 8000bb4:	d951      	bls.n	8000c5a <__udivmoddi4+0x336>
 8000bb6:	1879      	adds	r1, r7, r1
 8000bb8:	f109 3cff 	add.w	ip, r9, #4294967295
 8000bbc:	bf2c      	ite	cs
 8000bbe:	f04f 0a01 	movcs.w	sl, #1
 8000bc2:	f04f 0a00 	movcc.w	sl, #0
 8000bc6:	4588      	cmp	r8, r1
 8000bc8:	d902      	bls.n	8000bd0 <__udivmoddi4+0x2ac>
 8000bca:	f1ba 0f00 	cmp.w	sl, #0
 8000bce:	d031      	beq.n	8000c34 <__udivmoddi4+0x310>
 8000bd0:	eba1 0108 	sub.w	r1, r1, r8
 8000bd4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd8:	fb09 f804 	mul.w	r8, r9, r4
 8000bdc:	fb0e 1119 	mls	r1, lr, r9, r1
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be6:	4543      	cmp	r3, r8
 8000be8:	d235      	bcs.n	8000c56 <__udivmoddi4+0x332>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f109 31ff 	add.w	r1, r9, #4294967295
 8000bf0:	bf2c      	ite	cs
 8000bf2:	f04f 0a01 	movcs.w	sl, #1
 8000bf6:	f04f 0a00 	movcc.w	sl, #0
 8000bfa:	4543      	cmp	r3, r8
 8000bfc:	d2bb      	bcs.n	8000b76 <__udivmoddi4+0x252>
 8000bfe:	f1ba 0f00 	cmp.w	sl, #0
 8000c02:	d1b8      	bne.n	8000b76 <__udivmoddi4+0x252>
 8000c04:	f1a9 0102 	sub.w	r1, r9, #2
 8000c08:	443b      	add	r3, r7
 8000c0a:	e7b4      	b.n	8000b76 <__udivmoddi4+0x252>
 8000c0c:	1a84      	subs	r4, r0, r2
 8000c0e:	eb68 0203 	sbc.w	r2, r8, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	4696      	mov	lr, r2
 8000c16:	e6eb      	b.n	80009f0 <__udivmoddi4+0xcc>
 8000c18:	443a      	add	r2, r7
 8000c1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c1e:	e72b      	b.n	8000a78 <__udivmoddi4+0x154>
 8000c20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c24:	443b      	add	r3, r7
 8000c26:	e710      	b.n	8000a4a <__udivmoddi4+0x126>
 8000c28:	3902      	subs	r1, #2
 8000c2a:	443b      	add	r3, r7
 8000c2c:	e6a9      	b.n	8000982 <__udivmoddi4+0x5e>
 8000c2e:	443a      	add	r2, r7
 8000c30:	3802      	subs	r0, #2
 8000c32:	e6be      	b.n	80009b2 <__udivmoddi4+0x8e>
 8000c34:	eba7 0808 	sub.w	r8, r7, r8
 8000c38:	f1a9 0c02 	sub.w	ip, r9, #2
 8000c3c:	4441      	add	r1, r8
 8000c3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c42:	fb09 f804 	mul.w	r8, r9, r4
 8000c46:	e7c9      	b.n	8000bdc <__udivmoddi4+0x2b8>
 8000c48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c4c:	443c      	add	r4, r7
 8000c4e:	e744      	b.n	8000ada <__udivmoddi4+0x1b6>
 8000c50:	3b02      	subs	r3, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	e75e      	b.n	8000b14 <__udivmoddi4+0x1f0>
 8000c56:	4649      	mov	r1, r9
 8000c58:	e78d      	b.n	8000b76 <__udivmoddi4+0x252>
 8000c5a:	eba1 0108 	sub.w	r1, r1, r8
 8000c5e:	46cc      	mov	ip, r9
 8000c60:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c64:	fb09 f804 	mul.w	r8, r9, r4
 8000c68:	e7b8      	b.n	8000bdc <__udivmoddi4+0x2b8>
 8000c6a:	bf00      	nop

08000c6c <__aeabi_idiv0>:
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af02      	add	r7, sp, #8
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000c7c:	2334      	movs	r3, #52	@ 0x34
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c84:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb4 <tx_application_define+0x44>)
 8000c86:	490c      	ldr	r1, [pc, #48]	@ (8000cb8 <tx_application_define+0x48>)
 8000c88:	480c      	ldr	r0, [pc, #48]	@ (8000cbc <tx_application_define+0x4c>)
 8000c8a:	f012 fc25 	bl	80134d8 <_txe_byte_pool_create>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10a      	bne.n	8000caa <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <tx_application_define+0x4c>)
 8000c96:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000c98:	68b8      	ldr	r0, [r7, #8]
 8000c9a:	f000 f85b 	bl	8000d54 <App_ThreadX_Init>
 8000c9e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000ca6:	bf00      	nop
 8000ca8:	e7fd      	b.n	8000ca6 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200001ec 	.word	0x200001ec
 8000cb8:	08014958 	.word	0x08014958
 8000cbc:	200029ec 	.word	0x200029ec

08000cc0 <NAU_getReading>:
  return (revisionCode & 0x0F);
}

// Returns 24-bit reading
// Assumes CR Cycle Ready bit (ADC conversion complete) has been checked to be 1
int32_t NAU_getReading() {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  if (Initialized)
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <NAU_getReading+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d004      	beq.n	8000cd6 <NAU_getReading+0x16>
    return NAU_get24BitRegister(NAU7802_ADCO_B2);
 8000ccc:	2012      	movs	r0, #18
 8000cce:	f000 f809 	bl	8000ce4 <NAU_get24BitRegister>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	e001      	b.n	8000cda <NAU_getReading+0x1a>
  return -1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20002a24 	.word	0x20002a24

08000ce4 <NAU_get24BitRegister>:
    return false; // Error
  return true;
}

// Get contents of a 24-bit signed register (conversion result and offsets)
int32_t NAU_get24BitRegister(uint8_t registerAddress) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af04      	add	r7, sp, #16
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  uint8_t data[3];
  if (HAL_I2C_Mem_Read(NAU_hi2c, NAU_deviceAddress << 1, registerAddress, I2C_MEMADD_SIZE_8BIT, data, 3, 1000) !=
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <NAU_get24BitRegister+0x6c>)
 8000cf0:	6818      	ldr	r0, [r3, #0]
 8000cf2:	232a      	movs	r3, #42	@ 0x2a
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	b299      	uxth	r1, r3
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d00:	9302      	str	r3, [sp, #8]
 8000d02:	2303      	movs	r3, #3
 8000d04:	9301      	str	r3, [sp, #4]
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	f006 f8a9 	bl	8006e64 <HAL_I2C_Mem_Read>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <NAU_get24BitRegister+0x38>
      HAL_OK)
    return 0; // Error
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e015      	b.n	8000d48 <NAU_get24BitRegister+0x64>
  union {
    uint32_t unsigned32;
    int32_t signed32;
  } signedUnsigned32; // Avoid ambiguity

  signedUnsigned32.unsigned32 = (uint32_t)data[0] << 16; // MSB
 8000d1c:	7b3b      	ldrb	r3, [r7, #12]
 8000d1e:	041b      	lsls	r3, r3, #16
 8000d20:	60bb      	str	r3, [r7, #8]
  signedUnsigned32.unsigned32 |= (uint32_t)data[1] << 8; // MidSB
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	7b7b      	ldrb	r3, [r7, #13]
 8000d26:	021b      	lsls	r3, r3, #8
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  signedUnsigned32.unsigned32 |= (uint32_t)data[2];      // LSB
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	7bba      	ldrb	r2, [r7, #14]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]

  if ((signedUnsigned32.unsigned32 & 0x00800000) == 0x00800000)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <NAU_get24BitRegister+0x62>
    signedUnsigned32.unsigned32 |= 0xFF000000; // Preserve 2's complement
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000d44:	60bb      	str	r3, [r7, #8]

  return signedUnsigned32.signed32;
 8000d46:	68bb      	ldr	r3, [r7, #8]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20002a20 	.word	0x20002a20

08000d54 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	@ 0x30
 8000d58:	af08      	add	r7, sp, #32
 8000d5a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */

  tx_trace_enable(&trace_buf, TRACE_BUF_SIZE, 30);
 8000d60:	221e      	movs	r2, #30
 8000d62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d66:	483d      	ldr	r0, [pc, #244]	@ (8000e5c <App_ThreadX_Init+0x108>)
 8000d68:	f011 ff6c 	bl	8012c44 <_tx_trace_enable>

  /* Create ThreadOne.  */
  ret = tx_thread_create(&QuickShifter_handler, "QuickShifter", QuickShifter_entry, 0x1234, QuickShifter_stack,
 8000d6c:	23b0      	movs	r3, #176	@ 0xb0
 8000d6e:	9306      	str	r3, [sp, #24]
 8000d70:	2301      	movs	r3, #1
 8000d72:	9305      	str	r3, [sp, #20]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9304      	str	r3, [sp, #16]
 8000d78:	2307      	movs	r3, #7
 8000d7a:	9303      	str	r3, [sp, #12]
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	9302      	str	r3, [sp, #8]
 8000d80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	4b36      	ldr	r3, [pc, #216]	@ (8000e60 <App_ThreadX_Init+0x10c>)
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	f241 2334 	movw	r3, #4660	@ 0x1234
 8000d8e:	4a35      	ldr	r2, [pc, #212]	@ (8000e64 <App_ThreadX_Init+0x110>)
 8000d90:	4935      	ldr	r1, [pc, #212]	@ (8000e68 <App_ThreadX_Init+0x114>)
 8000d92:	4836      	ldr	r0, [pc, #216]	@ (8000e6c <App_ThreadX_Init+0x118>)
 8000d94:	f012 fc40 	bl	8013618 <_txe_thread_create>
 8000d98:	60f8      	str	r0, [r7, #12]
                         THREAD_STACK_SIZE, 7, 7, 1, TX_AUTO_START);
  ret = tx_thread_create(&DriveByWire_handler, "DriveByWire", DriveByWire_entry, 0x1234, DriveByWire_stack,
 8000d9a:	23b0      	movs	r3, #176	@ 0xb0
 8000d9c:	9306      	str	r3, [sp, #24]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	9305      	str	r3, [sp, #20]
 8000da2:	2301      	movs	r3, #1
 8000da4:	9304      	str	r3, [sp, #16]
 8000da6:	2307      	movs	r3, #7
 8000da8:	9303      	str	r3, [sp, #12]
 8000daa:	2307      	movs	r3, #7
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	4b2e      	ldr	r3, [pc, #184]	@ (8000e70 <App_ThreadX_Init+0x11c>)
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	f241 2334 	movw	r3, #4660	@ 0x1234
 8000dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8000e74 <App_ThreadX_Init+0x120>)
 8000dbe:	492e      	ldr	r1, [pc, #184]	@ (8000e78 <App_ThreadX_Init+0x124>)
 8000dc0:	482e      	ldr	r0, [pc, #184]	@ (8000e7c <App_ThreadX_Init+0x128>)
 8000dc2:	f012 fc29 	bl	8013618 <_txe_thread_create>
 8000dc6:	60f8      	str	r0, [r7, #12]
                         THREAD_STACK_SIZE, 7, 7, 1, TX_DONT_START);
  ret = tx_thread_create(&Gps_handler, "Gps", Gps_entry, 0x1234, Gps_stack, THREAD_STACK_SIZE, 9, 9, 1, TX_DONT_START);
 8000dc8:	23b0      	movs	r3, #176	@ 0xb0
 8000dca:	9306      	str	r3, [sp, #24]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9305      	str	r3, [sp, #20]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	9304      	str	r3, [sp, #16]
 8000dd4:	2309      	movs	r3, #9
 8000dd6:	9303      	str	r3, [sp, #12]
 8000dd8:	2309      	movs	r3, #9
 8000dda:	9302      	str	r3, [sp, #8]
 8000ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de0:	9301      	str	r3, [sp, #4]
 8000de2:	4b27      	ldr	r3, [pc, #156]	@ (8000e80 <App_ThreadX_Init+0x12c>)
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	f241 2334 	movw	r3, #4660	@ 0x1234
 8000dea:	4a26      	ldr	r2, [pc, #152]	@ (8000e84 <App_ThreadX_Init+0x130>)
 8000dec:	4926      	ldr	r1, [pc, #152]	@ (8000e88 <App_ThreadX_Init+0x134>)
 8000dee:	4827      	ldr	r0, [pc, #156]	@ (8000e8c <App_ThreadX_Init+0x138>)
 8000df0:	f012 fc12 	bl	8013618 <_txe_thread_create>
 8000df4:	60f8      	str	r0, [r7, #12]
  ret = tx_thread_create(&DisplayUpdate_handler, "DisplayUpdate", DisplayUpdate_entry, 0x1234, DisplayUpdate_stack,
 8000df6:	23b0      	movs	r3, #176	@ 0xb0
 8000df8:	9306      	str	r3, [sp, #24]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9305      	str	r3, [sp, #20]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	9304      	str	r3, [sp, #16]
 8000e02:	2308      	movs	r3, #8
 8000e04:	9303      	str	r3, [sp, #12]
 8000e06:	2308      	movs	r3, #8
 8000e08:	9302      	str	r3, [sp, #8]
 8000e0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e0e:	9301      	str	r3, [sp, #4]
 8000e10:	4b1f      	ldr	r3, [pc, #124]	@ (8000e90 <App_ThreadX_Init+0x13c>)
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	f241 2334 	movw	r3, #4660	@ 0x1234
 8000e18:	4a1e      	ldr	r2, [pc, #120]	@ (8000e94 <App_ThreadX_Init+0x140>)
 8000e1a:	491f      	ldr	r1, [pc, #124]	@ (8000e98 <App_ThreadX_Init+0x144>)
 8000e1c:	481f      	ldr	r0, [pc, #124]	@ (8000e9c <App_ThreadX_Init+0x148>)
 8000e1e:	f012 fbfb 	bl	8013618 <_txe_thread_create>
 8000e22:	60f8      	str	r0, [r7, #12]
                         THREAD_STACK_SIZE, 8, 8, 1, TX_AUTO_START);
  ret = tx_thread_create(&SteeringLeds_handler, "SteeringLeds", SteeringLeds_entry, 0x1234, SteeringLeds_stack,
 8000e24:	23b0      	movs	r3, #176	@ 0xb0
 8000e26:	9306      	str	r3, [sp, #24]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	9305      	str	r3, [sp, #20]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	9304      	str	r3, [sp, #16]
 8000e30:	2309      	movs	r3, #9
 8000e32:	9303      	str	r3, [sp, #12]
 8000e34:	2309      	movs	r3, #9
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e3c:	9301      	str	r3, [sp, #4]
 8000e3e:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <App_ThreadX_Init+0x14c>)
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	f241 2334 	movw	r3, #4660	@ 0x1234
 8000e46:	4a17      	ldr	r2, [pc, #92]	@ (8000ea4 <App_ThreadX_Init+0x150>)
 8000e48:	4917      	ldr	r1, [pc, #92]	@ (8000ea8 <App_ThreadX_Init+0x154>)
 8000e4a:	4818      	ldr	r0, [pc, #96]	@ (8000eac <App_ThreadX_Init+0x158>)
 8000e4c:	f012 fbe4 	bl	8013618 <_txe_thread_create>
 8000e50:	60f8      	str	r0, [r7, #12]
                         THREAD_STACK_SIZE, 9, 9, 1, TX_AUTO_START);
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20004198 	.word	0x20004198
 8000e60:	20002a28 	.word	0x20002a28
 8000e64:	08000efd 	.word	0x08000efd
 8000e68:	0801496c 	.word	0x0801496c
 8000e6c:	20003e28 	.word	0x20003e28
 8000e70:	20003228 	.word	0x20003228
 8000e74:	08000f31 	.word	0x08000f31
 8000e78:	0801497c 	.word	0x0801497c
 8000e7c:	20003f88 	.word	0x20003f88
 8000e80:	20003628 	.word	0x20003628
 8000e84:	08000f8d 	.word	0x08000f8d
 8000e88:	08014988 	.word	0x08014988
 8000e8c:	20004038 	.word	0x20004038
 8000e90:	20003a28 	.word	0x20003a28
 8000e94:	08000f9d 	.word	0x08000f9d
 8000e98:	0801498c 	.word	0x0801498c
 8000e9c:	200040e8 	.word	0x200040e8
 8000ea0:	20002e28 	.word	0x20002e28
 8000ea4:	08000f0d 	.word	0x08000f0d
 8000ea8:	0801499c 	.word	0x0801499c
 8000eac:	20003ed8 	.word	0x20003ed8

08000eb0 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Before_Kernel_Start */
  HAL_TIM_Base_Start_IT(&htim4);
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_ThreadX_Init+0x1c>)
 8000eb6:	f00c fcc5 	bl	800d844 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buf, ADC_BUF_LEN);
 8000eba:	2296      	movs	r2, #150	@ 0x96
 8000ebc:	4904      	ldr	r1, [pc, #16]	@ (8000ed0 <MX_ThreadX_Init+0x20>)
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <MX_ThreadX_Init+0x24>)
 8000ec0:	f003 fb36 	bl	8004530 <HAL_ADC_Start_DMA>

  /* USER CODE END Before_Kernel_Start */

  tx_kernel_enter();
 8000ec4:	f010 fb5e 	bl	8011584 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN Kernel_Start_Error */

  /* USER CODE END Kernel_Start_Error */
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20005edc 	.word	0x20005edc
 8000ed0:	2000652c 	.word	0x2000652c
 8000ed4:	20005d10 	.word	0x20005d10

08000ed8 <dbw_update_sensors>:
  tx_thread_sleep(MS_TO_TICKS(3));
  shifter.position = shifter_getPosition(instShifter);
  loadCell.val = loadCell_getVal(instLoadCell);
}

void dbw_update_sensors() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  throttle.position = throttleGetPosition();
 8000edc:	f000 f93a 	bl	8001154 <throttleGetPosition>
 8000ee0:	eef0 7a40 	vmov.f32	s15, s0
 8000ee4:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <dbw_update_sensors+0x20>)
 8000ee6:	ee17 2a90 	vmov	r2, s15
 8000eea:	605a      	str	r2, [r3, #4]
  tx_thread_sleep(MS_TO_TICKS(4));
 8000eec:	2004      	movs	r0, #4
 8000eee:	f010 fd7f 	bl	80119f0 <_tx_thread_sleep>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20005204 	.word	0x20005204

08000efc <QuickShifter_entry>:

/////////////// TASKS ////////////////

VOID QuickShifter_entry(ULONG intial_input) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	@ 0x50
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
#define ignitionCutTime MS_TO_TICKS(100)
  while (1) {
    tx_thread_sleep(MS_TO_TICKS(100));
 8000f04:	2064      	movs	r0, #100	@ 0x64
 8000f06:	f010 fd73 	bl	80119f0 <_tx_thread_sleep>
 8000f0a:	e7fb      	b.n	8000f04 <QuickShifter_entry+0x8>

08000f0c <SteeringLeds_entry>:
    qs_update_sensors(&shifterFilter);
    */
  //}
}

VOID SteeringLeds_entry(ULONG intial_input) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  led_init();
 8000f14:	f001 fa20 	bl	8002358 <led_init>

  tx_thread_sleep(MS_TO_TICKS(100));
 8000f18:	2064      	movs	r0, #100	@ 0x64
 8000f1a:	f010 fd69 	bl	80119f0 <_tx_thread_sleep>
  led_startup_animation();
 8000f1e:	f001 fcd7 	bl	80028d0 <led_startup_animation>

  while (1) {
    led_update();
 8000f22:	f001 fd73 	bl	8002a0c <led_update>
    tx_thread_sleep(MS_TO_TICKS(16));
 8000f26:	2010      	movs	r0, #16
 8000f28:	f010 fd62 	bl	80119f0 <_tx_thread_sleep>
    led_update();
 8000f2c:	bf00      	nop
 8000f2e:	e7f8      	b.n	8000f22 <SteeringLeds_entry+0x16>

08000f30 <DriveByWire_entry>:
  }
}

VOID DriveByWire_entry(ULONG intial_input) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  initThrottle();
 8000f38:	f000 f898 	bl	800106c <initThrottle>

  tx_thread_sleep(MS_TO_TICKS(250));
 8000f3c:	20fa      	movs	r0, #250	@ 0xfa
 8000f3e:	f010 fd57 	bl	80119f0 <_tx_thread_sleep>

  throttleCalibrate();
 8000f42:	f000 f939 	bl	80011b8 <throttleCalibrate>

  tx_thread_suspend(&SteeringLeds_handler);
 8000f46:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <DriveByWire_entry+0x48>)
 8000f48:	f012 fc58 	bl	80137fc <_txe_thread_suspend>
  tx_thread_suspend(&Gps_handler);
 8000f4c:	480b      	ldr	r0, [pc, #44]	@ (8000f7c <DriveByWire_entry+0x4c>)
 8000f4e:	f012 fc55 	bl	80137fc <_txe_thread_suspend>
  tx_thread_suspend(&DisplayUpdate_handler);
 8000f52:	480b      	ldr	r0, [pc, #44]	@ (8000f80 <DriveByWire_entry+0x50>)
 8000f54:	f012 fc52 	bl	80137fc <_txe_thread_suspend>

  stepperCalibrate();
 8000f58:	f000 fa04 	bl	8001364 <stepperCalibrate>
  stim_start(&throttleTimer);
 8000f5c:	4809      	ldr	r0, [pc, #36]	@ (8000f84 <DriveByWire_entry+0x54>)
 8000f5e:	f001 f9bf 	bl	80022e0 <stim_start>

  while (1) {
    // throttleTryRecalibrate();
    throttleBodySetPosition(throttle.position);
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <DriveByWire_entry+0x58>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	ee00 3a10 	vmov	s0, r3
 8000f6a:	f000 f9e5 	bl	8001338 <throttleBodySetPosition>
    dbw_update_sensors();
 8000f6e:	f7ff ffb3 	bl	8000ed8 <dbw_update_sensors>
    throttleBodySetPosition(throttle.position);
 8000f72:	bf00      	nop
 8000f74:	e7f5      	b.n	8000f62 <DriveByWire_entry+0x32>
 8000f76:	bf00      	nop
 8000f78:	20003ed8 	.word	0x20003ed8
 8000f7c:	20004038 	.word	0x20004038
 8000f80:	200040e8 	.word	0x200040e8
 8000f84:	20005198 	.word	0x20005198
 8000f88:	20005204 	.word	0x20005204

08000f8c <Gps_entry>:
  }
}

VOID Gps_entry(ULONG intial_input) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  // vTaskDelay(tickDelay100);
  // HAL_UARTEx_ReceiveToIdle_DMA(&huart3, gpsBuf, 1000);

  while (1) {
    // GNSS_GetPVTData(&GNSS_Handle);
    tx_thread_sleep(MS_TO_TICKS(100));
 8000f94:	2064      	movs	r0, #100	@ 0x64
 8000f96:	f010 fd2b 	bl	80119f0 <_tx_thread_sleep>
 8000f9a:	e7fb      	b.n	8000f94 <Gps_entry+0x8>

08000f9c <DisplayUpdate_entry>:
    // latitude = GNSS_Handle.fLat;  // Latitude in decimal degrees
    // longitude = GNSS_Handle.fLon; // Longitude in decimal degrees
  }
}

VOID DisplayUpdate_entry(ULONG intial_input) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  // HAL_UARTEx_ReceiveToIdle_DMA(&huart4, (uint8_t *)displayBuf, 10);

  while (1) {
    updateDisplay();
 8000fa4:	f000 f806 	bl	8000fb4 <updateDisplay>
    tx_thread_sleep(MS_TO_TICKS(15));
 8000fa8:	200f      	movs	r0, #15
 8000faa:	f010 fd21 	bl	80119f0 <_tx_thread_sleep>
    updateDisplay();
 8000fae:	bf00      	nop
 8000fb0:	e7f8      	b.n	8000fa4 <DisplayUpdate_entry+0x8>
	...

08000fb4 <updateDisplay>:
#include <stdint.h>
#include <string.h>

DisplayData displayData;

void updateDisplay() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  // Quick Shifter //
  displayData.QsState = QsState;
 8000fb8:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <updateDisplay+0x8c>)
 8000fba:	781a      	ldrb	r2, [r3, #0]
 8000fbc:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <updateDisplay+0x90>)
 8000fbe:	701a      	strb	r2, [r3, #0]
  displayData.gear = gear;
 8000fc0:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <updateDisplay+0x90>)
 8000fc2:	4a21      	ldr	r2, [pc, #132]	@ (8001048 <updateDisplay+0x94>)
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	8812      	ldrh	r2, [r2, #0]
 8000fc8:	801a      	strh	r2, [r3, #0]

  displayData.shifter_calibratedPosition = shifter.calibratedPosition;
 8000fca:	4b20      	ldr	r3, [pc, #128]	@ (800104c <updateDisplay+0x98>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4a1d      	ldr	r2, [pc, #116]	@ (8001044 <updateDisplay+0x90>)
 8000fd0:	f8c2 3007 	str.w	r3, [r2, #7]
  displayData.shifter_position = shifter.position;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <updateDisplay+0x98>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001044 <updateDisplay+0x90>)
 8000fda:	f8c2 3003 	str.w	r3, [r2, #3]

  displayData.gearShiftFail = gearShiftFail;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <updateDisplay+0x9c>)
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <updateDisplay+0x90>)
 8000fe4:	72da      	strb	r2, [r3, #11]
  displayData.loadCell = loadCell.val;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <updateDisplay+0xa0>)
 8000fe8:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8000fec:	4a15      	ldr	r2, [pc, #84]	@ (8001044 <updateDisplay+0x90>)
 8000fee:	60d3      	str	r3, [r2, #12]

  // Drive by wire //
  displayData.throttle = throttle;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <updateDisplay+0x90>)
 8000ff2:	4a19      	ldr	r2, [pc, #100]	@ (8001058 <updateDisplay+0xa4>)
 8000ff4:	3310      	adds	r3, #16
 8000ff6:	6810      	ldr	r0, [r2, #0]
 8000ff8:	6851      	ldr	r1, [r2, #4]
 8000ffa:	c303      	stmia	r3!, {r0, r1}
  displayData.tps = Tps;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	@ (800105c <updateDisplay+0xa8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a10      	ldr	r2, [pc, #64]	@ (8001044 <updateDisplay+0x90>)
 8001002:	6193      	str	r3, [r2, #24]

  // Speeduino //
  ecu_data_update();
 8001004:	f000 f9ce 	bl	80013a4 <ecu_data_update>
  displayData.speeduino_data = ecu;
 8001008:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <updateDisplay+0x90>)
 800100a:	4a15      	ldr	r2, [pc, #84]	@ (8001060 <updateDisplay+0xac>)
 800100c:	331c      	adds	r3, #28
 800100e:	6810      	ldr	r0, [r2, #0]
 8001010:	6851      	ldr	r1, [r2, #4]
 8001012:	6892      	ldr	r2, [r2, #8]
 8001014:	c307      	stmia	r3!, {r0, r1, r2}

  // Errors //
  displayData.err_msg_len = error_catch(displayData.err_msg);
 8001016:	4813      	ldr	r0, [pc, #76]	@ (8001064 <updateDisplay+0xb0>)
 8001018:	f000 fa50 	bl	80014bc <error_catch>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <updateDisplay+0x90>)
 8001022:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&displayData,
                        (sizeof(displayData) - MSG_MAX_LEN + displayData.err_msg_len));
 8001026:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <updateDisplay+0x90>)
 8001028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&displayData,
 800102c:	3329      	adds	r3, #41	@ 0x29
 800102e:	b29b      	uxth	r3, r3
 8001030:	461a      	mov	r2, r3
 8001032:	4904      	ldr	r1, [pc, #16]	@ (8001044 <updateDisplay+0x90>)
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <updateDisplay+0xb4>)
 8001036:	f00e fd0d 	bl	800fa54 <HAL_UART_Transmit_DMA>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000665d 	.word	0x2000665d
 8001044:	2000519c 	.word	0x2000519c
 8001048:	2000666c 	.word	0x2000666c
 800104c:	20006660 	.word	0x20006660
 8001050:	2000665e 	.word	0x2000665e
 8001054:	20006670 	.word	0x20006670
 8001058:	20005204 	.word	0x20005204
 800105c:	20005210 	.word	0x20005210
 8001060:	20005854 	.word	0x20005854
 8001064:	200051c5 	.word	0x200051c5
 8001068:	20006144 	.word	0x20006144

0800106c <initThrottle>:

uint16_t stepperPosition = 0;
float Tps = 0.0f;
uint32_t stepPwmData[400];

void initThrottle() {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
  throttle.rawPosition = 0;
 8001072:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <initThrottle+0x58>)
 8001074:	2200      	movs	r2, #0
 8001076:	801a      	strh	r2, [r3, #0]
  throttle.position = 0.0f;
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <initThrottle+0x58>)
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  throttle.calibratedPosition = 0;
 8001080:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <initThrottle+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	805a      	strh	r2, [r3, #2]

  for (uint16_t i = 0; i < TOTAL_STEP_COUNT; i++) {
 8001086:	2300      	movs	r3, #0
 8001088:	80fb      	strh	r3, [r7, #6]
 800108a:	e007      	b.n	800109c <initThrottle+0x30>
    stepPwmData[i] = 50;
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	4a0e      	ldr	r2, [pc, #56]	@ (80010c8 <initThrottle+0x5c>)
 8001090:	2132      	movs	r1, #50	@ 0x32
 8001092:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (uint16_t i = 0; i < TOTAL_STEP_COUNT; i++) {
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	3301      	adds	r3, #1
 800109a:	80fb      	strh	r3, [r7, #6]
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80010cc <initThrottle+0x60>
 80010aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d4eb      	bmi.n	800108c <initThrottle+0x20>
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20005204 	.word	0x20005204
 80010c8:	20005214 	.word	0x20005214
 80010cc:	43a238e4 	.word	0x43a238e4

080010d0 <throttleNormalizePosition>:

// Throttle pedal //

float throttleNormalizePosition(uint16_t adcAverage) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
  if (adcAverage < throttle.calibratedPosition) {
 80010da:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <throttleNormalizePosition+0x7c>)
 80010dc:	885b      	ldrh	r3, [r3, #2]
 80010de:	88fa      	ldrh	r2, [r7, #6]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d203      	bcs.n	80010ec <throttleNormalizePosition+0x1c>
    adcAverage = throttle.calibratedPosition;
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <throttleNormalizePosition+0x7c>)
 80010e6:	885b      	ldrh	r3, [r3, #2]
 80010e8:	80fb      	strh	r3, [r7, #6]
 80010ea:	e012      	b.n	8001112 <throttleNormalizePosition+0x42>
  } else if (adcAverage > THROTTLE_PEDAL_MAX) {
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001150 <throttleNormalizePosition+0x80>
 80010fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	dd06      	ble.n	8001112 <throttleNormalizePosition+0x42>
    adcAverage = THROTTLE_PEDAL_MAX;
 8001104:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8001150 <throttleNormalizePosition+0x80>
 8001108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110c:	ee17 3a90 	vmov	r3, s15
 8001110:	80fb      	strh	r3, [r7, #6]
  }

  return (adcAverage - throttle.calibratedPosition) / (THROTTLE_PEDAL_MAX - throttle.calibratedPosition);
 8001112:	88fb      	ldrh	r3, [r7, #6]
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <throttleNormalizePosition+0x7c>)
 8001116:	8852      	ldrh	r2, [r2, #2]
 8001118:	1a9b      	subs	r3, r3, r2
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001122:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001150 <throttleNormalizePosition+0x80>
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <throttleNormalizePosition+0x7c>)
 8001128:	885b      	ldrh	r3, [r3, #2]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001136:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800113a:	eef0 7a66 	vmov.f32	s15, s13
}
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	20005204 	.word	0x20005204
 8001150:	456d8000 	.word	0x456d8000

08001154 <throttleGetPosition>:

float throttleGetPosition() {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  uint32_t adcAverage = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]

  // Step by 3 to get indices 0, 3, 6, etc.
  for (uint16_t i = 0; i < ADC_BUF_LEN; i += 3) {
 800115e:	2300      	movs	r3, #0
 8001160:	807b      	strh	r3, [r7, #2]
 8001162:	e00a      	b.n	800117a <throttleGetPosition+0x26>
    adcAverage += adc_buf[i];
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	4a11      	ldr	r2, [pc, #68]	@ (80011ac <throttleGetPosition+0x58>)
 8001168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800116c:	461a      	mov	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	607b      	str	r3, [r7, #4]
  for (uint16_t i = 0; i < ADC_BUF_LEN; i += 3) {
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	3303      	adds	r3, #3
 8001178:	807b      	strh	r3, [r7, #2]
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	2b95      	cmp	r3, #149	@ 0x95
 800117e:	d9f1      	bls.n	8001164 <throttleGetPosition+0x10>
  }

  adcAverage /= (ADC_BUF_LEN / 3);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <throttleGetPosition+0x5c>)
 8001184:	fba2 2303 	umull	r2, r3, r2, r3
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	607b      	str	r3, [r7, #4]

  throttle.rawPosition = adcAverage; // debug
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <throttleGetPosition+0x60>)
 8001192:	801a      	strh	r2, [r3, #0]
  return throttleNormalizePosition((uint16_t)adcAverage);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	b29b      	uxth	r3, r3
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff99 	bl	80010d0 <throttleNormalizePosition>
 800119e:	eef0 7a40 	vmov.f32	s15, s0
}
 80011a2:	eeb0 0a67 	vmov.f32	s0, s15
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000652c 	.word	0x2000652c
 80011b0:	51eb851f 	.word	0x51eb851f
 80011b4:	20005204 	.word	0x20005204

080011b8 <throttleCalibrate>:

void throttleCalibrate() {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  throttle.position = throttleGetPosition();
 80011bc:	f7ff ffca 	bl	8001154 <throttleGetPosition>
 80011c0:	eef0 7a40 	vmov.f32	s15, s0
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <throttleCalibrate+0x38>)
 80011c6:	edc3 7a01 	vstr	s15, [r3, #4]
  throttle.calibratedPosition = throttle.rawPosition + THROTTLE_PEDAL_DEADZONE;
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <throttleCalibrate+0x38>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80011da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e2:	ee17 3a90 	vmov	r3, s15
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b01      	ldr	r3, [pc, #4]	@ (80011f0 <throttleCalibrate+0x38>)
 80011ea:	805a      	strh	r2, [r3, #2]
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20005204 	.word	0x20005204

080011f4 <absf>:
    ;
}

// get absolute value //

float absf(float value) {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	ed87 0a01 	vstr	s0, [r7, #4]
  if (value < 0) {
 80011fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001202:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120a:	d505      	bpl.n	8001218 <absf+0x24>
    value = value * -1;
 800120c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001210:	eef1 7a67 	vneg.f32	s15, s15
 8001214:	edc7 7a01 	vstr	s15, [r7, #4]
  }
  return value;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	ee07 3a90 	vmov	s15, r3
}
 800121e:	eeb0 0a67 	vmov.f32	s0, s15
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <stepperSetDirection>:

// Stepper //

void stepperSetDirection(RotationDirection dir) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(StepperDir_GPIO_Port, StepperDir_Pin, (uint8_t)dir);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	461a      	mov	r2, r3
 800123a:	2104      	movs	r1, #4
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <stepperSetDirection+0x20>)
 800123e:	f005 fd5d 	bl	8006cfc <HAL_GPIO_WritePin>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	42020400 	.word	0x42020400

08001250 <stepperRotateToStep>:

void stepperRotateToStep(float newPos) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	ed87 0a01 	vstr	s0, [r7, #4]
  float stepsDelta = roundf(newPos - stepperPosition);
 800125a:	4b2b      	ldr	r3, [pc, #172]	@ (8001308 <stepperRotateToStep+0xb8>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001266:	ed97 7a01 	vldr	s14, [r7, #4]
 800126a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126e:	eeb0 0a67 	vmov.f32	s0, s15
 8001272:	f012 fffb 	bl	801426c <roundf>
 8001276:	ed87 0a04 	vstr	s0, [r7, #16]
  uint16_t stepCount = absf(stepsDelta);
 800127a:	ed97 0a04 	vldr	s0, [r7, #16]
 800127e:	f7ff ffb9 	bl	80011f4 <absf>
 8001282:	eef0 7a40 	vmov.f32	s15, s0
 8001286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800128a:	ee17 3a90 	vmov	r3, s15
 800128e:	81fb      	strh	r3, [r7, #14]

  if (stepCount != 0) {
 8001290:	89fb      	ldrh	r3, [r7, #14]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d034      	beq.n	8001300 <stepperRotateToStep+0xb0>
    RotationDirection direction;
    if (stepsDelta > 0) {
 8001296:	edd7 7a04 	vldr	s15, [r7, #16]
 800129a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	dd02      	ble.n	80012aa <stepperRotateToStep+0x5a>
      direction = CCW;
 80012a4:	2301      	movs	r3, #1
 80012a6:	75fb      	strb	r3, [r7, #23]
 80012a8:	e001      	b.n	80012ae <stepperRotateToStep+0x5e>
    } else {
      direction = CW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	75fb      	strb	r3, [r7, #23]
    }
    stepperSetDirection(direction);
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ffbb 	bl	800122c <stepperSetDirection>

    HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)stepPwmData, stepCount);
 80012b6:	89fb      	ldrh	r3, [r7, #14]
 80012b8:	4a14      	ldr	r2, [pc, #80]	@ (800130c <stepperRotateToStep+0xbc>)
 80012ba:	210c      	movs	r1, #12
 80012bc:	4814      	ldr	r0, [pc, #80]	@ (8001310 <stepperRotateToStep+0xc0>)
 80012be:	f00c fbc7 	bl	800da50 <HAL_TIM_PWM_Start_DMA>
    // vTaskSuspend(DriveByWire_Handler);

    if (direction == CCW) {
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d107      	bne.n	80012d8 <stepperRotateToStep+0x88>
      stepperPosition += stepCount;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <stepperRotateToStep+0xb8>)
 80012ca:	881a      	ldrh	r2, [r3, #0]
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	4413      	add	r3, r2
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <stepperRotateToStep+0xb8>)
 80012d4:	801a      	strh	r2, [r3, #0]
 80012d6:	e006      	b.n	80012e6 <stepperRotateToStep+0x96>
    } else {
      stepperPosition -= stepCount;
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <stepperRotateToStep+0xb8>)
 80012da:	881a      	ldrh	r2, [r3, #0]
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <stepperRotateToStep+0xb8>)
 80012e4:	801a      	strh	r2, [r3, #0]
    }

    Tps = stepperPosition / TOTAL_STEP_COUNT;
 80012e6:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <stepperRotateToStep+0xb8>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f2:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001314 <stepperRotateToStep+0xc4>
 80012f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fa:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <stepperRotateToStep+0xc8>)
 80012fc:	edc3 7a00 	vstr	s15, [r3]
  }
}
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000520c 	.word	0x2000520c
 800130c:	20005214 	.word	0x20005214
 8001310:	20005e90 	.word	0x20005e90
 8001314:	43a238e4 	.word	0x43a238e4
 8001318:	20005210 	.word	0x20005210

0800131c <stepperStep>:

// speed 0.0 to 1.0
void stepperStep() {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4, (uint32_t *)stepPwmData, 5);
 8001320:	2305      	movs	r3, #5
 8001322:	4a03      	ldr	r2, [pc, #12]	@ (8001330 <stepperStep+0x14>)
 8001324:	210c      	movs	r1, #12
 8001326:	4803      	ldr	r0, [pc, #12]	@ (8001334 <stepperStep+0x18>)
 8001328:	f00c fb92 	bl	800da50 <HAL_TIM_PWM_Start_DMA>
  // vTaskSuspend(DriveByWire_Handler);
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20005214 	.word	0x20005214
 8001334:	20005e90 	.word	0x20005e90

08001338 <throttleBodySetPosition>:

void throttleBodySetPosition(float pos) { stepperRotateToStep(pos * TOTAL_STEP_COUNT); }
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001342:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001360 <throttleBodySetPosition+0x28>
 8001346:	edd7 7a01 	vldr	s15, [r7, #4]
 800134a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	f7ff ff7d 	bl	8001250 <stepperRotateToStep>
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	43a238e4 	.word	0x43a238e4

08001364 <stepperCalibrate>:

void stepperCalibrate() {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0

  while (HAL_GPIO_ReadPin(ThrottleCalibration_GPIO_Port, ThrottleCalibration_Pin) != GPIO_PIN_RESET) {
 8001368:	e004      	b.n	8001374 <stepperCalibrate+0x10>
    stepperSetDirection(CCW);
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff ff5e 	bl	800122c <stepperSetDirection>
    stepperStep();
 8001370:	f7ff ffd4 	bl	800131c <stepperStep>
  while (HAL_GPIO_ReadPin(ThrottleCalibration_GPIO_Port, ThrottleCalibration_Pin) != GPIO_PIN_RESET) {
 8001374:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001378:	4807      	ldr	r0, [pc, #28]	@ (8001398 <stepperCalibrate+0x34>)
 800137a:	f005 fca7 	bl	8006ccc <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f2      	bne.n	800136a <stepperCalibrate+0x6>
    // vTaskDelay(20);
  }
  // vTaskDelay(50);
  stepperPosition = 92;
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <stepperCalibrate+0x38>)
 8001386:	225c      	movs	r2, #92	@ 0x5c
 8001388:	801a      	strh	r2, [r3, #0]

  throttleBodySetPosition(0.0);
 800138a:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80013a0 <stepperCalibrate+0x3c>
 800138e:	f7ff ffd3 	bl	8001338 <throttleBodySetPosition>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	42020000 	.word	0x42020000
 800139c:	2000520c 	.word	0x2000520c
 80013a0:	00000000 	.word	0x00000000

080013a4 <ecu_data_update>:
#include "ecu.h"
#include "main.h"

EcuData ecu;

void ecu_data_update() {
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  if (ecu.pending_update) {
 80013a8:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <ecu_data_update+0x8c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d03a      	beq.n	8001426 <ecu_data_update+0x82>
	ecu.pending_update = false;
 80013b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <ecu_data_update+0x8c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]

	ecu.timestamp = rx_buf_usart1[1];
 80013b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001434 <ecu_data_update+0x90>)
 80013b8:	785a      	ldrb	r2, [r3, #1]
 80013ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <ecu_data_update+0x8c>)
 80013bc:	705a      	strb	r2, [r3, #1]
    ecu.engine_status = rx_buf_usart1[3];
 80013be:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <ecu_data_update+0x90>)
 80013c0:	78da      	ldrb	r2, [r3, #3]
 80013c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <ecu_data_update+0x8c>)
 80013c4:	709a      	strb	r2, [r3, #2]
    ecu.map = (uint16_t)((rx_buf_usart1[6] << 8) | rx_buf_usart1[5]);
 80013c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001434 <ecu_data_update+0x90>)
 80013c8:	799b      	ldrb	r3, [r3, #6]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <ecu_data_update+0x90>)
 80013d2:	795b      	ldrb	r3, [r3, #5]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b21b      	sxth	r3, r3
 80013da:	b29a      	uxth	r2, r3
 80013dc:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <ecu_data_update+0x8c>)
 80013de:	f8a3 2003 	strh.w	r2, [r3, #3]
    ecu.iat = rx_buf_usart1[7];
 80013e2:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <ecu_data_update+0x90>)
 80013e4:	79da      	ldrb	r2, [r3, #7]
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <ecu_data_update+0x8c>)
 80013e8:	715a      	strb	r2, [r3, #5]
    ecu.clt = rx_buf_usart1[8];
 80013ea:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <ecu_data_update+0x90>)
 80013ec:	7a1a      	ldrb	r2, [r3, #8]
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <ecu_data_update+0x8c>)
 80013f0:	719a      	strb	r2, [r3, #6]
    ecu.battery = rx_buf_usart1[10];
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <ecu_data_update+0x90>)
 80013f4:	7a9a      	ldrb	r2, [r3, #10]
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <ecu_data_update+0x8c>)
 80013f8:	71da      	strb	r2, [r3, #7]
    ecu.o2 = rx_buf_usart1[11];
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <ecu_data_update+0x90>)
 80013fc:	7ada      	ldrb	r2, [r3, #11]
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <ecu_data_update+0x8c>)
 8001400:	721a      	strb	r2, [r3, #8]
    ecu.rpm = (uint16_t)((rx_buf_usart1[16] << 8) | rx_buf_usart1[15]);
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <ecu_data_update+0x90>)
 8001404:	7c1b      	ldrb	r3, [r3, #16]
 8001406:	b21b      	sxth	r3, r3
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <ecu_data_update+0x90>)
 800140e:	7bdb      	ldrb	r3, [r3, #15]
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21b      	sxth	r3, r3
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <ecu_data_update+0x8c>)
 800141a:	f8a3 2009 	strh.w	r2, [r3, #9]
    ecu.tps = rx_buf_usart1[25];
 800141e:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <ecu_data_update+0x90>)
 8001420:	7e5a      	ldrb	r2, [r3, #25]
 8001422:	4b03      	ldr	r3, [pc, #12]	@ (8001430 <ecu_data_update+0x8c>)
 8001424:	72da      	strb	r2, [r3, #11]
  }
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	20005854 	.word	0x20005854
 8001434:	200064c4 	.word	0x200064c4

08001438 <error_throw>:
int8_t head = -1;
int8_t tail = -1;
int8_t slots_left = QUEUE_LEN;

// the message should be <  MSG_MAX_LEN
char *error_throw() {
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
    if (slots_left == 0)
 800143c:	4b1c      	ldr	r3, [pc, #112]	@ (80014b0 <error_throw+0x78>)
 800143e:	f993 3000 	ldrsb.w	r3, [r3]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10a      	bne.n	800145c <error_throw+0x24>
        return _error_queue[head];
 8001446:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <error_throw+0x7c>)
 8001448:	f993 3000 	ldrsb.w	r3, [r3]
 800144c:	461a      	mov	r2, r3
 800144e:	4613      	mov	r3, r2
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	1a9b      	subs	r3, r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4a18      	ldr	r2, [pc, #96]	@ (80014b8 <error_throw+0x80>)
 8001458:	4413      	add	r3, r2
 800145a:	e023      	b.n	80014a4 <error_throw+0x6c>

    if (head == QUEUE_LEN - 1)
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <error_throw+0x7c>)
 800145e:	f993 3000 	ldrsb.w	r3, [r3]
 8001462:	2b13      	cmp	r3, #19
 8001464:	d102      	bne.n	800146c <error_throw+0x34>
        head = -1;
 8001466:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <error_throw+0x7c>)
 8001468:	22ff      	movs	r2, #255	@ 0xff
 800146a:	701a      	strb	r2, [r3, #0]

    slots_left--;
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <error_throw+0x78>)
 800146e:	f993 3000 	ldrsb.w	r3, [r3]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3b01      	subs	r3, #1
 8001476:	b2db      	uxtb	r3, r3
 8001478:	b25a      	sxtb	r2, r3
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <error_throw+0x78>)
 800147c:	701a      	strb	r2, [r3, #0]
    head++;
 800147e:	4b0d      	ldr	r3, [pc, #52]	@ (80014b4 <error_throw+0x7c>)
 8001480:	f993 3000 	ldrsb.w	r3, [r3]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	3301      	adds	r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	b25a      	sxtb	r2, r3
 800148c:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <error_throw+0x7c>)
 800148e:	701a      	strb	r2, [r3, #0]

    return _error_queue[head];
 8001490:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <error_throw+0x7c>)
 8001492:	f993 3000 	ldrsb.w	r3, [r3]
 8001496:	461a      	mov	r2, r3
 8001498:	4613      	mov	r3, r2
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <error_throw+0x80>)
 80014a2:	4413      	add	r3, r2
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000002 	.word	0x20000002
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20005860 	.word	0x20005860

080014bc <error_catch>:

uint8_t error_catch(char *dest) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    if (slots_left == QUEUE_LEN)
 80014c4:	4b21      	ldr	r3, [pc, #132]	@ (800154c <error_catch+0x90>)
 80014c6:	f993 3000 	ldrsb.w	r3, [r3]
 80014ca:	2b14      	cmp	r3, #20
 80014cc:	d101      	bne.n	80014d2 <error_catch+0x16>
        return 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e038      	b.n	8001544 <error_catch+0x88>
    if (tail == QUEUE_LEN - 1)
 80014d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <error_catch+0x94>)
 80014d4:	f993 3000 	ldrsb.w	r3, [r3]
 80014d8:	2b13      	cmp	r3, #19
 80014da:	d102      	bne.n	80014e2 <error_catch+0x26>
        tail = -1;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <error_catch+0x94>)
 80014de:	22ff      	movs	r2, #255	@ 0xff
 80014e0:	701a      	strb	r2, [r3, #0]
    tail++;
 80014e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <error_catch+0x94>)
 80014e4:	f993 3000 	ldrsb.w	r3, [r3]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	3301      	adds	r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	b25a      	sxtb	r2, r3
 80014f0:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <error_catch+0x94>)
 80014f2:	701a      	strb	r2, [r3, #0]
    slots_left++;
 80014f4:	4b15      	ldr	r3, [pc, #84]	@ (800154c <error_catch+0x90>)
 80014f6:	f993 3000 	ldrsb.w	r3, [r3]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	b25a      	sxtb	r2, r3
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <error_catch+0x90>)
 8001504:	701a      	strb	r2, [r3, #0]
    strcpy(dest, _error_queue[tail]);
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <error_catch+0x94>)
 8001508:	f993 3000 	ldrsb.w	r3, [r3]
 800150c:	461a      	mov	r2, r3
 800150e:	4613      	mov	r3, r2
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4a0f      	ldr	r2, [pc, #60]	@ (8001554 <error_catch+0x98>)
 8001518:	4413      	add	r3, r2
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f012 f9e1 	bl	80138e4 <strcpy>
    return strlen(_error_queue[tail]) + 1;
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <error_catch+0x94>)
 8001524:	f993 3000 	ldrsb.w	r3, [r3]
 8001528:	461a      	mov	r2, r3
 800152a:	4613      	mov	r3, r2
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <error_catch+0x98>)
 8001534:	4413      	add	r3, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe ffc8 	bl	80004cc <strlen>
 800153c:	4603      	mov	r3, r0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	3301      	adds	r3, #1
 8001542:	b2db      	uxtb	r3, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000002 	.word	0x20000002
 8001550:	20000001 	.word	0x20000001
 8001554:	20005860 	.word	0x20005860

08001558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  loadCell.pending_samples = 0;
 800155c:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <main+0x80>)
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  shifter.pending_samples = 0;
 800156a:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <main+0x84>)
 800156c:	2200      	movs	r2, #0
 800156e:	721a      	strb	r2, [r3, #8]
 8001570:	2200      	movs	r2, #0
 8001572:	725a      	strb	r2, [r3, #9]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f002 fbda 	bl	8003d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001578:	f000 f83a 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157c:	f000 fcce 	bl	8001f1c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001580:	f000 f93a 	bl	80017f8 <MX_GPDMA1_Init>
  MX_GPDMA2_Init();
 8001584:	f000 f980 	bl	8001888 <MX_GPDMA2_Init>
  MX_ICACHE_Init();
 8001588:	f000 f9e6 	bl	8001958 <MX_ICACHE_Init>
  MX_I2C1_Init();
 800158c:	f000 f9a4 	bl	80018d8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001590:	f000 fbe0 	bl	8001d54 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001594:	f000 fc2a 	bl	8001dec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001598:	f000 fc74 	bl	8001e84 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800159c:	f000 f89a 	bl	80016d4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80015a0:	f000 fa3c 	bl	8001a1c <MX_TIM3_Init>
  MX_TIM8_Init();
 80015a4:	f000 fb08 	bl	8001bb8 <MX_TIM8_Init>
  MX_TIM12_Init();
 80015a8:	f000 fb9a 	bl	8001ce0 <MX_TIM12_Init>
  MX_TIM4_Init();
 80015ac:	f000 fa90 	bl	8001ad0 <MX_TIM4_Init>
  MX_TIM2_Init();
 80015b0:	f000 f9e6 	bl	8001980 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buf_usart1, USART1_RX_BUF_LEN);
 80015b4:	2264      	movs	r2, #100	@ 0x64
 80015b6:	490a      	ldr	r1, [pc, #40]	@ (80015e0 <main+0x88>)
 80015b8:	480a      	ldr	r0, [pc, #40]	@ (80015e4 <main+0x8c>)
 80015ba:	f00f fdcb 	bl	8011154 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_UART_Transmit_DMA(&huart1, tx_buf_usart1, USART1_TX_BUF_LEN);
 80015be:	2202      	movs	r2, #2
 80015c0:	4909      	ldr	r1, [pc, #36]	@ (80015e8 <main+0x90>)
 80015c2:	4808      	ldr	r0, [pc, #32]	@ (80015e4 <main+0x8c>)
 80015c4:	f00e fa46 	bl	800fa54 <HAL_UART_Transmit_DMA>

  HAL_TIM_Base_Start(&htim2);
 80015c8:	4808      	ldr	r0, [pc, #32]	@ (80015ec <main+0x94>)
 80015ca:	f00c f895 	bl	800d6f8 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80015ce:	f7ff fc6f 	bl	8000eb0 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 80015d2:	bf00      	nop
 80015d4:	e7fd      	b.n	80015d2 <main+0x7a>
 80015d6:	bf00      	nop
 80015d8:	20006670 	.word	0x20006670
 80015dc:	20006660 	.word	0x20006660
 80015e0:	200064c4 	.word	0x200064c4
 80015e4:	200060b0 	.word	0x200060b0
 80015e8:	20000004 	.word	0x20000004
 80015ec:	20005e44 	.word	0x20005e44

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b09c      	sub	sp, #112	@ 0x70
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	2250      	movs	r2, #80	@ 0x50
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f012 f93c 	bl	801387c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001616:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <SystemClock_Config+0xdc>)
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	4a2c      	ldr	r2, [pc, #176]	@ (80016cc <SystemClock_Config+0xdc>)
 800161c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001620:	6113      	str	r3, [r2, #16]
 8001622:	4b2a      	ldr	r3, [pc, #168]	@ (80016cc <SystemClock_Config+0xdc>)
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800162e:	bf00      	nop
 8001630:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <SystemClock_Config+0xdc>)
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	2b08      	cmp	r3, #8
 800163a:	d1f9      	bne.n	8001630 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001640:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800164a:	2303      	movs	r3, #3
 800164c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800164e:	2301      	movs	r3, #1
 8001650:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8001652:	233e      	movs	r3, #62	@ 0x3e
 8001654:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001656:	2302      	movs	r3, #2
 8001658:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800165a:	2302      	movs	r3, #2
 800165c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800165e:	2302      	movs	r3, #2
 8001660:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8001662:	230c      	movs	r3, #12
 8001664:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001666:	2300      	movs	r3, #0
 8001668:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800166a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	4618      	mov	r0, r3
 8001676:	f006 f855 	bl	8007724 <HAL_RCC_OscConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001680:	f000 fe28 	bl	80022d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001684:	231f      	movs	r3, #31
 8001686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001688:	2303      	movs	r3, #3
 800168a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	2105      	movs	r1, #5
 80016a2:	4618      	mov	r0, r3
 80016a4:	f006 fc76 	bl	8007f94 <HAL_RCC_ClockConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016ae:	f000 fe11 	bl	80022d4 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80016b2:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <SystemClock_Config+0xe0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80016ba:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <SystemClock_Config+0xe0>)
 80016bc:	f043 0320 	orr.w	r3, r3, #32
 80016c0:	6013      	str	r3, [r2, #0]
}
 80016c2:	bf00      	nop
 80016c4:	3770      	adds	r7, #112	@ 0x70
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	44020800 	.word	0x44020800
 80016d0:	40022000 	.word	0x40022000

080016d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016da:	463b      	mov	r3, r7
 80016dc:	2220      	movs	r2, #32
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f012 f8cb 	bl	801387c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016e6:	4b3e      	ldr	r3, [pc, #248]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 80016e8:	4a3e      	ldr	r2, [pc, #248]	@ (80017e4 <MX_ADC1_Init+0x110>)
 80016ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80016ec:	4b3c      	ldr	r3, [pc, #240]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 80016ee:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80016f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016f4:	4b3a      	ldr	r3, [pc, #232]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fa:	4b39      	ldr	r3, [pc, #228]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001700:	4b37      	ldr	r3, [pc, #220]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 8001702:	2201      	movs	r2, #1
 8001704:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001706:	4b36      	ldr	r3, [pc, #216]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 8001708:	2204      	movs	r2, #4
 800170a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800170c:	4b34      	ldr	r3, [pc, #208]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 800170e:	2200      	movs	r2, #0
 8001710:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001712:	4b33      	ldr	r3, [pc, #204]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 8001714:	2200      	movs	r2, #0
 8001716:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001718:	4b31      	ldr	r3, [pc, #196]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 800171a:	2203      	movs	r2, #3
 800171c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800171e:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 3;
 8001726:	4b2e      	ldr	r3, [pc, #184]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 8001728:	2203      	movs	r2, #3
 800172a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800172c:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 800172e:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001734:	4b2a      	ldr	r3, [pc, #168]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 8001736:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800173a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800173c:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001744:	4b26      	ldr	r3, [pc, #152]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 8001746:	2200      	movs	r2, #0
 8001748:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800174a:	4b25      	ldr	r3, [pc, #148]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 800174c:	2200      	movs	r2, #0
 800174e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001750:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001758:	4821      	ldr	r0, [pc, #132]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 800175a:	f002 fd95 	bl	8004288 <HAL_ADC_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001764:	f000 fdb6 	bl	80022d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001768:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <MX_ADC1_Init+0x114>)
 800176a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800176c:	2306      	movs	r3, #6
 800176e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001770:	2307      	movs	r3, #7
 8001772:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001774:	237f      	movs	r3, #127	@ 0x7f
 8001776:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001778:	2304      	movs	r3, #4
 800177a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001780:	463b      	mov	r3, r7
 8001782:	4619      	mov	r1, r3
 8001784:	4816      	ldr	r0, [pc, #88]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 8001786:	f003 fa35 	bl	8004bf4 <HAL_ADC_ConfigChannel>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001790:	f000 fda0 	bl	80022d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001794:	4b15      	ldr	r3, [pc, #84]	@ (80017ec <MX_ADC1_Init+0x118>)
 8001796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001798:	230c      	movs	r3, #12
 800179a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179c:	463b      	mov	r3, r7
 800179e:	4619      	mov	r1, r3
 80017a0:	480f      	ldr	r0, [pc, #60]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 80017a2:	f003 fa27 	bl	8004bf4 <HAL_ADC_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80017ac:	f000 fd92 	bl	80022d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <MX_ADC1_Init+0x11c>)
 80017b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017b4:	2312      	movs	r3, #18
 80017b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b8:	463b      	mov	r3, r7
 80017ba:	4619      	mov	r1, r3
 80017bc:	4808      	ldr	r0, [pc, #32]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 80017be:	f003 fa19 	bl	8004bf4 <HAL_ADC_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80017c8:	f000 fd84 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC_NBR_CONVERSION = hadc1.Init.NbrOfConversion;
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <MX_ADC1_Init+0x10c>)
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <MX_ADC1_Init+0x120>)
 80017d4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END ADC1_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20005d10 	.word	0x20005d10
 80017e4:	42028000 	.word	0x42028000
 80017e8:	2a000400 	.word	0x2a000400
 80017ec:	2e300800 	.word	0x2e300800
 80017f0:	32601000 	.word	0x32601000
 80017f4:	20006528 	.word	0x20006528

080017f8 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80017fe:	4b21      	ldr	r3, [pc, #132]	@ (8001884 <MX_GPDMA1_Init+0x8c>)
 8001800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001804:	4a1f      	ldr	r2, [pc, #124]	@ (8001884 <MX_GPDMA1_Init+0x8c>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800180e:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <MX_GPDMA1_Init+0x8c>)
 8001810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 0, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2100      	movs	r1, #0
 8001820:	201b      	movs	r0, #27
 8001822:	f003 fff7 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001826:	201b      	movs	r0, #27
 8001828:	f004 f80e 	bl	8005848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 800182c:	2200      	movs	r2, #0
 800182e:	2100      	movs	r1, #0
 8001830:	201c      	movs	r0, #28
 8001832:	f003 ffef 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001836:	201c      	movs	r0, #28
 8001838:	f004 f806 	bl	8005848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	201d      	movs	r0, #29
 8001842:	f003 ffe7 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8001846:	201d      	movs	r0, #29
 8001848:	f003 fffe 	bl	8005848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	201e      	movs	r0, #30
 8001852:	f003 ffdf 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001856:	201e      	movs	r0, #30
 8001858:	f003 fff6 	bl	8005848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel4_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	201f      	movs	r0, #31
 8001862:	f003 ffd7 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel4_IRQn);
 8001866:	201f      	movs	r0, #31
 8001868:	f003 ffee 	bl	8005848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel5_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2020      	movs	r0, #32
 8001872:	f003 ffcf 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel5_IRQn);
 8001876:	2020      	movs	r0, #32
 8001878:	f003 ffe6 	bl	8005848 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	44020c00 	.word	0x44020c00

08001888 <MX_GPDMA2_Init>:
  * @brief GPDMA2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA2_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Init 0 */

  /* USER CODE END GPDMA2_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA2_CLK_ENABLE();
 800188e:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <MX_GPDMA2_Init+0x4c>)
 8001890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001894:	4a0f      	ldr	r2, [pc, #60]	@ (80018d4 <MX_GPDMA2_Init+0x4c>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <MX_GPDMA2_Init+0x4c>)
 80018a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]

  /* GPDMA2 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA2_Channel0_IRQn, 0, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	205a      	movs	r0, #90	@ 0x5a
 80018b2:	f003 ffaf 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA2_Channel0_IRQn);
 80018b6:	205a      	movs	r0, #90	@ 0x5a
 80018b8:	f003 ffc6 	bl	8005848 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA2_Channel1_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	205b      	movs	r0, #91	@ 0x5b
 80018c2:	f003 ffa7 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA2_Channel1_IRQn);
 80018c6:	205b      	movs	r0, #91	@ 0x5b
 80018c8:	f003 ffbe 	bl	8005848 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA2_Init 1 */
  /* USER CODE BEGIN GPDMA2_Init 2 */

  /* USER CODE END GPDMA2_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	44020c00 	.word	0x44020c00

080018d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <MX_I2C1_Init+0x74>)
 80018de:	4a1c      	ldr	r2, [pc, #112]	@ (8001950 <MX_I2C1_Init+0x78>)
 80018e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <MX_I2C1_Init+0x74>)
 80018e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001954 <MX_I2C1_Init+0x7c>)
 80018e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <MX_I2C1_Init+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ee:	4b17      	ldr	r3, [pc, #92]	@ (800194c <MX_I2C1_Init+0x74>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f4:	4b15      	ldr	r3, [pc, #84]	@ (800194c <MX_I2C1_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018fa:	4b14      	ldr	r3, [pc, #80]	@ (800194c <MX_I2C1_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <MX_I2C1_Init+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001906:	4b11      	ldr	r3, [pc, #68]	@ (800194c <MX_I2C1_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <MX_I2C1_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001912:	480e      	ldr	r0, [pc, #56]	@ (800194c <MX_I2C1_Init+0x74>)
 8001914:	f005 fa0a 	bl	8006d2c <HAL_I2C_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800191e:	f000 fcd9 	bl	80022d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001922:	2100      	movs	r1, #0
 8001924:	4809      	ldr	r0, [pc, #36]	@ (800194c <MX_I2C1_Init+0x74>)
 8001926:	f005 fe25 	bl	8007574 <HAL_I2CEx_ConfigAnalogFilter>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001930:	f000 fcd0 	bl	80022d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001934:	2100      	movs	r1, #0
 8001936:	4805      	ldr	r0, [pc, #20]	@ (800194c <MX_I2C1_Init+0x74>)
 8001938:	f005 fe67 	bl	800760a <HAL_I2CEx_ConfigDigitalFilter>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001942:	f000 fcc7 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20005df0 	.word	0x20005df0
 8001950:	40005400 	.word	0x40005400
 8001954:	60808cd3 	.word	0x60808cd3

08001958 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800195c:	2000      	movs	r0, #0
 800195e:	f005 fea1 	bl	80076a4 <HAL_ICACHE_ConfigAssociativityMode>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001968:	f000 fcb4 	bl	80022d4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800196c:	f005 feba 	bl	80076e4 <HAL_ICACHE_Enable>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001976:	f000 fcad 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001986:	f107 0310 	add.w	r3, r7, #16
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800199e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <MX_TIM2_Init+0x98>)
 80019a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 250-1;
 80019a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <MX_TIM2_Init+0x98>)
 80019a8:	22f9      	movs	r2, #249	@ 0xf9
 80019aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <MX_TIM2_Init+0x98>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019b2:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <MX_TIM2_Init+0x98>)
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ba:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <MX_TIM2_Init+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c0:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <MX_TIM2_Init+0x98>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019c6:	4814      	ldr	r0, [pc, #80]	@ (8001a18 <MX_TIM2_Init+0x98>)
 80019c8:	f00b fe3e 	bl	800d648 <HAL_TIM_Base_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019d2:	f000 fc7f 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	4619      	mov	r1, r3
 80019e2:	480d      	ldr	r0, [pc, #52]	@ (8001a18 <MX_TIM2_Init+0x98>)
 80019e4:	f00c fe38 	bl	800e658 <HAL_TIM_ConfigClockSource>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019ee:	f000 fc71 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	@ (8001a18 <MX_TIM2_Init+0x98>)
 8001a00:	f00d fe28 	bl	800f654 <HAL_TIMEx_MasterConfigSynchronization>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a0a:	f000 fc63 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	3720      	adds	r7, #32
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20005e44 	.word	0x20005e44

08001a1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	@ 0x28
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
 8001a3c:	615a      	str	r2, [r3, #20]
 8001a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a40:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <MX_TIM3_Init+0xac>)
 8001a42:	4a22      	ldr	r2, [pc, #136]	@ (8001acc <MX_TIM3_Init+0xb0>)
 8001a44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <MX_TIM3_Init+0xac>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <MX_TIM3_Init+0xac>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <MX_TIM3_Init+0xac>)
 8001a54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <MX_TIM3_Init+0xac>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <MX_TIM3_Init+0xac>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a66:	4818      	ldr	r0, [pc, #96]	@ (8001ac8 <MX_TIM3_Init+0xac>)
 8001a68:	f00b ff9a 	bl	800d9a0 <HAL_TIM_PWM_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001a72:	f000 fc2f 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7e:	f107 031c 	add.w	r3, r7, #28
 8001a82:	4619      	mov	r1, r3
 8001a84:	4810      	ldr	r0, [pc, #64]	@ (8001ac8 <MX_TIM3_Init+0xac>)
 8001a86:	f00d fde5 	bl	800f654 <HAL_TIMEx_MasterConfigSynchronization>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001a90:	f000 fc20 	bl	80022d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a94:	2360      	movs	r3, #96	@ 0x60
 8001a96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4807      	ldr	r0, [pc, #28]	@ (8001ac8 <MX_TIM3_Init+0xac>)
 8001aac:	f00c fcc0 	bl	800e430 <HAL_TIM_PWM_ConfigChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001ab6:	f000 fc0d 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001aba:	4803      	ldr	r0, [pc, #12]	@ (8001ac8 <MX_TIM3_Init+0xac>)
 8001abc:	f001 fb96 	bl	80031ec <HAL_TIM_MspPostInit>

}
 8001ac0:	bf00      	nop
 8001ac2:	3728      	adds	r7, #40	@ 0x28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20005e90 	.word	0x20005e90
 8001acc:	40000400 	.word	0x40000400

08001ad0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08e      	sub	sp, #56	@ 0x38
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af0:	463b      	mov	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]
 8001afe:	615a      	str	r2, [r3, #20]
 8001b00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b02:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb0 <MX_TIM4_Init+0xe0>)
 8001b04:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb4 <MX_TIM4_Init+0xe4>)
 8001b06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 25000-1;
 8001b08:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <MX_TIM4_Init+0xe0>)
 8001b0a:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001b0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b10:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <MX_TIM4_Init+0xe0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8001b16:	4b26      	ldr	r3, [pc, #152]	@ (8001bb0 <MX_TIM4_Init+0xe0>)
 8001b18:	2209      	movs	r2, #9
 8001b1a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1c:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <MX_TIM4_Init+0xe0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b22:	4b23      	ldr	r3, [pc, #140]	@ (8001bb0 <MX_TIM4_Init+0xe0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b28:	4821      	ldr	r0, [pc, #132]	@ (8001bb0 <MX_TIM4_Init+0xe0>)
 8001b2a:	f00b fd8d 	bl	800d648 <HAL_TIM_Base_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001b34:	f000 fbce 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b42:	4619      	mov	r1, r3
 8001b44:	481a      	ldr	r0, [pc, #104]	@ (8001bb0 <MX_TIM4_Init+0xe0>)
 8001b46:	f00c fd87 	bl	800e658 <HAL_TIM_ConfigClockSource>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001b50:	f000 fbc0 	bl	80022d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b54:	4816      	ldr	r0, [pc, #88]	@ (8001bb0 <MX_TIM4_Init+0xe0>)
 8001b56:	f00b ff23 	bl	800d9a0 <HAL_TIM_PWM_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001b60:	f000 fbb8 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b64:	2320      	movs	r3, #32
 8001b66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	480f      	ldr	r0, [pc, #60]	@ (8001bb0 <MX_TIM4_Init+0xe0>)
 8001b74:	f00d fd6e 	bl	800f654 <HAL_TIMEx_MasterConfigSynchronization>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001b7e:	f000 fba9 	bl	80022d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b82:	2360      	movs	r3, #96	@ 0x60
 8001b84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b92:	463b      	mov	r3, r7
 8001b94:	2200      	movs	r2, #0
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	@ (8001bb0 <MX_TIM4_Init+0xe0>)
 8001b9a:	f00c fc49 	bl	800e430 <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001ba4:	f000 fb96 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	3738      	adds	r7, #56	@ 0x38
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20005edc 	.word	0x20005edc
 8001bb4:	40000800 	.word	0x40000800

08001bb8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b098      	sub	sp, #96	@ 0x60
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bbe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]
 8001bda:	615a      	str	r2, [r3, #20]
 8001bdc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2234      	movs	r2, #52	@ 0x34
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f011 fe49 	bl	801387c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001bea:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <MX_TIM8_Init+0x120>)
 8001bec:	4a3b      	ldr	r2, [pc, #236]	@ (8001cdc <MX_TIM8_Init+0x124>)
 8001bee:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001bf0:	4b39      	ldr	r3, [pc, #228]	@ (8001cd8 <MX_TIM8_Init+0x120>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b38      	ldr	r3, [pc, #224]	@ (8001cd8 <MX_TIM8_Init+0x120>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 311;
 8001bfc:	4b36      	ldr	r3, [pc, #216]	@ (8001cd8 <MX_TIM8_Init+0x120>)
 8001bfe:	f240 1237 	movw	r2, #311	@ 0x137
 8001c02:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b34      	ldr	r3, [pc, #208]	@ (8001cd8 <MX_TIM8_Init+0x120>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c0a:	4b33      	ldr	r3, [pc, #204]	@ (8001cd8 <MX_TIM8_Init+0x120>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c10:	4b31      	ldr	r3, [pc, #196]	@ (8001cd8 <MX_TIM8_Init+0x120>)
 8001c12:	2280      	movs	r2, #128	@ 0x80
 8001c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c16:	4830      	ldr	r0, [pc, #192]	@ (8001cd8 <MX_TIM8_Init+0x120>)
 8001c18:	f00b fec2 	bl	800d9a0 <HAL_TIM_PWM_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001c22:	f000 fb57 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c32:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c36:	4619      	mov	r1, r3
 8001c38:	4827      	ldr	r0, [pc, #156]	@ (8001cd8 <MX_TIM8_Init+0x120>)
 8001c3a:	f00d fd0b 	bl	800f654 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001c44:	f000 fb46 	bl	80022d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c48:	2360      	movs	r3, #96	@ 0x60
 8001c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c50:	2300      	movs	r3, #0
 8001c52:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c54:	2300      	movs	r3, #0
 8001c56:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c60:	2300      	movs	r3, #0
 8001c62:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c68:	2208      	movs	r2, #8
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	481a      	ldr	r0, [pc, #104]	@ (8001cd8 <MX_TIM8_Init+0x120>)
 8001c6e:	f00c fbdf 	bl	800e430 <HAL_TIM_PWM_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001c78:	f000 fb2c 	bl	80022d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ca2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001cac:	2300      	movs	r3, #0
 8001cae:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4807      	ldr	r0, [pc, #28]	@ (8001cd8 <MX_TIM8_Init+0x120>)
 8001cba:	f00d fd9b 	bl	800f7f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001cc4:	f000 fb06 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001cc8:	4803      	ldr	r0, [pc, #12]	@ (8001cd8 <MX_TIM8_Init+0x120>)
 8001cca:	f001 fa8f 	bl	80031ec <HAL_TIM_MspPostInit>

}
 8001cce:	bf00      	nop
 8001cd0:	3760      	adds	r7, #96	@ 0x60
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20005f28 	.word	0x20005f28
 8001cdc:	40013400 	.word	0x40013400

08001ce0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <MX_TIM12_Init+0x6c>)
 8001cf4:	4a16      	ldr	r2, [pc, #88]	@ (8001d50 <MX_TIM12_Init+0x70>)
 8001cf6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001cf8:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <MX_TIM12_Init+0x6c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfe:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <MX_TIM12_Init+0x6c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001d04:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <MX_TIM12_Init+0x6c>)
 8001d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d0a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <MX_TIM12_Init+0x6c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <MX_TIM12_Init+0x6c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001d18:	480c      	ldr	r0, [pc, #48]	@ (8001d4c <MX_TIM12_Init+0x6c>)
 8001d1a:	f00b fc95 	bl	800d648 <HAL_TIM_Base_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8001d24:	f000 fad6 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d2c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4619      	mov	r1, r3
 8001d32:	4806      	ldr	r0, [pc, #24]	@ (8001d4c <MX_TIM12_Init+0x6c>)
 8001d34:	f00c fc90 	bl	800e658 <HAL_TIM_ConfigClockSource>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8001d3e:	f000 fac9 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20005f74 	.word	0x20005f74
 8001d50:	40001800 	.word	0x40001800

08001d54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d58:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001d5a:	4a23      	ldr	r2, [pc, #140]	@ (8001de8 <MX_USART1_UART_Init+0x94>)
 8001d5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001d60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d66:	4b1f      	ldr	r3, [pc, #124]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d72:	4b1c      	ldr	r3, [pc, #112]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d78:	4b1a      	ldr	r3, [pc, #104]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d84:	4b17      	ldr	r3, [pc, #92]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d8a:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d90:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d96:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d9c:	4811      	ldr	r0, [pc, #68]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001d9e:	f00d fe09 	bl	800f9b4 <HAL_UART_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001da8:	f000 fa94 	bl	80022d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dac:	2100      	movs	r1, #0
 8001dae:	480d      	ldr	r0, [pc, #52]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001db0:	f00f f954 	bl	801105c <HAL_UARTEx_SetTxFifoThreshold>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001dba:	f000 fa8b 	bl	80022d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4808      	ldr	r0, [pc, #32]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001dc2:	f00f f989 	bl	80110d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001dcc:	f000 fa82 	bl	80022d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001dd0:	4804      	ldr	r0, [pc, #16]	@ (8001de4 <MX_USART1_UART_Init+0x90>)
 8001dd2:	f00f f90a 	bl	8010fea <HAL_UARTEx_DisableFifoMode>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ddc:	f000 fa7a 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200060b0 	.word	0x200060b0
 8001de8:	40013800 	.word	0x40013800

08001dec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df0:	4b22      	ldr	r3, [pc, #136]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001df2:	4a23      	ldr	r2, [pc, #140]	@ (8001e80 <MX_USART2_UART_Init+0x94>)
 8001df4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001df6:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001df8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e10:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e12:	220c      	movs	r2, #12
 8001e14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e16:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1c:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e22:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e28:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e2e:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e34:	4811      	ldr	r0, [pc, #68]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e36:	f00d fdbd 	bl	800f9b4 <HAL_UART_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e40:	f000 fa48 	bl	80022d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e44:	2100      	movs	r1, #0
 8001e46:	480d      	ldr	r0, [pc, #52]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e48:	f00f f908 	bl	801105c <HAL_UARTEx_SetTxFifoThreshold>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e52:	f000 fa3f 	bl	80022d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e56:	2100      	movs	r1, #0
 8001e58:	4808      	ldr	r0, [pc, #32]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e5a:	f00f f93d 	bl	80110d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e64:	f000 fa36 	bl	80022d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e68:	4804      	ldr	r0, [pc, #16]	@ (8001e7c <MX_USART2_UART_Init+0x90>)
 8001e6a:	f00f f8be 	bl	8010fea <HAL_UARTEx_DisableFifoMode>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e74:	f000 fa2e 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20006144 	.word	0x20006144
 8001e80:	40004400 	.word	0x40004400

08001e84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e88:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001e8a:	4a23      	ldr	r2, [pc, #140]	@ (8001f18 <MX_USART3_UART_Init+0x94>)
 8001e8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e8e:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001e90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e96:	4b1f      	ldr	r3, [pc, #124]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001eaa:	220c      	movs	r2, #12
 8001eac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb4:	4b17      	ldr	r3, [pc, #92]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eba:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ec0:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec6:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ecc:	4811      	ldr	r0, [pc, #68]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ece:	f00d fd71 	bl	800f9b4 <HAL_UART_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ed8:	f000 f9fc 	bl	80022d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001edc:	2100      	movs	r1, #0
 8001ede:	480d      	ldr	r0, [pc, #52]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ee0:	f00f f8bc 	bl	801105c <HAL_UARTEx_SetTxFifoThreshold>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001eea:	f000 f9f3 	bl	80022d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4808      	ldr	r0, [pc, #32]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001ef2:	f00f f8f1 	bl	80110d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001efc:	f000 f9ea 	bl	80022d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f00:	4804      	ldr	r0, [pc, #16]	@ (8001f14 <MX_USART3_UART_Init+0x90>)
 8001f02:	f00f f872 	bl	8010fea <HAL_UARTEx_DisableFifoMode>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f0c:	f000 f9e2 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200061d8 	.word	0x200061d8
 8001f18:	40004800 	.word	0x40004800

08001f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	@ 0x28
 8001f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f32:	4b5a      	ldr	r3, [pc, #360]	@ (800209c <MX_GPIO_Init+0x180>)
 8001f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f38:	4a58      	ldr	r2, [pc, #352]	@ (800209c <MX_GPIO_Init+0x180>)
 8001f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f42:	4b56      	ldr	r3, [pc, #344]	@ (800209c <MX_GPIO_Init+0x180>)
 8001f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f50:	4b52      	ldr	r3, [pc, #328]	@ (800209c <MX_GPIO_Init+0x180>)
 8001f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f56:	4a51      	ldr	r2, [pc, #324]	@ (800209c <MX_GPIO_Init+0x180>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f60:	4b4e      	ldr	r3, [pc, #312]	@ (800209c <MX_GPIO_Init+0x180>)
 8001f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800209c <MX_GPIO_Init+0x180>)
 8001f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f74:	4a49      	ldr	r2, [pc, #292]	@ (800209c <MX_GPIO_Init+0x180>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f7e:	4b47      	ldr	r3, [pc, #284]	@ (800209c <MX_GPIO_Init+0x180>)
 8001f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8c:	4b43      	ldr	r3, [pc, #268]	@ (800209c <MX_GPIO_Init+0x180>)
 8001f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f92:	4a42      	ldr	r2, [pc, #264]	@ (800209c <MX_GPIO_Init+0x180>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800209c <MX_GPIO_Init+0x180>)
 8001f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001faa:	4b3c      	ldr	r3, [pc, #240]	@ (800209c <MX_GPIO_Init+0x180>)
 8001fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb0:	4a3a      	ldr	r2, [pc, #232]	@ (800209c <MX_GPIO_Init+0x180>)
 8001fb2:	f043 0308 	orr.w	r3, r3, #8
 8001fb6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fba:	4b38      	ldr	r3, [pc, #224]	@ (800209c <MX_GPIO_Init+0x180>)
 8001fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(StepperDir_GPIO_Port, StepperDir_Pin, GPIO_PIN_RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2104      	movs	r1, #4
 8001fcc:	4834      	ldr	r0, [pc, #208]	@ (80020a0 <MX_GPIO_Init+0x184>)
 8001fce:	f004 fe95 	bl	8006cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ClutchOut_GPIO_Port, ClutchOut_Pin, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fd8:	4832      	ldr	r0, [pc, #200]	@ (80020a4 <MX_GPIO_Init+0x188>)
 8001fda:	f004 fe8f 	bl	8006cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EcuStep_Pin TwoStepButton_Pin Gear4_Pin GearN_Pin */
  GPIO_InitStruct.Pin = EcuStep_Pin|TwoStepButton_Pin|Gear4_Pin|GearN_Pin;
 8001fde:	f44f 53d1 	mov.w	r3, #6688	@ 0x1a20
 8001fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	482d      	ldr	r0, [pc, #180]	@ (80020a8 <MX_GPIO_Init+0x18c>)
 8001ff4:	f004 fd0c 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : EcuDir_Pin Gear3_Pin */
  GPIO_InitStruct.Pin = EcuDir_Pin|Gear3_Pin;
 8001ff8:	2311      	movs	r3, #17
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	4825      	ldr	r0, [pc, #148]	@ (80020a0 <MX_GPIO_Init+0x184>)
 800200c:	f004 fd00 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : StepperDir_Pin */
  GPIO_InitStruct.Pin = StepperDir_Pin;
 8002010:	2304      	movs	r3, #4
 8002012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002014:	2301      	movs	r3, #1
 8002016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(StepperDir_GPIO_Port, &GPIO_InitStruct);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	481e      	ldr	r0, [pc, #120]	@ (80020a0 <MX_GPIO_Init+0x184>)
 8002028:	f004 fcf2 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ThrottleCalibration_Pin */
  GPIO_InitStruct.Pin = ThrottleCalibration_Pin;
 800202c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ThrottleCalibration_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	4818      	ldr	r0, [pc, #96]	@ (80020a4 <MX_GPIO_Init+0x188>)
 8002042:	f004 fce5 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ClutchOut_Pin */
  GPIO_InitStruct.Pin = ClutchOut_Pin;
 8002046:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800204a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204c:	2301      	movs	r3, #1
 800204e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ClutchOut_GPIO_Port, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	4811      	ldr	r0, [pc, #68]	@ (80020a4 <MX_GPIO_Init+0x188>)
 8002060:	f004 fcd6 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Gear2_Pin */
  GPIO_InitStruct.Pin = Gear2_Pin;
 8002064:	2304      	movs	r3, #4
 8002066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Gear2_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 0314 	add.w	r3, r7, #20
 8002074:	4619      	mov	r1, r3
 8002076:	480d      	ldr	r0, [pc, #52]	@ (80020ac <MX_GPIO_Init+0x190>)
 8002078:	f004 fcca 	bl	8006a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Gear1_Pin */
  GPIO_InitStruct.Pin = Gear1_Pin;
 800207c:	2308      	movs	r3, #8
 800207e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002080:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <MX_GPIO_Init+0x194>)
 8002082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Gear1_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4619      	mov	r1, r3
 800208e:	4804      	ldr	r0, [pc, #16]	@ (80020a0 <MX_GPIO_Init+0x184>)
 8002090:	f004 fcbe 	bl	8006a10 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002094:	bf00      	nop
 8002096:	3728      	adds	r7, #40	@ 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	44020c00 	.word	0x44020c00
 80020a0:	42020400 	.word	0x42020400
 80020a4:	42020000 	.word	0x42020000
 80020a8:	42020800 	.word	0x42020800
 80020ac:	42020c00 	.word	0x42020c00
 80020b0:	10110000 	.word	0x10110000

080020b4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	807b      	strh	r3, [r7, #2]

  if (huart->Instance == USART1) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0c      	ldr	r2, [pc, #48]	@ (80020f8 <HAL_UARTEx_RxEventCallback+0x44>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d112      	bne.n	80020f0 <HAL_UARTEx_RxEventCallback+0x3c>
    switch (HAL_UARTEx_GetRxEventType(huart)) {
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f00f f896 	bl	80111fc <HAL_UARTEx_GetRxEventType>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d10c      	bne.n	80020f0 <HAL_UARTEx_RxEventCallback+0x3c>
    case HAL_UART_RXEVENT_IDLE:
      ecu.pending_update = true;
 80020d6:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <HAL_UARTEx_RxEventCallback+0x48>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
      returnval = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buf_usart1, USART1_RX_BUF_LEN);
 80020dc:	2264      	movs	r2, #100	@ 0x64
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <HAL_UARTEx_RxEventCallback+0x4c>)
 80020e0:	4808      	ldr	r0, [pc, #32]	@ (8002104 <HAL_UARTEx_RxEventCallback+0x50>)
 80020e2:	f00f f837 	bl	8011154 <HAL_UARTEx_ReceiveToIdle_DMA>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <HAL_UARTEx_RxEventCallback+0x54>)
 80020ec:	701a      	strb	r2, [r3, #0]
      break;
 80020ee:	bf00      	nop
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40013800 	.word	0x40013800
 80020fc:	20005854 	.word	0x20005854
 8002100:	200064c4 	.word	0x200064c4
 8002104:	200060b0 	.word	0x200060b0
 8002108:	20006659 	.word	0x20006659

0800210c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0b      	ldr	r2, [pc, #44]	@ (8002148 <HAL_UART_ErrorCallback+0x3c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d110      	bne.n	8002140 <HAL_UART_ErrorCallback+0x34>
    uint8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_buf_usart1, USART1_RX_BUF_LEN);
 800211e:	2264      	movs	r2, #100	@ 0x64
 8002120:	490a      	ldr	r1, [pc, #40]	@ (800214c <HAL_UART_ErrorCallback+0x40>)
 8002122:	480b      	ldr	r0, [pc, #44]	@ (8002150 <HAL_UART_ErrorCallback+0x44>)
 8002124:	f00f f816 	bl	8011154 <HAL_UARTEx_ReceiveToIdle_DMA>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]
    static const char *err_code[] = {"OK", "ERROR", "BUSY", "TIMEOUT"};
    sprintf(error_throw(), "USART1rx errored out, restarted with code: HAL_%s", err_code[status]);
 800212c:	f7ff f984 	bl	8001438 <error_throw>
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	4a08      	ldr	r2, [pc, #32]	@ (8002154 <HAL_UART_ErrorCallback+0x48>)
 8002134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002138:	461a      	mov	r2, r3
 800213a:	4907      	ldr	r1, [pc, #28]	@ (8002158 <HAL_UART_ErrorCallback+0x4c>)
 800213c:	f011 fb7c 	bl	8013838 <siprintf>
  }
}
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40013800 	.word	0x40013800
 800214c:	200064c4 	.word	0x200064c4
 8002150:	200060b0 	.word	0x200060b0
 8002154:	20000008 	.word	0x20000008
 8002158:	080149ac 	.word	0x080149ac

0800215c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buf, ADC_BUF_LEN); }
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	2296      	movs	r2, #150	@ 0x96
 8002166:	4904      	ldr	r1, [pc, #16]	@ (8002178 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002168:	4804      	ldr	r0, [pc, #16]	@ (800217c <HAL_ADC_ConvCpltCallback+0x20>)
 800216a:	f002 f9e1 	bl	8004530 <HAL_ADC_Start_DMA>
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2000652c 	.word	0x2000652c
 800217c:	20005d10 	.word	0x20005d10

08002180 <ADC_update>:

//////////////// S E N S O R S //////////////////

void ADC_update() { shifter.pending_samples++; }
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <ADC_update+0x1c>)
 8002186:	891b      	ldrh	r3, [r3, #8]
 8002188:	b29b      	uxth	r3, r3
 800218a:	3301      	adds	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	4b03      	ldr	r3, [pc, #12]	@ (800219c <ADC_update+0x1c>)
 8002190:	811a      	strh	r2, [r3, #8]
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	20006660 	.word	0x20006660

080021a0 <NAU_update>:

void NAU_update() {
 80021a0:	b598      	push	{r3, r4, r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  static uint8_t counter = 0;
  static uint8_t idx = 0;

  counter++;
 80021a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002218 <NAU_update+0x78>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	3301      	adds	r3, #1
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <NAU_update+0x78>)
 80021ae:	701a      	strb	r2, [r3, #0]

  if (counter > 2) {
 80021b0:	4b19      	ldr	r3, [pc, #100]	@ (8002218 <NAU_update+0x78>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d92c      	bls.n	8002212 <NAU_update+0x72>
    TIM2->CNT = 0;
 80021b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021bc:	2200      	movs	r2, #0
 80021be:	625a      	str	r2, [r3, #36]	@ 0x24

    loadCell.buf[idx] = NAU_getReading();
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <NAU_update+0x7c>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461c      	mov	r4, r3
 80021c6:	f7fe fd7b 	bl	8000cc0 <NAU_getReading>
 80021ca:	4603      	mov	r3, r0
 80021cc:	4a14      	ldr	r2, [pc, #80]	@ (8002220 <NAU_update+0x80>)
 80021ce:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    loadCell.pending_samples++;
 80021d2:	4b13      	ldr	r3, [pc, #76]	@ (8002220 <NAU_update+0x80>)
 80021d4:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3301      	adds	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	4b10      	ldr	r3, [pc, #64]	@ (8002220 <NAU_update+0x80>)
 80021e0:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194

    counter = 0;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <NAU_update+0x78>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]

    if (idx > LOADCELL_BUF_LEN - 2) {
 80021ea:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <NAU_update+0x7c>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b62      	cmp	r3, #98	@ 0x62
 80021f0:	d903      	bls.n	80021fa <NAU_update+0x5a>
      idx = 0;
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <NAU_update+0x7c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e005      	b.n	8002206 <NAU_update+0x66>
    } else {
      idx++;
 80021fa:	4b08      	ldr	r3, [pc, #32]	@ (800221c <NAU_update+0x7c>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <NAU_update+0x7c>)
 8002204:	701a      	strb	r2, [r3, #0]
    }

    exec_time = TIM2->CNT;
 8002206:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <NAU_update+0x84>)
 8002210:	701a      	strb	r2, [r3, #0]
  }
}
 8002212:	bf00      	nop
 8002214:	bd98      	pop	{r3, r4, r7, pc}
 8002216:	bf00      	nop
 8002218:	2000665a 	.word	0x2000665a
 800221c:	2000665b 	.word	0x2000665b
 8002220:	20006670 	.word	0x20006670
 8002224:	20006658 	.word	0x20006658

08002228 <ecu_update>:

void ecu_update() {
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  static uint8_t counter = 0;

  counter++;
 800222c:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <ecu_update+0x2c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b07      	ldr	r3, [pc, #28]	@ (8002254 <ecu_update+0x2c>)
 8002236:	701a      	strb	r2, [r3, #0]
  if (counter > 14) {
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <ecu_update+0x2c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b0e      	cmp	r3, #14
 800223e:	d907      	bls.n	8002250 <ecu_update+0x28>
    counter = 0;
 8002240:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <ecu_update+0x2c>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(&huart1, tx_buf_usart1, USART1_TX_BUF_LEN);
 8002246:	2202      	movs	r2, #2
 8002248:	4903      	ldr	r1, [pc, #12]	@ (8002258 <ecu_update+0x30>)
 800224a:	4804      	ldr	r0, [pc, #16]	@ (800225c <ecu_update+0x34>)
 800224c:	f00d fc02 	bl	800fa54 <HAL_UART_Transmit_DMA>
  }
}
 8002250:	bf00      	nop
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000665c 	.word	0x2000665c
 8002258:	20000004 	.word	0x20000004
 800225c:	200060b0 	.word	0x200060b0

08002260 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM8) {
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a06      	ldr	r2, [pc, #24]	@ (8002288 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d106      	bne.n	8002280 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
    HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_3);
 8002272:	2108      	movs	r1, #8
 8002274:	4805      	ldr	r0, [pc, #20]	@ (800228c <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8002276:	f00b fe71 	bl	800df5c <HAL_TIM_PWM_Stop_DMA>
    led_data_sent = true;
 800227a:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
  }
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40013400 	.word	0x40013400
 800228c:	20005f28 	.word	0x20005f28
 8002290:	20006806 	.word	0x20006806

08002294 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	@ (80022cc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d102      	bne.n	80022ac <HAL_TIM_PeriodElapsedCallback+0x18>
  {
    HAL_IncTick();
 80022a6:	f001 fd69 	bl	8003d7c <HAL_IncTick>
    ecu_update();
    stim_ref_clk++;
  }

  /* USER CODE END Callback 1 */
}
 80022aa:	e00a      	b.n	80022c2 <HAL_TIM_PeriodElapsedCallback+0x2e>
    ADC_update();
 80022ac:	f7ff ff68 	bl	8002180 <ADC_update>
    NAU_update();
 80022b0:	f7ff ff76 	bl	80021a0 <NAU_update>
    ecu_update();
 80022b4:	f7ff ffb8 	bl	8002228 <ecu_update>
    stim_ref_clk++;
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80022c0:	6013      	str	r3, [r2, #0]
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40001000 	.word	0x40001000
 80022d0:	20000018 	.word	0x20000018

080022d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d8:	b672      	cpsid	i
}
 80022da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <Error_Handler+0x8>

080022e0 <stim_start>:

// clang-format off

uint32_t stim_ref_clk = 0xFFFFFFFF;

void stim_start(stim *inst) { 
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if (inst->start_tick == 0xFFFFFFFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d103      	bne.n	80022fa <stim_start+0x1a>
    inst->start_tick = stim_ref_clk; 
 80022f2:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <stim_start+0x28>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	601a      	str	r2, [r3, #0]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000018 	.word	0x20000018

0800230c <stim_stop>:

void stim_stop(stim *inst) {
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  inst->start_tick = 0xFFFFFFFF;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f04f 32ff 	mov.w	r2, #4294967295
 800231a:	601a      	str	r2, [r3, #0]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <stim_get>:

void stim_reset(stim *inst) { 
  inst->start_tick = stim_ref_clk;
}

uint32_t stim_get(stim *inst) {
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if (inst->start_tick == 0xFFFFFFFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d101      	bne.n	800233e <stim_get+0x16>
    return 0;
 800233a:	2300      	movs	r3, #0
 800233c:	e004      	b.n	8002348 <stim_get+0x20>

  return stim_ref_clk - inst->start_tick;
 800233e:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <stim_get+0x2c>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	1ad3      	subs	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	20000018 	.word	0x20000018

08002358 <led_init>:
Led_data solid_black;
Led_data solid_red;

stim timer;

void led_init() {
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  led_reset_colors(&leds);
 800235c:	480b      	ldr	r0, [pc, #44]	@ (800238c <led_init+0x34>)
 800235e:	f000 f9fd 	bl	800275c <led_reset_colors>
  led_set_solid_color(0, 0, 0, 0, &solid_black);
 8002362:	4b0b      	ldr	r3, [pc, #44]	@ (8002390 <led_init+0x38>)
 8002364:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8002394 <led_init+0x3c>
 8002368:	2200      	movs	r2, #0
 800236a:	2100      	movs	r1, #0
 800236c:	2000      	movs	r0, #0
 800236e:	f000 f9ad 	bl	80026cc <led_set_solid_color>
  led_set_solid_color(255, 0, 0, BRIGHTNESS, &solid_red);
 8002372:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <led_init+0x40>)
 8002374:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800239c <led_init+0x44>
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	20ff      	movs	r0, #255	@ 0xff
 800237e:	f000 f9a5 	bl	80026cc <led_set_solid_color>

  stim_start(&timer);
 8002382:	4807      	ldr	r0, [pc, #28]	@ (80023a0 <led_init+0x48>)
 8002384:	f7ff ffac 	bl	80022e0 <stim_start>
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20006808 	.word	0x20006808
 8002390:	2000687c 	.word	0x2000687c
 8002394:	00000000 	.word	0x00000000
 8002398:	200068f0 	.word	0x200068f0
 800239c:	3f19999a 	.word	0x3f19999a
 80023a0:	20006964 	.word	0x20006964

080023a4 <_led_set_all_brightness>:

void _led_set_all_brightness(const float brightness, Led_data *led) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80023ae:	6038      	str	r0, [r7, #0]
  float gamma = powf(brightness, GAMMA);
 80023b0:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 80023b4:	ed97 0a01 	vldr	s0, [r7, #4]
 80023b8:	f011 fef7 	bl	80141aa <powf>
 80023bc:	ed87 0a03 	vstr	s0, [r7, #12]

  if (gamma > 1)
 80023c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80023c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	dd03      	ble.n	80023da <_led_set_all_brightness+0x36>
    gamma = 1;
 80023d2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	e009      	b.n	80023ee <_led_set_all_brightness+0x4a>
  else if (gamma < 0)
 80023da:	edd7 7a03 	vldr	s15, [r7, #12]
 80023de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	d502      	bpl.n	80023ee <_led_set_all_brightness+0x4a>
    gamma = 0;
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]

  for (uint8_t i = 0; i < MAX_LED; i++) {
 80023ee:	2300      	movs	r3, #0
 80023f0:	72fb      	strb	r3, [r7, #11]
 80023f2:	e027      	b.n	8002444 <_led_set_all_brightness+0xa0>
    uint16_t mask = 1 << i;
 80023f4:	7afb      	ldrb	r3, [r7, #11]
 80023f6:	2201      	movs	r2, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	813b      	strh	r3, [r7, #8]
    if (led->gamma[i] != gamma) {
 80023fe:	7afb      	ldrb	r3, [r7, #11]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	3308      	adds	r3, #8
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	3304      	adds	r3, #4
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002412:	eeb4 7a67 	vcmp.f32	s14, s15
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	d010      	beq.n	800243e <_led_set_all_brightness+0x9a>
      led->gamma[i] = gamma;
 800241c:	7afb      	ldrb	r3, [r7, #11]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	3308      	adds	r3, #8
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3304      	adds	r3, #4
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	601a      	str	r2, [r3, #0]
      led->changelog |= mask;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 8002432:	893b      	ldrh	r3, [r7, #8]
 8002434:	4313      	orrs	r3, r2
 8002436:	b29a      	uxth	r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  for (uint8_t i = 0; i < MAX_LED; i++) {
 800243e:	7afb      	ldrb	r3, [r7, #11]
 8002440:	3301      	adds	r3, #1
 8002442:	72fb      	strb	r3, [r7, #11]
 8002444:	7afb      	ldrb	r3, [r7, #11]
 8002446:	2b0a      	cmp	r3, #10
 8002448:	d9d4      	bls.n	80023f4 <_led_set_all_brightness+0x50>
    }
  }
}
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <led_set_all_brightness>:

void led_set_all_brightness(const float brightness) { _led_set_all_brightness(brightness, &leds); }
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	ed87 0a01 	vstr	s0, [r7, #4]
 800245e:	4804      	ldr	r0, [pc, #16]	@ (8002470 <led_set_all_brightness+0x1c>)
 8002460:	ed97 0a01 	vldr	s0, [r7, #4]
 8002464:	f7ff ff9e 	bl	80023a4 <_led_set_all_brightness>
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20006808 	.word	0x20006808

08002474 <_led_set_brightness>:

void _led_set_brightness(Led_data *led, uint8_t led_num, const float brightness) {
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	460b      	mov	r3, r1
 800247e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002482:	72fb      	strb	r3, [r7, #11]
  float gamma = powf(brightness, GAMMA);
 8002484:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8002488:	ed97 0a01 	vldr	s0, [r7, #4]
 800248c:	f011 fe8d 	bl	80141aa <powf>
 8002490:	ed87 0a05 	vstr	s0, [r7, #20]

  if (gamma > 1)
 8002494:	edd7 7a05 	vldr	s15, [r7, #20]
 8002498:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800249c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	dd03      	ble.n	80024ae <_led_set_brightness+0x3a>
    gamma = 1;
 80024a6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e009      	b.n	80024c2 <_led_set_brightness+0x4e>
  else if (gamma < 0)
 80024ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80024b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	d502      	bpl.n	80024c2 <_led_set_brightness+0x4e>
    gamma = 0;
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]

  led->gamma[led_num] = gamma;
 80024c2:	7afb      	ldrb	r3, [r7, #11]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	3308      	adds	r3, #8
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	3304      	adds	r3, #4
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	601a      	str	r2, [r3, #0]
  led->changelog |= (1 << led_num);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80024d8:	b21a      	sxth	r2, r3
 80024da:	7afb      	ldrb	r3, [r7, #11]
 80024dc:	2101      	movs	r1, #1
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	4313      	orrs	r3, r2
 80024e6:	b21b      	sxth	r3, r3
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80024f0:	bf00      	nop
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <led_set_brightness>:

void led_set_brightness(uint8_t led_num, const float brightness) { _led_set_brightness(&leds, led_num, brightness); }
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	ed87 0a00 	vstr	s0, [r7]
 8002504:	71fb      	strb	r3, [r7, #7]
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	ed97 0a00 	vldr	s0, [r7]
 800250c:	4619      	mov	r1, r3
 800250e:	4803      	ldr	r0, [pc, #12]	@ (800251c <led_set_brightness+0x24>)
 8002510:	f7ff ffb0 	bl	8002474 <_led_set_brightness>
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20006808 	.word	0x20006808

08002520 <_led_compute_gamma>:

void _led_compute_gamma(Led_data *led) {
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < MAX_LED; i++) {
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e040      	b.n	80025b0 <_led_compute_gamma+0x90>
    uint16_t mask = 1 << i;
 800252e:	2201      	movs	r2, #1
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	81fb      	strh	r3, [r7, #14]

    if (led->changelog & mask) {
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800253e:	89fb      	ldrh	r3, [r7, #14]
 8002540:	4013      	ands	r3, r2
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d030      	beq.n	80025aa <_led_compute_gamma+0x8a>
      for (int j = 0; j < 3; j++) {
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	e02a      	b.n	80025a4 <_led_compute_gamma+0x84>
        led->final_color[i][j] = (led->color[i][j]) * led->gamma[i];
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4613      	mov	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	4413      	add	r3, r2
 8002558:	18ca      	adds	r2, r1, r3
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4413      	add	r3, r2
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3308      	adds	r3, #8
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	3304      	adds	r3, #4
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002580:	edc7 7a00 	vstr	s15, [r7]
 8002584:	783b      	ldrb	r3, [r7, #0]
 8002586:	b2d8      	uxtb	r0, r3
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	18ca      	adds	r2, r1, r3
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4413      	add	r3, r2
 8002598:	3350      	adds	r3, #80	@ 0x50
 800259a:	4602      	mov	r2, r0
 800259c:	701a      	strb	r2, [r3, #0]
      for (int j = 0; j < 3; j++) {
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	3301      	adds	r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	ddd1      	ble.n	800254e <_led_compute_gamma+0x2e>
  for (int i = 0; i < MAX_LED; i++) {
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2b0a      	cmp	r3, #10
 80025b4:	ddbb      	ble.n	800252e <_led_compute_gamma+0xe>
      }
    }
  }
  led->changelog = 0x000;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80025be:	bf00      	nop
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <_led_set_color>:
void _led_set_color(const uint8_t led_num,
                   const uint8_t red,
                   const uint8_t green,
                   const uint8_t blue,
                   const float brightness,
                   Led_data *led){
 80025ca:	b590      	push	{r4, r7, lr}
 80025cc:	b085      	sub	sp, #20
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4604      	mov	r4, r0
 80025d2:	4608      	mov	r0, r1
 80025d4:	4611      	mov	r1, r2
 80025d6:	461a      	mov	r2, r3
 80025d8:	ed87 0a00 	vstr	s0, [r7]
 80025dc:	4623      	mov	r3, r4
 80025de:	71fb      	strb	r3, [r7, #7]
 80025e0:	4603      	mov	r3, r0
 80025e2:	71bb      	strb	r3, [r7, #6]
 80025e4:	460b      	mov	r3, r1
 80025e6:	717b      	strb	r3, [r7, #5]
 80025e8:	4613      	mov	r3, r2
 80025ea:	713b      	strb	r3, [r7, #4]
  float gamma = powf(brightness, GAMMA);
 80025ec:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 80025f0:	ed97 0a00 	vldr	s0, [r7]
 80025f4:	f011 fdd9 	bl	80141aa <powf>
 80025f8:	ed87 0a03 	vstr	s0, [r7, #12]

  if (gamma == 0){
 80025fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002600:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002608:	d108      	bne.n	800261c <_led_set_color+0x52>
    led->gamma[led_num] = gamma;
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	3308      	adds	r3, #8
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	3304      	adds	r3, #4
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e021      	b.n	8002660 <_led_set_color+0x96>
  } else {
    led->color[led_num][0] = red;
 800261c:	79fa      	ldrb	r2, [r7, #7]
 800261e:	6a39      	ldr	r1, [r7, #32]
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	440b      	add	r3, r1
 8002628:	79ba      	ldrb	r2, [r7, #6]
 800262a:	701a      	strb	r2, [r3, #0]
    led->color[led_num][1] = green;
 800262c:	79fa      	ldrb	r2, [r7, #7]
 800262e:	6a39      	ldr	r1, [r7, #32]
 8002630:	4613      	mov	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4413      	add	r3, r2
 8002636:	440b      	add	r3, r1
 8002638:	3301      	adds	r3, #1
 800263a:	797a      	ldrb	r2, [r7, #5]
 800263c:	701a      	strb	r2, [r3, #0]
    led->color[led_num][2] = blue;
 800263e:	79fa      	ldrb	r2, [r7, #7]
 8002640:	6a39      	ldr	r1, [r7, #32]
 8002642:	4613      	mov	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4413      	add	r3, r2
 8002648:	440b      	add	r3, r1
 800264a:	3302      	adds	r3, #2
 800264c:	793a      	ldrb	r2, [r7, #4]
 800264e:	701a      	strb	r2, [r3, #0]
    led->gamma[led_num] = gamma;
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	6a3a      	ldr	r2, [r7, #32]
 8002654:	3308      	adds	r3, #8
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	3304      	adds	r3, #4
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	601a      	str	r2, [r3, #0]
  }

  led->changelog = led->changelog | (1 << led_num);
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8002666:	b21a      	sxth	r2, r3
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2101      	movs	r1, #1
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	b21b      	sxth	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	b21b      	sxth	r3, r3
 8002676:	b29a      	uxth	r2, r3
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
	...

08002688 <led_set_color>:

void led_set_color(const uint8_t led_num,
                   const uint8_t red,
                   const uint8_t green,
                   const uint8_t blue,
                   const float brightness) {
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b085      	sub	sp, #20
 800268c:	af02      	add	r7, sp, #8
 800268e:	4604      	mov	r4, r0
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	ed87 0a00 	vstr	s0, [r7]
 800269a:	4623      	mov	r3, r4
 800269c:	71fb      	strb	r3, [r7, #7]
 800269e:	4603      	mov	r3, r0
 80026a0:	71bb      	strb	r3, [r7, #6]
 80026a2:	460b      	mov	r3, r1
 80026a4:	717b      	strb	r3, [r7, #5]
 80026a6:	4613      	mov	r3, r2
 80026a8:	713b      	strb	r3, [r7, #4]
  _led_set_color(led_num, red, green, blue, brightness,  &leds);
 80026aa:	793b      	ldrb	r3, [r7, #4]
 80026ac:	797a      	ldrb	r2, [r7, #5]
 80026ae:	79b9      	ldrb	r1, [r7, #6]
 80026b0:	79f8      	ldrb	r0, [r7, #7]
 80026b2:	4c05      	ldr	r4, [pc, #20]	@ (80026c8 <led_set_color+0x40>)
 80026b4:	9400      	str	r4, [sp, #0]
 80026b6:	ed97 0a00 	vldr	s0, [r7]
 80026ba:	f7ff ff86 	bl	80025ca <_led_set_color>
};
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd90      	pop	{r4, r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20006808 	.word	0x20006808

080026cc <led_set_solid_color>:

void led_set_solid_color(const uint8_t red,
                         const uint8_t green,
                         const uint8_t blue,
                         const float brightness,
                         Led_data *led){
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	ed87 0a02 	vstr	s0, [r7, #8]
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	460b      	mov	r3, r1
 80026de:	73bb      	strb	r3, [r7, #14]
 80026e0:	4613      	mov	r3, r2
 80026e2:	737b      	strb	r3, [r7, #13]
  float gamma = powf(brightness, GAMMA);
 80026e4:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 80026e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80026ec:	f011 fd5d 	bl	80141aa <powf>
 80026f0:	ed87 0a04 	vstr	s0, [r7, #16]
  for (int i = 0; i < MAX_LED; i++) {
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	e024      	b.n	8002744 <led_set_solid_color+0x78>
      led->color[i][0] = red;
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	440b      	add	r3, r1
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	701a      	strb	r2, [r3, #0]
      led->color[i][1] = green;
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	440b      	add	r3, r1
 8002716:	3301      	adds	r3, #1
 8002718:	7bba      	ldrb	r2, [r7, #14]
 800271a:	701a      	strb	r2, [r3, #0]
      led->color[i][2] = blue;
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	440b      	add	r3, r1
 8002728:	3302      	adds	r3, #2
 800272a:	7b7a      	ldrb	r2, [r7, #13]
 800272c:	701a      	strb	r2, [r3, #0]
      led->gamma[i] = gamma;
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3308      	adds	r3, #8
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	3304      	adds	r3, #4
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < MAX_LED; i++) {
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3301      	adds	r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b0a      	cmp	r3, #10
 8002748:	ddd7      	ble.n	80026fa <led_set_solid_color+0x2e>
  }
  led->changelog = 0x7FF;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002750:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8002754:	bf00      	nop
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <led_reset_colors>:

// clang-format on
void led_reset_colors(Led_data *led) {
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < MAX_LED; i++) {
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e01e      	b.n	80027a8 <led_reset_colors+0x4c>
    for (int j = 0; j < 3; j++) {
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	e015      	b.n	800279c <led_reset_colors+0x40>
      led->color[i][j] = colors_base[i][j];
 8002770:	4912      	ldr	r1, [pc, #72]	@ (80027bc <led_reset_colors+0x60>)
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	18ca      	adds	r2, r1, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	4413      	add	r3, r2
 8002780:	7818      	ldrb	r0, [r3, #0]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	18ca      	adds	r2, r1, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4413      	add	r3, r2
 8002792:	4602      	mov	r2, r0
 8002794:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < 3; j++) {
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	3301      	adds	r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	dde6      	ble.n	8002770 <led_reset_colors+0x14>
  for (int i = 0; i < MAX_LED; i++) {
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3301      	adds	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b0a      	cmp	r3, #10
 80027ac:	dddd      	ble.n	800276a <led_reset_colors+0xe>
    }
  }
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	2000014c 	.word	0x2000014c

080027c0 <_convert_to_pwm>:

void _convert_to_pwm(Led_data *led, uint16_t *pwm_data) {
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t color, index = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < MAX_LED; i++) {
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	e041      	b.n	8002858 <_convert_to_pwm+0x98>
    color = ((led->final_color[i][0] << 16) | (led->final_color[i][1] << 8) | (led->final_color[i][2]));
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4613      	mov	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	440b      	add	r3, r1
 80027e0:	3350      	adds	r3, #80	@ 0x50
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	0419      	lsls	r1, r3, #16
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	4403      	add	r3, r0
 80027f2:	3351      	adds	r3, #81	@ 0x51
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	4319      	orrs	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	4403      	add	r3, r0
 8002806:	3352      	adds	r3, #82	@ 0x52
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	430b      	orrs	r3, r1
 800280c:	60bb      	str	r3, [r7, #8]
    for (int i = 23; i >= 0; i--) {
 800280e:	2317      	movs	r3, #23
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e01b      	b.n	800284c <_convert_to_pwm+0x8c>
      if (color & (1 << i))
 8002814:	2201      	movs	r2, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <_convert_to_pwm+0x74>
        pwm_data[index] = 212; // 312*0.68
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4413      	add	r3, r2
 800282e:	22d4      	movs	r2, #212	@ 0xd4
 8002830:	801a      	strh	r2, [r3, #0]
 8002832:	e005      	b.n	8002840 <_convert_to_pwm+0x80>
      else
        pwm_data[index] = 100; // 312-212
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	2264      	movs	r2, #100	@ 0x64
 800283e:	801a      	strh	r2, [r3, #0]

      index++;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3301      	adds	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
    for (int i = 23; i >= 0; i--) {
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3b01      	subs	r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	dae0      	bge.n	8002814 <_convert_to_pwm+0x54>
  for (int i = 0; i < MAX_LED; i++) {
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	3301      	adds	r3, #1
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2b0a      	cmp	r3, #10
 800285c:	ddba      	ble.n	80027d4 <_convert_to_pwm+0x14>
    }
  }
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <_led_send>:

#define RESET_CODE 50
uint16_t pwm_data[(8 * 3 * MAX_LED) + RESET_CODE];

void _led_send(Led_data *led) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  _led_compute_gamma(led);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff fe53 	bl	8002520 <_led_compute_gamma>
  _convert_to_pwm(led, pwm_data);
 800287a:	490d      	ldr	r1, [pc, #52]	@ (80028b0 <_led_send+0x44>)
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ff9f 	bl	80027c0 <_convert_to_pwm>

  HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_3, (uint32_t *)pwm_data, sizeof(pwm_data));
 8002882:	f44f 731d 	mov.w	r3, #628	@ 0x274
 8002886:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <_led_send+0x44>)
 8002888:	2108      	movs	r1, #8
 800288a:	480a      	ldr	r0, [pc, #40]	@ (80028b4 <_led_send+0x48>)
 800288c:	f00b f8e0 	bl	800da50 <HAL_TIM_PWM_Start_DMA>
  while (!led_data_sent)
 8002890:	bf00      	nop
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <_led_send+0x4c>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	f083 0301 	eor.w	r3, r3, #1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f8      	bne.n	8002892 <_led_send+0x26>
    ;
  led_data_sent = false;
 80028a0:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <_led_send+0x4c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20006968 	.word	0x20006968
 80028b4:	20005f28 	.word	0x20005f28
 80028b8:	20006806 	.word	0x20006806

080028bc <led_send>:

void led_send() { _led_send(&leds); }
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4802      	ldr	r0, [pc, #8]	@ (80028cc <led_send+0x10>)
 80028c2:	f7ff ffd3 	bl	800286c <_led_send>
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20006808 	.word	0x20006808

080028d0 <led_startup_animation>:

void led_startup_animation() {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
  for (int i = 0; i < 11; i++) {
 80028d6:	2300      	movs	r3, #0
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	e00e      	b.n	80028fa <led_startup_animation+0x2a>
    led_set_brightness(i, BRIGHTNESS);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8002960 <led_startup_animation+0x90>
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fe07 	bl	80024f8 <led_set_brightness>
    led_send();
 80028ea:	f7ff ffe7 	bl	80028bc <led_send>
    tx_thread_sleep(MS_TO_TICKS(100));
 80028ee:	2064      	movs	r0, #100	@ 0x64
 80028f0:	f00f f87e 	bl	80119f0 <_tx_thread_sleep>
  for (int i = 0; i < 11; i++) {
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3301      	adds	r3, #1
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b0a      	cmp	r3, #10
 80028fe:	dded      	ble.n	80028dc <led_startup_animation+0xc>
  }

  tx_thread_sleep(MS_TO_TICKS(500));
 8002900:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002904:	f00f f874 	bl	80119f0 <_tx_thread_sleep>

  for (float i = BRIGHTNESS; i >= 0; i -= 0.0025) {
 8002908:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <led_startup_animation+0x94>)
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	e018      	b.n	8002940 <led_startup_animation+0x70>
    led_set_all_brightness(i);
 800290e:	ed97 0a00 	vldr	s0, [r7]
 8002912:	f7ff fd9f 	bl	8002454 <led_set_all_brightness>
    led_send();
 8002916:	f7ff ffd1 	bl	80028bc <led_send>
    tx_thread_sleep(MS_TO_TICKS(5));
 800291a:	2005      	movs	r0, #5
 800291c:	f00f f868 	bl	80119f0 <_tx_thread_sleep>
  for (float i = BRIGHTNESS; i >= 0; i -= 0.0025) {
 8002920:	6838      	ldr	r0, [r7, #0]
 8002922:	f7fd ff3f 	bl	80007a4 <__aeabi_f2d>
 8002926:	a30c      	add	r3, pc, #48	@ (adr r3, 8002958 <led_startup_animation+0x88>)
 8002928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292c:	f7fd fdda 	bl	80004e4 <__aeabi_dsub>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f7fd ff8c 	bl	8000854 <__aeabi_d2f>
 800293c:	4603      	mov	r3, r0
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	edd7 7a00 	vldr	s15, [r7]
 8002944:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294c:	dadf      	bge.n	800290e <led_startup_animation+0x3e>
  }
}
 800294e:	bf00      	nop
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	47ae147b 	.word	0x47ae147b
 800295c:	3f647ae1 	.word	0x3f647ae1
 8002960:	3f19999a 	.word	0x3f19999a
 8002964:	3f19999a 	.word	0x3f19999a

08002968 <_redline>:

#define MIN_RPM 4000
#define REDLINE 9000
#define MAX_RPM 9500

void _redline() {
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
#define MIN_BLINK_RATE 250.0f // in ms
#define MAX_BLINK_RATE 150.0f // in ms
  stim_start(&timer);
 800296e:	481f      	ldr	r0, [pc, #124]	@ (80029ec <_redline+0x84>)
 8002970:	f7ff fcb6 	bl	80022e0 <stim_start>
  uint16_t blink_rate = roundf(MIN_BLINK_RATE + (((float)ecu.rpm - REDLINE) / (MAX_RPM - REDLINE)) * (MAX_BLINK_RATE - MIN_BLINK_RATE));
 8002974:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <_redline+0x88>)
 8002976:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800297a:	b29b      	uxth	r3, r3
 800297c:	ee07 3a90 	vmov	s15, r3
 8002980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002984:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80029f4 <_redline+0x8c>
 8002988:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800298c:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 80029f8 <_redline+0x90>
 8002990:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002994:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80029fc <_redline+0x94>
 8002998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002a00 <_redline+0x98>
 80029a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029a4:	eeb0 0a67 	vmov.f32	s0, s15
 80029a8:	f011 fc60 	bl	801426c <roundf>
 80029ac:	eef0 7a40 	vmov.f32	s15, s0
 80029b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029b4:	ee17 3a90 	vmov	r3, s15
 80029b8:	80fb      	strh	r3, [r7, #6]

  if (stim_get(&timer) % (blink_rate * 2) < blink_rate) {
 80029ba:	480c      	ldr	r0, [pc, #48]	@ (80029ec <_redline+0x84>)
 80029bc:	f7ff fcb4 	bl	8002328 <stim_get>
 80029c0:	4603      	mov	r3, r0
 80029c2:	88fa      	ldrh	r2, [r7, #6]
 80029c4:	0052      	lsls	r2, r2, #1
 80029c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80029ca:	fb01 f202 	mul.w	r2, r1, r2
 80029ce:	1a9a      	subs	r2, r3, r2
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d203      	bcs.n	80029de <_redline+0x76>
    _led_send(&solid_red);
 80029d6:	480b      	ldr	r0, [pc, #44]	@ (8002a04 <_redline+0x9c>)
 80029d8:	f7ff ff48 	bl	800286c <_led_send>
  } else {
    _led_send(&solid_black);
  }
}
 80029dc:	e002      	b.n	80029e4 <_redline+0x7c>
    _led_send(&solid_black);
 80029de:	480a      	ldr	r0, [pc, #40]	@ (8002a08 <_redline+0xa0>)
 80029e0:	f7ff ff44 	bl	800286c <_led_send>
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20006964 	.word	0x20006964
 80029f0:	20005854 	.word	0x20005854
 80029f4:	460ca000 	.word	0x460ca000
 80029f8:	43fa0000 	.word	0x43fa0000
 80029fc:	c2c80000 	.word	0xc2c80000
 8002a00:	437a0000 	.word	0x437a0000
 8002a04:	200068f0 	.word	0x200068f0
 8002a08:	2000687c 	.word	0x2000687c

08002a0c <led_update>:

void led_update() {
 8002a0c:	b5b0      	push	{r4, r5, r7, lr}
 8002a0e:	b08a      	sub	sp, #40	@ 0x28
 8002a10:	af00      	add	r7, sp, #0
  static uint8_t num_on = 0;

  ecu_data_update();
 8002a12:	f7fe fcc7 	bl	80013a4 <ecu_data_update>

  if (ecu.rpm > REDLINE) {
 8002a16:	4b87      	ldr	r3, [pc, #540]	@ (8002c34 <led_update+0x228>)
 8002a18:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	f242 3228 	movw	r2, #9000	@ 0x2328
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d902      	bls.n	8002a2c <led_update+0x20>
    _redline();
 8002a26:	f7ff ff9f 	bl	8002968 <_redline>
      }
    }

    led_send();
  }
}
 8002a2a:	e0ff      	b.n	8002c2c <led_update+0x220>
    int16_t rpm_scaled = ecu.rpm - MIN_RPM;
 8002a2c:	4b81      	ldr	r3, [pc, #516]	@ (8002c34 <led_update+0x228>)
 8002a2e:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    stim_stop(&timer);
 8002a3c:	487e      	ldr	r0, [pc, #504]	@ (8002c38 <led_update+0x22c>)
 8002a3e:	f7ff fc65 	bl	800230c <stim_stop>
    if (rpm_scaled < 0)
 8002a42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	da01      	bge.n	8002a4e <led_update+0x42>
      rpm_scaled = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    num_on = roundf((float)(rpm_scaled * MAX_LED) / (REDLINE - MIN_RPM));
 8002a4e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a64:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8002c3c <led_update+0x230>
 8002a68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a70:	f011 fbfc 	bl	801426c <roundf>
 8002a74:	eef0 7a40 	vmov.f32	s15, s0
 8002a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a80:	793b      	ldrb	r3, [r7, #4]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	4b6e      	ldr	r3, [pc, #440]	@ (8002c40 <led_update+0x234>)
 8002a86:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAX_LED; i++) {
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
 8002a8c:	e0c8      	b.n	8002c20 <led_update+0x214>
      if (i <= num_on) {
 8002a8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002c40 <led_update+0x234>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	4293      	cmp	r3, r2
 8002a98:	f300 80b6 	bgt.w	8002c08 <led_update+0x1fc>
        a = 1 - (float)rpm_scaled / (REDLINE - MIN_RPM);
 8002a9c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa8:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8002c3c <led_update+0x230>
 8002aac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ab0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab8:	edc7 7a07 	vstr	s15, [r7, #28]
        idx = roundf(0 + a * (100 - 0));
 8002abc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ac0:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8002c44 <led_update+0x238>
 8002ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac8:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8002c48 <led_update+0x23c>
 8002acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad4:	f011 fbca 	bl	801426c <roundf>
 8002ad8:	eef0 7a40 	vmov.f32	s15, s0
 8002adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae0:	edc7 7a01 	vstr	s15, [r7, #4]
 8002ae4:	793b      	ldrb	r3, [r7, #4]
 8002ae6:	76fb      	strb	r3, [r7, #27]
        if (i != num_on)
 8002ae8:	4b55      	ldr	r3, [pc, #340]	@ (8002c40 <led_update+0x234>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d01e      	beq.n	8002b32 <led_update+0x126>
          led_set_color(i, gradient[idx][0], gradient[idx][1], gradient[idx][2], BRIGHTNESS);
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	b2d8      	uxtb	r0, r3
 8002af8:	7efa      	ldrb	r2, [r7, #27]
 8002afa:	4954      	ldr	r1, [pc, #336]	@ (8002c4c <led_update+0x240>)
 8002afc:	4613      	mov	r3, r2
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4413      	add	r3, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	7819      	ldrb	r1, [r3, #0]
 8002b06:	7efa      	ldrb	r2, [r7, #27]
 8002b08:	4c50      	ldr	r4, [pc, #320]	@ (8002c4c <led_update+0x240>)
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	4413      	add	r3, r2
 8002b10:	4423      	add	r3, r4
 8002b12:	3301      	adds	r3, #1
 8002b14:	781c      	ldrb	r4, [r3, #0]
 8002b16:	7efa      	ldrb	r2, [r7, #27]
 8002b18:	4d4c      	ldr	r5, [pc, #304]	@ (8002c4c <led_update+0x240>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	4413      	add	r3, r2
 8002b20:	442b      	add	r3, r5
 8002b22:	3302      	adds	r3, #2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	ed9f 0a4a 	vldr	s0, [pc, #296]	@ 8002c50 <led_update+0x244>
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	f7ff fdac 	bl	8002688 <led_set_color>
 8002b30:	e073      	b.n	8002c1a <led_update+0x20e>
          if (rpm_scaled != 0) {
 8002b32:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d05c      	beq.n	8002bf4 <led_update+0x1e8>
            float rpm_scaled_prev_led = ((float)(num_on - 1) * (REDLINE - MIN_RPM) / (float)MAX_LED);
 8002b3a:	4b41      	ldr	r3, [pc, #260]	@ (8002c40 <led_update+0x234>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b48:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8002c3c <led_update+0x230>
 8002b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b50:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8002b54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b58:	edc7 7a05 	vstr	s15, [r7, #20]
            float rpm_scaled_next_led = ((float)(num_on + 1) * (REDLINE - MIN_RPM) / (float)MAX_LED);
 8002b5c:	4b38      	ldr	r3, [pc, #224]	@ (8002c40 <led_update+0x234>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	3301      	adds	r3, #1
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b6a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002c3c <led_update+0x230>
 8002b6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b72:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8002b76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b7a:	edc7 7a04 	vstr	s15, [r7, #16]
            float brightness = 0 + (rpm_scaled - rpm_scaled_prev_led) / (rpm_scaled_next_led - rpm_scaled_prev_led) *
 8002b7e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8002b82:	ee07 3a90 	vmov	s15, r3
 8002b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b8e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b92:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b96:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ba2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002c50 <led_update+0x244>
 8002ba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002baa:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002c48 <led_update+0x23c>
 8002bae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bb2:	edc7 7a03 	vstr	s15, [r7, #12]
            led_set_color(i, gradient[idx][0], gradient[idx][1], gradient[idx][2], brightness);
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	b2d8      	uxtb	r0, r3
 8002bba:	7efa      	ldrb	r2, [r7, #27]
 8002bbc:	4923      	ldr	r1, [pc, #140]	@ (8002c4c <led_update+0x240>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	7819      	ldrb	r1, [r3, #0]
 8002bc8:	7efa      	ldrb	r2, [r7, #27]
 8002bca:	4c20      	ldr	r4, [pc, #128]	@ (8002c4c <led_update+0x240>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	4423      	add	r3, r4
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	781c      	ldrb	r4, [r3, #0]
 8002bd8:	7efa      	ldrb	r2, [r7, #27]
 8002bda:	4d1c      	ldr	r5, [pc, #112]	@ (8002c4c <led_update+0x240>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4413      	add	r3, r2
 8002be2:	442b      	add	r3, r5
 8002be4:	3302      	adds	r3, #2
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	ed97 0a03 	vldr	s0, [r7, #12]
 8002bec:	4622      	mov	r2, r4
 8002bee:	f7ff fd4b 	bl	8002688 <led_set_color>
 8002bf2:	e012      	b.n	8002c1a <led_update+0x20e>
            led_set_color(i, 0, 0, 0, 0);
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	b2d8      	uxtb	r0, r3
 8002bf8:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8002c48 <led_update+0x23c>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	f7ff fd41 	bl	8002688 <led_set_color>
 8002c06:	e008      	b.n	8002c1a <led_update+0x20e>
        led_set_color(i, 0, 0, 0, 0);
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	b2d8      	uxtb	r0, r3
 8002c0c:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8002c48 <led_update+0x23c>
 8002c10:	2300      	movs	r3, #0
 8002c12:	2200      	movs	r2, #0
 8002c14:	2100      	movs	r1, #0
 8002c16:	f7ff fd37 	bl	8002688 <led_set_color>
    for (int i = 0; i < MAX_LED; i++) {
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	623b      	str	r3, [r7, #32]
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2b0a      	cmp	r3, #10
 8002c24:	f77f af33 	ble.w	8002a8e <led_update+0x82>
    led_send();
 8002c28:	f7ff fe48 	bl	80028bc <led_send>
}
 8002c2c:	bf00      	nop
 8002c2e:	3728      	adds	r7, #40	@ 0x28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bdb0      	pop	{r4, r5, r7, pc}
 8002c34:	20005854 	.word	0x20005854
 8002c38:	20006964 	.word	0x20006964
 8002c3c:	459c4000 	.word	0x459c4000
 8002c40:	20006bdc 	.word	0x20006bdc
 8002c44:	42c80000 	.word	0x42c80000
 8002c48:	00000000 	.word	0x00000000
 8002c4c:	2000001c 	.word	0x2000001c
 8002c50:	3f19999a 	.word	0x3f19999a

08002c54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  /* Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002c58:	f004 fd54 	bl	8007704 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b0cc      	sub	sp, #304	@ 0x130
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c6e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c84:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2100      	movs	r1, #0
 8002c92:	f010 fdf3 	bl	801387c <memset>
  if(hadc->Instance==ADC1)
 8002c96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a79      	ldr	r2, [pc, #484]	@ (8002e88 <HAL_ADC_MspInit+0x228>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	f040 80e9 	bne.w	8002e7c <HAL_ADC_MspInit+0x21c>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8002caa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cae:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002cb2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.PLL2.PLL2Source = RCC_PLL2_SOURCE_HSE;
 8002cbe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cc2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	609a      	str	r2, [r3, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002cca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	60da      	str	r2, [r3, #12]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8002cd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cda:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cde:	2219      	movs	r2, #25
 8002ce0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002ce2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ce6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cea:	2202      	movs	r2, #2
 8002cec:	615a      	str	r2, [r3, #20]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002cee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cf2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002cfa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cfe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d02:	2202      	movs	r2, #2
 8002d04:	61da      	str	r2, [r3, #28]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2_VCIRANGE_3;
 8002d06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d0e:	220c      	movs	r2, #12
 8002d10:	621a      	str	r2, [r3, #32]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2_VCORANGE_WIDE;
 8002d12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d16:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002d1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d22:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d26:	2200      	movs	r2, #0
 8002d28:	629a      	str	r2, [r3, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8002d2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d2e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002d36:	62da      	str	r2, [r3, #44]	@ 0x2c
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2R;
 8002d38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d3c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d40:	2202      	movs	r2, #2
 8002d42:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d46:	f107 0310 	add.w	r3, r7, #16
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f005 fc9c 	bl	8008688 <HAL_RCCEx_PeriphCLKConfig>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002d56:	f7ff fabd 	bl	80022d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e8c <HAL_ADC_MspInit+0x22c>)
 8002d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d60:	4a4a      	ldr	r2, [pc, #296]	@ (8002e8c <HAL_ADC_MspInit+0x22c>)
 8002d62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d6a:	4b48      	ldr	r3, [pc, #288]	@ (8002e8c <HAL_ADC_MspInit+0x22c>)
 8002d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d70:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8002d74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d78:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d82:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d86:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d88:	4b40      	ldr	r3, [pc, #256]	@ (8002e8c <HAL_ADC_MspInit+0x22c>)
 8002d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d8e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e8c <HAL_ADC_MspInit+0x22c>)
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d98:	4b3c      	ldr	r3, [pc, #240]	@ (8002e8c <HAL_ADC_MspInit+0x22c>)
 8002d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d9e:	f003 0204 	and.w	r2, r3, #4
 8002da2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002da6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002db0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002db4:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PC1     ------> ADC1_INP11
    PC2     ------> ADC1_INP12
    */
    GPIO_InitStruct.Pin = ThrottlePos_Pin|ClutchPos_Pin|ShifterPos_Pin;
 8002db6:	2307      	movs	r3, #7
 8002db8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc8:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4830      	ldr	r0, [pc, #192]	@ (8002e90 <HAL_ADC_MspInit+0x230>)
 8002dd0:	f003 fe1e 	bl	8006a10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8002dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002dd6:	4a30      	ldr	r2, [pc, #192]	@ (8002e98 <HAL_ADC_MspInit+0x238>)
 8002dd8:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_ADC1;
 8002dda:	4b2e      	ldr	r3, [pc, #184]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel2.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8002de0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002de6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8002dec:	4b29      	ldr	r3, [pc, #164]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8002df2:	4b28      	ldr	r3, [pc, #160]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002df4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002df8:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel2.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8002dfa:	4b26      	ldr	r3, [pc, #152]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8002e00:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002e02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e06:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002e08:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8002e0e:	4b21      	ldr	r3, [pc, #132]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8002e14:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel2.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002e1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e20:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002e22:	4b1c      	ldr	r3, [pc, #112]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8002e28:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8002e2e:	4819      	ldr	r0, [pc, #100]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002e30:	f002 fd70 	bl	8005914 <HAL_DMA_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_ADC_MspInit+0x1de>
    {
      Error_Handler();
 8002e3a:	f7ff fa4b 	bl	80022d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel2);
 8002e3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a12      	ldr	r2, [pc, #72]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002e4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e4c:	4a11      	ldr	r2, [pc, #68]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002e4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002e5a:	2110      	movs	r1, #16
 8002e5c:	480d      	ldr	r0, [pc, #52]	@ (8002e94 <HAL_ADC_MspInit+0x234>)
 8002e5e:	f003 f907 	bl	8006070 <HAL_DMA_ConfigChannelAttributes>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_ADC_MspInit+0x20c>
    {
      Error_Handler();
 8002e68:	f7ff fa34 	bl	80022d4 <Error_Handler>
    }

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2025      	movs	r0, #37	@ 0x25
 8002e72:	f002 fccf 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002e76:	2025      	movs	r0, #37	@ 0x25
 8002e78:	f002 fce6 	bl	8005848 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002e7c:	bf00      	nop
 8002e7e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	42028000 	.word	0x42028000
 8002e8c:	44020c00 	.word	0x44020c00
 8002e90:	42020800 	.word	0x42020800
 8002e94:	20005d78 	.word	0x20005d78
 8002e98:	40020150 	.word	0x40020150

08002e9c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b0cc      	sub	sp, #304	@ 0x130
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ea6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002eaa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eac:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ebc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ec0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2100      	movs	r1, #0
 8002ece:	f010 fcd5 	bl	801387c <memset>
  if(hi2c->Instance==I2C1)
 8002ed2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ed6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a33      	ldr	r2, [pc, #204]	@ (8002fac <HAL_I2C_MspInit+0x110>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d15d      	bne.n	8002fa0 <HAL_I2C_MspInit+0x104>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ee4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ee8:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002eec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ef8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002efc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002f00:	2200      	movs	r2, #0
 8002f02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f06:	f107 0310 	add.w	r3, r7, #16
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f005 fbbc 	bl	8008688 <HAL_RCCEx_PeriphCLKConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8002f16:	f7ff f9dd 	bl	80022d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1a:	4b25      	ldr	r3, [pc, #148]	@ (8002fb0 <HAL_I2C_MspInit+0x114>)
 8002f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f20:	4a23      	ldr	r2, [pc, #140]	@ (8002fb0 <HAL_I2C_MspInit+0x114>)
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f2a:	4b21      	ldr	r3, [pc, #132]	@ (8002fb0 <HAL_I2C_MspInit+0x114>)
 8002f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f30:	f003 0202 	and.w	r2, r3, #2
 8002f34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f38:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f42:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f46:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f48:	23c0      	movs	r3, #192	@ 0xc0
 8002f4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f4e:	2312      	movs	r3, #18
 8002f50:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f60:	2304      	movs	r3, #4
 8002f62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f66:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4811      	ldr	r0, [pc, #68]	@ (8002fb4 <HAL_I2C_MspInit+0x118>)
 8002f6e:	f003 fd4f 	bl	8006a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f72:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb0 <HAL_I2C_MspInit+0x114>)
 8002f74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f78:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb0 <HAL_I2C_MspInit+0x114>)
 8002f7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f7e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002f82:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <HAL_I2C_MspInit+0x114>)
 8002f84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f88:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002f8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f90:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f9a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002f9e:	681b      	ldr	r3, [r3, #0]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002fa0:	bf00      	nop
 8002fa2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40005400 	.word	0x40005400
 8002fb0:	44020c00 	.word	0x44020c00
 8002fb4:	42020400 	.word	0x42020400

08002fb8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc8:	d10f      	bne.n	8002fea <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fca:	4b22      	ldr	r3, [pc, #136]	@ (8003054 <HAL_TIM_Base_MspInit+0x9c>)
 8002fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fd0:	4a20      	ldr	r2, [pc, #128]	@ (8003054 <HAL_TIM_Base_MspInit+0x9c>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002fda:	4b1e      	ldr	r3, [pc, #120]	@ (8003054 <HAL_TIM_Base_MspInit+0x9c>)
 8002fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002fe8:	e030      	b.n	800304c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM4)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1a      	ldr	r2, [pc, #104]	@ (8003058 <HAL_TIM_Base_MspInit+0xa0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d117      	bne.n	8003024 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ff4:	4b17      	ldr	r3, [pc, #92]	@ (8003054 <HAL_TIM_Base_MspInit+0x9c>)
 8002ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ffa:	4a16      	ldr	r2, [pc, #88]	@ (8003054 <HAL_TIM_Base_MspInit+0x9c>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003004:	4b13      	ldr	r3, [pc, #76]	@ (8003054 <HAL_TIM_Base_MspInit+0x9c>)
 8003006:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2100      	movs	r1, #0
 8003016:	202f      	movs	r0, #47	@ 0x2f
 8003018:	f002 fbfc 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800301c:	202f      	movs	r0, #47	@ 0x2f
 800301e:	f002 fc13 	bl	8005848 <HAL_NVIC_EnableIRQ>
}
 8003022:	e013      	b.n	800304c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM12)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0c      	ldr	r2, [pc, #48]	@ (800305c <HAL_TIM_Base_MspInit+0xa4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d10e      	bne.n	800304c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800302e:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <HAL_TIM_Base_MspInit+0x9c>)
 8003030:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003034:	4a07      	ldr	r2, [pc, #28]	@ (8003054 <HAL_TIM_Base_MspInit+0x9c>)
 8003036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800303a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800303e:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <HAL_TIM_Base_MspInit+0x9c>)
 8003040:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
}
 800304c:	bf00      	nop
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	44020c00 	.word	0x44020c00
 8003058:	40000800 	.word	0x40000800
 800305c:	40001800 	.word	0x40001800

08003060 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a58      	ldr	r2, [pc, #352]	@ (80031d0 <HAL_TIM_PWM_MspInit+0x170>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d152      	bne.n	8003118 <HAL_TIM_PWM_MspInit+0xb8>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003072:	4b58      	ldr	r3, [pc, #352]	@ (80031d4 <HAL_TIM_PWM_MspInit+0x174>)
 8003074:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003078:	4a56      	ldr	r2, [pc, #344]	@ (80031d4 <HAL_TIM_PWM_MspInit+0x174>)
 800307a:	f043 0302 	orr.w	r3, r3, #2
 800307e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003082:	4b54      	ldr	r3, [pc, #336]	@ (80031d4 <HAL_TIM_PWM_MspInit+0x174>)
 8003084:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* GPDMA2_REQUEST_TIM3_CH4 Init */
    handle_GPDMA2_Channel0.Instance = GPDMA2_Channel0;
 8003090:	4b51      	ldr	r3, [pc, #324]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 8003092:	4a52      	ldr	r2, [pc, #328]	@ (80031dc <HAL_TIM_PWM_MspInit+0x17c>)
 8003094:	601a      	str	r2, [r3, #0]
    handle_GPDMA2_Channel0.Init.Request = GPDMA2_REQUEST_TIM3_CH4;
 8003096:	4b50      	ldr	r3, [pc, #320]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 8003098:	2250      	movs	r2, #80	@ 0x50
 800309a:	605a      	str	r2, [r3, #4]
    handle_GPDMA2_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800309c:	4b4e      	ldr	r3, [pc, #312]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
    handle_GPDMA2_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030a2:	4b4d      	ldr	r3, [pc, #308]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030a8:	60da      	str	r2, [r3, #12]
    handle_GPDMA2_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 80030aa:	4b4b      	ldr	r3, [pc, #300]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030ac:	2208      	movs	r2, #8
 80030ae:	611a      	str	r2, [r3, #16]
    handle_GPDMA2_Channel0.Init.DestInc = DMA_DINC_FIXED;
 80030b0:	4b49      	ldr	r3, [pc, #292]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	615a      	str	r2, [r3, #20]
    handle_GPDMA2_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80030b6:	4b48      	ldr	r3, [pc, #288]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	619a      	str	r2, [r3, #24]
    handle_GPDMA2_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80030bc:	4b46      	ldr	r3, [pc, #280]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030be:	2200      	movs	r2, #0
 80030c0:	61da      	str	r2, [r3, #28]
    handle_GPDMA2_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80030c2:	4b45      	ldr	r3, [pc, #276]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	621a      	str	r2, [r3, #32]
    handle_GPDMA2_Channel0.Init.SrcBurstLength = 1;
 80030c8:	4b43      	ldr	r3, [pc, #268]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA2_Channel0.Init.DestBurstLength = 1;
 80030ce:	4b42      	ldr	r3, [pc, #264]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA2_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT0;
 80030d4:	4b40      	ldr	r3, [pc, #256]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030da:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA2_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80030dc:	4b3e      	ldr	r3, [pc, #248]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA2_Channel0.Init.Mode = DMA_NORMAL;
 80030e2:	4b3d      	ldr	r3, [pc, #244]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA2_Channel0) != HAL_OK)
 80030e8:	483b      	ldr	r0, [pc, #236]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030ea:	f002 fc13 	bl	8005914 <HAL_DMA_Init>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 80030f4:	f7ff f8ee 	bl	80022d4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC4], handle_GPDMA2_Channel0);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a37      	ldr	r2, [pc, #220]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80030fe:	4a36      	ldr	r2, [pc, #216]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA2_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003104:	2110      	movs	r1, #16
 8003106:	4834      	ldr	r0, [pc, #208]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x178>)
 8003108:	f002 ffb2 	bl	8006070 <HAL_DMA_ConfigChannelAttributes>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d05a      	beq.n	80031c8 <HAL_TIM_PWM_MspInit+0x168>
    {
      Error_Handler();
 8003112:	f7ff f8df 	bl	80022d4 <Error_Handler>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003116:	e057      	b.n	80031c8 <HAL_TIM_PWM_MspInit+0x168>
  else if(htim_pwm->Instance==TIM8)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a30      	ldr	r2, [pc, #192]	@ (80031e0 <HAL_TIM_PWM_MspInit+0x180>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d152      	bne.n	80031c8 <HAL_TIM_PWM_MspInit+0x168>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003122:	4b2c      	ldr	r3, [pc, #176]	@ (80031d4 <HAL_TIM_PWM_MspInit+0x174>)
 8003124:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003128:	4a2a      	ldr	r2, [pc, #168]	@ (80031d4 <HAL_TIM_PWM_MspInit+0x174>)
 800312a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800312e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003132:	4b28      	ldr	r3, [pc, #160]	@ (80031d4 <HAL_TIM_PWM_MspInit+0x174>)
 8003134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003138:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	68bb      	ldr	r3, [r7, #8]
    handle_GPDMA2_Channel1.Instance = GPDMA2_Channel1;
 8003140:	4b28      	ldr	r3, [pc, #160]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 8003142:	4a29      	ldr	r2, [pc, #164]	@ (80031e8 <HAL_TIM_PWM_MspInit+0x188>)
 8003144:	601a      	str	r2, [r3, #0]
    handle_GPDMA2_Channel1.Init.Request = GPDMA2_REQUEST_TIM8_CH3;
 8003146:	4b27      	ldr	r3, [pc, #156]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 8003148:	2243      	movs	r2, #67	@ 0x43
 800314a:	605a      	str	r2, [r3, #4]
    handle_GPDMA2_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800314c:	4b25      	ldr	r3, [pc, #148]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
    handle_GPDMA2_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003152:	4b24      	ldr	r3, [pc, #144]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 8003154:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003158:	60da      	str	r2, [r3, #12]
    handle_GPDMA2_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 800315a:	4b22      	ldr	r3, [pc, #136]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 800315c:	2208      	movs	r2, #8
 800315e:	611a      	str	r2, [r3, #16]
    handle_GPDMA2_Channel1.Init.DestInc = DMA_DINC_FIXED;
 8003160:	4b20      	ldr	r3, [pc, #128]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 8003162:	2200      	movs	r2, #0
 8003164:	615a      	str	r2, [r3, #20]
    handle_GPDMA2_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8003166:	4b1f      	ldr	r3, [pc, #124]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 8003168:	2201      	movs	r2, #1
 800316a:	619a      	str	r2, [r3, #24]
    handle_GPDMA2_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 800316c:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 800316e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003172:	61da      	str	r2, [r3, #28]
    handle_GPDMA2_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8003174:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 8003176:	2200      	movs	r2, #0
 8003178:	621a      	str	r2, [r3, #32]
    handle_GPDMA2_Channel1.Init.SrcBurstLength = 1;
 800317a:	4b1a      	ldr	r3, [pc, #104]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 800317c:	2201      	movs	r2, #1
 800317e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA2_Channel1.Init.DestBurstLength = 1;
 8003180:	4b18      	ldr	r3, [pc, #96]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 8003182:	2201      	movs	r2, #1
 8003184:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA2_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT0;
 8003186:	4b17      	ldr	r3, [pc, #92]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 8003188:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800318c:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA2_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800318e:	4b15      	ldr	r3, [pc, #84]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA2_Channel1.Init.Mode = DMA_NORMAL;
 8003194:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 8003196:	2200      	movs	r2, #0
 8003198:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA2_Channel1) != HAL_OK)
 800319a:	4812      	ldr	r0, [pc, #72]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 800319c:	f002 fbba 	bl	8005914 <HAL_DMA_Init>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_TIM_PWM_MspInit+0x14a>
      Error_Handler();
 80031a6:	f7ff f895 	bl	80022d4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm, hdma[TIM_DMA_ID_CC3], handle_GPDMA2_Channel1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a0d      	ldr	r2, [pc, #52]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 80031ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80031b0:	4a0c      	ldr	r2, [pc, #48]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA2_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80031b6:	2110      	movs	r1, #16
 80031b8:	480a      	ldr	r0, [pc, #40]	@ (80031e4 <HAL_TIM_PWM_MspInit+0x184>)
 80031ba:	f002 ff59 	bl	8006070 <HAL_DMA_ConfigChannelAttributes>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_TIM_PWM_MspInit+0x168>
      Error_Handler();
 80031c4:	f7ff f886 	bl	80022d4 <Error_Handler>
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40000400 	.word	0x40000400
 80031d4:	44020c00 	.word	0x44020c00
 80031d8:	20005fc0 	.word	0x20005fc0
 80031dc:	40021050 	.word	0x40021050
 80031e0:	40013400 	.word	0x40013400
 80031e4:	20006038 	.word	0x20006038
 80031e8:	400210d0 	.word	0x400210d0

080031ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	@ 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a25      	ldr	r2, [pc, #148]	@ (80032a0 <HAL_TIM_MspPostInit+0xb4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d11f      	bne.n	800324e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	4b25      	ldr	r3, [pc, #148]	@ (80032a4 <HAL_TIM_MspPostInit+0xb8>)
 8003210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003214:	4a23      	ldr	r2, [pc, #140]	@ (80032a4 <HAL_TIM_MspPostInit+0xb8>)
 8003216:	f043 0302 	orr.w	r3, r3, #2
 800321a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800321e:	4b21      	ldr	r3, [pc, #132]	@ (80032a4 <HAL_TIM_MspPostInit+0xb8>)
 8003220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800322c:	2302      	movs	r3, #2
 800322e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003230:	2302      	movs	r3, #2
 8003232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	2300      	movs	r3, #0
 800323a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800323c:	2302      	movs	r3, #2
 800323e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	4619      	mov	r1, r3
 8003246:	4818      	ldr	r0, [pc, #96]	@ (80032a8 <HAL_TIM_MspPostInit+0xbc>)
 8003248:	f003 fbe2 	bl	8006a10 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800324c:	e024      	b.n	8003298 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a16      	ldr	r2, [pc, #88]	@ (80032ac <HAL_TIM_MspPostInit+0xc0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d11f      	bne.n	8003298 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003258:	4b12      	ldr	r3, [pc, #72]	@ (80032a4 <HAL_TIM_MspPostInit+0xb8>)
 800325a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800325e:	4a11      	ldr	r2, [pc, #68]	@ (80032a4 <HAL_TIM_MspPostInit+0xb8>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003268:	4b0e      	ldr	r3, [pc, #56]	@ (80032a4 <HAL_TIM_MspPostInit+0xb8>)
 800326a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003276:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800327a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003284:	2300      	movs	r3, #0
 8003286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003288:	2303      	movs	r3, #3
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	4619      	mov	r1, r3
 8003292:	4807      	ldr	r0, [pc, #28]	@ (80032b0 <HAL_TIM_MspPostInit+0xc4>)
 8003294:	f003 fbbc 	bl	8006a10 <HAL_GPIO_Init>
}
 8003298:	bf00      	nop
 800329a:	3728      	adds	r7, #40	@ 0x28
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40000400 	.word	0x40000400
 80032a4:	44020c00 	.word	0x44020c00
 80032a8:	42020400 	.word	0x42020400
 80032ac:	40013400 	.word	0x40013400
 80032b0:	42020800 	.word	0x42020800

080032b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b0d2      	sub	sp, #328	@ 0x148
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80032be:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80032c2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80032d8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80032dc:	4618      	mov	r0, r3
 80032de:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80032e2:	461a      	mov	r2, r3
 80032e4:	2100      	movs	r1, #0
 80032e6:	f010 fac9 	bl	801387c <memset>
  if(huart->Instance==USART1)
 80032ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80032ee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a81      	ldr	r2, [pc, #516]	@ (80034fc <HAL_UART_MspInit+0x248>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	f040 810d 	bne.w	8003518 <HAL_UART_MspInit+0x264>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003302:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003306:	f04f 0201 	mov.w	r2, #1
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003312:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003316:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800331a:	2200      	movs	r2, #0
 800331c:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800331e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003322:	4618      	mov	r0, r3
 8003324:	f005 f9b0 	bl	8008688 <HAL_RCCEx_PeriphCLKConfig>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800332e:	f7fe ffd1 	bl	80022d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003332:	4b73      	ldr	r3, [pc, #460]	@ (8003500 <HAL_UART_MspInit+0x24c>)
 8003334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003338:	4a71      	ldr	r2, [pc, #452]	@ (8003500 <HAL_UART_MspInit+0x24c>)
 800333a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800333e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003342:	4b6f      	ldr	r3, [pc, #444]	@ (8003500 <HAL_UART_MspInit+0x24c>)
 8003344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003348:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800334c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003350:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800335a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800335e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003360:	4b67      	ldr	r3, [pc, #412]	@ (8003500 <HAL_UART_MspInit+0x24c>)
 8003362:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003366:	4a66      	ldr	r2, [pc, #408]	@ (8003500 <HAL_UART_MspInit+0x24c>)
 8003368:	f043 0302 	orr.w	r3, r3, #2
 800336c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003370:	4b63      	ldr	r3, [pc, #396]	@ (8003500 <HAL_UART_MspInit+0x24c>)
 8003372:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003376:	f003 0202 	and.w	r2, r3, #2
 800337a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800337e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003388:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800338c:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800338e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003392:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2302      	movs	r3, #2
 8003398:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2300      	movs	r3, #0
 80033a4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80033a8:	2304      	movs	r3, #4
 80033aa:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ae:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80033b2:	4619      	mov	r1, r3
 80033b4:	4853      	ldr	r0, [pc, #332]	@ (8003504 <HAL_UART_MspInit+0x250>)
 80033b6:	f003 fb2b 	bl	8006a10 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* GPDMA1_REQUEST_USART1_TX Init */
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80033ba:	4b53      	ldr	r3, [pc, #332]	@ (8003508 <HAL_UART_MspInit+0x254>)
 80033bc:	4a53      	ldr	r2, [pc, #332]	@ (800350c <HAL_UART_MspInit+0x258>)
 80033be:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_USART1_TX;
 80033c0:	4b51      	ldr	r3, [pc, #324]	@ (8003508 <HAL_UART_MspInit+0x254>)
 80033c2:	2216      	movs	r2, #22
 80033c4:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80033c6:	4b50      	ldr	r3, [pc, #320]	@ (8003508 <HAL_UART_MspInit+0x254>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033cc:	4b4e      	ldr	r3, [pc, #312]	@ (8003508 <HAL_UART_MspInit+0x254>)
 80033ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033d2:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 80033d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003508 <HAL_UART_MspInit+0x254>)
 80033d6:	2208      	movs	r2, #8
 80033d8:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 80033da:	4b4b      	ldr	r3, [pc, #300]	@ (8003508 <HAL_UART_MspInit+0x254>)
 80033dc:	2200      	movs	r2, #0
 80033de:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80033e0:	4b49      	ldr	r3, [pc, #292]	@ (8003508 <HAL_UART_MspInit+0x254>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80033e6:	4b48      	ldr	r3, [pc, #288]	@ (8003508 <HAL_UART_MspInit+0x254>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80033ec:	4b46      	ldr	r3, [pc, #280]	@ (8003508 <HAL_UART_MspInit+0x254>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 80033f2:	4b45      	ldr	r3, [pc, #276]	@ (8003508 <HAL_UART_MspInit+0x254>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 80033f8:	4b43      	ldr	r3, [pc, #268]	@ (8003508 <HAL_UART_MspInit+0x254>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT0;
 80033fe:	4b42      	ldr	r3, [pc, #264]	@ (8003508 <HAL_UART_MspInit+0x254>)
 8003400:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003404:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003406:	4b40      	ldr	r3, [pc, #256]	@ (8003508 <HAL_UART_MspInit+0x254>)
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 800340c:	4b3e      	ldr	r3, [pc, #248]	@ (8003508 <HAL_UART_MspInit+0x254>)
 800340e:	2200      	movs	r2, #0
 8003410:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8003412:	483d      	ldr	r0, [pc, #244]	@ (8003508 <HAL_UART_MspInit+0x254>)
 8003414:	f002 fa7e 	bl	8005914 <HAL_DMA_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 800341e:	f7fe ff59 	bl	80022d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel1);
 8003422:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003426:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a36      	ldr	r2, [pc, #216]	@ (8003508 <HAL_UART_MspInit+0x254>)
 800342e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003430:	4a35      	ldr	r2, [pc, #212]	@ (8003508 <HAL_UART_MspInit+0x254>)
 8003432:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003436:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800343e:	2110      	movs	r1, #16
 8003440:	4831      	ldr	r0, [pc, #196]	@ (8003508 <HAL_UART_MspInit+0x254>)
 8003442:	f002 fe15 	bl	8006070 <HAL_DMA_ConfigChannelAttributes>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_UART_MspInit+0x19c>
    {
      Error_Handler();
 800344c:	f7fe ff42 	bl	80022d4 <Error_Handler>
    }

    /* GPDMA1_REQUEST_USART1_RX Init */
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8003450:	4b2f      	ldr	r3, [pc, #188]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 8003452:	4a30      	ldr	r2, [pc, #192]	@ (8003514 <HAL_UART_MspInit+0x260>)
 8003454:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART1_RX;
 8003456:	4b2e      	ldr	r3, [pc, #184]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 8003458:	2215      	movs	r2, #21
 800345a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800345c:	4b2c      	ldr	r3, [pc, #176]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 800345e:	2200      	movs	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003462:	4b2b      	ldr	r3, [pc, #172]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 8003464:	2200      	movs	r2, #0
 8003466:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8003468:	4b29      	ldr	r3, [pc, #164]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 800346e:	4b28      	ldr	r3, [pc, #160]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 8003470:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003474:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8003476:	4b26      	ldr	r3, [pc, #152]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800347c:	4b24      	ldr	r3, [pc, #144]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8003482:	4b23      	ldr	r3, [pc, #140]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 8003484:	2200      	movs	r2, #0
 8003486:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8003488:	4b21      	ldr	r3, [pc, #132]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 800348a:	2201      	movs	r2, #1
 800348c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 800348e:	4b20      	ldr	r3, [pc, #128]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 8003490:	2201      	movs	r2, #1
 8003492:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 8003494:	4b1e      	ldr	r3, [pc, #120]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 8003496:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800349a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800349c:	4b1c      	ldr	r3, [pc, #112]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80034a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80034a8:	4819      	ldr	r0, [pc, #100]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 80034aa:	f002 fa33 	bl	8005914 <HAL_DMA_Init>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_UART_MspInit+0x204>
    {
      Error_Handler();
 80034b4:	f7fe ff0e 	bl	80022d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel0);
 80034b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80034bc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a13      	ldr	r2, [pc, #76]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 80034c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80034c8:	4a11      	ldr	r2, [pc, #68]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 80034ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80034ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80034d6:	2110      	movs	r1, #16
 80034d8:	480d      	ldr	r0, [pc, #52]	@ (8003510 <HAL_UART_MspInit+0x25c>)
 80034da:	f002 fdc9 	bl	8006070 <HAL_DMA_ConfigChannelAttributes>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_UART_MspInit+0x234>
    {
      Error_Handler();
 80034e4:	f7fe fef6 	bl	80022d4 <Error_Handler>
    }

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	2100      	movs	r1, #0
 80034ec:	203a      	movs	r0, #58	@ 0x3a
 80034ee:	f002 f991 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034f2:	203a      	movs	r0, #58	@ 0x3a
 80034f4:	f002 f9a8 	bl	8005848 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80034f8:	e20c      	b.n	8003914 <HAL_UART_MspInit+0x660>
 80034fa:	bf00      	nop
 80034fc:	40013800 	.word	0x40013800
 8003500:	44020c00 	.word	0x44020c00
 8003504:	42020400 	.word	0x42020400
 8003508:	2000626c 	.word	0x2000626c
 800350c:	400200d0 	.word	0x400200d0
 8003510:	200062e4 	.word	0x200062e4
 8003514:	40020050 	.word	0x40020050
  else if(huart->Instance==USART2)
 8003518:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800351c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a80      	ldr	r2, [pc, #512]	@ (8003728 <HAL_UART_MspInit+0x474>)
 8003526:	4293      	cmp	r3, r2
 8003528:	f040 810c 	bne.w	8003744 <HAL_UART_MspInit+0x490>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800352c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003530:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003534:	f04f 0202 	mov.w	r2, #2
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003540:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003544:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003548:	2200      	movs	r2, #0
 800354a:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800354c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003550:	4618      	mov	r0, r3
 8003552:	f005 f899 	bl	8008688 <HAL_RCCEx_PeriphCLKConfig>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 800355c:	f7fe feba 	bl	80022d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003560:	4b72      	ldr	r3, [pc, #456]	@ (800372c <HAL_UART_MspInit+0x478>)
 8003562:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003566:	4a71      	ldr	r2, [pc, #452]	@ (800372c <HAL_UART_MspInit+0x478>)
 8003568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800356c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003570:	4b6e      	ldr	r3, [pc, #440]	@ (800372c <HAL_UART_MspInit+0x478>)
 8003572:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003576:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 800357a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800357e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003588:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800358c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358e:	4b67      	ldr	r3, [pc, #412]	@ (800372c <HAL_UART_MspInit+0x478>)
 8003590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003594:	4a65      	ldr	r2, [pc, #404]	@ (800372c <HAL_UART_MspInit+0x478>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800359e:	4b63      	ldr	r3, [pc, #396]	@ (800372c <HAL_UART_MspInit+0x478>)
 80035a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a4:	f003 0201 	and.w	r2, r3, #1
 80035a8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80035ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80035b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80035ba:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035bc:	230c      	movs	r3, #12
 80035be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035d4:	2307      	movs	r3, #7
 80035d6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80035de:	4619      	mov	r1, r3
 80035e0:	4853      	ldr	r0, [pc, #332]	@ (8003730 <HAL_UART_MspInit+0x47c>)
 80035e2:	f003 fa15 	bl	8006a10 <HAL_GPIO_Init>
    handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 80035e6:	4b53      	ldr	r3, [pc, #332]	@ (8003734 <HAL_UART_MspInit+0x480>)
 80035e8:	4a53      	ldr	r2, [pc, #332]	@ (8003738 <HAL_UART_MspInit+0x484>)
 80035ea:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel5.Init.Request = GPDMA1_REQUEST_USART2_TX;
 80035ec:	4b51      	ldr	r3, [pc, #324]	@ (8003734 <HAL_UART_MspInit+0x480>)
 80035ee:	2218      	movs	r2, #24
 80035f0:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel5.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80035f2:	4b50      	ldr	r3, [pc, #320]	@ (8003734 <HAL_UART_MspInit+0x480>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel5.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003734 <HAL_UART_MspInit+0x480>)
 80035fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035fe:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel5.Init.SrcInc = DMA_SINC_INCREMENTED;
 8003600:	4b4c      	ldr	r3, [pc, #304]	@ (8003734 <HAL_UART_MspInit+0x480>)
 8003602:	2208      	movs	r2, #8
 8003604:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel5.Init.DestInc = DMA_DINC_FIXED;
 8003606:	4b4b      	ldr	r3, [pc, #300]	@ (8003734 <HAL_UART_MspInit+0x480>)
 8003608:	2200      	movs	r2, #0
 800360a:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel5.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800360c:	4b49      	ldr	r3, [pc, #292]	@ (8003734 <HAL_UART_MspInit+0x480>)
 800360e:	2200      	movs	r2, #0
 8003610:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel5.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8003612:	4b48      	ldr	r3, [pc, #288]	@ (8003734 <HAL_UART_MspInit+0x480>)
 8003614:	2200      	movs	r2, #0
 8003616:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel5.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8003618:	4b46      	ldr	r3, [pc, #280]	@ (8003734 <HAL_UART_MspInit+0x480>)
 800361a:	2200      	movs	r2, #0
 800361c:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel5.Init.SrcBurstLength = 1;
 800361e:	4b45      	ldr	r3, [pc, #276]	@ (8003734 <HAL_UART_MspInit+0x480>)
 8003620:	2201      	movs	r2, #1
 8003622:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel5.Init.DestBurstLength = 1;
 8003624:	4b43      	ldr	r3, [pc, #268]	@ (8003734 <HAL_UART_MspInit+0x480>)
 8003626:	2201      	movs	r2, #1
 8003628:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel5.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT1|DMA_DEST_ALLOCATED_PORT0;
 800362a:	4b42      	ldr	r3, [pc, #264]	@ (8003734 <HAL_UART_MspInit+0x480>)
 800362c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003630:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel5.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8003632:	4b40      	ldr	r3, [pc, #256]	@ (8003734 <HAL_UART_MspInit+0x480>)
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel5.Init.Mode = DMA_NORMAL;
 8003638:	4b3e      	ldr	r3, [pc, #248]	@ (8003734 <HAL_UART_MspInit+0x480>)
 800363a:	2200      	movs	r2, #0
 800363c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 800363e:	483d      	ldr	r0, [pc, #244]	@ (8003734 <HAL_UART_MspInit+0x480>)
 8003640:	f002 f968 	bl	8005914 <HAL_DMA_Init>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_UART_MspInit+0x39a>
      Error_Handler();
 800364a:	f7fe fe43 	bl	80022d4 <Error_Handler>
    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel5);
 800364e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003652:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a36      	ldr	r2, [pc, #216]	@ (8003734 <HAL_UART_MspInit+0x480>)
 800365a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800365c:	4a35      	ldr	r2, [pc, #212]	@ (8003734 <HAL_UART_MspInit+0x480>)
 800365e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003662:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 800366a:	2110      	movs	r1, #16
 800366c:	4831      	ldr	r0, [pc, #196]	@ (8003734 <HAL_UART_MspInit+0x480>)
 800366e:	f002 fcff 	bl	8006070 <HAL_DMA_ConfigChannelAttributes>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_UART_MspInit+0x3c8>
      Error_Handler();
 8003678:	f7fe fe2c 	bl	80022d4 <Error_Handler>
    handle_GPDMA1_Channel4.Instance = GPDMA1_Channel4;
 800367c:	4b2f      	ldr	r3, [pc, #188]	@ (800373c <HAL_UART_MspInit+0x488>)
 800367e:	4a30      	ldr	r2, [pc, #192]	@ (8003740 <HAL_UART_MspInit+0x48c>)
 8003680:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel4.Init.Request = GPDMA1_REQUEST_USART2_RX;
 8003682:	4b2e      	ldr	r3, [pc, #184]	@ (800373c <HAL_UART_MspInit+0x488>)
 8003684:	2217      	movs	r2, #23
 8003686:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel4.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003688:	4b2c      	ldr	r3, [pc, #176]	@ (800373c <HAL_UART_MspInit+0x488>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800368e:	4b2b      	ldr	r3, [pc, #172]	@ (800373c <HAL_UART_MspInit+0x488>)
 8003690:	2200      	movs	r2, #0
 8003692:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel4.Init.SrcInc = DMA_SINC_FIXED;
 8003694:	4b29      	ldr	r3, [pc, #164]	@ (800373c <HAL_UART_MspInit+0x488>)
 8003696:	2200      	movs	r2, #0
 8003698:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel4.Init.DestInc = DMA_DINC_INCREMENTED;
 800369a:	4b28      	ldr	r3, [pc, #160]	@ (800373c <HAL_UART_MspInit+0x488>)
 800369c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80036a0:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel4.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80036a2:	4b26      	ldr	r3, [pc, #152]	@ (800373c <HAL_UART_MspInit+0x488>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel4.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80036a8:	4b24      	ldr	r3, [pc, #144]	@ (800373c <HAL_UART_MspInit+0x488>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel4.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80036ae:	4b23      	ldr	r3, [pc, #140]	@ (800373c <HAL_UART_MspInit+0x488>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel4.Init.SrcBurstLength = 1;
 80036b4:	4b21      	ldr	r3, [pc, #132]	@ (800373c <HAL_UART_MspInit+0x488>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel4.Init.DestBurstLength = 1;
 80036ba:	4b20      	ldr	r3, [pc, #128]	@ (800373c <HAL_UART_MspInit+0x488>)
 80036bc:	2201      	movs	r2, #1
 80036be:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel4.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80036c0:	4b1e      	ldr	r3, [pc, #120]	@ (800373c <HAL_UART_MspInit+0x488>)
 80036c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel4.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80036c8:	4b1c      	ldr	r3, [pc, #112]	@ (800373c <HAL_UART_MspInit+0x488>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel4.Init.Mode = DMA_NORMAL;
 80036ce:	4b1b      	ldr	r3, [pc, #108]	@ (800373c <HAL_UART_MspInit+0x488>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel4) != HAL_OK)
 80036d4:	4819      	ldr	r0, [pc, #100]	@ (800373c <HAL_UART_MspInit+0x488>)
 80036d6:	f002 f91d 	bl	8005914 <HAL_DMA_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_UART_MspInit+0x430>
      Error_Handler();
 80036e0:	f7fe fdf8 	bl	80022d4 <Error_Handler>
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel4);
 80036e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80036e8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a13      	ldr	r2, [pc, #76]	@ (800373c <HAL_UART_MspInit+0x488>)
 80036f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80036f4:	4a11      	ldr	r2, [pc, #68]	@ (800373c <HAL_UART_MspInit+0x488>)
 80036f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80036fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003702:	2110      	movs	r1, #16
 8003704:	480d      	ldr	r0, [pc, #52]	@ (800373c <HAL_UART_MspInit+0x488>)
 8003706:	f002 fcb3 	bl	8006070 <HAL_DMA_ConfigChannelAttributes>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_UART_MspInit+0x460>
      Error_Handler();
 8003710:	f7fe fde0 	bl	80022d4 <Error_Handler>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003714:	2200      	movs	r2, #0
 8003716:	2100      	movs	r1, #0
 8003718:	203b      	movs	r0, #59	@ 0x3b
 800371a:	f002 f87b 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800371e:	203b      	movs	r0, #59	@ 0x3b
 8003720:	f002 f892 	bl	8005848 <HAL_NVIC_EnableIRQ>
}
 8003724:	e0f6      	b.n	8003914 <HAL_UART_MspInit+0x660>
 8003726:	bf00      	nop
 8003728:	40004400 	.word	0x40004400
 800372c:	44020c00 	.word	0x44020c00
 8003730:	42020000 	.word	0x42020000
 8003734:	2000635c 	.word	0x2000635c
 8003738:	400202d0 	.word	0x400202d0
 800373c:	200063d4 	.word	0x200063d4
 8003740:	40020250 	.word	0x40020250
  else if(huart->Instance==USART3)
 8003744:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003748:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a73      	ldr	r2, [pc, #460]	@ (8003920 <HAL_UART_MspInit+0x66c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	f040 80de 	bne.w	8003914 <HAL_UART_MspInit+0x660>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003758:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800375c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8003760:	f04f 0204 	mov.w	r2, #4
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800376c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003770:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003774:	2200      	movs	r2, #0
 8003776:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003778:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800377c:	4618      	mov	r0, r3
 800377e:	f004 ff83 	bl	8008688 <HAL_RCCEx_PeriphCLKConfig>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_UART_MspInit+0x4d8>
      Error_Handler();
 8003788:	f7fe fda4 	bl	80022d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800378c:	4b65      	ldr	r3, [pc, #404]	@ (8003924 <HAL_UART_MspInit+0x670>)
 800378e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003792:	4a64      	ldr	r2, [pc, #400]	@ (8003924 <HAL_UART_MspInit+0x670>)
 8003794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003798:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800379c:	4b61      	ldr	r3, [pc, #388]	@ (8003924 <HAL_UART_MspInit+0x670>)
 800379e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037a2:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80037a6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80037aa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80037b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80037b8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003924 <HAL_UART_MspInit+0x670>)
 80037bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037c0:	4a58      	ldr	r2, [pc, #352]	@ (8003924 <HAL_UART_MspInit+0x670>)
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80037ca:	4b56      	ldr	r3, [pc, #344]	@ (8003924 <HAL_UART_MspInit+0x670>)
 80037cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037d0:	f003 0204 	and.w	r2, r3, #4
 80037d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80037d8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80037e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80037e6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e8:	4b4e      	ldr	r3, [pc, #312]	@ (8003924 <HAL_UART_MspInit+0x670>)
 80037ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003924 <HAL_UART_MspInit+0x670>)
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80037f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003924 <HAL_UART_MspInit+0x670>)
 80037fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037fe:	f003 0202 	and.w	r2, r3, #2
 8003802:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003806:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003810:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003814:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003816:	2310      	movs	r3, #16
 8003818:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381c:	2302      	movs	r3, #2
 800381e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003828:	2300      	movs	r3, #0
 800382a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800382e:	2307      	movs	r3, #7
 8003830:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003834:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003838:	4619      	mov	r1, r3
 800383a:	483b      	ldr	r0, [pc, #236]	@ (8003928 <HAL_UART_MspInit+0x674>)
 800383c:	f003 f8e8 	bl	8006a10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003840:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003844:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003848:	2302      	movs	r3, #2
 800384a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003854:	2300      	movs	r3, #0
 8003856:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800385a:	2307      	movs	r3, #7
 800385c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003860:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8003864:	4619      	mov	r1, r3
 8003866:	4831      	ldr	r0, [pc, #196]	@ (800392c <HAL_UART_MspInit+0x678>)
 8003868:	f003 f8d2 	bl	8006a10 <HAL_GPIO_Init>
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 800386c:	4b30      	ldr	r3, [pc, #192]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 800386e:	4a31      	ldr	r2, [pc, #196]	@ (8003934 <HAL_UART_MspInit+0x680>)
 8003870:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_USART3_RX;
 8003872:	4b2f      	ldr	r3, [pc, #188]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 8003874:	2219      	movs	r2, #25
 8003876:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8003878:	4b2d      	ldr	r3, [pc, #180]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 800387a:	2200      	movs	r2, #0
 800387c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800387e:	4b2c      	ldr	r3, [pc, #176]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 8003880:	2200      	movs	r2, #0
 8003882:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_FIXED;
 8003884:	4b2a      	ldr	r3, [pc, #168]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel3.Init.DestInc = DMA_DINC_INCREMENTED;
 800388a:	4b29      	ldr	r3, [pc, #164]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 800388c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003890:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8003892:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel3.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8003898:	4b25      	ldr	r3, [pc, #148]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 800389a:	2200      	movs	r2, #0
 800389c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800389e:	4b24      	ldr	r3, [pc, #144]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 80038a4:	4b22      	ldr	r3, [pc, #136]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 80038aa:	4b21      	ldr	r3, [pc, #132]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel3.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT1;
 80038b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 80038b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80038b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 80038be:	4b1c      	ldr	r3, [pc, #112]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80038c4:	481a      	ldr	r0, [pc, #104]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 80038c6:	f002 f825 	bl	8005914 <HAL_DMA_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_UART_MspInit+0x620>
      Error_Handler();
 80038d0:	f7fe fd00 	bl	80022d4 <Error_Handler>
    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel3);
 80038d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80038d8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a14      	ldr	r2, [pc, #80]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 80038e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80038e4:	4a12      	ldr	r2, [pc, #72]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 80038e6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80038ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80038f2:	2110      	movs	r1, #16
 80038f4:	480e      	ldr	r0, [pc, #56]	@ (8003930 <HAL_UART_MspInit+0x67c>)
 80038f6:	f002 fbbb 	bl	8006070 <HAL_DMA_ConfigChannelAttributes>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_UART_MspInit+0x650>
      Error_Handler();
 8003900:	f7fe fce8 	bl	80022d4 <Error_Handler>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003904:	2200      	movs	r2, #0
 8003906:	2100      	movs	r1, #0
 8003908:	203c      	movs	r0, #60	@ 0x3c
 800390a:	f001 ff83 	bl	8005814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800390e:	203c      	movs	r0, #60	@ 0x3c
 8003910:	f001 ff9a 	bl	8005848 <HAL_NVIC_EnableIRQ>
}
 8003914:	bf00      	nop
 8003916:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40004800 	.word	0x40004800
 8003924:	44020c00 	.word	0x44020c00
 8003928:	42020800 	.word	0x42020800
 800392c:	42020400 	.word	0x42020400
 8003930:	2000644c 	.word	0x2000644c
 8003934:	400201d0 	.word	0x400201d0

08003938 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b08e      	sub	sp, #56	@ 0x38
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003940:	4b33      	ldr	r3, [pc, #204]	@ (8003a10 <HAL_InitTick+0xd8>)
 8003942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003946:	4a32      	ldr	r2, [pc, #200]	@ (8003a10 <HAL_InitTick+0xd8>)
 8003948:	f043 0310 	orr.w	r3, r3, #16
 800394c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003950:	4b2f      	ldr	r3, [pc, #188]	@ (8003a10 <HAL_InitTick+0xd8>)
 8003952:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800395e:	f107 020c 	add.w	r2, r7, #12
 8003962:	f107 0310 	add.w	r3, r7, #16
 8003966:	4611      	mov	r1, r2
 8003968:	4618      	mov	r0, r3
 800396a:	f004 fe55 	bl	8008618 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003978:	f004 fe0c 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800397c:	6378      	str	r0, [r7, #52]	@ 0x34
 800397e:	e004      	b.n	800398a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003980:	f004 fe08 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 8003984:	4603      	mov	r3, r0
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 800398a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	4a21      	ldr	r2, [pc, #132]	@ (8003a14 <HAL_InitTick+0xdc>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	09db      	lsrs	r3, r3, #7
 8003996:	3b01      	subs	r3, #1
 8003998:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800399a:	4b1f      	ldr	r3, [pc, #124]	@ (8003a18 <HAL_InitTick+0xe0>)
 800399c:	4a1f      	ldr	r2, [pc, #124]	@ (8003a1c <HAL_InitTick+0xe4>)
 800399e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 80039a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a18 <HAL_InitTick+0xe0>)
 80039a2:	2263      	movs	r2, #99	@ 0x63
 80039a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80039a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a18 <HAL_InitTick+0xe0>)
 80039a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80039ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003a18 <HAL_InitTick+0xe0>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b2:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <HAL_InitTick+0xe0>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80039b8:	4817      	ldr	r0, [pc, #92]	@ (8003a18 <HAL_InitTick+0xe0>)
 80039ba:	f009 fe45 	bl	800d648 <HAL_TIM_Base_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80039c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d118      	bne.n	80039fe <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80039cc:	4812      	ldr	r0, [pc, #72]	@ (8003a18 <HAL_InitTick+0xe0>)
 80039ce:	f009 ff39 	bl	800d844 <HAL_TIM_Base_Start_IT>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80039d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10e      	bne.n	80039fe <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b0f      	cmp	r3, #15
 80039e4:	d808      	bhi.n	80039f8 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80039e6:	2200      	movs	r2, #0
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	2031      	movs	r0, #49	@ 0x31
 80039ec:	f001 ff12 	bl	8005814 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003a20 <HAL_InitTick+0xe8>)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e002      	b.n	80039fe <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80039fe:	2031      	movs	r0, #49	@ 0x31
 8003a00:	f001 ff22 	bl	8005848 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 8003a04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3738      	adds	r7, #56	@ 0x38
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	44020c00 	.word	0x44020c00
 8003a14:	0a7c5ac5 	.word	0x0a7c5ac5
 8003a18:	20006be0 	.word	0x20006be0
 8003a1c:	40001000 	.word	0x40001000
 8003a20:	20000174 	.word	0x20000174

08003a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <NMI_Handler+0x4>

08003a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <HardFault_Handler+0x4>

08003a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a38:	bf00      	nop
 8003a3a:	e7fd      	b.n	8003a38 <MemManage_Handler+0x4>

08003a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a40:	bf00      	nop
 8003a42:	e7fd      	b.n	8003a40 <BusFault_Handler+0x4>

08003a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a48:	bf00      	nop
 8003a4a:	e7fd      	b.n	8003a48 <UsageFault_Handler+0x4>

08003a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <GPDMA1_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 0 global interrupt.
  */
void GPDMA1_Channel0_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8003a60:	4802      	ldr	r0, [pc, #8]	@ (8003a6c <GPDMA1_Channel0_IRQHandler+0x10>)
 8003a62:	f002 f9a4 	bl	8005dae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200062e4 	.word	0x200062e4

08003a70 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8003a74:	4802      	ldr	r0, [pc, #8]	@ (8003a80 <GPDMA1_Channel1_IRQHandler+0x10>)
 8003a76:	f002 f99a 	bl	8005dae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	2000626c 	.word	0x2000626c

08003a84 <GPDMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 2 global interrupt.
  */
void GPDMA1_Channel2_IRQHandler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8003a88:	4802      	ldr	r0, [pc, #8]	@ (8003a94 <GPDMA1_Channel2_IRQHandler+0x10>)
 8003a8a:	f002 f990 	bl	8005dae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 1 */

  /* USER CODE END GPDMA1_Channel2_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20005d78 	.word	0x20005d78

08003a98 <GPDMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 3 global interrupt.
  */
void GPDMA1_Channel3_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8003a9c:	4802      	ldr	r0, [pc, #8]	@ (8003aa8 <GPDMA1_Channel3_IRQHandler+0x10>)
 8003a9e:	f002 f986 	bl	8005dae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 1 */

  /* USER CODE END GPDMA1_Channel3_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2000644c 	.word	0x2000644c

08003aac <GPDMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 4 global interrupt.
  */
void GPDMA1_Channel4_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 0 */

  /* USER CODE END GPDMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel4);
 8003ab0:	4802      	ldr	r0, [pc, #8]	@ (8003abc <GPDMA1_Channel4_IRQHandler+0x10>)
 8003ab2:	f002 f97c 	bl	8005dae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel4_IRQn 1 */

  /* USER CODE END GPDMA1_Channel4_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200063d4 	.word	0x200063d4

08003ac0 <GPDMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 5 global interrupt.
  */
void GPDMA1_Channel5_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 0 */

  /* USER CODE END GPDMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel5);
 8003ac4:	4802      	ldr	r0, [pc, #8]	@ (8003ad0 <GPDMA1_Channel5_IRQHandler+0x10>)
 8003ac6:	f002 f972 	bl	8005dae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel5_IRQn 1 */

  /* USER CODE END GPDMA1_Channel5_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	2000635c 	.word	0x2000635c

08003ad4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ad8:	4802      	ldr	r0, [pc, #8]	@ (8003ae4 <ADC1_IRQHandler+0x10>)
 8003ada:	f000 fe53 	bl	8004784 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20005d10 	.word	0x20005d10

08003ae8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003aec:	4802      	ldr	r0, [pc, #8]	@ (8003af8 <TIM4_IRQHandler+0x10>)
 8003aee:	f00a fb4f 	bl	800e190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20005edc 	.word	0x20005edc

08003afc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b00:	4802      	ldr	r0, [pc, #8]	@ (8003b0c <TIM6_IRQHandler+0x10>)
 8003b02:	f00a fb45 	bl	800e190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20006be0 	.word	0x20006be0

08003b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b14:	4802      	ldr	r0, [pc, #8]	@ (8003b20 <USART1_IRQHandler+0x10>)
 8003b16:	f00c f865 	bl	800fbe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	200060b0 	.word	0x200060b0

08003b24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b28:	4802      	ldr	r0, [pc, #8]	@ (8003b34 <USART2_IRQHandler+0x10>)
 8003b2a:	f00c f85b 	bl	800fbe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20006144 	.word	0x20006144

08003b38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b3c:	4802      	ldr	r0, [pc, #8]	@ (8003b48 <USART3_IRQHandler+0x10>)
 8003b3e:	f00c f851 	bl	800fbe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200061d8 	.word	0x200061d8

08003b4c <GPDMA2_Channel0_IRQHandler>:

/**
  * @brief This function handles GPDMA2 Channel 0 global interrupt.
  */
void GPDMA2_Channel0_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Channel0_IRQn 0 */

  /* USER CODE END GPDMA2_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA2_Channel0);
 8003b50:	4802      	ldr	r0, [pc, #8]	@ (8003b5c <GPDMA2_Channel0_IRQHandler+0x10>)
 8003b52:	f002 f92c 	bl	8005dae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA2_Channel0_IRQn 1 */

  /* USER CODE END GPDMA2_Channel0_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20005fc0 	.word	0x20005fc0

08003b60 <GPDMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA2 Channel 1 global interrupt.
  */
void GPDMA2_Channel1_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA2_Channel1_IRQn 0 */

  /* USER CODE END GPDMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA2_Channel1);
 8003b64:	4802      	ldr	r0, [pc, #8]	@ (8003b70 <GPDMA2_Channel1_IRQHandler+0x10>)
 8003b66:	f002 f922 	bl	8005dae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA2_Channel1_IRQn 1 */

  /* USER CODE END GPDMA2_Channel1_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20006038 	.word	0x20006038

08003b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b7c:	4a14      	ldr	r2, [pc, #80]	@ (8003bd0 <_sbrk+0x5c>)
 8003b7e:	4b15      	ldr	r3, [pc, #84]	@ (8003bd4 <_sbrk+0x60>)
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b88:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <_sbrk+0x64>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b90:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <_sbrk+0x64>)
 8003b92:	4a12      	ldr	r2, [pc, #72]	@ (8003bdc <_sbrk+0x68>)
 8003b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b96:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <_sbrk+0x64>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d207      	bcs.n	8003bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ba4:	f00f fe72 	bl	801388c <__errno>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	220c      	movs	r2, #12
 8003bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb2:	e009      	b.n	8003bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bb4:	4b08      	ldr	r3, [pc, #32]	@ (8003bd8 <_sbrk+0x64>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bba:	4b07      	ldr	r3, [pc, #28]	@ (8003bd8 <_sbrk+0x64>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	4a05      	ldr	r2, [pc, #20]	@ (8003bd8 <_sbrk+0x64>)
 8003bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	200a0000 	.word	0x200a0000
 8003bd4:	00000400 	.word	0x00000400
 8003bd8:	20006c2c 	.word	0x20006c2c
 8003bdc:	200073e8 	.word	0x200073e8

08003be0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003be6:	4b35      	ldr	r3, [pc, #212]	@ (8003cbc <SystemInit+0xdc>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bec:	4a33      	ldr	r2, [pc, #204]	@ (8003cbc <SystemInit+0xdc>)
 8003bee:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003bf2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8003bf6:	4b32      	ldr	r3, [pc, #200]	@ (8003cc0 <SystemInit+0xe0>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003bfc:	4b30      	ldr	r3, [pc, #192]	@ (8003cc0 <SystemInit+0xe0>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003c02:	4b2f      	ldr	r3, [pc, #188]	@ (8003cc0 <SystemInit+0xe0>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8003c08:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc0 <SystemInit+0xe0>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	492c      	ldr	r1, [pc, #176]	@ (8003cc0 <SystemInit+0xe0>)
 8003c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc4 <SystemInit+0xe4>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8003c14:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc0 <SystemInit+0xe0>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8003c1a:	4b29      	ldr	r3, [pc, #164]	@ (8003cc0 <SystemInit+0xe0>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8003c20:	4b27      	ldr	r3, [pc, #156]	@ (8003cc0 <SystemInit+0xe0>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8003c26:	4b26      	ldr	r3, [pc, #152]	@ (8003cc0 <SystemInit+0xe0>)
 8003c28:	4a27      	ldr	r2, [pc, #156]	@ (8003cc8 <SystemInit+0xe8>)
 8003c2a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8003c2c:	4b24      	ldr	r3, [pc, #144]	@ (8003cc0 <SystemInit+0xe0>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8003c32:	4b23      	ldr	r3, [pc, #140]	@ (8003cc0 <SystemInit+0xe0>)
 8003c34:	4a24      	ldr	r2, [pc, #144]	@ (8003cc8 <SystemInit+0xe8>)
 8003c36:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8003c38:	4b21      	ldr	r3, [pc, #132]	@ (8003cc0 <SystemInit+0xe0>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8003c3e:	4b20      	ldr	r3, [pc, #128]	@ (8003cc0 <SystemInit+0xe0>)
 8003c40:	4a21      	ldr	r2, [pc, #132]	@ (8003cc8 <SystemInit+0xe8>)
 8003c42:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8003c44:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc0 <SystemInit+0xe0>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc0 <SystemInit+0xe0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc0 <SystemInit+0xe0>)
 8003c50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003c56:	4b1a      	ldr	r3, [pc, #104]	@ (8003cc0 <SystemInit+0xe0>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c5c:	4b17      	ldr	r3, [pc, #92]	@ (8003cbc <SystemInit+0xdc>)
 8003c5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c62:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8003c64:	4b19      	ldr	r3, [pc, #100]	@ (8003ccc <SystemInit+0xec>)
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8003c6c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8003c74:	d003      	beq.n	8003c7e <SystemInit+0x9e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003c7c:	d117      	bne.n	8003cae <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8003c7e:	4b13      	ldr	r3, [pc, #76]	@ (8003ccc <SystemInit+0xec>)
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8003c8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ccc <SystemInit+0xec>)
 8003c8c:	4a10      	ldr	r2, [pc, #64]	@ (8003cd0 <SystemInit+0xf0>)
 8003c8e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8003c90:	4b0e      	ldr	r3, [pc, #56]	@ (8003ccc <SystemInit+0xec>)
 8003c92:	4a10      	ldr	r2, [pc, #64]	@ (8003cd4 <SystemInit+0xf4>)
 8003c94:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <SystemInit+0xec>)
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003ccc <SystemInit+0xec>)
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <SystemInit+0xec>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4a09      	ldr	r2, [pc, #36]	@ (8003ccc <SystemInit+0xec>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	61d3      	str	r3, [r2, #28]
  }
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000ed00 	.word	0xe000ed00
 8003cc0:	44020c00 	.word	0x44020c00
 8003cc4:	eae2eae3 	.word	0xeae2eae3
 8003cc8:	01010280 	.word	0x01010280
 8003ccc:	40022000 	.word	0x40022000
 8003cd0:	08192a3b 	.word	0x08192a3b
 8003cd4:	4c5d6e7f 	.word	0x4c5d6e7f

08003cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003cd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003cdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003cde:	e003      	b.n	8003ce8 <LoopCopyDataInit>

08003ce0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003ce2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003ce4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003ce6:	3104      	adds	r1, #4

08003ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ce8:	480b      	ldr	r0, [pc, #44]	@ (8003d18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003cea:	4b0c      	ldr	r3, [pc, #48]	@ (8003d1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003cec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003cee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003cf0:	d3f6      	bcc.n	8003ce0 <CopyDataInit>
	ldr	r2, =_sbss
 8003cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8003d20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003cf4:	e002      	b.n	8003cfc <LoopFillZerobss>

08003cf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003cf6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003cf8:	f842 3b04 	str.w	r3, [r2], #4

08003cfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003cfc:	4b09      	ldr	r3, [pc, #36]	@ (8003d24 <LoopForever+0x16>)
	cmp	r2, r3
 8003cfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003d00:	d3f9      	bcc.n	8003cf6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d02:	f7ff ff6d 	bl	8003be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d06:	f00f fdc7 	bl	8013898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d0a:	f7fd fc25 	bl	8001558 <main>

08003d0e <LoopForever>:

LoopForever:
    b LoopForever
 8003d0e:	e7fe      	b.n	8003d0e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003d10:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8003d14:	08014aac 	.word	0x08014aac
	ldr	r0, =_sdata
 8003d18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003d1c:	200001d0 	.word	0x200001d0
	ldr	r2, =_sbss
 8003d20:	200001d0 	.word	0x200001d0
	ldr	r3, = _ebss
 8003d24:	200073e8 	.word	0x200073e8

08003d28 <ADC2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d28:	e7fe      	b.n	8003d28 <ADC2_IRQHandler>
	...

08003d2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d30:	2003      	movs	r0, #3
 8003d32:	f001 fd64 	bl	80057fe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003d36:	f004 fae5 	bl	8008304 <HAL_RCC_GetSysClockFreq>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d70 <HAL_Init+0x44>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	490b      	ldr	r1, [pc, #44]	@ (8003d74 <HAL_Init+0x48>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003d78 <HAL_Init+0x4c>)
 8003d4e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003d50:	2004      	movs	r0, #4
 8003d52:	f001 fd87 	bl	8005864 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d56:	200f      	movs	r0, #15
 8003d58:	f7ff fdee 	bl	8003938 <HAL_InitTick>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e002      	b.n	8003d6c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003d66:	f7fe ff75 	bl	8002c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	44020c00 	.word	0x44020c00
 8003d74:	08014a10 	.word	0x08014a10
 8003d78:	20000170 	.word	0x20000170

08003d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d80:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <HAL_IncTick+0x20>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <HAL_IncTick+0x24>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	4a04      	ldr	r2, [pc, #16]	@ (8003da0 <HAL_IncTick+0x24>)
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000178 	.word	0x20000178
 8003da0:	20006c30 	.word	0x20006c30

08003da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return uwTick;
 8003da8:	4b03      	ldr	r3, [pc, #12]	@ (8003db8 <HAL_GetTick+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20006c30 	.word	0x20006c30

08003dbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	609a      	str	r2, [r3, #8]
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003e32:	f043 0201 	orr.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8003e50:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <LL_ADC_EnableChannel0_GPIO+0x24>)
 8003e52:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003e56:	4a05      	ldr	r2, [pc, #20]	@ (8003e6c <LL_ADC_EnableChannel0_GPIO+0x24>)
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	42028000 	.word	0x42028000

08003e70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3360      	adds	r3, #96	@ 0x60
 8003e82:	461a      	mov	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <LL_ADC_SetOffset+0x44>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	03fff000 	.word	0x03fff000

08003eb8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3360      	adds	r3, #96	@ 0x60
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3360      	adds	r3, #96	@ 0x60
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b087      	sub	sp, #28
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	3360      	adds	r3, #96	@ 0x60
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3360      	adds	r3, #96	@ 0x60
 8003f60:	461a      	mov	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	615a      	str	r2, [r3, #20]
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b087      	sub	sp, #28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3330      	adds	r3, #48	@ 0x30
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	f003 030c 	and.w	r3, r3, #12
 8003fee:	4413      	add	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	211f      	movs	r1, #31
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	401a      	ands	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	0e9b      	lsrs	r3, r3, #26
 800400a:	f003 011f 	and.w	r1, r3, #31
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f003 031f 	and.w	r3, r3, #31
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	431a      	orrs	r2, r3
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004036:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3314      	adds	r3, #20
 8004060:	461a      	mov	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	0e5b      	lsrs	r3, r3, #25
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	4413      	add	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	0d1b      	lsrs	r3, r3, #20
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2107      	movs	r1, #7
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	401a      	ands	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	0d1b      	lsrs	r3, r3, #20
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	fa01 f303 	lsl.w	r3, r1, r3
 8004094:	431a      	orrs	r2, r3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c0:	43db      	mvns	r3, r3
 80040c2:	401a      	ands	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f003 0318 	and.w	r3, r3, #24
 80040ca:	4908      	ldr	r1, [pc, #32]	@ (80040ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80040cc:	40d9      	lsrs	r1, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	400b      	ands	r3, r1
 80040d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d6:	431a      	orrs	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	000fffff 	.word	0x000fffff

080040f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 031f 	and.w	r3, r3, #31
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004138:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6093      	str	r3, [r2, #8]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800415c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004160:	d101      	bne.n	8004166 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004184:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004188:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041b0:	d101      	bne.n	80041b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041d8:	f043 0201 	orr.w	r2, r3, #1
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <LL_ADC_IsEnabled+0x18>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <LL_ADC_IsEnabled+0x1a>
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004222:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004226:	f043 0204 	orr.w	r2, r3, #4
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b04      	cmp	r3, #4
 800424c:	d101      	bne.n	8004252 <LL_ADC_REG_IsConversionOngoing+0x18>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b08      	cmp	r3, #8
 8004272:	d101      	bne.n	8004278 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b089      	sub	sp, #36	@ 0x24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e136      	b.n	8004510 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7fe fcd5 	bl	8002c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ff3f 	bl	800414c <LL_ADC_IsDeepPowerDownEnabled>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d004      	beq.n	80042de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff25 	bl	8004128 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff ff5a 	bl	800419c <LL_ADC_IsInternalRegulatorEnabled>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d115      	bne.n	800431a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff ff3e 	bl	8004174 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042f8:	4b87      	ldr	r3, [pc, #540]	@ (8004518 <HAL_ADC_Init+0x290>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	099b      	lsrs	r3, r3, #6
 80042fe:	4a87      	ldr	r2, [pc, #540]	@ (800451c <HAL_ADC_Init+0x294>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	099b      	lsrs	r3, r3, #6
 8004306:	3301      	adds	r3, #1
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800430c:	e002      	b.n	8004314 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3b01      	subs	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f9      	bne.n	800430e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff ff3c 	bl	800419c <LL_ADC_IsInternalRegulatorEnabled>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432e:	f043 0210 	orr.w	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433a:	f043 0201 	orr.w	r2, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff ff75 	bl	800423a <LL_ADC_REG_IsConversionOngoing>
 8004350:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 80cf 	bne.w	80044fe <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 80cb 	bne.w	80044fe <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004370:	f043 0202 	orr.w	r2, r3, #2
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff ff35 	bl	80041ec <LL_ADC_IsEnabled>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d110      	bne.n	80043aa <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004388:	4865      	ldr	r0, [pc, #404]	@ (8004520 <HAL_ADC_Init+0x298>)
 800438a:	f7ff ff2f 	bl	80041ec <LL_ADC_IsEnabled>
 800438e:	4604      	mov	r4, r0
 8004390:	4864      	ldr	r0, [pc, #400]	@ (8004524 <HAL_ADC_Init+0x29c>)
 8004392:	f7ff ff2b 	bl	80041ec <LL_ADC_IsEnabled>
 8004396:	4603      	mov	r3, r0
 8004398:	4323      	orrs	r3, r4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d105      	bne.n	80043aa <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4619      	mov	r1, r3
 80043a4:	4860      	ldr	r0, [pc, #384]	@ (8004528 <HAL_ADC_Init+0x2a0>)
 80043a6:	f7ff fd09 	bl	8003dbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7e5b      	ldrb	r3, [r3, #25]
 80043ae:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043b4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80043ba:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80043c0:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043c8:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d106      	bne.n	80043e6 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	3b01      	subs	r3, #1
 80043de:	045b      	lsls	r3, r3, #17
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	4b48      	ldr	r3, [pc, #288]	@ (800452c <HAL_ADC_Init+0x2a4>)
 800440a:	4013      	ands	r3, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	430b      	orrs	r3, r1
 8004414:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff ff15 	bl	8004260 <LL_ADC_INJ_IsConversionOngoing>
 8004436:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d13d      	bne.n	80044ba <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d13a      	bne.n	80044ba <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	7e1b      	ldrb	r3, [r3, #24]
 8004448:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004450:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8004452:	4313      	orrs	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004460:	f023 0302 	bic.w	r3, r3, #2
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	69b9      	ldr	r1, [r7, #24]
 800446a:	430b      	orrs	r3, r1
 800446c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d118      	bne.n	80044aa <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004482:	f023 0304 	bic.w	r3, r3, #4
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800448e:	4311      	orrs	r1, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004494:	4311      	orrs	r1, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800449a:	430a      	orrs	r2, r1
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	611a      	str	r2, [r3, #16]
 80044a8:	e007      	b.n	80044ba <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0201 	bic.w	r2, r2, #1
 80044b8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d10c      	bne.n	80044dc <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	f023 010f 	bic.w	r1, r3, #15
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	1e5a      	subs	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80044da:	e007      	b.n	80044ec <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 020f 	bic.w	r2, r2, #15
 80044ea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f0:	f023 0303 	bic.w	r3, r3, #3
 80044f4:	f043 0201 	orr.w	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80044fc:	e007      	b.n	800450e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004502:	f043 0210 	orr.w	r2, r3, #16
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800450e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3724      	adds	r7, #36	@ 0x24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd90      	pop	{r4, r7, pc}
 8004518:	20000170 	.word	0x20000170
 800451c:	053e2d63 	.word	0x053e2d63
 8004520:	42028000 	.word	0x42028000
 8004524:	42028100 	.word	0x42028100
 8004528:	42028300 	.word	0x42028300
 800452c:	fff04007 	.word	0xfff04007

08004530 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b0a2      	sub	sp, #136	@ 0x88
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800453c:	488b      	ldr	r0, [pc, #556]	@ (800476c <HAL_ADC_Start_DMA+0x23c>)
 800453e:	f7ff fdd7 	bl	80040f0 <LL_ADC_GetMultimode>
 8004542:	67f8      	str	r0, [r7, #124]	@ 0x7c

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff fe76 	bl	800423a <LL_ADC_REG_IsConversionOngoing>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	f040 8101 	bne.w	8004758 <HAL_ADC_Start_DMA+0x228>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_ADC_Start_DMA+0x34>
 8004560:	2302      	movs	r3, #2
 8004562:	e0fe      	b.n	8004762 <HAL_ADC_Start_DMA+0x232>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800456c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d006      	beq.n	8004580 <HAL_ADC_Start_DMA+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004572:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004574:	2b05      	cmp	r3, #5
 8004576:	d003      	beq.n	8004580 <HAL_ADC_Start_DMA+0x50>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004578:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800457a:	2b09      	cmp	r3, #9
 800457c:	f040 80e4 	bne.w	8004748 <HAL_ADC_Start_DMA+0x218>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 ff47 	bl	8005414 <ADC_Enable>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800458c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8004590:	2b00      	cmp	r3, #0
 8004592:	f040 80d4 	bne.w	800473e <HAL_ADC_Start_DMA+0x20e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800459e:	f023 0301 	bic.w	r3, r3, #1
 80045a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a70      	ldr	r2, [pc, #448]	@ (8004770 <HAL_ADC_Start_DMA+0x240>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d002      	beq.n	80045ba <HAL_ADC_Start_DMA+0x8a>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	e000      	b.n	80045bc <HAL_ADC_Start_DMA+0x8c>
 80045ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004774 <HAL_ADC_Start_DMA+0x244>)
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d002      	beq.n	80045ca <HAL_ADC_Start_DMA+0x9a>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d105      	bne.n	80045d6 <HAL_ADC_Start_DMA+0xa6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d006      	beq.n	80045f0 <HAL_ADC_Start_DMA+0xc0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e6:	f023 0206 	bic.w	r2, r3, #6
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045ee:	e002      	b.n	80045f6 <HAL_ADC_Start_DMA+0xc6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045fa:	4a5f      	ldr	r2, [pc, #380]	@ (8004778 <HAL_ADC_Start_DMA+0x248>)
 80045fc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004602:	4a5e      	ldr	r2, [pc, #376]	@ (800477c <HAL_ADC_Start_DMA+0x24c>)
 8004604:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460a:	4a5d      	ldr	r2, [pc, #372]	@ (8004780 <HAL_ADC_Start_DMA+0x250>)
 800460c:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	221c      	movs	r2, #28
 8004614:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0210 	orr.w	r2, r2, #16
 800462c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	60da      	str	r2, [r3, #12]

        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	d04d      	beq.n	80046e8 <HAL_ADC_Start_DMA+0x1b8>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004652:	2b00      	cmp	r3, #0
 8004654:	d046      	beq.n	80046e4 <HAL_ADC_Start_DMA+0x1b4>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d040      	beq.n	80046e4 <HAL_ADC_Start_DMA+0x1b4>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	f107 0310 	add.w	r3, r7, #16
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f002 f87d 	bl	8006770 <HAL_DMAEx_List_GetNodeConfig>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_ADC_Start_DMA+0x150>
            {
              return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e070      	b.n	8004762 <HAL_ADC_Start_DMA+0x232>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004682:	2b02      	cmp	r3, #2
 8004684:	d104      	bne.n	8004690 <HAL_ADC_Start_DMA+0x160>
            {
              /* Word -> Bytes */
              length_bytes = Length * 4U;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800468e:	e00a      	b.n	80046a6 <HAL_ADC_Start_DMA+0x176>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004692:	2b01      	cmp	r3, #1
 8004694:	d104      	bne.n	80046a0 <HAL_ADC_Start_DMA+0x170>
            {
              /* Halfword -> Bytes */
              length_bytes = Length * 2U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800469e:	e002      	b.n	80046a6 <HAL_ADC_Start_DMA+0x176>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              length_bytes = Length;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)length_bytes;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046b2:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68ba      	ldr	r2, [r7, #8]
 80046d0:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 ffb0 	bl	800663c <HAL_DMAEx_List_Start_IT>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80046e2:	e026      	b.n	8004732 <HAL_ADC_Start_DMA+0x202>
          }
          else
          {
            return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e03c      	b.n	8004762 <HAL_ADC_Start_DMA+0x232>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d104      	bne.n	80046fc <HAL_ADC_Start_DMA+0x1cc>
          {
            /* Word -> Bytes */
            length_bytes = Length * 4U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046fa:	e00c      	b.n	8004716 <HAL_ADC_Start_DMA+0x1e6>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d104      	bne.n	8004710 <HAL_ADC_Start_DMA+0x1e0>
          {
            /* Halfword -> Bytes */
            length_bytes = Length * 2U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800470e:	e002      	b.n	8004716 <HAL_ADC_Start_DMA+0x1e6>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            length_bytes = Length;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          /* Start the DMA channel */
          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3340      	adds	r3, #64	@ 0x40
 8004720:	4619      	mov	r1, r3
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004728:	f001 fa36 	bl	8005b98 <HAL_DMA_Start_IT>
 800472c:	4603      	mov	r3, r0
 800472e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fd6b 	bl	8004212 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800473c:	e00f      	b.n	800475e <HAL_ADC_Start_DMA+0x22e>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 8004746:	e00a      	b.n	800475e <HAL_ADC_Start_DMA+0x22e>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8004756:	e002      	b.n	800475e <HAL_ADC_Start_DMA+0x22e>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004758:	2302      	movs	r3, #2
 800475a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  /* Return function status */
  return tmp_hal_status;
 800475e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004762:	4618      	mov	r0, r3
 8004764:	3788      	adds	r7, #136	@ 0x88
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	42028300 	.word	0x42028300
 8004770:	42028100 	.word	0x42028100
 8004774:	42028000 	.word	0x42028000
 8004778:	08005519 	.word	0x08005519
 800477c:	080055f1 	.word	0x080055f1
 8004780:	0800560d 	.word	0x0800560d

08004784 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	@ 0x28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800478c:	2300      	movs	r3, #0
 800478e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047a0:	4882      	ldr	r0, [pc, #520]	@ (80049ac <HAL_ADC_IRQHandler+0x228>)
 80047a2:	f7ff fca5 	bl	80040f0 <LL_ADC_GetMultimode>
 80047a6:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d017      	beq.n	80047e2 <HAL_ADC_IRQHandler+0x5e>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d012      	beq.n	80047e2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d105      	bne.n	80047d4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047cc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 ff5b 	bl	8005690 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2202      	movs	r2, #2
 80047e0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d004      	beq.n	80047f6 <HAL_ADC_IRQHandler+0x72>
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8083 	beq.w	8004908 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d07d      	beq.n	8004908 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b00      	cmp	r3, #0
 8004816:	d105      	bne.n	8004824 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fbbf 	bl	8003fac <LL_ADC_REG_IsTriggerSourceSWStart>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d062      	beq.n	80048fa <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a5d      	ldr	r2, [pc, #372]	@ (80049b0 <HAL_ADC_IRQHandler+0x22c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d002      	beq.n	8004844 <HAL_ADC_IRQHandler+0xc0>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	e000      	b.n	8004846 <HAL_ADC_IRQHandler+0xc2>
 8004844:	4b5b      	ldr	r3, [pc, #364]	@ (80049b4 <HAL_ADC_IRQHandler+0x230>)
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6812      	ldr	r2, [r2, #0]
 800484a:	4293      	cmp	r3, r2
 800484c:	d008      	beq.n	8004860 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2b05      	cmp	r3, #5
 8004858:	d002      	beq.n	8004860 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b09      	cmp	r3, #9
 800485e:	d104      	bne.n	800486a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	623b      	str	r3, [r7, #32]
 8004868:	e00c      	b.n	8004884 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a50      	ldr	r2, [pc, #320]	@ (80049b0 <HAL_ADC_IRQHandler+0x22c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d002      	beq.n	800487a <HAL_ADC_IRQHandler+0xf6>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	e000      	b.n	800487c <HAL_ADC_IRQHandler+0xf8>
 800487a:	4b4e      	ldr	r3, [pc, #312]	@ (80049b4 <HAL_ADC_IRQHandler+0x230>)
 800487c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d135      	bne.n	80048fa <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b08      	cmp	r3, #8
 800489a:	d12e      	bne.n	80048fa <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fcca 	bl	800423a <LL_ADC_REG_IsConversionOngoing>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d11a      	bne.n	80048e2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 020c 	bic.w	r2, r2, #12
 80048ba:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d112      	bne.n	80048fa <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d8:	f043 0201 	orr.w	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	659a      	str	r2, [r3, #88]	@ 0x58
 80048e0:	e00b      	b.n	80048fa <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e6:	f043 0210 	orr.w	r2, r3, #16
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f2:	f043 0201 	orr.w	r2, r3, #1
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fd fc2e 	bl	800215c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	220c      	movs	r2, #12
 8004906:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <HAL_ADC_IRQHandler+0x198>
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 809f 	beq.w	8004a66 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8099 	beq.w	8004a66 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	2b00      	cmp	r3, #0
 800493e:	d105      	bne.n	800494c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004944:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fb6a 	bl	800402a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004956:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fb25 	bl	8003fac <LL_ADC_REG_IsTriggerSourceSWStart>
 8004962:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a11      	ldr	r2, [pc, #68]	@ (80049b0 <HAL_ADC_IRQHandler+0x22c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d002      	beq.n	8004974 <HAL_ADC_IRQHandler+0x1f0>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	e000      	b.n	8004976 <HAL_ADC_IRQHandler+0x1f2>
 8004974:	4b0f      	ldr	r3, [pc, #60]	@ (80049b4 <HAL_ADC_IRQHandler+0x230>)
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	4293      	cmp	r3, r2
 800497c:	d008      	beq.n	8004990 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b06      	cmp	r3, #6
 8004988:	d002      	beq.n	8004990 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b07      	cmp	r3, #7
 800498e:	d104      	bne.n	800499a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	623b      	str	r3, [r7, #32]
 8004998:	e013      	b.n	80049c2 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a04      	ldr	r2, [pc, #16]	@ (80049b0 <HAL_ADC_IRQHandler+0x22c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <HAL_ADC_IRQHandler+0x234>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	e007      	b.n	80049ba <HAL_ADC_IRQHandler+0x236>
 80049aa:	bf00      	nop
 80049ac:	42028300 	.word	0x42028300
 80049b0:	42028100 	.word	0x42028100
 80049b4:	42028000 	.word	0x42028000
 80049b8:	4b7d      	ldr	r3, [pc, #500]	@ (8004bb0 <HAL_ADC_IRQHandler+0x42c>)
 80049ba:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d047      	beq.n	8004a58 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_ADC_IRQHandler+0x25e>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d03f      	beq.n	8004a58 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d13a      	bne.n	8004a58 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ec:	2b40      	cmp	r3, #64	@ 0x40
 80049ee:	d133      	bne.n	8004a58 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d12e      	bne.n	8004a58 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff fc2e 	bl	8004260 <LL_ADC_INJ_IsConversionOngoing>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d11a      	bne.n	8004a40 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a18:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d112      	bne.n	8004a58 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a36:	f043 0201 	orr.w	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a3e:	e00b      	b.n	8004a58 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a44:	f043 0210 	orr.w	r2, r3, #16
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a50:	f043 0201 	orr.w	r2, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fdf1 	bl	8005640 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2260      	movs	r2, #96	@ 0x60
 8004a64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d011      	beq.n	8004a94 <HAL_ADC_IRQHandler+0x310>
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00c      	beq.n	8004a94 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f8a0 	bl	8004bcc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2280      	movs	r2, #128	@ 0x80
 8004a92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d012      	beq.n	8004ac4 <HAL_ADC_IRQHandler+0x340>
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fdd7 	bl	8005668 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ac2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d012      	beq.n	8004af4 <HAL_ADC_IRQHandler+0x370>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00d      	beq.n	8004af4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004adc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fdc9 	bl	800567c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004af2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d036      	beq.n	8004b6c <HAL_ADC_IRQHandler+0x3e8>
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d031      	beq.n	8004b6c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d102      	bne.n	8004b16 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8004b10:	2301      	movs	r3, #1
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b14:	e014      	b.n	8004b40 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004b1c:	4825      	ldr	r0, [pc, #148]	@ (8004bb4 <HAL_ADC_IRQHandler+0x430>)
 8004b1e:	f7ff faf5 	bl	800410c <LL_ADC_GetMultiDMATransfer>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00b      	beq.n	8004b40 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b2c:	e008      	b.n	8004b40 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d10e      	bne.n	8004b64 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b56:	f043 0202 	orr.w	r2, r3, #2
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f83e 	bl	8004be0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d018      	beq.n	8004ba8 <HAL_ADC_IRQHandler+0x424>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b84:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b90:	f043 0208 	orr.w	r2, r3, #8
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ba0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fd56 	bl	8005654 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004ba8:	bf00      	nop
 8004baa:	3728      	adds	r7, #40	@ 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	42028000 	.word	0x42028000
 8004bb4:	42028300 	.word	0x42028300

08004bb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b0b6      	sub	sp, #216	@ 0xd8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x22>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e3e6      	b.n	80053e4 <HAL_ADC_ConfigChannel+0x7f0>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fb09 	bl	800423a <LL_ADC_REG_IsConversionOngoing>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f040 83cb 	bne.w	80053c6 <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d009      	beq.n	8004c4c <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4ab0      	ldr	r2, [pc, #704]	@ (8004f00 <HAL_ADC_ConfigChannel+0x30c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d109      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x62>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	4aaf      	ldr	r2, [pc, #700]	@ (8004f04 <HAL_ADC_ConfigChannel+0x310>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d104      	bne.n	8004c56 <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff f8f9 	bl	8003e48 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6818      	ldr	r0, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	6859      	ldr	r1, [r3, #4]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	f7ff f9b5 	bl	8003fd2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7ff fae4 	bl	800423a <LL_ADC_REG_IsConversionOngoing>
 8004c72:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff faf0 	bl	8004260 <LL_ADC_INJ_IsConversionOngoing>
 8004c80:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f040 81dd 	bne.w	8005048 <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f040 81d8 	bne.w	8005048 <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ca0:	d10f      	bne.n	8004cc2 <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	4619      	mov	r1, r3
 8004cae:	f7ff f9cf 	bl	8004050 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff f963 	bl	8003f86 <LL_ADC_SetSamplingTimeCommonConfig>
 8004cc0:	e00e      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f7ff f9be 	bl	8004050 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff f953 	bl	8003f86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	08db      	lsrs	r3, r3, #3
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d022      	beq.n	8004d48 <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6919      	ldr	r1, [r3, #16]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004d12:	f7ff f8ad 	bl	8003e70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6919      	ldr	r1, [r3, #16]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	461a      	mov	r2, r3
 8004d24:	f7ff f8f9 	bl	8003f1a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d102      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x14a>
 8004d38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d3c:	e000      	b.n	8004d40 <HAL_ADC_ConfigChannel+0x14c>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	461a      	mov	r2, r3
 8004d42:	f7ff f905 	bl	8003f50 <LL_ADC_SetOffsetSaturation>
 8004d46:	e17f      	b.n	8005048 <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff f8b2 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004d54:	4603      	mov	r3, r0
 8004d56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <HAL_ADC_ConfigChannel+0x180>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2100      	movs	r1, #0
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff f8a7 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	0e9b      	lsrs	r3, r3, #26
 8004d6e:	f003 021f 	and.w	r2, r3, #31
 8004d72:	e01e      	b.n	8004db2 <HAL_ADC_ConfigChannel+0x1be>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff f89c 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004d8a:	fa93 f3a3 	rbit	r3, r3
 8004d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8004d92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 8004d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 8004da2:	2320      	movs	r3, #32
 8004da4:	e004      	b.n	8004db0 <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 8004da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004daa:	fab3 f383 	clz	r3, r3
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d105      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x1d6>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	0e9b      	lsrs	r3, r3, #26
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	e018      	b.n	8004dfc <HAL_ADC_ConfigChannel+0x208>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004dd6:	fa93 f3a3 	rbit	r3, r3
 8004dda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004de2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004de6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 8004dee:	2320      	movs	r3, #32
 8004df0:	e004      	b.n	8004dfc <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 8004df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004df6:	fab3 f383 	clz	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d106      	bne.n	8004e0e <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2100      	movs	r1, #0
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff f86b 	bl	8003ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2101      	movs	r1, #1
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff f84f 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <HAL_ADC_ConfigChannel+0x246>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2101      	movs	r1, #1
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff f844 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004e30:	4603      	mov	r3, r0
 8004e32:	0e9b      	lsrs	r3, r3, #26
 8004e34:	f003 021f 	and.w	r2, r3, #31
 8004e38:	e01e      	b.n	8004e78 <HAL_ADC_ConfigChannel+0x284>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2101      	movs	r1, #1
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff f839 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e50:	fa93 f3a3 	rbit	r3, r3
 8004e54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004e58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004e60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 8004e68:	2320      	movs	r3, #32
 8004e6a:	e004      	b.n	8004e76 <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 8004e6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004e70:	fab3 f383 	clz	r3, r3
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x29c>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	0e9b      	lsrs	r3, r3, #26
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	e018      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x2ce>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e9c:	fa93 f3a3 	rbit	r3, r3
 8004ea0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004ea4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ea8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	e004      	b.n	8004ec2 <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 8004eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ebc:	fab3 f383 	clz	r3, r3
 8004ec0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d106      	bne.n	8004ed4 <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2101      	movs	r1, #1
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff f808 	bl	8003ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2102      	movs	r1, #2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe ffec 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10e      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x314>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2102      	movs	r1, #2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe ffe1 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	0e9b      	lsrs	r3, r3, #26
 8004efa:	f003 021f 	and.w	r2, r3, #31
 8004efe:	e022      	b.n	8004f46 <HAL_ADC_ConfigChannel+0x352>
 8004f00:	04300002 	.word	0x04300002
 8004f04:	407f0000 	.word	0x407f0000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fe ffd2 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f1e:	fa93 f3a3 	rbit	r3, r3
 8004f22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004f26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004f2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 8004f36:	2320      	movs	r3, #32
 8004f38:	e004      	b.n	8004f44 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8004f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004f3e:	fab3 f383 	clz	r3, r3
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d105      	bne.n	8004f5e <HAL_ADC_ConfigChannel+0x36a>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	0e9b      	lsrs	r3, r3, #26
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	e016      	b.n	8004f8c <HAL_ADC_ConfigChannel+0x398>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f6a:	fa93 f3a3 	rbit	r3, r3
 8004f6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004f70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004f72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004f76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 8004f7e:	2320      	movs	r3, #32
 8004f80:	e004      	b.n	8004f8c <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 8004f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f86:	fab3 f383 	clz	r3, r3
 8004f8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d106      	bne.n	8004f9e <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2200      	movs	r2, #0
 8004f96:	2102      	movs	r1, #2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fe ffa3 	bl	8003ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2103      	movs	r1, #3
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fe ff87 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <HAL_ADC_ConfigChannel+0x3d6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2103      	movs	r1, #3
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fe ff7c 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	0e9b      	lsrs	r3, r3, #26
 8004fc4:	f003 021f 	and.w	r2, r3, #31
 8004fc8:	e017      	b.n	8004ffa <HAL_ADC_ConfigChannel+0x406>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2103      	movs	r1, #3
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe ff71 	bl	8003eb8 <LL_ADC_GetOffsetChannel>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fdc:	fa93 f3a3 	rbit	r3, r3
 8004fe0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004fe2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fe4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004fe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004fec:	2320      	movs	r3, #32
 8004fee:	e003      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004ff0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ff2:	fab3 f383 	clz	r3, r3
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005002:	2b00      	cmp	r3, #0
 8005004:	d105      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x41e>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	0e9b      	lsrs	r3, r3, #26
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	e011      	b.n	8005036 <HAL_ADC_ConfigChannel+0x442>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005018:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800501a:	fa93 f3a3 	rbit	r3, r3
 800501e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005022:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005024:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 800502a:	2320      	movs	r3, #32
 800502c:	e003      	b.n	8005036 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 800502e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005036:	429a      	cmp	r2, r3
 8005038:	d106      	bne.n	8005048 <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2200      	movs	r2, #0
 8005040:	2103      	movs	r1, #3
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe ff4e 	bl	8003ee4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff f8cd 	bl	80041ec <LL_ADC_IsEnabled>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	f040 813f 	bne.w	80052d8 <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6819      	ldr	r1, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	461a      	mov	r2, r3
 8005068:	f7ff f81e 	bl	80040a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	4a8e      	ldr	r2, [pc, #568]	@ (80052ac <HAL_ADC_ConfigChannel+0x6b8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	f040 8130 	bne.w	80052d8 <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10b      	bne.n	80050a0 <HAL_ADC_ConfigChannel+0x4ac>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	0e9b      	lsrs	r3, r3, #26
 800508e:	3301      	adds	r3, #1
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	2b09      	cmp	r3, #9
 8005096:	bf94      	ite	ls
 8005098:	2301      	movls	r3, #1
 800509a:	2300      	movhi	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	e019      	b.n	80050d4 <HAL_ADC_ConfigChannel+0x4e0>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050a8:	fa93 f3a3 	rbit	r3, r3
 80050ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80050ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050b0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80050b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 80050b8:	2320      	movs	r3, #32
 80050ba:	e003      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 80050bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050be:	fab3 f383 	clz	r3, r3
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	3301      	adds	r3, #1
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	2b09      	cmp	r3, #9
 80050cc:	bf94      	ite	ls
 80050ce:	2301      	movls	r3, #1
 80050d0:	2300      	movhi	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d079      	beq.n	80051cc <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d107      	bne.n	80050f4 <HAL_ADC_ConfigChannel+0x500>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	0e9b      	lsrs	r3, r3, #26
 80050ea:	3301      	adds	r3, #1
 80050ec:	069b      	lsls	r3, r3, #26
 80050ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050f2:	e015      	b.n	8005120 <HAL_ADC_ConfigChannel+0x52c>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050fc:	fa93 f3a3 	rbit	r3, r3
 8005100:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005104:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 800510c:	2320      	movs	r3, #32
 800510e:	e003      	b.n	8005118 <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 8005110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005112:	fab3 f383 	clz	r3, r3
 8005116:	b2db      	uxtb	r3, r3
 8005118:	3301      	adds	r3, #1
 800511a:	069b      	lsls	r3, r3, #26
 800511c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <HAL_ADC_ConfigChannel+0x54c>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	0e9b      	lsrs	r3, r3, #26
 8005132:	3301      	adds	r3, #1
 8005134:	f003 031f 	and.w	r3, r3, #31
 8005138:	2101      	movs	r1, #1
 800513a:	fa01 f303 	lsl.w	r3, r1, r3
 800513e:	e017      	b.n	8005170 <HAL_ADC_ConfigChannel+0x57c>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005148:	fa93 f3a3 	rbit	r3, r3
 800514c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800514e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005150:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 8005158:	2320      	movs	r3, #32
 800515a:	e003      	b.n	8005164 <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 800515c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800515e:	fab3 f383 	clz	r3, r3
 8005162:	b2db      	uxtb	r3, r3
 8005164:	3301      	adds	r3, #1
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	2101      	movs	r1, #1
 800516c:	fa01 f303 	lsl.w	r3, r1, r3
 8005170:	ea42 0103 	orr.w	r1, r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x5a2>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	0e9b      	lsrs	r3, r3, #26
 8005186:	3301      	adds	r3, #1
 8005188:	f003 021f 	and.w	r2, r3, #31
 800518c:	4613      	mov	r3, r2
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	4413      	add	r3, r2
 8005192:	051b      	lsls	r3, r3, #20
 8005194:	e018      	b.n	80051c8 <HAL_ADC_ConfigChannel+0x5d4>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519e:	fa93 f3a3 	rbit	r3, r3
 80051a2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80051a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80051a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 80051ae:	2320      	movs	r3, #32
 80051b0:	e003      	b.n	80051ba <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 80051b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b4:	fab3 f383 	clz	r3, r3
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	3301      	adds	r3, #1
 80051bc:	f003 021f 	and.w	r2, r3, #31
 80051c0:	4613      	mov	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4413      	add	r3, r2
 80051c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051c8:	430b      	orrs	r3, r1
 80051ca:	e080      	b.n	80052ce <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d107      	bne.n	80051e8 <HAL_ADC_ConfigChannel+0x5f4>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	0e9b      	lsrs	r3, r3, #26
 80051de:	3301      	adds	r3, #1
 80051e0:	069b      	lsls	r3, r3, #26
 80051e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051e6:	e015      	b.n	8005214 <HAL_ADC_ConfigChannel+0x620>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f0:	fa93 f3a3 	rbit	r3, r3
 80051f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80051f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80051fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 8005200:	2320      	movs	r3, #32
 8005202:	e003      	b.n	800520c <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	fab3 f383 	clz	r3, r3
 800520a:	b2db      	uxtb	r3, r3
 800520c:	3301      	adds	r3, #1
 800520e:	069b      	lsls	r3, r3, #26
 8005210:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800521c:	2b00      	cmp	r3, #0
 800521e:	d109      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x640>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	0e9b      	lsrs	r3, r3, #26
 8005226:	3301      	adds	r3, #1
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	2101      	movs	r1, #1
 800522e:	fa01 f303 	lsl.w	r3, r1, r3
 8005232:	e017      	b.n	8005264 <HAL_ADC_ConfigChannel+0x670>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	fa93 f3a3 	rbit	r3, r3
 8005240:	61fb      	str	r3, [r7, #28]
  return result;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 800524c:	2320      	movs	r3, #32
 800524e:	e003      	b.n	8005258 <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	fab3 f383 	clz	r3, r3
 8005256:	b2db      	uxtb	r3, r3
 8005258:	3301      	adds	r3, #1
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2101      	movs	r1, #1
 8005260:	fa01 f303 	lsl.w	r3, r1, r3
 8005264:	ea42 0103 	orr.w	r1, r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10d      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x69c>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	0e9b      	lsrs	r3, r3, #26
 800527a:	3301      	adds	r3, #1
 800527c:	f003 021f 	and.w	r2, r3, #31
 8005280:	4613      	mov	r3, r2
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	4413      	add	r3, r2
 8005286:	3b1e      	subs	r3, #30
 8005288:	051b      	lsls	r3, r3, #20
 800528a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800528e:	e01d      	b.n	80052cc <HAL_ADC_ConfigChannel+0x6d8>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	fa93 f3a3 	rbit	r3, r3
 800529c:	613b      	str	r3, [r7, #16]
  return result;
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d103      	bne.n	80052b0 <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 80052a8:	2320      	movs	r3, #32
 80052aa:	e005      	b.n	80052b8 <HAL_ADC_ConfigChannel+0x6c4>
 80052ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	fab3 f383 	clz	r3, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	3301      	adds	r3, #1
 80052ba:	f003 021f 	and.w	r2, r3, #31
 80052be:	4613      	mov	r3, r2
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	4413      	add	r3, r2
 80052c4:	3b1e      	subs	r3, #30
 80052c6:	051b      	lsls	r3, r3, #20
 80052c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052d2:	4619      	mov	r1, r3
 80052d4:	f7fe febc 	bl	8004050 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b43      	ldr	r3, [pc, #268]	@ (80053ec <HAL_ADC_ConfigChannel+0x7f8>)
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d079      	beq.n	80053d8 <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80052e4:	4842      	ldr	r0, [pc, #264]	@ (80053f0 <HAL_ADC_ConfigChannel+0x7fc>)
 80052e6:	f7fe fd8f 	bl	8003e08 <LL_ADC_GetCommonPathInternalCh>
 80052ea:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a40      	ldr	r2, [pc, #256]	@ (80053f4 <HAL_ADC_ConfigChannel+0x800>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d124      	bne.n	8005342 <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d11e      	bne.n	8005342 <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a3b      	ldr	r2, [pc, #236]	@ (80053f8 <HAL_ADC_ConfigChannel+0x804>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d164      	bne.n	80053d8 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800530e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005312:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005316:	4619      	mov	r1, r3
 8005318:	4835      	ldr	r0, [pc, #212]	@ (80053f0 <HAL_ADC_ConfigChannel+0x7fc>)
 800531a:	f7fe fd62 	bl	8003de2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800531e:	4b37      	ldr	r3, [pc, #220]	@ (80053fc <HAL_ADC_ConfigChannel+0x808>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	099b      	lsrs	r3, r3, #6
 8005324:	4a36      	ldr	r2, [pc, #216]	@ (8005400 <HAL_ADC_ConfigChannel+0x80c>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	099b      	lsrs	r3, r3, #6
 800532c:	3301      	adds	r3, #1
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005332:	e002      	b.n	800533a <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3b01      	subs	r3, #1
 8005338:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f9      	bne.n	8005334 <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005340:	e04a      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a2f      	ldr	r2, [pc, #188]	@ (8005404 <HAL_ADC_ConfigChannel+0x810>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d113      	bne.n	8005374 <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800534c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005350:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10d      	bne.n	8005374 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a2a      	ldr	r2, [pc, #168]	@ (8005408 <HAL_ADC_ConfigChannel+0x814>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d13a      	bne.n	80053d8 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005366:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800536a:	4619      	mov	r1, r3
 800536c:	4820      	ldr	r0, [pc, #128]	@ (80053f0 <HAL_ADC_ConfigChannel+0x7fc>)
 800536e:	f7fe fd38 	bl	8003de2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005372:	e031      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a24      	ldr	r2, [pc, #144]	@ (800540c <HAL_ADC_ConfigChannel+0x818>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d113      	bne.n	80053a6 <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800537e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10d      	bne.n	80053a6 <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1a      	ldr	r2, [pc, #104]	@ (80053f8 <HAL_ADC_ConfigChannel+0x804>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d121      	bne.n	80053d8 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005398:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800539c:	4619      	mov	r1, r3
 800539e:	4814      	ldr	r0, [pc, #80]	@ (80053f0 <HAL_ADC_ConfigChannel+0x7fc>)
 80053a0:	f7fe fd1f 	bl	8003de2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 80053a4:	e018      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a19      	ldr	r2, [pc, #100]	@ (8005410 <HAL_ADC_ConfigChannel+0x81c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d113      	bne.n	80053d8 <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a10      	ldr	r2, [pc, #64]	@ (80053f8 <HAL_ADC_ConfigChannel+0x804>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe fd30 	bl	8003e24 <LL_ADC_EnableChannelVDDcore>
 80053c4:	e008      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ca:	f043 0220 	orr.w	r2, r3, #32
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80053e0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	37d8      	adds	r7, #216	@ 0xd8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	80080000 	.word	0x80080000
 80053f0:	42028300 	.word	0x42028300
 80053f4:	c3210000 	.word	0xc3210000
 80053f8:	42028000 	.word	0x42028000
 80053fc:	20000170 	.word	0x20000170
 8005400:	053e2d63 	.word	0x053e2d63
 8005404:	43290000 	.word	0x43290000
 8005408:	42028100 	.word	0x42028100
 800540c:	c7520000 	.word	0xc7520000
 8005410:	475a0000 	.word	0x475a0000

08005414 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800541c:	2300      	movs	r3, #0
 800541e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f7fe fee1 	bl	80041ec <LL_ADC_IsEnabled>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d166      	bne.n	80054fe <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	4b34      	ldr	r3, [pc, #208]	@ (8005508 <ADC_Enable+0xf4>)
 8005438:	4013      	ands	r3, r2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005442:	f043 0210 	orr.w	r2, r3, #16
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800544e:	f043 0201 	orr.w	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e052      	b.n	8005500 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f7fe feb0 	bl	80041c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005464:	4829      	ldr	r0, [pc, #164]	@ (800550c <ADC_Enable+0xf8>)
 8005466:	f7fe fccf 	bl	8003e08 <LL_ADC_GetCommonPathInternalCh>
 800546a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800546c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005470:	2b00      	cmp	r3, #0
 8005472:	d010      	beq.n	8005496 <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005474:	4b26      	ldr	r3, [pc, #152]	@ (8005510 <ADC_Enable+0xfc>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	099b      	lsrs	r3, r3, #6
 800547a:	4a26      	ldr	r2, [pc, #152]	@ (8005514 <ADC_Enable+0x100>)
 800547c:	fba2 2303 	umull	r2, r3, r2, r3
 8005480:	099b      	lsrs	r3, r3, #6
 8005482:	3301      	adds	r3, #1
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005488:	e002      	b.n	8005490 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	3b01      	subs	r3, #1
 800548e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f9      	bne.n	800548a <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005496:	f7fe fc85 	bl	8003da4 <HAL_GetTick>
 800549a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800549c:	e028      	b.n	80054f0 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe fea2 	bl	80041ec <LL_ADC_IsEnabled>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d104      	bne.n	80054b8 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe fe86 	bl	80041c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80054b8:	f7fe fc74 	bl	8003da4 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d914      	bls.n	80054f0 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d00d      	beq.n	80054f0 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d8:	f043 0210 	orr.w	r2, r3, #16
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e4:	f043 0201 	orr.w	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e007      	b.n	8005500 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d1cf      	bne.n	800549e <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	8000003f 	.word	0x8000003f
 800550c:	42028300 	.word	0x42028300
 8005510:	20000170 	.word	0x20000170
 8005514:	053e2d63 	.word	0x053e2d63

08005518 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005524:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800552e:	2b00      	cmp	r3, #0
 8005530:	d14b      	bne.n	80055ca <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005536:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d021      	beq.n	8005590 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f7fe fd2b 	bl	8003fac <LL_ADC_REG_IsTriggerSourceSWStart>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d032      	beq.n	80055c2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d12b      	bne.n	80055c2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800557a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d11f      	bne.n	80055c2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005586:	f043 0201 	orr.w	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	659a      	str	r2, [r3, #88]	@ 0x58
 800558e:	e018      	b.n	80055c2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d111      	bne.n	80055c2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d105      	bne.n	80055c2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ba:	f043 0201 	orr.w	r2, r3, #1
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7fc fdca 	bl	800215c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80055c8:	e00e      	b.n	80055e8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f7ff fb02 	bl	8004be0 <HAL_ADC_ErrorCallback>
}
 80055dc:	e004      	b.n	80055e8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7ff fada 	bl	8004bb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005604:	bf00      	nop
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005618:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800562a:	f043 0204 	orr.w	r2, r3, #4
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7ff fad4 	bl	8004be0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f003 0307 	and.w	r3, r3, #7
 80056b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056b4:	4b0c      	ldr	r3, [pc, #48]	@ (80056e8 <__NVIC_SetPriorityGrouping+0x44>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80056c0:	4013      	ands	r3, r2
 80056c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056d6:	4a04      	ldr	r2, [pc, #16]	@ (80056e8 <__NVIC_SetPriorityGrouping+0x44>)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	60d3      	str	r3, [r2, #12]
}
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	e000ed00 	.word	0xe000ed00

080056ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056f0:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <__NVIC_GetPriorityGrouping+0x18>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	0a1b      	lsrs	r3, r3, #8
 80056f6:	f003 0307 	and.w	r3, r3, #7
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000ed00 	.word	0xe000ed00

08005708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005716:	2b00      	cmp	r3, #0
 8005718:	db0b      	blt.n	8005732 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	f003 021f 	and.w	r2, r3, #31
 8005720:	4907      	ldr	r1, [pc, #28]	@ (8005740 <__NVIC_EnableIRQ+0x38>)
 8005722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	2001      	movs	r0, #1
 800572a:	fa00 f202 	lsl.w	r2, r0, r2
 800572e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	e000e100 	.word	0xe000e100

08005744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	6039      	str	r1, [r7, #0]
 800574e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005750:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005754:	2b00      	cmp	r3, #0
 8005756:	db0a      	blt.n	800576e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	b2da      	uxtb	r2, r3
 800575c:	490c      	ldr	r1, [pc, #48]	@ (8005790 <__NVIC_SetPriority+0x4c>)
 800575e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005762:	0112      	lsls	r2, r2, #4
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	440b      	add	r3, r1
 8005768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800576c:	e00a      	b.n	8005784 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	b2da      	uxtb	r2, r3
 8005772:	4908      	ldr	r1, [pc, #32]	@ (8005794 <__NVIC_SetPriority+0x50>)
 8005774:	88fb      	ldrh	r3, [r7, #6]
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	3b04      	subs	r3, #4
 800577c:	0112      	lsls	r2, r2, #4
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	440b      	add	r3, r1
 8005782:	761a      	strb	r2, [r3, #24]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	e000e100 	.word	0xe000e100
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005798:	b480      	push	{r7}
 800579a:	b089      	sub	sp, #36	@ 0x24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f1c3 0307 	rsb	r3, r3, #7
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	bf28      	it	cs
 80057b6:	2304      	movcs	r3, #4
 80057b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3304      	adds	r3, #4
 80057be:	2b06      	cmp	r3, #6
 80057c0:	d902      	bls.n	80057c8 <NVIC_EncodePriority+0x30>
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3b03      	subs	r3, #3
 80057c6:	e000      	b.n	80057ca <NVIC_EncodePriority+0x32>
 80057c8:	2300      	movs	r3, #0
 80057ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057cc:	f04f 32ff 	mov.w	r2, #4294967295
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43da      	mvns	r2, r3
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	401a      	ands	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057e0:	f04f 31ff 	mov.w	r1, #4294967295
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ea:	43d9      	mvns	r1, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f0:	4313      	orrs	r3, r2
         );
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3724      	adds	r7, #36	@ 0x24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff ff4c 	bl	80056a4 <__NVIC_SetPriorityGrouping>
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005822:	f7ff ff63 	bl	80056ec <__NVIC_GetPriorityGrouping>
 8005826:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	6978      	ldr	r0, [r7, #20]
 800582e:	f7ff ffb3 	bl	8005798 <NVIC_EncodePriority>
 8005832:	4602      	mov	r2, r0
 8005834:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005838:	4611      	mov	r1, r2
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff ff82 	bl	8005744 <__NVIC_SetPriority>
}
 8005840:	bf00      	nop
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff ff56 	bl	8005708 <__NVIC_EnableIRQ>
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b04      	cmp	r3, #4
 8005870:	d844      	bhi.n	80058fc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8005872:	a201      	add	r2, pc, #4	@ (adr r2, 8005878 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	0800589b 	.word	0x0800589b
 800587c:	080058b9 	.word	0x080058b9
 8005880:	080058db 	.word	0x080058db
 8005884:	080058fd 	.word	0x080058fd
 8005888:	0800588d 	.word	0x0800588d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800588c:	4b1f      	ldr	r3, [pc, #124]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1e      	ldr	r2, [pc, #120]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005892:	f043 0304 	orr.w	r3, r3, #4
 8005896:	6013      	str	r3, [r2, #0]
      break;
 8005898:	e031      	b.n	80058fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800589a:	4b1c      	ldr	r3, [pc, #112]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1b      	ldr	r2, [pc, #108]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80058a0:	f023 0304 	bic.w	r3, r3, #4
 80058a4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80058a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80058a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058ac:	4a18      	ldr	r2, [pc, #96]	@ (8005910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80058ae:	f023 030c 	bic.w	r3, r3, #12
 80058b2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80058b6:	e022      	b.n	80058fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80058b8:	4b14      	ldr	r3, [pc, #80]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a13      	ldr	r2, [pc, #76]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80058be:	f023 0304 	bic.w	r3, r3, #4
 80058c2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80058c4:	4b12      	ldr	r3, [pc, #72]	@ (8005910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80058c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058ca:	f023 030c 	bic.w	r3, r3, #12
 80058ce:	4a10      	ldr	r2, [pc, #64]	@ (8005910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80058d0:	f043 0304 	orr.w	r3, r3, #4
 80058d4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80058d8:	e011      	b.n	80058fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80058da:	4b0c      	ldr	r3, [pc, #48]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a0b      	ldr	r2, [pc, #44]	@ (800590c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80058e0:	f023 0304 	bic.w	r3, r3, #4
 80058e4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80058e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80058e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058ec:	f023 030c 	bic.w	r3, r3, #12
 80058f0:	4a07      	ldr	r2, [pc, #28]	@ (8005910 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80058f2:	f043 0308 	orr.w	r3, r3, #8
 80058f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80058fa:	e000      	b.n	80058fe <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80058fc:	bf00      	nop
  }
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	e000e010 	.word	0xe000e010
 8005910:	44020c00 	.word	0x44020c00

08005914 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800591c:	f7fe fa42 	bl	8003da4 <HAL_GetTick>
 8005920:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0f0      	b.n	8005b0e <HAL_DMA_Init+0x1fa>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a79      	ldr	r2, [pc, #484]	@ (8005b18 <HAL_DMA_Init+0x204>)
 8005932:	4293      	cmp	r3, r2
 8005934:	f000 809f 	beq.w	8005a76 <HAL_DMA_Init+0x162>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a77      	ldr	r2, [pc, #476]	@ (8005b1c <HAL_DMA_Init+0x208>)
 800593e:	4293      	cmp	r3, r2
 8005940:	f000 8099 	beq.w	8005a76 <HAL_DMA_Init+0x162>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a75      	ldr	r2, [pc, #468]	@ (8005b20 <HAL_DMA_Init+0x20c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	f000 8093 	beq.w	8005a76 <HAL_DMA_Init+0x162>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a73      	ldr	r2, [pc, #460]	@ (8005b24 <HAL_DMA_Init+0x210>)
 8005956:	4293      	cmp	r3, r2
 8005958:	f000 808d 	beq.w	8005a76 <HAL_DMA_Init+0x162>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a71      	ldr	r2, [pc, #452]	@ (8005b28 <HAL_DMA_Init+0x214>)
 8005962:	4293      	cmp	r3, r2
 8005964:	f000 8087 	beq.w	8005a76 <HAL_DMA_Init+0x162>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a6f      	ldr	r2, [pc, #444]	@ (8005b2c <HAL_DMA_Init+0x218>)
 800596e:	4293      	cmp	r3, r2
 8005970:	f000 8081 	beq.w	8005a76 <HAL_DMA_Init+0x162>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a6d      	ldr	r2, [pc, #436]	@ (8005b30 <HAL_DMA_Init+0x21c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d07b      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a6c      	ldr	r2, [pc, #432]	@ (8005b34 <HAL_DMA_Init+0x220>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d076      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a6a      	ldr	r2, [pc, #424]	@ (8005b38 <HAL_DMA_Init+0x224>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d071      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a69      	ldr	r2, [pc, #420]	@ (8005b3c <HAL_DMA_Init+0x228>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d06c      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a67      	ldr	r2, [pc, #412]	@ (8005b40 <HAL_DMA_Init+0x22c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d067      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a66      	ldr	r2, [pc, #408]	@ (8005b44 <HAL_DMA_Init+0x230>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d062      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a64      	ldr	r2, [pc, #400]	@ (8005b48 <HAL_DMA_Init+0x234>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d05d      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a63      	ldr	r2, [pc, #396]	@ (8005b4c <HAL_DMA_Init+0x238>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d058      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a61      	ldr	r2, [pc, #388]	@ (8005b50 <HAL_DMA_Init+0x23c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d053      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a60      	ldr	r2, [pc, #384]	@ (8005b54 <HAL_DMA_Init+0x240>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d04e      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005b58 <HAL_DMA_Init+0x244>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d049      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a5d      	ldr	r2, [pc, #372]	@ (8005b5c <HAL_DMA_Init+0x248>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d044      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a5b      	ldr	r2, [pc, #364]	@ (8005b60 <HAL_DMA_Init+0x24c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d03f      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a5a      	ldr	r2, [pc, #360]	@ (8005b64 <HAL_DMA_Init+0x250>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d03a      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a58      	ldr	r2, [pc, #352]	@ (8005b68 <HAL_DMA_Init+0x254>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d035      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a57      	ldr	r2, [pc, #348]	@ (8005b6c <HAL_DMA_Init+0x258>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d030      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a55      	ldr	r2, [pc, #340]	@ (8005b70 <HAL_DMA_Init+0x25c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d02b      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a54      	ldr	r2, [pc, #336]	@ (8005b74 <HAL_DMA_Init+0x260>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d026      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a52      	ldr	r2, [pc, #328]	@ (8005b78 <HAL_DMA_Init+0x264>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d021      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a51      	ldr	r2, [pc, #324]	@ (8005b7c <HAL_DMA_Init+0x268>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d01c      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a4f      	ldr	r2, [pc, #316]	@ (8005b80 <HAL_DMA_Init+0x26c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d017      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a4e      	ldr	r2, [pc, #312]	@ (8005b84 <HAL_DMA_Init+0x270>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d012      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a4c      	ldr	r2, [pc, #304]	@ (8005b88 <HAL_DMA_Init+0x274>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00d      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a4b      	ldr	r2, [pc, #300]	@ (8005b8c <HAL_DMA_Init+0x278>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d008      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a49      	ldr	r2, [pc, #292]	@ (8005b90 <HAL_DMA_Init+0x27c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d003      	beq.n	8005a76 <HAL_DMA_Init+0x162>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a48      	ldr	r2, [pc, #288]	@ (8005b94 <HAL_DMA_Init+0x280>)
 8005a74:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10e      	bne.n	8005aa8 <HAL_DMA_Init+0x194>
  {
    /* Clean all callbacks */
    hdma->XferCpltCallback     = NULL;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->XferHalfCpltCallback = NULL;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->XferErrorCallback    = NULL;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	669a      	str	r2, [r3, #104]	@ 0x68
    hdma->XferAbortCallback    = NULL;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->XferSuspendCallback  = NULL;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695a      	ldr	r2, [r3, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0206 	orr.w	r2, r2, #6
 8005abe:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005ac0:	e00f      	b.n	8005ae2 <HAL_DMA_Init+0x1ce>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005ac2:	f7fe f96f 	bl	8003da4 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b05      	cmp	r3, #5
 8005ace:	d908      	bls.n	8005ae2 <HAL_DMA_Init+0x1ce>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2210      	movs	r2, #16
 8005ad4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2203      	movs	r2, #3
 8005ada:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e015      	b.n	8005b0e <HAL_DMA_Init+0x1fa>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e8      	bne.n	8005ac2 <HAL_DMA_Init+0x1ae>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fb1f 	bl	8006134 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	40020050 	.word	0x40020050
 8005b1c:	50020050 	.word	0x50020050
 8005b20:	400200d0 	.word	0x400200d0
 8005b24:	500200d0 	.word	0x500200d0
 8005b28:	40020150 	.word	0x40020150
 8005b2c:	50020150 	.word	0x50020150
 8005b30:	400201d0 	.word	0x400201d0
 8005b34:	500201d0 	.word	0x500201d0
 8005b38:	40020250 	.word	0x40020250
 8005b3c:	50020250 	.word	0x50020250
 8005b40:	400202d0 	.word	0x400202d0
 8005b44:	500202d0 	.word	0x500202d0
 8005b48:	40020350 	.word	0x40020350
 8005b4c:	50020350 	.word	0x50020350
 8005b50:	400203d0 	.word	0x400203d0
 8005b54:	500203d0 	.word	0x500203d0
 8005b58:	40021050 	.word	0x40021050
 8005b5c:	50021050 	.word	0x50021050
 8005b60:	400210d0 	.word	0x400210d0
 8005b64:	500210d0 	.word	0x500210d0
 8005b68:	40021150 	.word	0x40021150
 8005b6c:	50021150 	.word	0x50021150
 8005b70:	400211d0 	.word	0x400211d0
 8005b74:	500211d0 	.word	0x500211d0
 8005b78:	40021250 	.word	0x40021250
 8005b7c:	50021250 	.word	0x50021250
 8005b80:	400212d0 	.word	0x400212d0
 8005b84:	500212d0 	.word	0x500212d0
 8005b88:	40021350 	.word	0x40021350
 8005b8c:	50021350 	.word	0x50021350
 8005b90:	400213d0 	.word	0x400213d0
 8005b94:	500213d0 	.word	0x500213d0

08005b98 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e055      	b.n	8005c5c <HAL_DMA_Start_IT+0xc4>
  }

  /* Check the DMA Mode is DMA_NORMAL */
  if (hdma->Mode != DMA_NORMAL)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_DMA_Start_IT+0x24>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e04f      	b.n	8005c5c <HAL_DMA_Start_IT+0xc4>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_DMA_Start_IT+0x32>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e048      	b.n	8005c5c <HAL_DMA_Start_IT+0xc4>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d136      	bne.n	8005c4c <HAL_DMA_Start_IT+0xb4>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2202      	movs	r2, #2
 8005be2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fa78 	bl	80060e8 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8005c06:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <HAL_DMA_Start_IT+0x88>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c1e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d007      	beq.n	8005c38 <HAL_DMA_Start_IT+0xa0>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c36:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695a      	ldr	r2, [r3, #20]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f042 0201 	orr.w	r2, r2, #1
 8005c46:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e007      	b.n	8005c5c <HAL_DMA_Start_IT+0xc4>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2240      	movs	r2, #64	@ 0x40
 8005c50:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005c6c:	f7fe f89a 	bl	8003da4 <HAL_GetTick>
 8005c70:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e06b      	b.n	8005d54 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d008      	beq.n	8005c9a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e05c      	b.n	8005d54 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0204 	orr.w	r2, r2, #4
 8005ca8:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2205      	movs	r2, #5
 8005cae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005cb2:	e020      	b.n	8005cf6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005cb4:	f7fe f876 	bl	8003da4 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b05      	cmp	r3, #5
 8005cc0:	d919      	bls.n	8005cf6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc6:	f043 0210 	orr.w	r2, r3, #16
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e02e      	b.n	8005d54 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0d7      	beq.n	8005cb4 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0202 	orr.w	r2, r2, #2
 8005d12:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2204      	movs	r2, #4
 8005d18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005d24:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d3e:	2201      	movs	r2, #1
 8005d40:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2200      	movs	r2, #0
 8005d48:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e019      	b.n	8005da2 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d004      	beq.n	8005d84 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e00e      	b.n	8005da2 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2204      	movs	r2, #4
 8005d88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	6812      	ldr	r2, [r2, #0]
 8005d96:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005d9a:	f043 0304 	orr.w	r3, r3, #4
 8005d9e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8005dbe:	f023 030f 	bic.w	r3, r3, #15
 8005dc2:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dcc:	3b50      	subs	r3, #80	@ 0x50
 8005dce:	09db      	lsrs	r3, r3, #7
 8005dd0:	f003 031f 	and.w	r3, r3, #31
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4013      	ands	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 813b 	beq.w	8006064 <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d011      	beq.n	8005e20 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e12:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e18:	f043 0201 	orr.w	r2, r3, #1
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d011      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e44:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4a:	f043 0202 	orr.w	r2, r3, #2
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d011      	beq.n	8005e84 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005e76:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7c:	f043 0204 	orr.w	r2, r3, #4
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d011      	beq.n	8005eb6 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00a      	beq.n	8005eb6 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005ea8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eae:	f043 0208 	orr.w	r2, r3, #8
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d013      	beq.n	8005eec <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00c      	beq.n	8005eec <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eda:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d04c      	beq.n	8005f94 <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d045      	beq.n	8005f94 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005f10:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d12e      	bne.n	8005f7c <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f2c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695a      	ldr	r2, [r3, #20]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0202 	orr.w	r2, r2, #2
 8005f3c:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f56:	2201      	movs	r2, #1
 8005f58:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d07a      	beq.n	8006068 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	4798      	blx	r3
        }

        return;
 8005f7a:	e075      	b.n	8006068 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2205      	movs	r2, #5
 8005f80:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d039      	beq.n	8006016 <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d032      	beq.n	8006016 <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d012      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d116      	bne.n	8005ff4 <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d111      	bne.n	8005ff4 <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fdc:	2201      	movs	r2, #1
 8005fde:	731a      	strb	r2, [r3, #12]
 8005fe0:	e008      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d103      	bne.n	8005ff4 <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005ffc:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601a:	2b00      	cmp	r3, #0
 800601c:	d025      	beq.n	800606a <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695a      	ldr	r2, [r3, #20]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f042 0202 	orr.w	r2, r2, #2
 800602c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800603a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006046:	2201      	movs	r2, #1
 8006048:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	4798      	blx	r3
 8006062:	e002      	b.n	800606a <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8006064:	bf00      	nop
 8006066:	e000      	b.n	800606a <HAL_DMA_IRQHandler+0x2bc>
        return;
 8006068:	bf00      	nop
    }
  }
}
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e02b      	b.n	80060dc <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800608c:	f023 030f 	bic.w	r3, r3, #15
 8006090:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800609a:	3b50      	subs	r3, #80	@ 0x50
 800609c:	09db      	lsrs	r3, r3, #7
 800609e:	f003 031f 	and.w	r3, r3, #31
 80060a2:	2201      	movs	r2, #1
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d012      	beq.n	80060da <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	f003 0311 	and.w	r3, r3, #17
 80060ba:	2b11      	cmp	r3, #17
 80060bc:	d106      	bne.n	80060cc <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	e006      	b.n	80060da <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	43db      	mvns	r3, r3
 80060d4:	401a      	ands	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	b291      	uxth	r1, r2
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	430b      	orrs	r3, r1
 800610a:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8006114:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006126:	bf00      	nop
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	430a      	orrs	r2, r1
 8006154:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	695a      	ldr	r2, [r3, #20]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	431a      	orrs	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a53      	ldr	r2, [pc, #332]	@ (80062c0 <DMA_Init+0x18c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	f000 80a0 	beq.w	80062ba <DMA_Init+0x186>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a51      	ldr	r2, [pc, #324]	@ (80062c4 <DMA_Init+0x190>)
 8006180:	4293      	cmp	r3, r2
 8006182:	f000 809a 	beq.w	80062ba <DMA_Init+0x186>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a4f      	ldr	r2, [pc, #316]	@ (80062c8 <DMA_Init+0x194>)
 800618c:	4293      	cmp	r3, r2
 800618e:	f000 8094 	beq.w	80062ba <DMA_Init+0x186>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a4d      	ldr	r2, [pc, #308]	@ (80062cc <DMA_Init+0x198>)
 8006198:	4293      	cmp	r3, r2
 800619a:	f000 808e 	beq.w	80062ba <DMA_Init+0x186>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a4b      	ldr	r2, [pc, #300]	@ (80062d0 <DMA_Init+0x19c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	f000 8088 	beq.w	80062ba <DMA_Init+0x186>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a49      	ldr	r2, [pc, #292]	@ (80062d4 <DMA_Init+0x1a0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	f000 8082 	beq.w	80062ba <DMA_Init+0x186>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a47      	ldr	r2, [pc, #284]	@ (80062d8 <DMA_Init+0x1a4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d07c      	beq.n	80062ba <DMA_Init+0x186>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a45      	ldr	r2, [pc, #276]	@ (80062dc <DMA_Init+0x1a8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d077      	beq.n	80062ba <DMA_Init+0x186>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a44      	ldr	r2, [pc, #272]	@ (80062e0 <DMA_Init+0x1ac>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d072      	beq.n	80062ba <DMA_Init+0x186>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a42      	ldr	r2, [pc, #264]	@ (80062e4 <DMA_Init+0x1b0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d06d      	beq.n	80062ba <DMA_Init+0x186>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a41      	ldr	r2, [pc, #260]	@ (80062e8 <DMA_Init+0x1b4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d068      	beq.n	80062ba <DMA_Init+0x186>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a3f      	ldr	r2, [pc, #252]	@ (80062ec <DMA_Init+0x1b8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d063      	beq.n	80062ba <DMA_Init+0x186>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a3e      	ldr	r2, [pc, #248]	@ (80062f0 <DMA_Init+0x1bc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d05e      	beq.n	80062ba <DMA_Init+0x186>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a3c      	ldr	r2, [pc, #240]	@ (80062f4 <DMA_Init+0x1c0>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d059      	beq.n	80062ba <DMA_Init+0x186>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a3b      	ldr	r2, [pc, #236]	@ (80062f8 <DMA_Init+0x1c4>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d054      	beq.n	80062ba <DMA_Init+0x186>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a39      	ldr	r2, [pc, #228]	@ (80062fc <DMA_Init+0x1c8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d04f      	beq.n	80062ba <DMA_Init+0x186>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a38      	ldr	r2, [pc, #224]	@ (8006300 <DMA_Init+0x1cc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d04a      	beq.n	80062ba <DMA_Init+0x186>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a36      	ldr	r2, [pc, #216]	@ (8006304 <DMA_Init+0x1d0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d045      	beq.n	80062ba <DMA_Init+0x186>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a35      	ldr	r2, [pc, #212]	@ (8006308 <DMA_Init+0x1d4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d040      	beq.n	80062ba <DMA_Init+0x186>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a33      	ldr	r2, [pc, #204]	@ (800630c <DMA_Init+0x1d8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d03b      	beq.n	80062ba <DMA_Init+0x186>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a32      	ldr	r2, [pc, #200]	@ (8006310 <DMA_Init+0x1dc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d036      	beq.n	80062ba <DMA_Init+0x186>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a30      	ldr	r2, [pc, #192]	@ (8006314 <DMA_Init+0x1e0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d031      	beq.n	80062ba <DMA_Init+0x186>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2f      	ldr	r2, [pc, #188]	@ (8006318 <DMA_Init+0x1e4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d02c      	beq.n	80062ba <DMA_Init+0x186>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a2d      	ldr	r2, [pc, #180]	@ (800631c <DMA_Init+0x1e8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d027      	beq.n	80062ba <DMA_Init+0x186>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a2c      	ldr	r2, [pc, #176]	@ (8006320 <DMA_Init+0x1ec>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d022      	beq.n	80062ba <DMA_Init+0x186>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a2a      	ldr	r2, [pc, #168]	@ (8006324 <DMA_Init+0x1f0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d01d      	beq.n	80062ba <DMA_Init+0x186>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a29      	ldr	r2, [pc, #164]	@ (8006328 <DMA_Init+0x1f4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d018      	beq.n	80062ba <DMA_Init+0x186>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a27      	ldr	r2, [pc, #156]	@ (800632c <DMA_Init+0x1f8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <DMA_Init+0x186>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a26      	ldr	r2, [pc, #152]	@ (8006330 <DMA_Init+0x1fc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00e      	beq.n	80062ba <DMA_Init+0x186>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a24      	ldr	r2, [pc, #144]	@ (8006334 <DMA_Init+0x200>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d009      	beq.n	80062ba <DMA_Init+0x186>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a23      	ldr	r2, [pc, #140]	@ (8006338 <DMA_Init+0x204>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d004      	beq.n	80062ba <DMA_Init+0x186>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a21      	ldr	r2, [pc, #132]	@ (800633c <DMA_Init+0x208>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d142      	bne.n	8006340 <DMA_Init+0x20c>
 80062ba:	2301      	movs	r3, #1
 80062bc:	e041      	b.n	8006342 <DMA_Init+0x20e>
 80062be:	bf00      	nop
 80062c0:	40020050 	.word	0x40020050
 80062c4:	50020050 	.word	0x50020050
 80062c8:	400200d0 	.word	0x400200d0
 80062cc:	500200d0 	.word	0x500200d0
 80062d0:	40020150 	.word	0x40020150
 80062d4:	50020150 	.word	0x50020150
 80062d8:	400201d0 	.word	0x400201d0
 80062dc:	500201d0 	.word	0x500201d0
 80062e0:	40020250 	.word	0x40020250
 80062e4:	50020250 	.word	0x50020250
 80062e8:	400202d0 	.word	0x400202d0
 80062ec:	500202d0 	.word	0x500202d0
 80062f0:	40020350 	.word	0x40020350
 80062f4:	50020350 	.word	0x50020350
 80062f8:	400203d0 	.word	0x400203d0
 80062fc:	500203d0 	.word	0x500203d0
 8006300:	40021050 	.word	0x40021050
 8006304:	50021050 	.word	0x50021050
 8006308:	400210d0 	.word	0x400210d0
 800630c:	500210d0 	.word	0x500210d0
 8006310:	40021150 	.word	0x40021150
 8006314:	50021150 	.word	0x50021150
 8006318:	400211d0 	.word	0x400211d0
 800631c:	500211d0 	.word	0x500211d0
 8006320:	40021250 	.word	0x40021250
 8006324:	50021250 	.word	0x50021250
 8006328:	400212d0 	.word	0x400212d0
 800632c:	500212d0 	.word	0x500212d0
 8006330:	40021350 	.word	0x40021350
 8006334:	50021350 	.word	0x50021350
 8006338:	400213d0 	.word	0x400213d0
 800633c:	500213d0 	.word	0x500213d0
 8006340:	2300      	movs	r3, #0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d012      	beq.n	800636c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800634e:	3b01      	subs	r3, #1
 8006350:	051b      	lsls	r3, r3, #20
 8006352:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006356:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635c:	3b01      	subs	r3, #1
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8006364:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4313      	orrs	r3, r2
 800636a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006372:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	430a      	orrs	r2, r1
 800637e:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800639c:	f040 80b0 	bne.w	8006500 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a84      	ldr	r2, [pc, #528]	@ (80065b8 <DMA_Init+0x484>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	f000 80a0 	beq.w	80064ec <DMA_Init+0x3b8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a82      	ldr	r2, [pc, #520]	@ (80065bc <DMA_Init+0x488>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	f000 809a 	beq.w	80064ec <DMA_Init+0x3b8>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a80      	ldr	r2, [pc, #512]	@ (80065c0 <DMA_Init+0x48c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	f000 8094 	beq.w	80064ec <DMA_Init+0x3b8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a7e      	ldr	r2, [pc, #504]	@ (80065c4 <DMA_Init+0x490>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	f000 808e 	beq.w	80064ec <DMA_Init+0x3b8>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a7c      	ldr	r2, [pc, #496]	@ (80065c8 <DMA_Init+0x494>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	f000 8088 	beq.w	80064ec <DMA_Init+0x3b8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a7a      	ldr	r2, [pc, #488]	@ (80065cc <DMA_Init+0x498>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	f000 8082 	beq.w	80064ec <DMA_Init+0x3b8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a78      	ldr	r2, [pc, #480]	@ (80065d0 <DMA_Init+0x49c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d07c      	beq.n	80064ec <DMA_Init+0x3b8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a77      	ldr	r2, [pc, #476]	@ (80065d4 <DMA_Init+0x4a0>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d077      	beq.n	80064ec <DMA_Init+0x3b8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a75      	ldr	r2, [pc, #468]	@ (80065d8 <DMA_Init+0x4a4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d072      	beq.n	80064ec <DMA_Init+0x3b8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a74      	ldr	r2, [pc, #464]	@ (80065dc <DMA_Init+0x4a8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d06d      	beq.n	80064ec <DMA_Init+0x3b8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a72      	ldr	r2, [pc, #456]	@ (80065e0 <DMA_Init+0x4ac>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d068      	beq.n	80064ec <DMA_Init+0x3b8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a71      	ldr	r2, [pc, #452]	@ (80065e4 <DMA_Init+0x4b0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d063      	beq.n	80064ec <DMA_Init+0x3b8>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a6f      	ldr	r2, [pc, #444]	@ (80065e8 <DMA_Init+0x4b4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d05e      	beq.n	80064ec <DMA_Init+0x3b8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a6e      	ldr	r2, [pc, #440]	@ (80065ec <DMA_Init+0x4b8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d059      	beq.n	80064ec <DMA_Init+0x3b8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a6c      	ldr	r2, [pc, #432]	@ (80065f0 <DMA_Init+0x4bc>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d054      	beq.n	80064ec <DMA_Init+0x3b8>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a6b      	ldr	r2, [pc, #428]	@ (80065f4 <DMA_Init+0x4c0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d04f      	beq.n	80064ec <DMA_Init+0x3b8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a69      	ldr	r2, [pc, #420]	@ (80065f8 <DMA_Init+0x4c4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d04a      	beq.n	80064ec <DMA_Init+0x3b8>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a68      	ldr	r2, [pc, #416]	@ (80065fc <DMA_Init+0x4c8>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d045      	beq.n	80064ec <DMA_Init+0x3b8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a66      	ldr	r2, [pc, #408]	@ (8006600 <DMA_Init+0x4cc>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d040      	beq.n	80064ec <DMA_Init+0x3b8>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a65      	ldr	r2, [pc, #404]	@ (8006604 <DMA_Init+0x4d0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d03b      	beq.n	80064ec <DMA_Init+0x3b8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a63      	ldr	r2, [pc, #396]	@ (8006608 <DMA_Init+0x4d4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d036      	beq.n	80064ec <DMA_Init+0x3b8>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a62      	ldr	r2, [pc, #392]	@ (800660c <DMA_Init+0x4d8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d031      	beq.n	80064ec <DMA_Init+0x3b8>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a60      	ldr	r2, [pc, #384]	@ (8006610 <DMA_Init+0x4dc>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d02c      	beq.n	80064ec <DMA_Init+0x3b8>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a5f      	ldr	r2, [pc, #380]	@ (8006614 <DMA_Init+0x4e0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d027      	beq.n	80064ec <DMA_Init+0x3b8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a5d      	ldr	r2, [pc, #372]	@ (8006618 <DMA_Init+0x4e4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d022      	beq.n	80064ec <DMA_Init+0x3b8>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a5c      	ldr	r2, [pc, #368]	@ (800661c <DMA_Init+0x4e8>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d01d      	beq.n	80064ec <DMA_Init+0x3b8>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a5a      	ldr	r2, [pc, #360]	@ (8006620 <DMA_Init+0x4ec>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d018      	beq.n	80064ec <DMA_Init+0x3b8>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a59      	ldr	r2, [pc, #356]	@ (8006624 <DMA_Init+0x4f0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d013      	beq.n	80064ec <DMA_Init+0x3b8>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a57      	ldr	r2, [pc, #348]	@ (8006628 <DMA_Init+0x4f4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00e      	beq.n	80064ec <DMA_Init+0x3b8>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a56      	ldr	r2, [pc, #344]	@ (800662c <DMA_Init+0x4f8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d009      	beq.n	80064ec <DMA_Init+0x3b8>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a54      	ldr	r2, [pc, #336]	@ (8006630 <DMA_Init+0x4fc>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d004      	beq.n	80064ec <DMA_Init+0x3b8>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a53      	ldr	r2, [pc, #332]	@ (8006634 <DMA_Init+0x500>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d101      	bne.n	80064f0 <DMA_Init+0x3bc>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e000      	b.n	80064f2 <DMA_Init+0x3be>
 80064f0:	2300      	movs	r3, #0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00d      	beq.n	8006512 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	e008      	b.n	8006512 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006508:	d103      	bne.n	8006512 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006510:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006522:	4b45      	ldr	r3, [pc, #276]	@ (8006638 <DMA_Init+0x504>)
 8006524:	4013      	ands	r3, r2
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	68f9      	ldr	r1, [r7, #12]
 800652c:	430b      	orrs	r3, r1
 800652e:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2200      	movs	r2, #0
 8006536:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a2a      	ldr	r2, [pc, #168]	@ (80065e8 <DMA_Init+0x4b4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d022      	beq.n	8006588 <DMA_Init+0x454>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a29      	ldr	r2, [pc, #164]	@ (80065ec <DMA_Init+0x4b8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d01d      	beq.n	8006588 <DMA_Init+0x454>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a27      	ldr	r2, [pc, #156]	@ (80065f0 <DMA_Init+0x4bc>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d018      	beq.n	8006588 <DMA_Init+0x454>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a26      	ldr	r2, [pc, #152]	@ (80065f4 <DMA_Init+0x4c0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d013      	beq.n	8006588 <DMA_Init+0x454>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a30      	ldr	r2, [pc, #192]	@ (8006628 <DMA_Init+0x4f4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d00e      	beq.n	8006588 <DMA_Init+0x454>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a2f      	ldr	r2, [pc, #188]	@ (800662c <DMA_Init+0x4f8>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d009      	beq.n	8006588 <DMA_Init+0x454>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a2d      	ldr	r2, [pc, #180]	@ (8006630 <DMA_Init+0x4fc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d004      	beq.n	8006588 <DMA_Init+0x454>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a2c      	ldr	r2, [pc, #176]	@ (8006634 <DMA_Init+0x500>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d101      	bne.n	800658c <DMA_Init+0x458>
 8006588:	2301      	movs	r3, #1
 800658a:	e000      	b.n	800658e <DMA_Init+0x45a>
 800658c:	2300      	movs	r3, #0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2200      	movs	r2, #0
 8006598:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2200      	movs	r2, #0
 80065a0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2200      	movs	r2, #0
 80065a8:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80065aa:	bf00      	nop
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40020050 	.word	0x40020050
 80065bc:	50020050 	.word	0x50020050
 80065c0:	400200d0 	.word	0x400200d0
 80065c4:	500200d0 	.word	0x500200d0
 80065c8:	40020150 	.word	0x40020150
 80065cc:	50020150 	.word	0x50020150
 80065d0:	400201d0 	.word	0x400201d0
 80065d4:	500201d0 	.word	0x500201d0
 80065d8:	40020250 	.word	0x40020250
 80065dc:	50020250 	.word	0x50020250
 80065e0:	400202d0 	.word	0x400202d0
 80065e4:	500202d0 	.word	0x500202d0
 80065e8:	40020350 	.word	0x40020350
 80065ec:	50020350 	.word	0x50020350
 80065f0:	400203d0 	.word	0x400203d0
 80065f4:	500203d0 	.word	0x500203d0
 80065f8:	40021050 	.word	0x40021050
 80065fc:	50021050 	.word	0x50021050
 8006600:	400210d0 	.word	0x400210d0
 8006604:	500210d0 	.word	0x500210d0
 8006608:	40021150 	.word	0x40021150
 800660c:	50021150 	.word	0x50021150
 8006610:	400211d0 	.word	0x400211d0
 8006614:	500211d0 	.word	0x500211d0
 8006618:	40021250 	.word	0x40021250
 800661c:	50021250 	.word	0x50021250
 8006620:	400212d0 	.word	0x400212d0
 8006624:	500212d0 	.word	0x500212d0
 8006628:	40021350 	.word	0x40021350
 800662c:	50021350 	.word	0x50021350
 8006630:	400213d0 	.word	0x400213d0
 8006634:	500213d0 	.word	0x500213d0
 8006638:	3cc02100 	.word	0x3cc02100

0800663c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_DMAEx_List_Start_IT+0x16>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e088      	b.n	8006768 <HAL_DMAEx_List_Start_IT+0x12c>
  }

  /* Check the DMA Mode is not DMA_NORMAL */
  if (hdma->Mode == DMA_NORMAL)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_DMAEx_List_Start_IT+0x26>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e082      	b.n	8006768 <HAL_DMAEx_List_Start_IT+0x12c>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006668:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006674:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d005      	beq.n	8006688 <HAL_DMAEx_List_Start_IT+0x4c>
 800667c:	7dfb      	ldrb	r3, [r7, #23]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d16a      	bne.n	8006758 <HAL_DMAEx_List_Start_IT+0x11c>
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d067      	beq.n	8006758 <HAL_DMAEx_List_Start_IT+0x11c>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b01      	cmp	r3, #1
 8006692:	d157      	bne.n	8006744 <HAL_DMAEx_List_Start_IT+0x108>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_DMAEx_List_Start_IT+0x66>
 800669e:	2302      	movs	r3, #2
 80066a0:	e062      	b.n	8006768 <HAL_DMAEx_List_Start_IT+0x12c>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066b6:	2202      	movs	r2, #2
 80066b8:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066c4:	2200      	movs	r2, #0
 80066c6:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 80066d6:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d007      	beq.n	80066f0 <HAL_DMAEx_List_Start_IT+0xb4>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695a      	ldr	r2, [r3, #20]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066ee:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_DMAEx_List_Start_IT+0xcc>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	695a      	ldr	r2, [r3, #20]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006706:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f107 010c 	add.w	r1, r7, #12
 8006712:	2200      	movs	r2, #0
 8006714:	4618      	mov	r0, r3
 8006716:	f000 f94b 	bl	80069b0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4619      	mov	r1, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	0c0b      	lsrs	r3, r1, #16
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8006738:	4013      	ands	r3, r2
 800673a:	68f9      	ldr	r1, [r7, #12]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6812      	ldr	r2, [r2, #0]
 8006740:	430b      	orrs	r3, r1
 8006742:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695a      	ldr	r2, [r3, #20]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0201 	orr.w	r2, r2, #1
 8006752:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	e007      	b.n	8006768 <HAL_DMAEx_List_Start_IT+0x12c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2240      	movs	r2, #64	@ 0x40
 800675c:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_DMAEx_List_GetNodeConfig+0x16>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e004      	b.n	8006794 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f805 	bl	800679c <DMA_List_GetNodeConfig>

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0208 	and.w	r2, r3, #8
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0203 	and.w	r2, r3, #3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 80067e4:	091b      	lsrs	r3, r3, #4
 80067e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067ea:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 80067f4:	0d1b      	lsrs	r3, r3, #20
 80067f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067fa:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	4b66      	ldr	r3, [pc, #408]	@ (80069ac <DMA_List_GetNodeConfig+0x210>)
 8006812:	4013      	ands	r3, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800682c:	2b00      	cmp	r3, #0
 800682e:	d008      	beq.n	8006842 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006836:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800683e:	60da      	str	r2, [r3, #12]
 8006840:	e012      	b.n	8006868 <DMA_List_GetNodeConfig+0xcc>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	b2da      	uxtb	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006854:	2b00      	cmp	r3, #0
 8006856:	d004      	beq.n	8006862 <DMA_List_GetNodeConfig+0xc6>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800685e:	60da      	str	r2, [r3, #12]
 8006860:	e002      	b.n	8006868 <DMA_List_GetNodeConfig+0xcc>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8006890:	0c1b      	lsrs	r3, r3, #16
 8006892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <DMA_List_GetNodeConfig+0x132>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	0c1b      	lsrs	r3, r3, #16
 80068c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068c6:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80068cc:	e002      	b.n	80068d4 <DMA_List_GetNodeConfig+0x138>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2201      	movs	r2, #1
 80068d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d04a      	beq.n	8006986 <DMA_List_GetNodeConfig+0x1ea>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068fa:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 80068fc:	89fa      	ldrh	r2, [r7, #14]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	0c1b      	lsrs	r3, r3, #16
 8006908:	b29b      	uxth	r3, r3
 800690a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800690e:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8006910:	89fa      	ldrh	r2, [r7, #14]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d004      	beq.n	800692c <DMA_List_GetNodeConfig+0x190>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006926:	425a      	negs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <DMA_List_GetNodeConfig+0x1a6>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693c:	425a      	negs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8006948:	89fa      	ldrh	r2, [r7, #14]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8006956:	89fa      	ldrh	r2, [r7, #14]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d004      	beq.n	8006972 <DMA_List_GetNodeConfig+0x1d6>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696c:	425a      	negs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	da11      	bge.n	800699e <DMA_List_GetNodeConfig+0x202>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800697e:	425a      	negs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8006984:	e00b      	b.n	800699e <DMA_List_GetNodeConfig+0x202>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	0c002000 	.word	0x0c002000

080069b0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00c      	beq.n	80069e2 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006a08 <DMA_List_GetCLLRNodeInfo+0x58>)
 80069d2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00f      	beq.n	80069fa <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2207      	movs	r2, #7
 80069de:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 80069e0:	e00b      	b.n	80069fa <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4a08      	ldr	r2, [pc, #32]	@ (8006a0c <DMA_List_GetCLLRNodeInfo+0x5c>)
 80069ec:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2205      	movs	r2, #5
 80069f8:	601a      	str	r2, [r3, #0]
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	fe010000 	.word	0xfe010000
 8006a0c:	f8010000 	.word	0xf8010000

08006a10 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006a1e:	e142      	b.n	8006ca6 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	2101      	movs	r1, #1
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 8134 	beq.w	8006ca0 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d003      	beq.n	8006a48 <HAL_GPIO_Init+0x38>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b12      	cmp	r3, #18
 8006a46:	d125      	bne.n	8006a94 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	08da      	lsrs	r2, r3, #3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3208      	adds	r2, #8
 8006a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a54:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	220f      	movs	r2, #15
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	43db      	mvns	r3, r3
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f003 020f 	and.w	r2, r3, #15
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	08da      	lsrs	r2, r3, #3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3208      	adds	r2, #8
 8006a8e:	6979      	ldr	r1, [r7, #20]
 8006a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	2203      	movs	r2, #3
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	43db      	mvns	r3, r3
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f003 0203 	and.w	r2, r3, #3
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d00b      	beq.n	8006ae8 <HAL_GPIO_Init+0xd8>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d007      	beq.n	8006ae8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006adc:	2b11      	cmp	r3, #17
 8006ade:	d003      	beq.n	8006ae8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b12      	cmp	r3, #18
 8006ae6:	d130      	bne.n	8006b4a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	2203      	movs	r2, #3
 8006af4:	fa02 f303 	lsl.w	r3, r2, r3
 8006af8:	43db      	mvns	r3, r3
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4013      	ands	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b1e:	2201      	movs	r2, #1
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	fa02 f303 	lsl.w	r3, r2, r3
 8006b26:	43db      	mvns	r3, r3
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	091b      	lsrs	r3, r3, #4
 8006b34:	f003 0201 	and.w	r2, r3, #1
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d109      	bne.n	8006b6a <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d11b      	bne.n	8006b9a <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d017      	beq.n	8006b9a <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	2203      	movs	r2, #3
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d07c      	beq.n	8006ca0 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8006ba6:	4a47      	ldr	r2, [pc, #284]	@ (8006cc4 <HAL_GPIO_Init+0x2b4>)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	089b      	lsrs	r3, r3, #2
 8006bac:	3318      	adds	r3, #24
 8006bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	220f      	movs	r2, #15
 8006bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc2:	43db      	mvns	r3, r3
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	0a9a      	lsrs	r2, r3, #10
 8006bce:	4b3e      	ldr	r3, [pc, #248]	@ (8006cc8 <HAL_GPIO_Init+0x2b8>)
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	f002 0203 	and.w	r2, r2, #3
 8006bd8:	00d2      	lsls	r2, r2, #3
 8006bda:	4093      	lsls	r3, r2
 8006bdc:	697a      	ldr	r2, [r7, #20]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8006be2:	4938      	ldr	r1, [pc, #224]	@ (8006cc4 <HAL_GPIO_Init+0x2b4>)
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	089b      	lsrs	r3, r3, #2
 8006be8:	3318      	adds	r3, #24
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006bf0:	4b34      	ldr	r3, [pc, #208]	@ (8006cc4 <HAL_GPIO_Init+0x2b4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8006c14:	4a2b      	ldr	r2, [pc, #172]	@ (8006cc4 <HAL_GPIO_Init+0x2b4>)
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8006c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8006cc4 <HAL_GPIO_Init+0x2b4>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	43db      	mvns	r3, r3
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	4013      	ands	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d003      	beq.n	8006c3e <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8006c3e:	4a21      	ldr	r2, [pc, #132]	@ (8006cc4 <HAL_GPIO_Init+0x2b4>)
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006c44:	4b1f      	ldr	r3, [pc, #124]	@ (8006cc4 <HAL_GPIO_Init+0x2b4>)
 8006c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c4a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4013      	ands	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8006c6a:	4a16      	ldr	r2, [pc, #88]	@ (8006cc4 <HAL_GPIO_Init+0x2b4>)
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8006c72:	4b14      	ldr	r3, [pc, #80]	@ (8006cc4 <HAL_GPIO_Init+0x2b4>)
 8006c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c78:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	43db      	mvns	r3, r3
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	4013      	ands	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8006c98:	4a0a      	ldr	r2, [pc, #40]	@ (8006cc4 <HAL_GPIO_Init+0x2b4>)
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f47f aeb5 	bne.w	8006a20 <HAL_GPIO_Init+0x10>
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	bf00      	nop
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	44022000 	.word	0x44022000
 8006cc8:	002f7f7f 	.word	0x002f7f7f

08006ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691a      	ldr	r2, [r3, #16]
 8006cdc:	887b      	ldrh	r3, [r7, #2]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	73fb      	strb	r3, [r7, #15]
 8006ce8:	e001      	b.n	8006cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cea:	2300      	movs	r3, #0
 8006cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	807b      	strh	r3, [r7, #2]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d0c:	787b      	ldrb	r3, [r7, #1]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d12:	887a      	ldrh	r2, [r7, #2]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006d18:	e002      	b.n	8006d20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d1a:	887a      	ldrh	r2, [r7, #2]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e08d      	b.n	8006e5a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d106      	bne.n	8006d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fc f8a2 	bl	8002e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2224      	movs	r2, #36	@ 0x24
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0201 	bic.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d107      	bne.n	8006da6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006da2:	609a      	str	r2, [r3, #8]
 8006da4:	e006      	b.n	8006db4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006db2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d108      	bne.n	8006dce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dca:	605a      	str	r2, [r3, #4]
 8006dcc:	e007      	b.n	8006dde <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ddc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6812      	ldr	r2, [r2, #0]
 8006de8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006df0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68da      	ldr	r2, [r3, #12]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	69d9      	ldr	r1, [r3, #28]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1a      	ldr	r2, [r3, #32]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f042 0201 	orr.w	r2, r2, #1
 8006e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	4608      	mov	r0, r1
 8006e6e:	4611      	mov	r1, r2
 8006e70:	461a      	mov	r2, r3
 8006e72:	4603      	mov	r3, r0
 8006e74:	817b      	strh	r3, [r7, #10]
 8006e76:	460b      	mov	r3, r1
 8006e78:	813b      	strh	r3, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	f040 80fd 	bne.w	8007086 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <HAL_I2C_Mem_Read+0x34>
 8006e92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d105      	bne.n	8006ea4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e0f1      	b.n	8007088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d101      	bne.n	8006eb2 <HAL_I2C_Mem_Read+0x4e>
 8006eae:	2302      	movs	r3, #2
 8006eb0:	e0ea      	b.n	8007088 <HAL_I2C_Mem_Read+0x224>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006eba:	f7fc ff73 	bl	8003da4 <HAL_GetTick>
 8006ebe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	2319      	movs	r3, #25
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 f95b 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e0d5      	b.n	8007088 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2222      	movs	r2, #34	@ 0x22
 8006ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2240      	movs	r2, #64	@ 0x40
 8006ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6a3a      	ldr	r2, [r7, #32]
 8006ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f04:	88f8      	ldrh	r0, [r7, #6]
 8006f06:	893a      	ldrh	r2, [r7, #8]
 8006f08:	8979      	ldrh	r1, [r7, #10]
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	4603      	mov	r3, r0
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 f8bf 	bl	8007098 <I2C_RequestMemoryRead>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e0ad      	b.n	8007088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	2bff      	cmp	r3, #255	@ 0xff
 8006f34:	d90e      	bls.n	8006f54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	22ff      	movs	r2, #255	@ 0xff
 8006f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	8979      	ldrh	r1, [r7, #10]
 8006f44:	4b52      	ldr	r3, [pc, #328]	@ (8007090 <HAL_I2C_Mem_Read+0x22c>)
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 fadf 	bl	8007510 <I2C_TransferConfig>
 8006f52:	e00f      	b.n	8006f74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	8979      	ldrh	r1, [r7, #10]
 8006f66:	4b4a      	ldr	r3, [pc, #296]	@ (8007090 <HAL_I2C_Mem_Read+0x22c>)
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 face 	bl	8007510 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2104      	movs	r1, #4
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 f902 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e07c      	b.n	8007088 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f98:	b2d2      	uxtb	r2, r2
 8006f9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d034      	beq.n	8007034 <HAL_I2C_Mem_Read+0x1d0>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d130      	bne.n	8007034 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2180      	movs	r1, #128	@ 0x80
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f8d3 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e04d      	b.n	8007088 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	2bff      	cmp	r3, #255	@ 0xff
 8006ff4:	d90e      	bls.n	8007014 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	22ff      	movs	r2, #255	@ 0xff
 8006ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007000:	b2da      	uxtb	r2, r3
 8007002:	8979      	ldrh	r1, [r7, #10]
 8007004:	2300      	movs	r3, #0
 8007006:	9300      	str	r3, [sp, #0]
 8007008:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 fa7f 	bl	8007510 <I2C_TransferConfig>
 8007012:	e00f      	b.n	8007034 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007022:	b2da      	uxtb	r2, r3
 8007024:	8979      	ldrh	r1, [r7, #10]
 8007026:	2300      	movs	r3, #0
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 fa6e 	bl	8007510 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d19a      	bne.n	8006f74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 f940 	bl	80072c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e01a      	b.n	8007088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2220      	movs	r2, #32
 8007058:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6859      	ldr	r1, [r3, #4]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <HAL_I2C_Mem_Read+0x230>)
 8007066:	400b      	ands	r3, r1
 8007068:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	e000      	b.n	8007088 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007086:	2302      	movs	r3, #2
  }
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	80002400 	.word	0x80002400
 8007094:	fe00e800 	.word	0xfe00e800

08007098 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	4608      	mov	r0, r1
 80070a2:	4611      	mov	r1, r2
 80070a4:	461a      	mov	r2, r3
 80070a6:	4603      	mov	r3, r0
 80070a8:	817b      	strh	r3, [r7, #10]
 80070aa:	460b      	mov	r3, r1
 80070ac:	813b      	strh	r3, [r7, #8]
 80070ae:	4613      	mov	r3, r2
 80070b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80070b2:	88fb      	ldrh	r3, [r7, #6]
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	8979      	ldrh	r1, [r7, #10]
 80070b8:	4b20      	ldr	r3, [pc, #128]	@ (800713c <I2C_RequestMemoryRead+0xa4>)
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	2300      	movs	r3, #0
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 fa26 	bl	8007510 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070c4:	69fa      	ldr	r2, [r7, #28]
 80070c6:	69b9      	ldr	r1, [r7, #24]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f8b6 	bl	800723a <I2C_WaitOnTXISFlagUntilTimeout>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e02c      	b.n	8007132 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070d8:	88fb      	ldrh	r3, [r7, #6]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d105      	bne.n	80070ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070de:	893b      	ldrh	r3, [r7, #8]
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80070e8:	e015      	b.n	8007116 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80070ea:	893b      	ldrh	r3, [r7, #8]
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	69b9      	ldr	r1, [r7, #24]
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 f89c 	bl	800723a <I2C_WaitOnTXISFlagUntilTimeout>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e012      	b.n	8007132 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800710c:	893b      	ldrh	r3, [r7, #8]
 800710e:	b2da      	uxtb	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	2200      	movs	r2, #0
 800711e:	2140      	movs	r1, #64	@ 0x40
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f831 	bl	8007188 <I2C_WaitOnFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e000      	b.n	8007132 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	80002000 	.word	0x80002000

08007140 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b02      	cmp	r3, #2
 8007154:	d103      	bne.n	800715e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2200      	movs	r2, #0
 800715c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	2b01      	cmp	r3, #1
 800716a:	d007      	beq.n	800717c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699a      	ldr	r2, [r3, #24]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0201 	orr.w	r2, r2, #1
 800717a:	619a      	str	r2, [r3, #24]
  }
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007198:	e03b      	b.n	8007212 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f8d6 	bl	8007350 <I2C_IsErrorOccurred>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e041      	b.n	8007232 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d02d      	beq.n	8007212 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071b6:	f7fc fdf5 	bl	8003da4 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d302      	bcc.n	80071cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d122      	bne.n	8007212 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4013      	ands	r3, r2
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	429a      	cmp	r2, r3
 80071da:	bf0c      	ite	eq
 80071dc:	2301      	moveq	r3, #1
 80071de:	2300      	movne	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	461a      	mov	r2, r3
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d113      	bne.n	8007212 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ee:	f043 0220 	orr.w	r2, r3, #32
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e00f      	b.n	8007232 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	699a      	ldr	r2, [r3, #24]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4013      	ands	r3, r2
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	429a      	cmp	r2, r3
 8007220:	bf0c      	ite	eq
 8007222:	2301      	moveq	r3, #1
 8007224:	2300      	movne	r3, #0
 8007226:	b2db      	uxtb	r3, r3
 8007228:	461a      	mov	r2, r3
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	429a      	cmp	r2, r3
 800722e:	d0b4      	beq.n	800719a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007246:	e033      	b.n	80072b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 f87f 	bl	8007350 <I2C_IsErrorOccurred>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e031      	b.n	80072c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007262:	d025      	beq.n	80072b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007264:	f7fc fd9e 	bl	8003da4 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	429a      	cmp	r2, r3
 8007272:	d302      	bcc.n	800727a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d11a      	bne.n	80072b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f003 0302 	and.w	r3, r3, #2
 8007284:	2b02      	cmp	r3, #2
 8007286:	d013      	beq.n	80072b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800728c:	f043 0220 	orr.w	r2, r3, #32
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2220      	movs	r2, #32
 8007298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e007      	b.n	80072c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d1c4      	bne.n	8007248 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072d4:	e02f      	b.n	8007336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	68b9      	ldr	r1, [r7, #8]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f838 	bl	8007350 <I2C_IsErrorOccurred>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e02d      	b.n	8007346 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ea:	f7fc fd5b 	bl	8003da4 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d302      	bcc.n	8007300 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d11a      	bne.n	8007336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	f003 0320 	and.w	r3, r3, #32
 800730a:	2b20      	cmp	r3, #32
 800730c:	d013      	beq.n	8007336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007312:	f043 0220 	orr.w	r2, r3, #32
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2220      	movs	r2, #32
 800731e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e007      	b.n	8007346 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f003 0320 	and.w	r3, r3, #32
 8007340:	2b20      	cmp	r3, #32
 8007342:	d1c8      	bne.n	80072d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08a      	sub	sp, #40	@ 0x28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	f003 0310 	and.w	r3, r3, #16
 8007378:	2b00      	cmp	r3, #0
 800737a:	d068      	beq.n	800744e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2210      	movs	r2, #16
 8007382:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007384:	e049      	b.n	800741a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d045      	beq.n	800741a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800738e:	f7fc fd09 	bl	8003da4 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	429a      	cmp	r2, r3
 800739c:	d302      	bcc.n	80073a4 <I2C_IsErrorOccurred+0x54>
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d13a      	bne.n	800741a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073c6:	d121      	bne.n	800740c <I2C_IsErrorOccurred+0xbc>
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80073ce:	d01d      	beq.n	800740c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80073d0:	7cfb      	ldrb	r3, [r7, #19]
 80073d2:	2b20      	cmp	r3, #32
 80073d4:	d01a      	beq.n	800740c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80073e6:	f7fc fcdd 	bl	8003da4 <HAL_GetTick>
 80073ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073ec:	e00e      	b.n	800740c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80073ee:	f7fc fcd9 	bl	8003da4 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b19      	cmp	r3, #25
 80073fa:	d907      	bls.n	800740c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	f043 0320 	orr.w	r3, r3, #32
 8007402:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800740a:	e006      	b.n	800741a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b20      	cmp	r3, #32
 8007418:	d1e9      	bne.n	80073ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	f003 0320 	and.w	r3, r3, #32
 8007424:	2b20      	cmp	r3, #32
 8007426:	d003      	beq.n	8007430 <I2C_IsErrorOccurred+0xe0>
 8007428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0aa      	beq.n	8007386 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007434:	2b00      	cmp	r3, #0
 8007436:	d103      	bne.n	8007440 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2220      	movs	r2, #32
 800743e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	f043 0304 	orr.w	r3, r3, #4
 8007446:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00b      	beq.n	8007478 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007470:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00b      	beq.n	800749a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	f043 0308 	orr.w	r3, r3, #8
 8007488:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007492:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00b      	beq.n	80074bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	f043 0302 	orr.w	r3, r3, #2
 80074aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80074bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01c      	beq.n	80074fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f7ff fe3b 	bl	8007140 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6859      	ldr	r1, [r3, #4]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	4b0d      	ldr	r3, [pc, #52]	@ (800750c <I2C_IsErrorOccurred+0x1bc>)
 80074d6:	400b      	ands	r3, r1
 80074d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	431a      	orrs	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80074fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007502:	4618      	mov	r0, r3
 8007504:	3728      	adds	r7, #40	@ 0x28
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	fe00e800 	.word	0xfe00e800

08007510 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007510:	b480      	push	{r7}
 8007512:	b087      	sub	sp, #28
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	460b      	mov	r3, r1
 800751c:	817b      	strh	r3, [r7, #10]
 800751e:	4613      	mov	r3, r2
 8007520:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007522:	897b      	ldrh	r3, [r7, #10]
 8007524:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007528:	7a7b      	ldrb	r3, [r7, #9]
 800752a:	041b      	lsls	r3, r3, #16
 800752c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007530:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	4313      	orrs	r3, r2
 800753a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800753e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	0d5b      	lsrs	r3, r3, #21
 800754a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800754e:	4b08      	ldr	r3, [pc, #32]	@ (8007570 <I2C_TransferConfig+0x60>)
 8007550:	430b      	orrs	r3, r1
 8007552:	43db      	mvns	r3, r3
 8007554:	ea02 0103 	and.w	r1, r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	430a      	orrs	r2, r1
 8007560:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007562:	bf00      	nop
 8007564:	371c      	adds	r7, #28
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	03ff63ff 	.word	0x03ff63ff

08007574 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b20      	cmp	r3, #32
 8007588:	d138      	bne.n	80075fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007590:	2b01      	cmp	r3, #1
 8007592:	d101      	bne.n	8007598 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007594:	2302      	movs	r3, #2
 8007596:	e032      	b.n	80075fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2224      	movs	r2, #36	@ 0x24
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0201 	bic.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6819      	ldr	r1, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0201 	orr.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	e000      	b.n	80075fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80075fc:	2302      	movs	r3, #2
  }
}
 80075fe:	4618      	mov	r0, r3
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800760a:	b480      	push	{r7}
 800760c:	b085      	sub	sp, #20
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b20      	cmp	r3, #32
 800761e:	d139      	bne.n	8007694 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007626:	2b01      	cmp	r3, #1
 8007628:	d101      	bne.n	800762e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800762a:	2302      	movs	r3, #2
 800762c:	e033      	b.n	8007696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2224      	movs	r2, #36	@ 0x24
 800763a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0201 	bic.w	r2, r2, #1
 800764c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800765c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2220      	movs	r2, #32
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	e000      	b.n	8007696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
  }
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
	...

080076a4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80076b0:	4b0b      	ldr	r3, [pc, #44]	@ (80076e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	73fb      	strb	r3, [r7, #15]
 80076c0:	e007      	b.n	80076d2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80076c2:	4b07      	ldr	r3, [pc, #28]	@ (80076e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f023 0204 	bic.w	r2, r3, #4
 80076ca:	4905      	ldr	r1, [pc, #20]	@ (80076e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	40030400 	.word	0x40030400

080076e4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80076e4:	b480      	push	{r7}
 80076e6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80076e8:	4b05      	ldr	r3, [pc, #20]	@ (8007700 <HAL_ICACHE_Enable+0x1c>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a04      	ldr	r2, [pc, #16]	@ (8007700 <HAL_ICACHE_Enable+0x1c>)
 80076ee:	f043 0301 	orr.w	r3, r3, #1
 80076f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	40030400 	.word	0x40030400

08007704 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8007708:	4b05      	ldr	r3, [pc, #20]	@ (8007720 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800770a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770c:	4a04      	ldr	r2, [pc, #16]	@ (8007720 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8007714:	bf00      	nop
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	44020800 	.word	0x44020800

08007724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d102      	bne.n	8007738 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	f000 bc28 	b.w	8007f88 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007738:	4b94      	ldr	r3, [pc, #592]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 800773a:	69db      	ldr	r3, [r3, #28]
 800773c:	f003 0318 	and.w	r3, r3, #24
 8007740:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8007742:	4b92      	ldr	r3, [pc, #584]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 8007744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007746:	f003 0303 	and.w	r3, r3, #3
 800774a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0310 	and.w	r3, r3, #16
 8007754:	2b00      	cmp	r3, #0
 8007756:	d05b      	beq.n	8007810 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	2b08      	cmp	r3, #8
 800775c:	d005      	beq.n	800776a <HAL_RCC_OscConfig+0x46>
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	2b18      	cmp	r3, #24
 8007762:	d114      	bne.n	800778e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d111      	bne.n	800778e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d102      	bne.n	8007778 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	f000 bc08 	b.w	8007f88 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8007778:	4b84      	ldr	r3, [pc, #528]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	041b      	lsls	r3, r3, #16
 8007786:	4981      	ldr	r1, [pc, #516]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 8007788:	4313      	orrs	r3, r2
 800778a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800778c:	e040      	b.n	8007810 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d023      	beq.n	80077de <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007796:	4b7d      	ldr	r3, [pc, #500]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a7c      	ldr	r2, [pc, #496]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 800779c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a2:	f7fc faff 	bl	8003da4 <HAL_GetTick>
 80077a6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80077a8:	e008      	b.n	80077bc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80077aa:	f7fc fafb 	bl	8003da4 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d901      	bls.n	80077bc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e3e5      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80077bc:	4b73      	ldr	r3, [pc, #460]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0f0      	beq.n	80077aa <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80077c8:	4b70      	ldr	r3, [pc, #448]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	041b      	lsls	r3, r3, #16
 80077d6:	496d      	ldr	r1, [pc, #436]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	618b      	str	r3, [r1, #24]
 80077dc:	e018      	b.n	8007810 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077de:	4b6b      	ldr	r3, [pc, #428]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a6a      	ldr	r2, [pc, #424]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80077e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ea:	f7fc fadb 	bl	8003da4 <HAL_GetTick>
 80077ee:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80077f0:	e008      	b.n	8007804 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80077f2:	f7fc fad7 	bl	8003da4 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e3c1      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8007804:	4b61      	ldr	r3, [pc, #388]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f0      	bne.n	80077f2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80a0 	beq.w	800795e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	2b10      	cmp	r3, #16
 8007822:	d005      	beq.n	8007830 <HAL_RCC_OscConfig+0x10c>
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	2b18      	cmp	r3, #24
 8007828:	d109      	bne.n	800783e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2b03      	cmp	r3, #3
 800782e:	d106      	bne.n	800783e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f040 8092 	bne.w	800795e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e3a4      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007846:	d106      	bne.n	8007856 <HAL_RCC_OscConfig+0x132>
 8007848:	4b50      	ldr	r3, [pc, #320]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a4f      	ldr	r2, [pc, #316]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 800784e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007852:	6013      	str	r3, [r2, #0]
 8007854:	e058      	b.n	8007908 <HAL_RCC_OscConfig+0x1e4>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d112      	bne.n	8007884 <HAL_RCC_OscConfig+0x160>
 800785e:	4b4b      	ldr	r3, [pc, #300]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a4a      	ldr	r2, [pc, #296]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 8007864:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	4b48      	ldr	r3, [pc, #288]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a47      	ldr	r2, [pc, #284]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 8007870:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007874:	6013      	str	r3, [r2, #0]
 8007876:	4b45      	ldr	r3, [pc, #276]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a44      	ldr	r2, [pc, #272]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 800787c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	e041      	b.n	8007908 <HAL_RCC_OscConfig+0x1e4>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800788c:	d112      	bne.n	80078b4 <HAL_RCC_OscConfig+0x190>
 800788e:	4b3f      	ldr	r3, [pc, #252]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a3e      	ldr	r2, [pc, #248]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 8007894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	4b3c      	ldr	r3, [pc, #240]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a3b      	ldr	r2, [pc, #236]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078a0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	4b39      	ldr	r3, [pc, #228]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a38      	ldr	r2, [pc, #224]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	e029      	b.n	8007908 <HAL_RCC_OscConfig+0x1e4>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80078bc:	d112      	bne.n	80078e4 <HAL_RCC_OscConfig+0x1c0>
 80078be:	4b33      	ldr	r3, [pc, #204]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a32      	ldr	r2, [pc, #200]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	4b30      	ldr	r3, [pc, #192]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a2f      	ldr	r2, [pc, #188]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	4b2d      	ldr	r3, [pc, #180]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a2c      	ldr	r2, [pc, #176]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	e011      	b.n	8007908 <HAL_RCC_OscConfig+0x1e4>
 80078e4:	4b29      	ldr	r3, [pc, #164]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a28      	ldr	r2, [pc, #160]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	4b26      	ldr	r3, [pc, #152]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a25      	ldr	r2, [pc, #148]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	4b23      	ldr	r3, [pc, #140]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a22      	ldr	r2, [pc, #136]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 8007902:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d013      	beq.n	8007938 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007910:	f7fc fa48 	bl	8003da4 <HAL_GetTick>
 8007914:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007916:	e008      	b.n	800792a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007918:	f7fc fa44 	bl	8003da4 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b64      	cmp	r3, #100	@ 0x64
 8007924:	d901      	bls.n	800792a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e32e      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800792a:	4b18      	ldr	r3, [pc, #96]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f0      	beq.n	8007918 <HAL_RCC_OscConfig+0x1f4>
 8007936:	e012      	b.n	800795e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007938:	f7fc fa34 	bl	8003da4 <HAL_GetTick>
 800793c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800793e:	e008      	b.n	8007952 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007940:	f7fc fa30 	bl	8003da4 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b64      	cmp	r3, #100	@ 0x64
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e31a      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007952:	4b0e      	ldr	r3, [pc, #56]	@ (800798c <HAL_RCC_OscConfig+0x268>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1f0      	bne.n	8007940 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 809a 	beq.w	8007aa0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d005      	beq.n	800797e <HAL_RCC_OscConfig+0x25a>
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	2b18      	cmp	r3, #24
 8007976:	d149      	bne.n	8007a0c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d146      	bne.n	8007a0c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d104      	bne.n	8007990 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e2fe      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
 800798a:	bf00      	nop
 800798c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d11c      	bne.n	80079d0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8007996:	4b9a      	ldr	r3, [pc, #616]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0218 	and.w	r2, r3, #24
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d014      	beq.n	80079d0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80079a6:	4b96      	ldr	r3, [pc, #600]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f023 0218 	bic.w	r2, r3, #24
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	4993      	ldr	r1, [pc, #588]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80079b8:	f000 fdd0 	bl	800855c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80079bc:	4b91      	ldr	r3, [pc, #580]	@ (8007c04 <HAL_RCC_OscConfig+0x4e0>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fb ffb9 	bl	8003938 <HAL_InitTick>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e2db      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d0:	f7fc f9e8 	bl	8003da4 <HAL_GetTick>
 80079d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80079d8:	f7fc f9e4 	bl	8003da4 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e2ce      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80079ea:	4b85      	ldr	r3, [pc, #532]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d0f0      	beq.n	80079d8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80079f6:	4b82      	ldr	r3, [pc, #520]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	041b      	lsls	r3, r3, #16
 8007a04:	497e      	ldr	r1, [pc, #504]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8007a0a:	e049      	b.n	8007aa0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d02c      	beq.n	8007a6e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8007a14:	4b7a      	ldr	r3, [pc, #488]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f023 0218 	bic.w	r2, r3, #24
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	4977      	ldr	r1, [pc, #476]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8007a26:	4b76      	ldr	r3, [pc, #472]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a75      	ldr	r2, [pc, #468]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a32:	f7fc f9b7 	bl	8003da4 <HAL_GetTick>
 8007a36:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a38:	e008      	b.n	8007a4c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007a3a:	f7fc f9b3 	bl	8003da4 <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d901      	bls.n	8007a4c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e29d      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a4c:	4b6c      	ldr	r3, [pc, #432]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0f0      	beq.n	8007a3a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8007a58:	4b69      	ldr	r3, [pc, #420]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	041b      	lsls	r3, r3, #16
 8007a66:	4966      	ldr	r1, [pc, #408]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	610b      	str	r3, [r1, #16]
 8007a6c:	e018      	b.n	8007aa0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a6e:	4b64      	ldr	r3, [pc, #400]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a63      	ldr	r2, [pc, #396]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007a74:	f023 0301 	bic.w	r3, r3, #1
 8007a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7a:	f7fc f993 	bl	8003da4 <HAL_GetTick>
 8007a7e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a80:	e008      	b.n	8007a94 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007a82:	f7fc f98f 	bl	8003da4 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e279      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a94:	4b5a      	ldr	r3, [pc, #360]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1f0      	bne.n	8007a82 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d03c      	beq.n	8007b26 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01c      	beq.n	8007aee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ab4:	4b52      	ldr	r3, [pc, #328]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007aba:	4a51      	ldr	r2, [pc, #324]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007abc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ac0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac4:	f7fc f96e 	bl	8003da4 <HAL_GetTick>
 8007ac8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007acc:	f7fc f96a 	bl	8003da4 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e254      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007ade:	4b48      	ldr	r3, [pc, #288]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0ef      	beq.n	8007acc <HAL_RCC_OscConfig+0x3a8>
 8007aec:	e01b      	b.n	8007b26 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007aee:	4b44      	ldr	r3, [pc, #272]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007af4:	4a42      	ldr	r2, [pc, #264]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007af6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007afa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007afe:	f7fc f951 	bl	8003da4 <HAL_GetTick>
 8007b02:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007b04:	e008      	b.n	8007b18 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007b06:	f7fc f94d 	bl	8003da4 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d901      	bls.n	8007b18 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e237      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007b18:	4b39      	ldr	r3, [pc, #228]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1ef      	bne.n	8007b06 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0304 	and.w	r3, r3, #4
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 80d2 	beq.w	8007cd8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007b34:	4b34      	ldr	r3, [pc, #208]	@ (8007c08 <HAL_RCC_OscConfig+0x4e4>)
 8007b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d118      	bne.n	8007b72 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007b40:	4b31      	ldr	r3, [pc, #196]	@ (8007c08 <HAL_RCC_OscConfig+0x4e4>)
 8007b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b44:	4a30      	ldr	r2, [pc, #192]	@ (8007c08 <HAL_RCC_OscConfig+0x4e4>)
 8007b46:	f043 0301 	orr.w	r3, r3, #1
 8007b4a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b4c:	f7fc f92a 	bl	8003da4 <HAL_GetTick>
 8007b50:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007b52:	e008      	b.n	8007b66 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b54:	f7fc f926 	bl	8003da4 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e210      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007b66:	4b28      	ldr	r3, [pc, #160]	@ (8007c08 <HAL_RCC_OscConfig+0x4e4>)
 8007b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0f0      	beq.n	8007b54 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d108      	bne.n	8007b8c <HAL_RCC_OscConfig+0x468>
 8007b7a:	4b21      	ldr	r3, [pc, #132]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b80:	4a1f      	ldr	r2, [pc, #124]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007b82:	f043 0301 	orr.w	r3, r3, #1
 8007b86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007b8a:	e074      	b.n	8007c76 <HAL_RCC_OscConfig+0x552>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d118      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x4a2>
 8007b94:	4b1a      	ldr	r3, [pc, #104]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b9a:	4a19      	ldr	r2, [pc, #100]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007b9c:	f023 0301 	bic.w	r3, r3, #1
 8007ba0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007ba4:	4b16      	ldr	r3, [pc, #88]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007baa:	4a15      	ldr	r2, [pc, #84]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007bac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007bb4:	4b12      	ldr	r3, [pc, #72]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bba:	4a11      	ldr	r2, [pc, #68]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007bbc:	f023 0304 	bic.w	r3, r3, #4
 8007bc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007bc4:	e057      	b.n	8007c76 <HAL_RCC_OscConfig+0x552>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	2b05      	cmp	r3, #5
 8007bcc:	d11e      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4e8>
 8007bce:	4b0c      	ldr	r3, [pc, #48]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007bd6:	f043 0304 	orr.w	r3, r3, #4
 8007bda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007bde:	4b08      	ldr	r3, [pc, #32]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007be4:	4a06      	ldr	r2, [pc, #24]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007bee:	4b04      	ldr	r3, [pc, #16]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bf4:	4a02      	ldr	r2, [pc, #8]	@ (8007c00 <HAL_RCC_OscConfig+0x4dc>)
 8007bf6:	f043 0301 	orr.w	r3, r3, #1
 8007bfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007bfe:	e03a      	b.n	8007c76 <HAL_RCC_OscConfig+0x552>
 8007c00:	44020c00 	.word	0x44020c00
 8007c04:	20000174 	.word	0x20000174
 8007c08:	44020800 	.word	0x44020800
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	2b85      	cmp	r3, #133	@ 0x85
 8007c12:	d118      	bne.n	8007c46 <HAL_RCC_OscConfig+0x522>
 8007c14:	4ba2      	ldr	r3, [pc, #648]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c1a:	4aa1      	ldr	r2, [pc, #644]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c1c:	f043 0304 	orr.w	r3, r3, #4
 8007c20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007c24:	4b9e      	ldr	r3, [pc, #632]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c2a:	4a9d      	ldr	r2, [pc, #628]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007c34:	4b9a      	ldr	r3, [pc, #616]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c3a:	4a99      	ldr	r2, [pc, #612]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c3c:	f043 0301 	orr.w	r3, r3, #1
 8007c40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007c44:	e017      	b.n	8007c76 <HAL_RCC_OscConfig+0x552>
 8007c46:	4b96      	ldr	r3, [pc, #600]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c4c:	4a94      	ldr	r2, [pc, #592]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c4e:	f023 0301 	bic.w	r3, r3, #1
 8007c52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007c56:	4b92      	ldr	r3, [pc, #584]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c5c:	4a90      	ldr	r2, [pc, #576]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c5e:	f023 0304 	bic.w	r3, r3, #4
 8007c62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007c66:	4b8e      	ldr	r3, [pc, #568]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c6c:	4a8c      	ldr	r2, [pc, #560]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d016      	beq.n	8007cac <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c7e:	f7fc f891 	bl	8003da4 <HAL_GetTick>
 8007c82:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c84:	e00a      	b.n	8007c9c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c86:	f7fc f88d 	bl	8003da4 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d901      	bls.n	8007c9c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e175      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c9c:	4b80      	ldr	r3, [pc, #512]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0ed      	beq.n	8007c86 <HAL_RCC_OscConfig+0x562>
 8007caa:	e015      	b.n	8007cd8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cac:	f7fc f87a 	bl	8003da4 <HAL_GetTick>
 8007cb0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cb2:	e00a      	b.n	8007cca <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cb4:	f7fc f876 	bl	8003da4 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e15e      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cca:	4b75      	ldr	r3, [pc, #468]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1ed      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0320 	and.w	r3, r3, #32
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d036      	beq.n	8007d52 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d019      	beq.n	8007d20 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007cec:	4b6c      	ldr	r3, [pc, #432]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a6b      	ldr	r2, [pc, #428]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007cf2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007cf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf8:	f7fc f854 	bl	8003da4 <HAL_GetTick>
 8007cfc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007cfe:	e008      	b.n	8007d12 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007d00:	f7fc f850 	bl	8003da4 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e13a      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007d12:	4b63      	ldr	r3, [pc, #396]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0f0      	beq.n	8007d00 <HAL_RCC_OscConfig+0x5dc>
 8007d1e:	e018      	b.n	8007d52 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d20:	4b5f      	ldr	r3, [pc, #380]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a5e      	ldr	r2, [pc, #376]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007d26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d2c:	f7fc f83a 	bl	8003da4 <HAL_GetTick>
 8007d30:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8007d34:	f7fc f836 	bl	8003da4 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e120      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007d46:	4b56      	ldr	r3, [pc, #344]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f0      	bne.n	8007d34 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 8115 	beq.w	8007f86 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	2b18      	cmp	r3, #24
 8007d60:	f000 80af 	beq.w	8007ec2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	f040 8086 	bne.w	8007e7a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007d6e:	4b4c      	ldr	r3, [pc, #304]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a4b      	ldr	r2, [pc, #300]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007d74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d7a:	f7fc f813 	bl	8003da4 <HAL_GetTick>
 8007d7e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007d80:	e008      	b.n	8007d94 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007d82:	f7fc f80f 	bl	8003da4 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d901      	bls.n	8007d94 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e0f9      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007d94:	4b42      	ldr	r3, [pc, #264]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1f0      	bne.n	8007d82 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8007da0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007da8:	f023 0303 	bic.w	r3, r3, #3
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007db4:	0212      	lsls	r2, r2, #8
 8007db6:	430a      	orrs	r2, r1
 8007db8:	4939      	ldr	r1, [pc, #228]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	628b      	str	r3, [r1, #40]	@ 0x28
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	025b      	lsls	r3, r3, #9
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	041b      	lsls	r3, r3, #16
 8007ddc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de6:	3b01      	subs	r3, #1
 8007de8:	061b      	lsls	r3, r3, #24
 8007dea:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007dee:	492c      	ldr	r1, [pc, #176]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007df4:	4b2a      	ldr	r3, [pc, #168]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df8:	4a29      	ldr	r2, [pc, #164]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007dfa:	f023 0310 	bic.w	r3, r3, #16
 8007dfe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e04:	4a26      	ldr	r2, [pc, #152]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007e0a:	4b25      	ldr	r3, [pc, #148]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0e:	4a24      	ldr	r2, [pc, #144]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e10:	f043 0310 	orr.w	r3, r3, #16
 8007e14:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8007e16:	4b22      	ldr	r3, [pc, #136]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1a:	f023 020c 	bic.w	r2, r3, #12
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e22:	491f      	ldr	r1, [pc, #124]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8007e28:	4b1d      	ldr	r3, [pc, #116]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2c:	f023 0220 	bic.w	r2, r3, #32
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e34:	491a      	ldr	r1, [pc, #104]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e3a:	4b19      	ldr	r3, [pc, #100]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3e:	4a18      	ldr	r2, [pc, #96]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e44:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8007e46:	4b16      	ldr	r3, [pc, #88]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a15      	ldr	r2, [pc, #84]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e52:	f7fb ffa7 	bl	8003da4 <HAL_GetTick>
 8007e56:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007e58:	e008      	b.n	8007e6c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007e5a:	f7fb ffa3 	bl	8003da4 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e08d      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0f0      	beq.n	8007e5a <HAL_RCC_OscConfig+0x736>
 8007e78:	e085      	b.n	8007f86 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8007e7a:	4b09      	ldr	r3, [pc, #36]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a08      	ldr	r2, [pc, #32]	@ (8007ea0 <HAL_RCC_OscConfig+0x77c>)
 8007e80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e86:	f7fb ff8d 	bl	8003da4 <HAL_GetTick>
 8007e8a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007e8c:	e00a      	b.n	8007ea4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8007e8e:	f7fb ff89 	bl	8003da4 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d903      	bls.n	8007ea4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e073      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
 8007ea0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8007f90 <HAL_RCC_OscConfig+0x86c>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1ee      	bne.n	8007e8e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007eb0:	4b37      	ldr	r3, [pc, #220]	@ (8007f90 <HAL_RCC_OscConfig+0x86c>)
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb4:	4a36      	ldr	r2, [pc, #216]	@ (8007f90 <HAL_RCC_OscConfig+0x86c>)
 8007eb6:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007eba:	f023 0303 	bic.w	r3, r3, #3
 8007ebe:	6293      	str	r3, [r2, #40]	@ 0x28
 8007ec0:	e061      	b.n	8007f86 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007ec2:	4b33      	ldr	r3, [pc, #204]	@ (8007f90 <HAL_RCC_OscConfig+0x86c>)
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007ec8:	4b31      	ldr	r3, [pc, #196]	@ (8007f90 <HAL_RCC_OscConfig+0x86c>)
 8007eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ecc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d031      	beq.n	8007f3a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f003 0203 	and.w	r2, r3, #3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d12a      	bne.n	8007f3a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	0a1b      	lsrs	r3, r3, #8
 8007ee8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d122      	bne.n	8007f3a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007efe:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d11a      	bne.n	8007f3a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	0a5b      	lsrs	r3, r3, #9
 8007f08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f10:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d111      	bne.n	8007f3a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	0c1b      	lsrs	r3, r3, #16
 8007f1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f22:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d108      	bne.n	8007f3a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	0e1b      	lsrs	r3, r3, #24
 8007f2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f34:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d001      	beq.n	8007f3e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e024      	b.n	8007f88 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007f3e:	4b14      	ldr	r3, [pc, #80]	@ (8007f90 <HAL_RCC_OscConfig+0x86c>)
 8007f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f42:	08db      	lsrs	r3, r3, #3
 8007f44:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d01a      	beq.n	8007f86 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8007f50:	4b0f      	ldr	r3, [pc, #60]	@ (8007f90 <HAL_RCC_OscConfig+0x86c>)
 8007f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f54:	4a0e      	ldr	r2, [pc, #56]	@ (8007f90 <HAL_RCC_OscConfig+0x86c>)
 8007f56:	f023 0310 	bic.w	r3, r3, #16
 8007f5a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f5c:	f7fb ff22 	bl	8003da4 <HAL_GetTick>
 8007f60:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8007f62:	bf00      	nop
 8007f64:	f7fb ff1e 	bl	8003da4 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d0f9      	beq.n	8007f64 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f74:	4a06      	ldr	r2, [pc, #24]	@ (8007f90 <HAL_RCC_OscConfig+0x86c>)
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8007f7a:	4b05      	ldr	r3, [pc, #20]	@ (8007f90 <HAL_RCC_OscConfig+0x86c>)
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7e:	4a04      	ldr	r2, [pc, #16]	@ (8007f90 <HAL_RCC_OscConfig+0x86c>)
 8007f80:	f043 0310 	orr.w	r3, r3, #16
 8007f84:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3720      	adds	r7, #32
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	44020c00 	.word	0x44020c00

08007f94 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e19e      	b.n	80082e6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fa8:	4b83      	ldr	r3, [pc, #524]	@ (80081b8 <HAL_RCC_ClockConfig+0x224>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d910      	bls.n	8007fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fb6:	4b80      	ldr	r3, [pc, #512]	@ (80081b8 <HAL_RCC_ClockConfig+0x224>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f023 020f 	bic.w	r2, r3, #15
 8007fbe:	497e      	ldr	r1, [pc, #504]	@ (80081b8 <HAL_RCC_ClockConfig+0x224>)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80081b8 <HAL_RCC_ClockConfig+0x224>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 030f 	and.w	r3, r3, #15
 8007fce:	683a      	ldr	r2, [r7, #0]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d001      	beq.n	8007fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e186      	b.n	80082e6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0310 	and.w	r3, r3, #16
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d012      	beq.n	800800a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	695a      	ldr	r2, [r3, #20]
 8007fe8:	4b74      	ldr	r3, [pc, #464]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 8007fea:	6a1b      	ldr	r3, [r3, #32]
 8007fec:	0a1b      	lsrs	r3, r3, #8
 8007fee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d909      	bls.n	800800a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8007ff6:	4b71      	ldr	r3, [pc, #452]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	496d      	ldr	r1, [pc, #436]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 8008006:	4313      	orrs	r3, r2
 8008008:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0308 	and.w	r3, r3, #8
 8008012:	2b00      	cmp	r3, #0
 8008014:	d012      	beq.n	800803c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691a      	ldr	r2, [r3, #16]
 800801a:	4b68      	ldr	r3, [pc, #416]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	091b      	lsrs	r3, r3, #4
 8008020:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008024:	429a      	cmp	r2, r3
 8008026:	d909      	bls.n	800803c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8008028:	4b64      	ldr	r3, [pc, #400]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	4961      	ldr	r1, [pc, #388]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 8008038:	4313      	orrs	r3, r2
 800803a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d010      	beq.n	800806a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68da      	ldr	r2, [r3, #12]
 800804c:	4b5b      	ldr	r3, [pc, #364]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008054:	429a      	cmp	r2, r3
 8008056:	d908      	bls.n	800806a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8008058:	4b58      	ldr	r3, [pc, #352]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	4955      	ldr	r1, [pc, #340]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 8008066:	4313      	orrs	r3, r2
 8008068:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d010      	beq.n	8008098 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	689a      	ldr	r2, [r3, #8]
 800807a:	4b50      	ldr	r3, [pc, #320]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	f003 030f 	and.w	r3, r3, #15
 8008082:	429a      	cmp	r2, r3
 8008084:	d908      	bls.n	8008098 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8008086:	4b4d      	ldr	r3, [pc, #308]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	f023 020f 	bic.w	r2, r3, #15
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	494a      	ldr	r1, [pc, #296]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 8008094:	4313      	orrs	r3, r2
 8008096:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 8093 	beq.w	80081cc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	d107      	bne.n	80080be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80080ae:	4b43      	ldr	r3, [pc, #268]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d121      	bne.n	80080fe <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e113      	b.n	80082e6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d107      	bne.n	80080d6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080c6:	4b3d      	ldr	r3, [pc, #244]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d115      	bne.n	80080fe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e107      	b.n	80082e6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d107      	bne.n	80080ee <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80080de:	4b37      	ldr	r3, [pc, #220]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d109      	bne.n	80080fe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e0fb      	b.n	80082e6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080ee:	4b33      	ldr	r3, [pc, #204]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d101      	bne.n	80080fe <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e0f3      	b.n	80082e6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80080fe:	4b2f      	ldr	r3, [pc, #188]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	f023 0203 	bic.w	r2, r3, #3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	492c      	ldr	r1, [pc, #176]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 800810c:	4313      	orrs	r3, r2
 800810e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008110:	f7fb fe48 	bl	8003da4 <HAL_GetTick>
 8008114:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	2b03      	cmp	r3, #3
 800811c:	d112      	bne.n	8008144 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800811e:	e00a      	b.n	8008136 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8008120:	f7fb fe40 	bl	8003da4 <HAL_GetTick>
 8008124:	4602      	mov	r2, r0
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800812e:	4293      	cmp	r3, r2
 8008130:	d901      	bls.n	8008136 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e0d7      	b.n	80082e6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008136:	4b21      	ldr	r3, [pc, #132]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	f003 0318 	and.w	r3, r3, #24
 800813e:	2b18      	cmp	r3, #24
 8008140:	d1ee      	bne.n	8008120 <HAL_RCC_ClockConfig+0x18c>
 8008142:	e043      	b.n	80081cc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	2b02      	cmp	r3, #2
 800814a:	d112      	bne.n	8008172 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800814c:	e00a      	b.n	8008164 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800814e:	f7fb fe29 	bl	8003da4 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800815c:	4293      	cmp	r3, r2
 800815e:	d901      	bls.n	8008164 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e0c0      	b.n	80082e6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008164:	4b15      	ldr	r3, [pc, #84]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 8008166:	69db      	ldr	r3, [r3, #28]
 8008168:	f003 0318 	and.w	r3, r3, #24
 800816c:	2b10      	cmp	r3, #16
 800816e:	d1ee      	bne.n	800814e <HAL_RCC_ClockConfig+0x1ba>
 8008170:	e02c      	b.n	80081cc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d122      	bne.n	80081c0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800817a:	e00a      	b.n	8008192 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800817c:	f7fb fe12 	bl	8003da4 <HAL_GetTick>
 8008180:	4602      	mov	r2, r0
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800818a:	4293      	cmp	r3, r2
 800818c:	d901      	bls.n	8008192 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e0a9      	b.n	80082e6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8008192:	4b0a      	ldr	r3, [pc, #40]	@ (80081bc <HAL_RCC_ClockConfig+0x228>)
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f003 0318 	and.w	r3, r3, #24
 800819a:	2b08      	cmp	r3, #8
 800819c:	d1ee      	bne.n	800817c <HAL_RCC_ClockConfig+0x1e8>
 800819e:	e015      	b.n	80081cc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80081a0:	f7fb fe00 	bl	8003da4 <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d906      	bls.n	80081c0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e097      	b.n	80082e6 <HAL_RCC_ClockConfig+0x352>
 80081b6:	bf00      	nop
 80081b8:	40022000 	.word	0x40022000
 80081bc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80081c0:	4b4b      	ldr	r3, [pc, #300]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	f003 0318 	and.w	r3, r3, #24
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e9      	bne.n	80081a0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0302 	and.w	r3, r3, #2
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d010      	beq.n	80081fa <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	4b44      	ldr	r3, [pc, #272]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	f003 030f 	and.w	r3, r3, #15
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d208      	bcs.n	80081fa <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80081e8:	4b41      	ldr	r3, [pc, #260]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	f023 020f 	bic.w	r2, r3, #15
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	493e      	ldr	r1, [pc, #248]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 80081f6:	4313      	orrs	r3, r2
 80081f8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081fa:	4b3e      	ldr	r3, [pc, #248]	@ (80082f4 <HAL_RCC_ClockConfig+0x360>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 030f 	and.w	r3, r3, #15
 8008202:	683a      	ldr	r2, [r7, #0]
 8008204:	429a      	cmp	r2, r3
 8008206:	d210      	bcs.n	800822a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008208:	4b3a      	ldr	r3, [pc, #232]	@ (80082f4 <HAL_RCC_ClockConfig+0x360>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f023 020f 	bic.w	r2, r3, #15
 8008210:	4938      	ldr	r1, [pc, #224]	@ (80082f4 <HAL_RCC_ClockConfig+0x360>)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	4313      	orrs	r3, r2
 8008216:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008218:	4b36      	ldr	r3, [pc, #216]	@ (80082f4 <HAL_RCC_ClockConfig+0x360>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 030f 	and.w	r3, r3, #15
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d001      	beq.n	800822a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e05d      	b.n	80082e6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b00      	cmp	r3, #0
 8008234:	d010      	beq.n	8008258 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	4b2d      	ldr	r3, [pc, #180]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008242:	429a      	cmp	r2, r3
 8008244:	d208      	bcs.n	8008258 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8008246:	4b2a      	ldr	r3, [pc, #168]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	4927      	ldr	r1, [pc, #156]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 8008254:	4313      	orrs	r3, r2
 8008256:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0308 	and.w	r3, r3, #8
 8008260:	2b00      	cmp	r3, #0
 8008262:	d012      	beq.n	800828a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	691a      	ldr	r2, [r3, #16]
 8008268:	4b21      	ldr	r3, [pc, #132]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 800826a:	6a1b      	ldr	r3, [r3, #32]
 800826c:	091b      	lsrs	r3, r3, #4
 800826e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008272:	429a      	cmp	r2, r3
 8008274:	d209      	bcs.n	800828a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8008276:	4b1e      	ldr	r3, [pc, #120]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	011b      	lsls	r3, r3, #4
 8008284:	491a      	ldr	r1, [pc, #104]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 8008286:	4313      	orrs	r3, r2
 8008288:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0310 	and.w	r3, r3, #16
 8008292:	2b00      	cmp	r3, #0
 8008294:	d012      	beq.n	80082bc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	695a      	ldr	r2, [r3, #20]
 800829a:	4b15      	ldr	r3, [pc, #84]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d209      	bcs.n	80082bc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80082a8:	4b11      	ldr	r3, [pc, #68]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	695b      	ldr	r3, [r3, #20]
 80082b4:	021b      	lsls	r3, r3, #8
 80082b6:	490e      	ldr	r1, [pc, #56]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80082bc:	f000 f822 	bl	8008304 <HAL_RCC_GetSysClockFreq>
 80082c0:	4602      	mov	r2, r0
 80082c2:	4b0b      	ldr	r3, [pc, #44]	@ (80082f0 <HAL_RCC_ClockConfig+0x35c>)
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	490b      	ldr	r1, [pc, #44]	@ (80082f8 <HAL_RCC_ClockConfig+0x364>)
 80082cc:	5ccb      	ldrb	r3, [r1, r3]
 80082ce:	fa22 f303 	lsr.w	r3, r2, r3
 80082d2:	4a0a      	ldr	r2, [pc, #40]	@ (80082fc <HAL_RCC_ClockConfig+0x368>)
 80082d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80082d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008300 <HAL_RCC_ClockConfig+0x36c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fb fb2c 	bl	8003938 <HAL_InitTick>
 80082e0:	4603      	mov	r3, r0
 80082e2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80082e4:	7afb      	ldrb	r3, [r7, #11]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	44020c00 	.word	0x44020c00
 80082f4:	40022000 	.word	0x40022000
 80082f8:	08014a10 	.word	0x08014a10
 80082fc:	20000170 	.word	0x20000170
 8008300:	20000174 	.word	0x20000174

08008304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008304:	b480      	push	{r7}
 8008306:	b089      	sub	sp, #36	@ 0x24
 8008308:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800830a:	4b8c      	ldr	r3, [pc, #560]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 800830c:	69db      	ldr	r3, [r3, #28]
 800830e:	f003 0318 	and.w	r3, r3, #24
 8008312:	2b08      	cmp	r3, #8
 8008314:	d102      	bne.n	800831c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008316:	4b8a      	ldr	r3, [pc, #552]	@ (8008540 <HAL_RCC_GetSysClockFreq+0x23c>)
 8008318:	61fb      	str	r3, [r7, #28]
 800831a:	e107      	b.n	800852c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800831c:	4b87      	ldr	r3, [pc, #540]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	f003 0318 	and.w	r3, r3, #24
 8008324:	2b00      	cmp	r3, #0
 8008326:	d112      	bne.n	800834e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8008328:	4b84      	ldr	r3, [pc, #528]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b00      	cmp	r3, #0
 8008332:	d009      	beq.n	8008348 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008334:	4b81      	ldr	r3, [pc, #516]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	08db      	lsrs	r3, r3, #3
 800833a:	f003 0303 	and.w	r3, r3, #3
 800833e:	4a81      	ldr	r2, [pc, #516]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x240>)
 8008340:	fa22 f303 	lsr.w	r3, r2, r3
 8008344:	61fb      	str	r3, [r7, #28]
 8008346:	e0f1      	b.n	800852c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8008348:	4b7e      	ldr	r3, [pc, #504]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x240>)
 800834a:	61fb      	str	r3, [r7, #28]
 800834c:	e0ee      	b.n	800852c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800834e:	4b7b      	ldr	r3, [pc, #492]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	f003 0318 	and.w	r3, r3, #24
 8008356:	2b10      	cmp	r3, #16
 8008358:	d102      	bne.n	8008360 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800835a:	4b7b      	ldr	r3, [pc, #492]	@ (8008548 <HAL_RCC_GetSysClockFreq+0x244>)
 800835c:	61fb      	str	r3, [r7, #28]
 800835e:	e0e5      	b.n	800852c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008360:	4b76      	ldr	r3, [pc, #472]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	f003 0318 	and.w	r3, r3, #24
 8008368:	2b18      	cmp	r3, #24
 800836a:	f040 80dd 	bne.w	8008528 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800836e:	4b73      	ldr	r3, [pc, #460]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 8008370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008372:	f003 0303 	and.w	r3, r3, #3
 8008376:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008378:	4b70      	ldr	r3, [pc, #448]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 800837a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837c:	0a1b      	lsrs	r3, r3, #8
 800837e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008382:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008384:	4b6d      	ldr	r3, [pc, #436]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 8008386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008388:	091b      	lsrs	r3, r3, #4
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8008390:	4b6a      	ldr	r3, [pc, #424]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 8008392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8008394:	08db      	lsrs	r3, r3, #3
 8008396:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	fb02 f303 	mul.w	r3, r2, r3
 80083a0:	ee07 3a90 	vmov	s15, r3
 80083a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 80b7 	beq.w	8008522 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d003      	beq.n	80083c2 <HAL_RCC_GetSysClockFreq+0xbe>
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d056      	beq.n	800846e <HAL_RCC_GetSysClockFreq+0x16a>
 80083c0:	e077      	b.n	80084b2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80083c2:	4b5e      	ldr	r3, [pc, #376]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d02d      	beq.n	800842a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083ce:	4b5b      	ldr	r3, [pc, #364]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	08db      	lsrs	r3, r3, #3
 80083d4:	f003 0303 	and.w	r3, r3, #3
 80083d8:	4a5a      	ldr	r2, [pc, #360]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x240>)
 80083da:	fa22 f303 	lsr.w	r3, r2, r3
 80083de:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	ee07 3a90 	vmov	s15, r3
 80083e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	ee07 3a90 	vmov	s15, r3
 80083f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083f8:	4b50      	ldr	r3, [pc, #320]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 80083fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008400:	ee07 3a90 	vmov	s15, r3
 8008404:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8008408:	ed97 6a02 	vldr	s12, [r7, #8]
 800840c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 800854c <HAL_RCC_GetSysClockFreq+0x248>
 8008410:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008414:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8008418:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800841c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008424:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8008428:	e065      	b.n	80084f6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	ee07 3a90 	vmov	s15, r3
 8008430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008434:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8008550 <HAL_RCC_GetSysClockFreq+0x24c>
 8008438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800843c:	4b3f      	ldr	r3, [pc, #252]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 800843e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008444:	ee07 3a90 	vmov	s15, r3
 8008448:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800844c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008450:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800854c <HAL_RCC_GetSysClockFreq+0x248>
 8008454:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008458:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800845c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008460:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008468:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800846c:	e043      	b.n	80084f6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	ee07 3a90 	vmov	s15, r3
 8008474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008478:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8008554 <HAL_RCC_GetSysClockFreq+0x250>
 800847c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008480:	4b2e      	ldr	r3, [pc, #184]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 8008482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008488:	ee07 3a90 	vmov	s15, r3
 800848c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008490:	ed97 6a02 	vldr	s12, [r7, #8]
 8008494:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 800854c <HAL_RCC_GetSysClockFreq+0x248>
 8008498:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800849c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80084a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ac:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80084b0:	e021      	b.n	80084f6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084bc:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008558 <HAL_RCC_GetSysClockFreq+0x254>
 80084c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084c4:	4b1d      	ldr	r3, [pc, #116]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 80084c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084cc:	ee07 3a90 	vmov	s15, r3
 80084d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80084d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80084d8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 800854c <HAL_RCC_GetSysClockFreq+0x248>
 80084dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80084e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80084ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80084f4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80084f6:	4b11      	ldr	r3, [pc, #68]	@ (800853c <HAL_RCC_GetSysClockFreq+0x238>)
 80084f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084fa:	0a5b      	lsrs	r3, r3, #9
 80084fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008500:	3301      	adds	r3, #1
 8008502:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800850e:	edd7 6a06 	vldr	s13, [r7, #24]
 8008512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800851a:	ee17 3a90 	vmov	r3, s15
 800851e:	61fb      	str	r3, [r7, #28]
 8008520:	e004      	b.n	800852c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8008522:	2300      	movs	r3, #0
 8008524:	61fb      	str	r3, [r7, #28]
 8008526:	e001      	b.n	800852c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8008528:	4b06      	ldr	r3, [pc, #24]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x240>)
 800852a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800852c:	69fb      	ldr	r3, [r7, #28]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3724      	adds	r7, #36	@ 0x24
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	44020c00 	.word	0x44020c00
 8008540:	003d0900 	.word	0x003d0900
 8008544:	03d09000 	.word	0x03d09000
 8008548:	007a1200 	.word	0x007a1200
 800854c:	46000000 	.word	0x46000000
 8008550:	4c742400 	.word	0x4c742400
 8008554:	4af42400 	.word	0x4af42400
 8008558:	4a742400 	.word	0x4a742400

0800855c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008560:	f7ff fed0 	bl	8008304 <HAL_RCC_GetSysClockFreq>
 8008564:	4602      	mov	r2, r0
 8008566:	4b08      	ldr	r3, [pc, #32]	@ (8008588 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008568:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800856a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800856e:	4907      	ldr	r1, [pc, #28]	@ (800858c <HAL_RCC_GetHCLKFreq+0x30>)
 8008570:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8008572:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8008576:	fa22 f303 	lsr.w	r3, r2, r3
 800857a:	4a05      	ldr	r2, [pc, #20]	@ (8008590 <HAL_RCC_GetHCLKFreq+0x34>)
 800857c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 800857e:	4b04      	ldr	r3, [pc, #16]	@ (8008590 <HAL_RCC_GetHCLKFreq+0x34>)
 8008580:	681b      	ldr	r3, [r3, #0]
}
 8008582:	4618      	mov	r0, r3
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	44020c00 	.word	0x44020c00
 800858c:	08014a10 	.word	0x08014a10
 8008590:	20000170 	.word	0x20000170

08008594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8008598:	f7ff ffe0 	bl	800855c <HAL_RCC_GetHCLKFreq>
 800859c:	4602      	mov	r2, r0
 800859e:	4b06      	ldr	r3, [pc, #24]	@ (80085b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085a0:	6a1b      	ldr	r3, [r3, #32]
 80085a2:	091b      	lsrs	r3, r3, #4
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	4904      	ldr	r1, [pc, #16]	@ (80085bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80085aa:	5ccb      	ldrb	r3, [r1, r3]
 80085ac:	f003 031f 	and.w	r3, r3, #31
 80085b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	44020c00 	.word	0x44020c00
 80085bc:	08014a20 	.word	0x08014a20

080085c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80085c4:	f7ff ffca 	bl	800855c <HAL_RCC_GetHCLKFreq>
 80085c8:	4602      	mov	r2, r0
 80085ca:	4b06      	ldr	r3, [pc, #24]	@ (80085e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	0a1b      	lsrs	r3, r3, #8
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	4904      	ldr	r1, [pc, #16]	@ (80085e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80085d6:	5ccb      	ldrb	r3, [r1, r3]
 80085d8:	f003 031f 	and.w	r3, r3, #31
 80085dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	44020c00 	.word	0x44020c00
 80085e8:	08014a20 	.word	0x08014a20

080085ec <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80085f0:	f7ff ffb4 	bl	800855c <HAL_RCC_GetHCLKFreq>
 80085f4:	4602      	mov	r2, r0
 80085f6:	4b06      	ldr	r3, [pc, #24]	@ (8008610 <HAL_RCC_GetPCLK3Freq+0x24>)
 80085f8:	6a1b      	ldr	r3, [r3, #32]
 80085fa:	0b1b      	lsrs	r3, r3, #12
 80085fc:	f003 0307 	and.w	r3, r3, #7
 8008600:	4904      	ldr	r1, [pc, #16]	@ (8008614 <HAL_RCC_GetPCLK3Freq+0x28>)
 8008602:	5ccb      	ldrb	r3, [r1, r3]
 8008604:	f003 031f 	and.w	r3, r3, #31
 8008608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800860c:	4618      	mov	r0, r3
 800860e:	bd80      	pop	{r7, pc}
 8008610:	44020c00 	.word	0x44020c00
 8008614:	08014a20 	.word	0x08014a20

08008618 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	221f      	movs	r2, #31
 8008626:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008628:	4b15      	ldr	r3, [pc, #84]	@ (8008680 <HAL_RCC_GetClockConfig+0x68>)
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	f003 0203 	and.w	r2, r3, #3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8008634:	4b12      	ldr	r3, [pc, #72]	@ (8008680 <HAL_RCC_GetClockConfig+0x68>)
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f003 020f 	and.w	r2, r3, #15
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	091b      	lsrs	r3, r3, #4
 8008652:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	0a1b      	lsrs	r3, r3, #8
 800865e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008666:	4b07      	ldr	r3, [pc, #28]	@ (8008684 <HAL_RCC_GetClockConfig+0x6c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 020f 	and.w	r2, r3, #15
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	601a      	str	r2, [r3, #0]
}
 8008672:	bf00      	nop
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	44020c00 	.word	0x44020c00
 8008684:	40022000 	.word	0x40022000

08008688 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800868c:	b0d6      	sub	sp, #344	@ 0x158
 800868e:	af00      	add	r7, sp, #0
 8008690:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008694:	2300      	movs	r3, #0
 8008696:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800869a:	2300      	movs	r3, #0
 800869c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80086a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80086ac:	2500      	movs	r5, #0
 80086ae:	ea54 0305 	orrs.w	r3, r4, r5
 80086b2:	d00b      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80086b4:	4bcd      	ldr	r3, [pc, #820]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80086b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086ba:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80086be:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80086c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086c4:	4ac9      	ldr	r2, [pc, #804]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80086c6:	430b      	orrs	r3, r1
 80086c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d4:	f002 0801 	and.w	r8, r2, #1
 80086d8:	f04f 0900 	mov.w	r9, #0
 80086dc:	ea58 0309 	orrs.w	r3, r8, r9
 80086e0:	d042      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80086e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80086e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086e8:	2b05      	cmp	r3, #5
 80086ea:	d823      	bhi.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80086ec:	a201      	add	r2, pc, #4	@ (adr r2, 80086f4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	0800873d 	.word	0x0800873d
 80086f8:	0800870d 	.word	0x0800870d
 80086fc:	08008721 	.word	0x08008721
 8008700:	0800873d 	.word	0x0800873d
 8008704:	0800873d 	.word	0x0800873d
 8008708:	0800873d 	.word	0x0800873d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800870c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008710:	3308      	adds	r3, #8
 8008712:	4618      	mov	r0, r3
 8008714:	f004 fe68 	bl	800d3e8 <RCCEx_PLL2_Config>
 8008718:	4603      	mov	r3, r0
 800871a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 800871e:	e00e      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008720:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008724:	3330      	adds	r3, #48	@ 0x30
 8008726:	4618      	mov	r0, r3
 8008728:	f004 fef6 	bl	800d518 <RCCEx_PLL3_Config>
 800872c:	4603      	mov	r3, r0
 800872e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8008732:	e004      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800873a:	e000      	b.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800873c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800873e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10c      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008746:	4ba9      	ldr	r3, [pc, #676]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008748:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800874c:	f023 0107 	bic.w	r1, r3, #7
 8008750:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008756:	4aa5      	ldr	r2, [pc, #660]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008758:	430b      	orrs	r3, r1
 800875a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800875e:	e003      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008760:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008764:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008768:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800876c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008770:	f002 0a02 	and.w	sl, r2, #2
 8008774:	f04f 0b00 	mov.w	fp, #0
 8008778:	ea5a 030b 	orrs.w	r3, sl, fp
 800877c:	f000 8088 	beq.w	8008890 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8008780:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008786:	2b28      	cmp	r3, #40	@ 0x28
 8008788:	d868      	bhi.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800878a:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	08008865 	.word	0x08008865
 8008794:	0800885d 	.word	0x0800885d
 8008798:	0800885d 	.word	0x0800885d
 800879c:	0800885d 	.word	0x0800885d
 80087a0:	0800885d 	.word	0x0800885d
 80087a4:	0800885d 	.word	0x0800885d
 80087a8:	0800885d 	.word	0x0800885d
 80087ac:	0800885d 	.word	0x0800885d
 80087b0:	08008835 	.word	0x08008835
 80087b4:	0800885d 	.word	0x0800885d
 80087b8:	0800885d 	.word	0x0800885d
 80087bc:	0800885d 	.word	0x0800885d
 80087c0:	0800885d 	.word	0x0800885d
 80087c4:	0800885d 	.word	0x0800885d
 80087c8:	0800885d 	.word	0x0800885d
 80087cc:	0800885d 	.word	0x0800885d
 80087d0:	08008849 	.word	0x08008849
 80087d4:	0800885d 	.word	0x0800885d
 80087d8:	0800885d 	.word	0x0800885d
 80087dc:	0800885d 	.word	0x0800885d
 80087e0:	0800885d 	.word	0x0800885d
 80087e4:	0800885d 	.word	0x0800885d
 80087e8:	0800885d 	.word	0x0800885d
 80087ec:	0800885d 	.word	0x0800885d
 80087f0:	08008865 	.word	0x08008865
 80087f4:	0800885d 	.word	0x0800885d
 80087f8:	0800885d 	.word	0x0800885d
 80087fc:	0800885d 	.word	0x0800885d
 8008800:	0800885d 	.word	0x0800885d
 8008804:	0800885d 	.word	0x0800885d
 8008808:	0800885d 	.word	0x0800885d
 800880c:	0800885d 	.word	0x0800885d
 8008810:	08008865 	.word	0x08008865
 8008814:	0800885d 	.word	0x0800885d
 8008818:	0800885d 	.word	0x0800885d
 800881c:	0800885d 	.word	0x0800885d
 8008820:	0800885d 	.word	0x0800885d
 8008824:	0800885d 	.word	0x0800885d
 8008828:	0800885d 	.word	0x0800885d
 800882c:	0800885d 	.word	0x0800885d
 8008830:	08008865 	.word	0x08008865
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008834:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008838:	3308      	adds	r3, #8
 800883a:	4618      	mov	r0, r3
 800883c:	f004 fdd4 	bl	800d3e8 <RCCEx_PLL2_Config>
 8008840:	4603      	mov	r3, r0
 8008842:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 8008846:	e00e      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008848:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800884c:	3330      	adds	r3, #48	@ 0x30
 800884e:	4618      	mov	r0, r3
 8008850:	f004 fe62 	bl	800d518 <RCCEx_PLL3_Config>
 8008854:	4603      	mov	r3, r0
 8008856:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 800885a:	e004      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008862:	e000      	b.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8008864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008866:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10c      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800886e:	4b5f      	ldr	r3, [pc, #380]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008870:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008874:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008878:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800887c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800887e:	4a5b      	ldr	r2, [pc, #364]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008880:	430b      	orrs	r3, r1
 8008882:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008886:	e003      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008888:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800888c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008890:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008898:	f002 0304 	and.w	r3, r2, #4
 800889c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80088a0:	2300      	movs	r3, #0
 80088a2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80088a6:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80088aa:	460b      	mov	r3, r1
 80088ac:	4313      	orrs	r3, r2
 80088ae:	d04e      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80088b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80088b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80088ba:	d02c      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80088bc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80088c0:	d825      	bhi.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80088c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088c6:	d028      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80088c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088cc:	d81f      	bhi.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80088ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80088d0:	d025      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x296>
 80088d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80088d4:	d81b      	bhi.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80088d6:	2b80      	cmp	r3, #128	@ 0x80
 80088d8:	d00f      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x272>
 80088da:	2b80      	cmp	r3, #128	@ 0x80
 80088dc:	d817      	bhi.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x286>
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d01f      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80088e2:	2b40      	cmp	r3, #64	@ 0x40
 80088e4:	d113      	bne.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80088e6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80088ea:	3308      	adds	r3, #8
 80088ec:	4618      	mov	r0, r3
 80088ee:	f004 fd7b 	bl	800d3e8 <RCCEx_PLL2_Config>
 80088f2:	4603      	mov	r3, r0
 80088f4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 80088f8:	e014      	b.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80088fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80088fe:	3330      	adds	r3, #48	@ 0x30
 8008900:	4618      	mov	r0, r3
 8008902:	f004 fe09 	bl	800d518 <RCCEx_PLL3_Config>
 8008906:	4603      	mov	r3, r0
 8008908:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 800890c:	e00a      	b.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008914:	e006      	b.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8008916:	bf00      	nop
 8008918:	e004      	b.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800891a:	bf00      	nop
 800891c:	e002      	b.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800891e:	bf00      	nop
 8008920:	e000      	b.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8008922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008924:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10c      	bne.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800892c:	4b2f      	ldr	r3, [pc, #188]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800892e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008932:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008936:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800893a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800893c:	4a2b      	ldr	r2, [pc, #172]	@ (80089ec <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800893e:	430b      	orrs	r3, r1
 8008940:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008944:	e003      	b.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008946:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800894a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800894e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f002 0308 	and.w	r3, r2, #8
 800895a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800895e:	2300      	movs	r3, #0
 8008960:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8008964:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8008968:	460b      	mov	r3, r1
 800896a:	4313      	orrs	r3, r2
 800896c:	d056      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800896e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008972:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008974:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008978:	d031      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x356>
 800897a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800897e:	d82a      	bhi.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008984:	d02d      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008986:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800898a:	d824      	bhi.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800898c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008990:	d029      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8008992:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008996:	d81e      	bhi.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800899c:	d011      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800899e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a2:	d818      	bhi.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d023      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80089a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ac:	d113      	bne.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80089ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80089b2:	3308      	adds	r3, #8
 80089b4:	4618      	mov	r0, r3
 80089b6:	f004 fd17 	bl	800d3e8 <RCCEx_PLL2_Config>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 80089c0:	e017      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80089c2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80089c6:	3330      	adds	r3, #48	@ 0x30
 80089c8:	4618      	mov	r0, r3
 80089ca:	f004 fda5 	bl	800d518 <RCCEx_PLL3_Config>
 80089ce:	4603      	mov	r3, r0
 80089d0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 80089d4:	e00d      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80089dc:	e009      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80089de:	bf00      	nop
 80089e0:	e007      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80089e2:	bf00      	nop
 80089e4:	e005      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80089e6:	bf00      	nop
 80089e8:	e003      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80089ea:	bf00      	nop
 80089ec:	44020c00 	.word	0x44020c00
        break;
 80089f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089f2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10c      	bne.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80089fa:	4bbb      	ldr	r3, [pc, #748]	@ (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80089fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a00:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008a04:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a0a:	4ab7      	ldr	r2, [pc, #732]	@ (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008a0c:	430b      	orrs	r3, r1
 8008a0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008a12:	e003      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a14:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008a18:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008a1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	f002 0310 	and.w	r3, r2, #16
 8008a28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8008a32:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8008a36:	460b      	mov	r3, r1
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	d053      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8008a3c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a42:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008a46:	d031      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x424>
 8008a48:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008a4c:	d82a      	bhi.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008a4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a52:	d02d      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008a54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a58:	d824      	bhi.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008a5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a5e:	d029      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8008a60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a64:	d81e      	bhi.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a6a:	d011      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a70:	d818      	bhi.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d020      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8008a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a7a:	d113      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a7c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a80:	3308      	adds	r3, #8
 8008a82:	4618      	mov	r0, r3
 8008a84:	f004 fcb0 	bl	800d3e8 <RCCEx_PLL2_Config>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 8008a8e:	e014      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a90:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008a94:	3330      	adds	r3, #48	@ 0x30
 8008a96:	4618      	mov	r0, r3
 8008a98:	f004 fd3e 	bl	800d518 <RCCEx_PLL3_Config>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 8008aa2:	e00a      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008aaa:	e006      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008aac:	bf00      	nop
 8008aae:	e004      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008ab0:	bf00      	nop
 8008ab2:	e002      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008ab4:	bf00      	nop
 8008ab6:	e000      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8008ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aba:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10c      	bne.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008ac2:	4b89      	ldr	r3, [pc, #548]	@ (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008ac4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008ac8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008acc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ad2:	4a85      	ldr	r2, [pc, #532]	@ (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008ad4:	430b      	orrs	r3, r1
 8008ad6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008ada:	e003      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008adc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008ae0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008ae4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f002 0320 	and.w	r3, r2, #32
 8008af0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8008af4:	2300      	movs	r3, #0
 8008af6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8008afa:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8008afe:	460b      	mov	r3, r1
 8008b00:	4313      	orrs	r3, r2
 8008b02:	d053      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8008b04:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b0a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008b0e:	d031      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8008b10:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008b14:	d82a      	bhi.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008b16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b1a:	d02d      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008b1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b20:	d824      	bhi.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008b22:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008b26:	d029      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8008b28:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008b2c:	d81e      	bhi.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008b2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b32:	d011      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b38:	d818      	bhi.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d020      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8008b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b42:	d113      	bne.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b44:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008b48:	3308      	adds	r3, #8
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f004 fc4c 	bl	800d3e8 <RCCEx_PLL2_Config>
 8008b50:	4603      	mov	r3, r0
 8008b52:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 8008b56:	e014      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008b58:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008b5c:	3330      	adds	r3, #48	@ 0x30
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f004 fcda 	bl	800d518 <RCCEx_PLL3_Config>
 8008b64:	4603      	mov	r3, r0
 8008b66:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 8008b6a:	e00a      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008b72:	e006      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008b74:	bf00      	nop
 8008b76:	e004      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008b78:	bf00      	nop
 8008b7a:	e002      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008b7c:	bf00      	nop
 8008b7e:	e000      	b.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8008b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b82:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10c      	bne.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008b8a:	4b57      	ldr	r3, [pc, #348]	@ (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008b8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008b90:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8008b94:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b9a:	4a53      	ldr	r2, [pc, #332]	@ (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008b9c:	430b      	orrs	r3, r1
 8008b9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008ba2:	e003      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008ba8:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008bac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008bb8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8008bc2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	d053      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8008bcc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bd2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008bd6:	d031      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8008bd8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008bdc:	d82a      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008be2:	d02d      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8008be4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008be8:	d824      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008bea:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008bee:	d029      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008bf0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008bf4:	d81e      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008bf6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008bfa:	d011      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8008bfc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008c00:	d818      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d020      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008c06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c0a:	d113      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008c0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008c10:	3308      	adds	r3, #8
 8008c12:	4618      	mov	r0, r3
 8008c14:	f004 fbe8 	bl	800d3e8 <RCCEx_PLL2_Config>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 8008c1e:	e014      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008c20:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008c24:	3330      	adds	r3, #48	@ 0x30
 8008c26:	4618      	mov	r0, r3
 8008c28:	f004 fc76 	bl	800d518 <RCCEx_PLL3_Config>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 8008c32:	e00a      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008c3a:	e006      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008c3c:	bf00      	nop
 8008c3e:	e004      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008c40:	bf00      	nop
 8008c42:	e002      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008c44:	bf00      	nop
 8008c46:	e000      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8008c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c4a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10c      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8008c52:	4b25      	ldr	r3, [pc, #148]	@ (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008c54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008c58:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8008c5c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c62:	4a21      	ldr	r2, [pc, #132]	@ (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8008c64:	430b      	orrs	r3, r1
 8008c66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008c6a:	e003      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008c70:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008c74:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008c80:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8008c84:	2300      	movs	r3, #0
 8008c86:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8008c8a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4313      	orrs	r3, r2
 8008c92:	d055      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8008c94:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008c98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c9a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008c9e:	d033      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8008ca0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008ca4:	d82c      	bhi.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008ca6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008caa:	d02f      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8008cac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008cb0:	d826      	bhi.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008cb2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008cb6:	d02b      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8008cb8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008cbc:	d820      	bhi.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008cbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cc2:	d013      	beq.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008cc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cc8:	d81a      	bhi.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d022      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8008cce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cd2:	d115      	bne.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008cd4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008cd8:	3308      	adds	r3, #8
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f004 fb84 	bl	800d3e8 <RCCEx_PLL2_Config>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 8008ce6:	e016      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8008ce8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008cec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008cf0:	3330      	adds	r3, #48	@ 0x30
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f004 fc10 	bl	800d518 <RCCEx_PLL3_Config>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 8008cfe:	e00a      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008d06:	e006      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008d08:	bf00      	nop
 8008d0a:	e004      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008d0c:	bf00      	nop
 8008d0e:	e002      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008d10:	bf00      	nop
 8008d12:	e000      	b.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8008d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d16:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10c      	bne.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8008d1e:	4bbb      	ldr	r3, [pc, #748]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008d24:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008d28:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008d2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d2e:	4ab7      	ldr	r2, [pc, #732]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008d30:	430b      	orrs	r3, r1
 8008d32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008d36:	e003      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d38:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008d3c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8008d40:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8008d4c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008d50:	2300      	movs	r3, #0
 8008d52:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008d56:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	d053      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8008d60:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008d64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d66:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008d6a:	d031      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8008d6c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008d70:	d82a      	bhi.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008d72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d76:	d02d      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8008d78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d7c:	d824      	bhi.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008d7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d82:	d029      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8008d84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d88:	d81e      	bhi.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008d8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d8e:	d011      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8008d90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d94:	d818      	bhi.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d020      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x754>
 8008d9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d9e:	d113      	bne.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008da0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008da4:	3308      	adds	r3, #8
 8008da6:	4618      	mov	r0, r3
 8008da8:	f004 fb1e 	bl	800d3e8 <RCCEx_PLL2_Config>
 8008dac:	4603      	mov	r3, r0
 8008dae:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 8008db2:	e014      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008db4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008db8:	3330      	adds	r3, #48	@ 0x30
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f004 fbac 	bl	800d518 <RCCEx_PLL3_Config>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 8008dc6:	e00a      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008dce:	e006      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008dd0:	bf00      	nop
 8008dd2:	e004      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008dd4:	bf00      	nop
 8008dd6:	e002      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008dd8:	bf00      	nop
 8008dda:	e000      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8008ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dde:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10c      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8008de6:	4b89      	ldr	r3, [pc, #548]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008dec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008df0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008df4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008df6:	4a85      	ldr	r2, [pc, #532]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008dfe:	e003      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e00:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008e04:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8008e08:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e10:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8008e14:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008e1e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008e22:	460b      	mov	r3, r1
 8008e24:	4313      	orrs	r3, r2
 8008e26:	d055      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8008e28:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e30:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008e34:	d031      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x812>
 8008e36:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008e3a:	d82a      	bhi.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008e3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e40:	d02d      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8008e42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e46:	d824      	bhi.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008e48:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008e4c:	d029      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8008e4e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008e52:	d81e      	bhi.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008e54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e58:	d011      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8008e5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e5e:	d818      	bhi.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d020      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8008e64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e68:	d113      	bne.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e6a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008e6e:	3308      	adds	r3, #8
 8008e70:	4618      	mov	r0, r3
 8008e72:	f004 fab9 	bl	800d3e8 <RCCEx_PLL2_Config>
 8008e76:	4603      	mov	r3, r0
 8008e78:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 8008e7c:	e014      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008e7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008e82:	3330      	adds	r3, #48	@ 0x30
 8008e84:	4618      	mov	r0, r3
 8008e86:	f004 fb47 	bl	800d518 <RCCEx_PLL3_Config>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 8008e90:	e00a      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008e98:	e006      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008e9a:	bf00      	nop
 8008e9c:	e004      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008e9e:	bf00      	nop
 8008ea0:	e002      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008ea2:	bf00      	nop
 8008ea4:	e000      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8008ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10d      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8008eb0:	4b56      	ldr	r3, [pc, #344]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008eb6:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8008eba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec2:	4a52      	ldr	r2, [pc, #328]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008ec4:	430b      	orrs	r3, r1
 8008ec6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8008eca:	e003      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ecc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008ed0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8008ed4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008eea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	d044      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8008ef4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008efc:	2b05      	cmp	r3, #5
 8008efe:	d823      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8008f00:	a201      	add	r2, pc, #4	@ (adr r2, 8008f08 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f06:	bf00      	nop
 8008f08:	08008f51 	.word	0x08008f51
 8008f0c:	08008f21 	.word	0x08008f21
 8008f10:	08008f35 	.word	0x08008f35
 8008f14:	08008f51 	.word	0x08008f51
 8008f18:	08008f51 	.word	0x08008f51
 8008f1c:	08008f51 	.word	0x08008f51
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f20:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008f24:	3308      	adds	r3, #8
 8008f26:	4618      	mov	r0, r3
 8008f28:	f004 fa5e 	bl	800d3e8 <RCCEx_PLL2_Config>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 8008f32:	e00e      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008f34:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008f38:	3330      	adds	r3, #48	@ 0x30
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f004 faec 	bl	800d518 <RCCEx_PLL3_Config>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 8008f46:	e004      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008f4e:	e000      	b.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8008f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f52:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10d      	bne.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8008f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008f5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008f60:	f023 0107 	bic.w	r1, r3, #7
 8008f64:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f6c:	4a27      	ldr	r2, [pc, #156]	@ (800900c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8008f6e:	430b      	orrs	r3, r1
 8008f70:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8008f74:	e003      	b.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f76:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8008f7a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8008f7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f86:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008f8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008f8e:	2300      	movs	r3, #0
 8008f90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008f94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	d04f      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8008f9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fa6:	2b50      	cmp	r3, #80	@ 0x50
 8008fa8:	d029      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008faa:	2b50      	cmp	r3, #80	@ 0x50
 8008fac:	d823      	bhi.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008fae:	2b40      	cmp	r3, #64	@ 0x40
 8008fb0:	d027      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8008fb2:	2b40      	cmp	r3, #64	@ 0x40
 8008fb4:	d81f      	bhi.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008fb6:	2b30      	cmp	r3, #48	@ 0x30
 8008fb8:	d025      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8008fba:	2b30      	cmp	r3, #48	@ 0x30
 8008fbc:	d81b      	bhi.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008fbe:	2b20      	cmp	r3, #32
 8008fc0:	d00f      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8008fc2:	2b20      	cmp	r3, #32
 8008fc4:	d817      	bhi.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d022      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008fca:	2b10      	cmp	r3, #16
 8008fcc:	d113      	bne.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008fce:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008fd2:	3308      	adds	r3, #8
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f004 fa07 	bl	800d3e8 <RCCEx_PLL2_Config>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 8008fe0:	e017      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008fe2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8008fe6:	3330      	adds	r3, #48	@ 0x30
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f004 fa95 	bl	800d518 <RCCEx_PLL3_Config>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 8008ff4:	e00d      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8008ffc:	e009      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8008ffe:	bf00      	nop
 8009000:	e007      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8009002:	bf00      	nop
 8009004:	e005      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8009006:	bf00      	nop
 8009008:	e003      	b.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800900a:	bf00      	nop
 800900c:	44020c00 	.word	0x44020c00
        break;
 8009010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009012:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10d      	bne.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800901a:	4baf      	ldr	r3, [pc, #700]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800901c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009020:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8009024:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800902c:	4aaa      	ldr	r2, [pc, #680]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800902e:	430b      	orrs	r3, r1
 8009030:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8009034:	e003      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009036:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800903a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800903e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800904a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800904e:	2300      	movs	r3, #0
 8009050:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009054:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009058:	460b      	mov	r3, r1
 800905a:	4313      	orrs	r3, r2
 800905c:	d055      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800905e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009062:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009066:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800906a:	d031      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800906c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009070:	d82a      	bhi.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8009072:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009076:	d02d      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8009078:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800907c:	d824      	bhi.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800907e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009082:	d029      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8009084:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009088:	d81e      	bhi.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800908a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800908e:	d011      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8009090:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009094:	d818      	bhi.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8009096:	2b00      	cmp	r3, #0
 8009098:	d020      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800909a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800909e:	d113      	bne.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80090a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80090a4:	3308      	adds	r3, #8
 80090a6:	4618      	mov	r0, r3
 80090a8:	f004 f99e 	bl	800d3e8 <RCCEx_PLL2_Config>
 80090ac:	4603      	mov	r3, r0
 80090ae:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80090b2:	e014      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80090b8:	3330      	adds	r3, #48	@ 0x30
 80090ba:	4618      	mov	r0, r3
 80090bc:	f004 fa2c 	bl	800d518 <RCCEx_PLL3_Config>
 80090c0:	4603      	mov	r3, r0
 80090c2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80090c6:	e00a      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80090ce:	e006      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80090d0:	bf00      	nop
 80090d2:	e004      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80090d4:	bf00      	nop
 80090d6:	e002      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80090d8:	bf00      	nop
 80090da:	e000      	b.n	80090de <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80090dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090de:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10d      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80090e6:	4b7c      	ldr	r3, [pc, #496]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80090e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80090ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80090f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80090f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090f8:	4a77      	ldr	r2, [pc, #476]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80090fa:	430b      	orrs	r3, r1
 80090fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009100:	e003      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009102:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009106:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800910a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009116:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800911a:	2300      	movs	r3, #0
 800911c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009120:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009124:	460b      	mov	r3, r1
 8009126:	4313      	orrs	r3, r2
 8009128:	d03d      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800912a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800912e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009132:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009136:	d01b      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8009138:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800913c:	d814      	bhi.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800913e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009142:	d017      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8009144:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009148:	d80e      	bhi.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d014      	beq.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800914e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009152:	d109      	bne.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009154:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009158:	3330      	adds	r3, #48	@ 0x30
 800915a:	4618      	mov	r0, r3
 800915c:	f004 f9dc 	bl	800d518 <RCCEx_PLL3_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8009166:	e008      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800916e:	e004      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8009170:	bf00      	nop
 8009172:	e002      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8009174:	bf00      	nop
 8009176:	e000      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8009178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800917a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10d      	bne.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8009182:	4b55      	ldr	r3, [pc, #340]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009184:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009188:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800918c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009194:	4a50      	ldr	r2, [pc, #320]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009196:	430b      	orrs	r3, r1
 8009198:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800919c:	e003      	b.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800919e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80091a2:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80091a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ae:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80091b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091b6:	2300      	movs	r3, #0
 80091b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80091bc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80091c0:	460b      	mov	r3, r1
 80091c2:	4313      	orrs	r3, r2
 80091c4:	d03d      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80091c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80091ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80091d2:	d01b      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80091d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80091d8:	d814      	bhi.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80091da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80091de:	d017      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80091e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80091e4:	d80e      	bhi.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d014      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80091ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091ee:	d109      	bne.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80091f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80091f4:	3330      	adds	r3, #48	@ 0x30
 80091f6:	4618      	mov	r0, r3
 80091f8:	f004 f98e 	bl	800d518 <RCCEx_PLL3_Config>
 80091fc:	4603      	mov	r3, r0
 80091fe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8009202:	e008      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800920a:	e004      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800920c:	bf00      	nop
 800920e:	e002      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8009210:	bf00      	nop
 8009212:	e000      	b.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8009214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009216:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10d      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800921e:	4b2e      	ldr	r3, [pc, #184]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009220:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009224:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8009228:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800922c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009230:	4a29      	ldr	r2, [pc, #164]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8009232:	430b      	orrs	r3, r1
 8009234:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009238:	e003      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800923a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800923e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009242:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800924e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009252:	2300      	movs	r3, #0
 8009254:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009258:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800925c:	460b      	mov	r3, r1
 800925e:	4313      	orrs	r3, r2
 8009260:	d040      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8009262:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800926a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800926e:	d01b      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8009270:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009274:	d814      	bhi.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8009276:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800927a:	d017      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800927c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009280:	d80e      	bhi.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d014      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800928a:	d109      	bne.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800928c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009290:	3330      	adds	r3, #48	@ 0x30
 8009292:	4618      	mov	r0, r3
 8009294:	f004 f940 	bl	800d518 <RCCEx_PLL3_Config>
 8009298:	4603      	mov	r3, r0
 800929a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* I2C3 clock source config set later after clock selection check */
        break;
 800929e:	e008      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80092a6:	e004      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80092a8:	bf00      	nop
 80092aa:	e002      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80092ac:	bf00      	nop
 80092ae:	e000      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80092b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092b2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d110      	bne.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80092ba:	4b07      	ldr	r3, [pc, #28]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80092bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80092c0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80092c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80092c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092cc:	4a02      	ldr	r2, [pc, #8]	@ (80092d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80092ce:	430b      	orrs	r3, r1
 80092d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80092d4:	e006      	b.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80092d6:	bf00      	nop
 80092d8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092dc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80092e0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80092e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80092e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ec:	2100      	movs	r1, #0
 80092ee:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80092f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80092f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80092fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80092fe:	460b      	mov	r3, r1
 8009300:	4313      	orrs	r3, r2
 8009302:	d03d      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8009304:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009308:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800930c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009310:	d01b      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8009312:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009316:	d814      	bhi.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8009318:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800931c:	d017      	beq.n	800934e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800931e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009322:	d80e      	bhi.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8009324:	2b00      	cmp	r3, #0
 8009326:	d014      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8009328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800932c:	d109      	bne.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800932e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009332:	3330      	adds	r3, #48	@ 0x30
 8009334:	4618      	mov	r0, r3
 8009336:	f004 f8ef 	bl	800d518 <RCCEx_PLL3_Config>
 800933a:	4603      	mov	r3, r0
 800933c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* I2C4 clock source config set later after clock selection check */
        break;
 8009340:	e008      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009348:	e004      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800934a:	bf00      	nop
 800934c:	e002      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800934e:	bf00      	nop
 8009350:	e000      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8009352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009354:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10d      	bne.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800935c:	4bbe      	ldr	r3, [pc, #760]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800935e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009362:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009366:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800936a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800936e:	4aba      	ldr	r2, [pc, #744]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009370:	430b      	orrs	r3, r1
 8009372:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009376:	e003      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009378:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800937c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8009380:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800938c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009390:	2300      	movs	r3, #0
 8009392:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009396:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800939a:	460b      	mov	r3, r1
 800939c:	4313      	orrs	r3, r2
 800939e:	d035      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80093a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80093a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80093a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093ac:	d015      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80093ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093b2:	d80e      	bhi.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d012      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80093b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093bc:	d109      	bne.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80093be:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80093c2:	3330      	adds	r3, #48	@ 0x30
 80093c4:	4618      	mov	r0, r3
 80093c6:	f004 f8a7 	bl	800d518 <RCCEx_PLL3_Config>
 80093ca:	4603      	mov	r3, r0
 80093cc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80093d0:	e006      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80093d8:	e002      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80093da:	bf00      	nop
 80093dc:	e000      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80093de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093e0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10d      	bne.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80093e8:	4b9b      	ldr	r3, [pc, #620]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80093ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80093ee:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80093f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80093f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80093fa:	4a97      	ldr	r2, [pc, #604]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80093fc:	430b      	orrs	r3, r1
 80093fe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009402:	e003      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009404:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009408:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800940c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	2100      	movs	r1, #0
 8009416:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 800941a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800941e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009422:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009426:	460b      	mov	r3, r1
 8009428:	4313      	orrs	r3, r2
 800942a:	d00e      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800942c:	4b8a      	ldr	r3, [pc, #552]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	4a89      	ldr	r2, [pc, #548]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009432:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009436:	61d3      	str	r3, [r2, #28]
 8009438:	4b87      	ldr	r3, [pc, #540]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800943a:	69d9      	ldr	r1, [r3, #28]
 800943c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009440:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009444:	4a84      	ldr	r2, [pc, #528]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009446:	430b      	orrs	r3, r1
 8009448:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800944a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009456:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800945a:	2300      	movs	r3, #0
 800945c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009460:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009464:	460b      	mov	r3, r1
 8009466:	4313      	orrs	r3, r2
 8009468:	d055      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800946a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800946e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009472:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009476:	d031      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8009478:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800947c:	d82a      	bhi.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800947e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009482:	d02d      	beq.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8009484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009488:	d824      	bhi.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800948a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800948e:	d029      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8009490:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009494:	d81e      	bhi.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8009496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800949a:	d011      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 800949c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094a0:	d818      	bhi.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d020      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80094a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094aa:	d113      	bne.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80094ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80094b0:	3308      	adds	r3, #8
 80094b2:	4618      	mov	r0, r3
 80094b4:	f003 ff98 	bl	800d3e8 <RCCEx_PLL2_Config>
 80094b8:	4603      	mov	r3, r0
 80094ba:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80094be:	e014      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80094c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80094c4:	3330      	adds	r3, #48	@ 0x30
 80094c6:	4618      	mov	r0, r3
 80094c8:	f004 f826 	bl	800d518 <RCCEx_PLL3_Config>
 80094cc:	4603      	mov	r3, r0
 80094ce:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80094d2:	e00a      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80094da:	e006      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80094dc:	bf00      	nop
 80094de:	e004      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80094e0:	bf00      	nop
 80094e2:	e002      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80094e4:	bf00      	nop
 80094e6:	e000      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80094e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ea:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10d      	bne.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80094f2:	4b59      	ldr	r3, [pc, #356]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80094f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80094f8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80094fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009500:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009504:	4a54      	ldr	r2, [pc, #336]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8009506:	430b      	orrs	r3, r1
 8009508:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800950c:	e003      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009512:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009516:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009522:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009526:	2300      	movs	r3, #0
 8009528:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800952c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009530:	460b      	mov	r3, r1
 8009532:	4313      	orrs	r3, r2
 8009534:	d055      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8009536:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800953a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800953e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009542:	d031      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8009544:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009548:	d82a      	bhi.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800954a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800954e:	d02d      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8009550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009554:	d824      	bhi.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8009556:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800955a:	d029      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800955c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009560:	d81e      	bhi.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8009562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009566:	d011      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8009568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800956c:	d818      	bhi.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800956e:	2b00      	cmp	r3, #0
 8009570:	d020      	beq.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8009572:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009576:	d113      	bne.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009578:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800957c:	3308      	adds	r3, #8
 800957e:	4618      	mov	r0, r3
 8009580:	f003 ff32 	bl	800d3e8 <RCCEx_PLL2_Config>
 8009584:	4603      	mov	r3, r0
 8009586:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800958a:	e014      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800958c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009590:	3330      	adds	r3, #48	@ 0x30
 8009592:	4618      	mov	r0, r3
 8009594:	f003 ffc0 	bl	800d518 <RCCEx_PLL3_Config>
 8009598:	4603      	mov	r3, r0
 800959a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800959e:	e00a      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80095a6:	e006      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80095a8:	bf00      	nop
 80095aa:	e004      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80095ac:	bf00      	nop
 80095ae:	e002      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80095b0:	bf00      	nop
 80095b2:	e000      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80095b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095b6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10d      	bne.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80095be:	4b26      	ldr	r3, [pc, #152]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80095c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80095c4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80095c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80095cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80095d0:	4a21      	ldr	r2, [pc, #132]	@ (8009658 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80095d2:	430b      	orrs	r3, r1
 80095d4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80095d8:	e003      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095da:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80095de:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80095e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80095e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ea:	2100      	movs	r1, #0
 80095ec:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80095f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80095fc:	460b      	mov	r3, r1
 80095fe:	4313      	orrs	r3, r2
 8009600:	d057      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8009602:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009606:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800960a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800960e:	d033      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8009610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009614:	d82c      	bhi.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009616:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800961a:	d02f      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800961c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009620:	d826      	bhi.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8009622:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009626:	d02b      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8009628:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800962c:	d820      	bhi.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800962e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009632:	d013      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009634:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009638:	d81a      	bhi.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800963a:	2b00      	cmp	r3, #0
 800963c:	d022      	beq.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800963e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009642:	d115      	bne.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009644:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009648:	3308      	adds	r3, #8
 800964a:	4618      	mov	r0, r3
 800964c:	f003 fecc 	bl	800d3e8 <RCCEx_PLL2_Config>
 8009650:	4603      	mov	r3, r0
 8009652:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8009656:	e016      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8009658:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800965c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009660:	3330      	adds	r3, #48	@ 0x30
 8009662:	4618      	mov	r0, r3
 8009664:	f003 ff58 	bl	800d518 <RCCEx_PLL3_Config>
 8009668:	4603      	mov	r3, r0
 800966a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800966e:	e00a      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009676:	e006      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009678:	bf00      	nop
 800967a:	e004      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800967c:	bf00      	nop
 800967e:	e002      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009680:	bf00      	nop
 8009682:	e000      	b.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8009684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009686:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10d      	bne.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800968e:	4bbb      	ldr	r3, [pc, #748]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009690:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009694:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009698:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800969c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80096a0:	4ab6      	ldr	r2, [pc, #728]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80096a2:	430b      	orrs	r3, r1
 80096a4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80096a8:	e003      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096aa:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80096ae:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80096b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	2100      	movs	r1, #0
 80096bc:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80096c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80096c8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80096cc:	460b      	mov	r3, r1
 80096ce:	4313      	orrs	r3, r2
 80096d0:	d055      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80096d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80096d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80096da:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80096de:	d031      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80096e0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80096e4:	d82a      	bhi.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80096e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096ea:	d02d      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80096ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80096f0:	d824      	bhi.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80096f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80096f6:	d029      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80096f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80096fc:	d81e      	bhi.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80096fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009702:	d011      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8009704:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009708:	d818      	bhi.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d020      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800970e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009712:	d113      	bne.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009714:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009718:	3308      	adds	r3, #8
 800971a:	4618      	mov	r0, r3
 800971c:	f003 fe64 	bl	800d3e8 <RCCEx_PLL2_Config>
 8009720:	4603      	mov	r3, r0
 8009722:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8009726:	e014      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009728:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800972c:	3330      	adds	r3, #48	@ 0x30
 800972e:	4618      	mov	r0, r3
 8009730:	f003 fef2 	bl	800d518 <RCCEx_PLL3_Config>
 8009734:	4603      	mov	r3, r0
 8009736:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800973a:	e00a      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009742:	e006      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009744:	bf00      	nop
 8009746:	e004      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009748:	bf00      	nop
 800974a:	e002      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800974c:	bf00      	nop
 800974e:	e000      	b.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8009750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009752:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10d      	bne.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800975a:	4b88      	ldr	r3, [pc, #544]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800975c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009760:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8009764:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009768:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800976c:	4a83      	ldr	r2, [pc, #524]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800976e:	430b      	orrs	r3, r1
 8009770:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8009774:	e003      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009776:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800977a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800977e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009786:	2100      	movs	r1, #0
 8009788:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800978c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009790:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009794:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009798:	460b      	mov	r3, r1
 800979a:	4313      	orrs	r3, r2
 800979c:	d055      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800979e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80097a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097a6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80097aa:	d031      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80097ac:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80097b0:	d82a      	bhi.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80097b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097b6:	d02d      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80097b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097bc:	d824      	bhi.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80097be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80097c2:	d029      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80097c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80097c8:	d81e      	bhi.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80097ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097ce:	d011      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80097d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097d4:	d818      	bhi.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d020      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80097da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097de:	d113      	bne.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80097e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80097e4:	3308      	adds	r3, #8
 80097e6:	4618      	mov	r0, r3
 80097e8:	f003 fdfe 	bl	800d3e8 <RCCEx_PLL2_Config>
 80097ec:	4603      	mov	r3, r0
 80097ee:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80097f2:	e014      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80097f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80097f8:	3330      	adds	r3, #48	@ 0x30
 80097fa:	4618      	mov	r0, r3
 80097fc:	f003 fe8c 	bl	800d518 <RCCEx_PLL3_Config>
 8009800:	4603      	mov	r3, r0
 8009802:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8009806:	e00a      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800980e:	e006      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8009810:	bf00      	nop
 8009812:	e004      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8009814:	bf00      	nop
 8009816:	e002      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8009818:	bf00      	nop
 800981a:	e000      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800981c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800981e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10d      	bne.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8009826:	4b55      	ldr	r3, [pc, #340]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009828:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800982c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009830:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009834:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009838:	4a50      	ldr	r2, [pc, #320]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800983a:	430b      	orrs	r3, r1
 800983c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8009840:	e003      	b.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009842:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009846:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800984a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	2100      	movs	r1, #0
 8009854:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8009858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800985c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009860:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009864:	460b      	mov	r3, r1
 8009866:	4313      	orrs	r3, r2
 8009868:	d055      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800986a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800986e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009876:	d031      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8009878:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800987c:	d82a      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800987e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009882:	d02d      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8009884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009888:	d824      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800988a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800988e:	d029      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8009890:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009894:	d81e      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8009896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800989a:	d011      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800989c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098a0:	d818      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d020      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80098a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098aa:	d113      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80098ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80098b0:	3308      	adds	r3, #8
 80098b2:	4618      	mov	r0, r3
 80098b4:	f003 fd98 	bl	800d3e8 <RCCEx_PLL2_Config>
 80098b8:	4603      	mov	r3, r0
 80098ba:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80098be:	e014      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80098c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80098c4:	3330      	adds	r3, #48	@ 0x30
 80098c6:	4618      	mov	r0, r3
 80098c8:	f003 fe26 	bl	800d518 <RCCEx_PLL3_Config>
 80098cc:	4603      	mov	r3, r0
 80098ce:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80098d2:	e00a      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80098da:	e006      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80098dc:	bf00      	nop
 80098de:	e004      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80098e0:	bf00      	nop
 80098e2:	e002      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80098e4:	bf00      	nop
 80098e6:	e000      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80098e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ea:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10d      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80098f2:	4b22      	ldr	r3, [pc, #136]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80098f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80098f8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80098fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009900:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009904:	4a1d      	ldr	r2, [pc, #116]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009906:	430b      	orrs	r3, r1
 8009908:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800990c:	e003      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800990e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009912:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009916:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009922:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009926:	2300      	movs	r3, #0
 8009928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800992c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009930:	460b      	mov	r3, r1
 8009932:	4313      	orrs	r3, r2
 8009934:	d055      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8009936:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800993a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800993e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009942:	d035      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8009944:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009948:	d82e      	bhi.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800994a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800994e:	d031      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8009950:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009954:	d828      	bhi.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8009956:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800995a:	d01b      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800995c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009960:	d822      	bhi.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8009962:	2b00      	cmp	r3, #0
 8009964:	d003      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8009966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800996a:	d009      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800996c:	e01c      	b.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800996e:	4b03      	ldr	r3, [pc, #12]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009972:	4a02      	ldr	r2, [pc, #8]	@ (800997c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8009974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009978:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800997a:	e01c      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800997c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009980:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009984:	3308      	adds	r3, #8
 8009986:	4618      	mov	r0, r3
 8009988:	f003 fd2e 	bl	800d3e8 <RCCEx_PLL2_Config>
 800998c:	4603      	mov	r3, r0
 800998e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009992:	e010      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009994:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009998:	3330      	adds	r3, #48	@ 0x30
 800999a:	4618      	mov	r0, r3
 800999c:	f003 fdbc 	bl	800d518 <RCCEx_PLL3_Config>
 80099a0:	4603      	mov	r3, r0
 80099a2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 80099a6:	e006      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80099ae:	e002      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80099b0:	bf00      	nop
 80099b2:	e000      	b.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80099b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099b6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10d      	bne.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80099be:	4bc2      	ldr	r3, [pc, #776]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80099c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80099c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80099cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80099d0:	4abd      	ldr	r2, [pc, #756]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80099d2:	430b      	orrs	r3, r1
 80099d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80099d8:	e003      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099da:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80099de:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80099e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80099ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099f0:	2300      	movs	r3, #0
 80099f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80099f8:	460b      	mov	r3, r1
 80099fa:	4313      	orrs	r3, r2
 80099fc:	d051      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x141a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80099fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009a02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009a06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a0a:	d033      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 8009a0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a10:	d82c      	bhi.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8009a12:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009a16:	d02d      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 8009a18:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009a1c:	d826      	bhi.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8009a1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a22:	d019      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x13d0>
 8009a24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a28:	d820      	bhi.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x13ae>
 8009a2e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009a32:	d007      	beq.n	8009a44 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
 8009a34:	e01a      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x13e4>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a36:	4ba4      	ldr	r3, [pc, #656]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3a:	4aa3      	ldr	r2, [pc, #652]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a40:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009a42:	e018      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009a44:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009a48:	3308      	adds	r3, #8
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f003 fccc 	bl	800d3e8 <RCCEx_PLL2_Config>
 8009a50:	4603      	mov	r3, r0
 8009a52:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009a56:	e00e      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009a58:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009a5c:	3330      	adds	r3, #48	@ 0x30
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f003 fd5a 	bl	800d518 <RCCEx_PLL3_Config>
 8009a64:	4603      	mov	r3, r0
 8009a66:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009a6a:	e004      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x13ee>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009a72:	e000      	b.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x13ee>
        break;
 8009a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a76:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10d      	bne.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x1412>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8009a7e:	4b92      	ldr	r3, [pc, #584]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a84:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8009a88:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009a8c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009a90:	4a8d      	ldr	r2, [pc, #564]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009a92:	430b      	orrs	r3, r1
 8009a94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009a98:	e003      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009a9e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8009aa2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009aae:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	677b      	str	r3, [r7, #116]	@ 0x74
 8009ab4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4313      	orrs	r3, r2
 8009abc:	d032      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x149c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009abe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009ac2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8009ac6:	2b05      	cmp	r3, #5
 8009ac8:	d80f      	bhi.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x1462>
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d211      	bcs.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x146a>
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d911      	bls.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d109      	bne.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x1462>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009ad6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009ada:	3308      	adds	r3, #8
 8009adc:	4618      	mov	r0, r3
 8009ade:	f003 fc83 	bl	800d3e8 <RCCEx_PLL2_Config>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009ae8:	e006      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009af0:	e002      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 8009af2:	bf00      	nop
 8009af4:	e000      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 8009af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009af8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10d      	bne.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1494>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009b00:	4b71      	ldr	r3, [pc, #452]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b06:	f023 0107 	bic.w	r1, r3, #7
 8009b0a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009b0e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8009b12:	4a6d      	ldr	r2, [pc, #436]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009b14:	430b      	orrs	r3, r1
 8009b16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009b1a:	e003      	b.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x149c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009b20:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8009b24:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	66b9      	str	r1, [r7, #104]	@ 0x68
 8009b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b36:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009b3a:	460b      	mov	r3, r1
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	d024      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x1502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8009b40:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009b44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d005      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x14d0>
 8009b4c:	2b08      	cmp	r3, #8
 8009b4e:	d005      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009b56:	e002      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 8009b58:	bf00      	nop
 8009b5a:	e000      	b.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 8009b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b5e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10d      	bne.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x14fa>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8009b66:	4b58      	ldr	r3, [pc, #352]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b6c:	f023 0108 	bic.w	r1, r3, #8
 8009b70:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009b74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009b78:	4a53      	ldr	r2, [pc, #332]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009b7a:	430b      	orrs	r3, r1
 8009b7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009b80:	e003      	b.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x1502>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b82:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009b86:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b8a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009b96:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b98:	2300      	movs	r3, #0
 8009b9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b9c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	f000 80b9 	beq.w	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x1692>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8009ba8:	4b48      	ldr	r3, [pc, #288]	@ (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bac:	4a47      	ldr	r2, [pc, #284]	@ (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009bae:	f043 0301 	orr.w	r3, r3, #1
 8009bb2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bb4:	f7fa f8f6 	bl	8003da4 <HAL_GetTick>
 8009bb8:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009bbc:	e00b      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x154e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bbe:	f7fa f8f1 	bl	8003da4 <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d903      	bls.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x154e>
      {
        ret = HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009bd4:	e005      	b.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x155a>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8009bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d0ed      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x1536>
      }
    }

    if (ret == HAL_OK)
 8009be2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f040 8093 	bne.w	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x168a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009bec:	4b36      	ldr	r3, [pc, #216]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bf6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009bfa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d023      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x15c2>
 8009c02:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009c06:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8009c0a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d01b      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x15c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009c12:	4b2d      	ldr	r3, [pc, #180]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009c1c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c20:	4b29      	ldr	r3, [pc, #164]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c26:	4a28      	ldr	r2, [pc, #160]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c30:	4b25      	ldr	r3, [pc, #148]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009c32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c36:	4a24      	ldr	r2, [pc, #144]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009c40:	4a21      	ldr	r2, [pc, #132]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009c42:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8009c46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009c4a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d019      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x1602>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c56:	f7fa f8a5 	bl	8003da4 <HAL_GetTick>
 8009c5a:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c5e:	e00d      	b.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x15f4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c60:	f7fa f8a0 	bl	8003da4 <HAL_GetTick>
 8009c64:	4602      	mov	r2, r0
 8009c66:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8009c6a:	1ad2      	subs	r2, r2, r3
 8009c6c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d903      	bls.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x15f4>
          {
            ret = HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
            break;
 8009c7a:	e006      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x1602>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c7c:	4b12      	ldr	r3, [pc, #72]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c82:	f003 0302 	and.w	r3, r3, #2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d0ea      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
          }
        }
      }

      if (ret == HAL_OK)
 8009c8a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d13a      	bne.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x1680>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009c92:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009c96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ca2:	d115      	bne.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x1648>
 8009ca4:	4b08      	ldr	r3, [pc, #32]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009ca6:	69db      	ldr	r3, [r3, #28]
 8009ca8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009cac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cb4:	091b      	lsrs	r3, r3, #4
 8009cb6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009cba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8009cbe:	4a02      	ldr	r2, [pc, #8]	@ (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8009cc0:	430b      	orrs	r3, r1
 8009cc2:	61d3      	str	r3, [r2, #28]
 8009cc4:	e00a      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1654>
 8009cc6:	bf00      	nop
 8009cc8:	44020c00 	.word	0x44020c00
 8009ccc:	44020800 	.word	0x44020800
 8009cd0:	4bc6      	ldr	r3, [pc, #792]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	4ac5      	ldr	r2, [pc, #788]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009cd6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009cda:	61d3      	str	r3, [r2, #28]
 8009cdc:	4bc3      	ldr	r3, [pc, #780]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ce2:	4ac2      	ldr	r2, [pc, #776]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ce8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009cec:	4bbf      	ldr	r3, [pc, #764]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009cee:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8009cf2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cfe:	4abb      	ldr	r2, [pc, #748]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009d00:	430b      	orrs	r3, r1
 8009d02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009d06:	e008      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d08:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009d0c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
 8009d10:	e003      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d12:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009d16:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d1a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8009d26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d28:	2300      	movs	r3, #0
 8009d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d2c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009d30:	460b      	mov	r3, r1
 8009d32:	4313      	orrs	r3, r2
 8009d34:	d035      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x171a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009d36:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009d3a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009d3e:	2b30      	cmp	r3, #48	@ 0x30
 8009d40:	d014      	beq.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x16e4>
 8009d42:	2b30      	cmp	r3, #48	@ 0x30
 8009d44:	d80e      	bhi.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 8009d46:	2b20      	cmp	r3, #32
 8009d48:	d012      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8009d4a:	2b20      	cmp	r3, #32
 8009d4c:	d80a      	bhi.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d010      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8009d52:	2b10      	cmp	r3, #16
 8009d54:	d106      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d56:	4ba5      	ldr	r3, [pc, #660]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d5a:	4aa4      	ldr	r2, [pc, #656]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d60:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8009d62:	e008      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x16ee>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009d6a:	e004      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8009d6c:	bf00      	nop
 8009d6e:	e002      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8009d70:	bf00      	nop
 8009d72:	e000      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 8009d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d76:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10d      	bne.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x1712>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009d7e:	4b9b      	ldr	r3, [pc, #620]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d84:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009d88:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009d8c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009d90:	4a96      	ldr	r2, [pc, #600]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009d92:	430b      	orrs	r3, r1
 8009d94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009d98:	e003      	b.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x171a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d9a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009d9e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009da2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8009db0:	2300      	movs	r3, #0
 8009db2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009db4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009db8:	460b      	mov	r3, r1
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	d033      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x179e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8009dbe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009dc2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d002      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x1748>
 8009dca:	2b40      	cmp	r3, #64	@ 0x40
 8009dcc:	d007      	beq.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x1756>
 8009dce:	e010      	b.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x176a>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd0:	4b86      	ldr	r3, [pc, #536]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd4:	4a85      	ldr	r2, [pc, #532]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009dda:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009ddc:	e00d      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x1772>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009dde:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009de2:	3308      	adds	r3, #8
 8009de4:	4618      	mov	r0, r3
 8009de6:	f003 faff 	bl	800d3e8 <RCCEx_PLL2_Config>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8009df0:	e003      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x1772>

      default:
        ret = HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dfa:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10d      	bne.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x1796>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8009e02:	4b7a      	ldr	r3, [pc, #488]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009e04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009e08:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8009e0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009e10:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8009e14:	4a75      	ldr	r2, [pc, #468]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009e16:	430b      	orrs	r3, r1
 8009e18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009e1c:	e003      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x179e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e1e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009e22:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009e26:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8009e32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e34:	2300      	movs	r3, #0
 8009e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e38:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	d048      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x184c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8009e42:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009e46:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	d827      	bhi.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x1816>
 8009e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e54 <HAL_RCCEx_PeriphCLKConfig+0x17cc>)
 8009e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e54:	08009e69 	.word	0x08009e69
 8009e58:	08009e77 	.word	0x08009e77
 8009e5c:	08009e8b 	.word	0x08009e8b
 8009e60:	08009ea7 	.word	0x08009ea7
 8009e64:	08009ea7 	.word	0x08009ea7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e68:	4b60      	ldr	r3, [pc, #384]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009e6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e72:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009e74:	e018      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x1820>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e76:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f003 fab3 	bl	800d3e8 <RCCEx_PLL2_Config>
 8009e82:	4603      	mov	r3, r0
 8009e84:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009e88:	e00e      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x1820>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009e8a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009e8e:	3330      	adds	r3, #48	@ 0x30
 8009e90:	4618      	mov	r0, r3
 8009e92:	f003 fb41 	bl	800d518 <RCCEx_PLL3_Config>
 8009e96:	4603      	mov	r3, r0
 8009e98:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8009e9c:	e004      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x1820>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009ea4:	e000      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x1820>
        break;
 8009ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ea8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10d      	bne.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x1844>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009eb0:	4b4e      	ldr	r3, [pc, #312]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009eb6:	f023 0107 	bic.w	r1, r3, #7
 8009eba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009ebe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009ec2:	4a4a      	ldr	r2, [pc, #296]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009eca:	e003      	b.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ecc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009ed0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009ed4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009edc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009ee0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ee6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009eea:	460b      	mov	r3, r1
 8009eec:	4313      	orrs	r3, r2
 8009eee:	f000 8083 	beq.w	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x1970>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8009ef2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009efa:	2b20      	cmp	r3, #32
 8009efc:	d85f      	bhi.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x1936>
 8009efe:	a201      	add	r2, pc, #4	@ (adr r2, 8009f04 <HAL_RCCEx_PeriphCLKConfig+0x187c>)
 8009f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f04:	08009f89 	.word	0x08009f89
 8009f08:	08009fbf 	.word	0x08009fbf
 8009f0c:	08009fbf 	.word	0x08009fbf
 8009f10:	08009fbf 	.word	0x08009fbf
 8009f14:	08009fbf 	.word	0x08009fbf
 8009f18:	08009fbf 	.word	0x08009fbf
 8009f1c:	08009fbf 	.word	0x08009fbf
 8009f20:	08009fbf 	.word	0x08009fbf
 8009f24:	08009f97 	.word	0x08009f97
 8009f28:	08009fbf 	.word	0x08009fbf
 8009f2c:	08009fbf 	.word	0x08009fbf
 8009f30:	08009fbf 	.word	0x08009fbf
 8009f34:	08009fbf 	.word	0x08009fbf
 8009f38:	08009fbf 	.word	0x08009fbf
 8009f3c:	08009fbf 	.word	0x08009fbf
 8009f40:	08009fbf 	.word	0x08009fbf
 8009f44:	08009fab 	.word	0x08009fab
 8009f48:	08009fbf 	.word	0x08009fbf
 8009f4c:	08009fbf 	.word	0x08009fbf
 8009f50:	08009fbf 	.word	0x08009fbf
 8009f54:	08009fbf 	.word	0x08009fbf
 8009f58:	08009fbf 	.word	0x08009fbf
 8009f5c:	08009fbf 	.word	0x08009fbf
 8009f60:	08009fbf 	.word	0x08009fbf
 8009f64:	08009fc7 	.word	0x08009fc7
 8009f68:	08009fbf 	.word	0x08009fbf
 8009f6c:	08009fbf 	.word	0x08009fbf
 8009f70:	08009fbf 	.word	0x08009fbf
 8009f74:	08009fbf 	.word	0x08009fbf
 8009f78:	08009fbf 	.word	0x08009fbf
 8009f7c:	08009fbf 	.word	0x08009fbf
 8009f80:	08009fbf 	.word	0x08009fbf
 8009f84:	08009fc7 	.word	0x08009fc7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f88:	4b18      	ldr	r3, [pc, #96]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8c:	4a17      	ldr	r2, [pc, #92]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f92:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009f94:	e018      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1940>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009f96:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f003 fa23 	bl	800d3e8 <RCCEx_PLL2_Config>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009fa8:	e00e      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1940>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009faa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009fae:	3330      	adds	r3, #48	@ 0x30
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f003 fab1 	bl	800d518 <RCCEx_PLL3_Config>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8009fbc:	e004      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1940>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8009fc4:	e000      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1940>
        break;
 8009fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fc8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10f      	bne.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8009fd0:	4b06      	ldr	r3, [pc, #24]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fd6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009fda:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fe2:	4a02      	ldr	r2, [pc, #8]	@ (8009fec <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8009fe4:	430b      	orrs	r3, r1
 8009fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009fea:	e005      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x1970>
 8009fec:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8009ff4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009ff8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a000:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a004:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a006:	2300      	movs	r3, #0
 800a008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a00a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a00e:	460b      	mov	r3, r1
 800a010:	4313      	orrs	r3, r2
 800a012:	d04e      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800a014:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a018:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a01c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a020:	d02e      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
 800a022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a026:	d827      	bhi.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 800a028:	2bc0      	cmp	r3, #192	@ 0xc0
 800a02a:	d02b      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
 800a02c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a02e:	d823      	bhi.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 800a030:	2b80      	cmp	r3, #128	@ 0x80
 800a032:	d017      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
 800a034:	2b80      	cmp	r3, #128	@ 0x80
 800a036:	d81f      	bhi.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d002      	beq.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x19ba>
 800a03c:	2b40      	cmp	r3, #64	@ 0x40
 800a03e:	d007      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x19c8>
 800a040:	e01a      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a042:	4bb0      	ldr	r3, [pc, #704]	@ (800a304 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800a044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a046:	4aaf      	ldr	r2, [pc, #700]	@ (800a304 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800a048:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a04c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800a04e:	e01a      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x19fe>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a050:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a054:	3308      	adds	r3, #8
 800a056:	4618      	mov	r0, r3
 800a058:	f003 f9c6 	bl	800d3e8 <RCCEx_PLL2_Config>
 800a05c:	4603      	mov	r3, r0
 800a05e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800a062:	e010      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x19fe>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a064:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a068:	3330      	adds	r3, #48	@ 0x30
 800a06a:	4618      	mov	r0, r3
 800a06c:	f003 fa54 	bl	800d518 <RCCEx_PLL3_Config>
 800a070:	4603      	mov	r3, r0
 800a072:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800a076:	e006      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800a07e:	e002      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 800a080:	bf00      	nop
 800a082:	e000      	b.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 800a084:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a086:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10d      	bne.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x1a22>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a08e:	4b9d      	ldr	r3, [pc, #628]	@ (800a304 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800a090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a094:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800a098:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a09c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a0a0:	4a98      	ldr	r2, [pc, #608]	@ (800a304 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800a0a2:	430b      	orrs	r3, r1
 800a0a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a0a8:	e003      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0aa:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a0ae:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800a0b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a0be:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0c4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	d055      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x1af2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800a0ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a0d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a0d6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a0da:	d031      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>
 800a0dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a0e0:	d82a      	bhi.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 800a0e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0e6:	d02d      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x1abc>
 800a0e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0ec:	d824      	bhi.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 800a0ee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a0f2:	d029      	beq.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
 800a0f4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a0f8:	d81e      	bhi.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 800a0fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0fe:	d011      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
 800a100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a104:	d818      	bhi.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 800a106:	2b00      	cmp	r3, #0
 800a108:	d020      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x1ac4>
 800a10a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a10e:	d113      	bne.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a110:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a114:	3308      	adds	r3, #8
 800a116:	4618      	mov	r0, r3
 800a118:	f003 f966 	bl	800d3e8 <RCCEx_PLL2_Config>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800a122:	e014      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a124:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a128:	3330      	adds	r3, #48	@ 0x30
 800a12a:	4618      	mov	r0, r3
 800a12c:	f003 f9f4 	bl	800d518 <RCCEx_PLL3_Config>
 800a130:	4603      	mov	r3, r0
 800a132:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800a136:	e00a      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800a13e:	e006      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 800a140:	bf00      	nop
 800a142:	e004      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 800a144:	bf00      	nop
 800a146:	e002      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 800a148:	bf00      	nop
 800a14a:	e000      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 800a14c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a14e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10d      	bne.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800a156:	4b6b      	ldr	r3, [pc, #428]	@ (800a304 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800a158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a15c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800a160:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a168:	4a66      	ldr	r2, [pc, #408]	@ (800a304 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800a16a:	430b      	orrs	r3, r1
 800a16c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a170:	e003      	b.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x1af2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a172:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a176:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800a17a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a186:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a188:	2300      	movs	r3, #0
 800a18a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a18c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a190:	460b      	mov	r3, r1
 800a192:	4313      	orrs	r3, r2
 800a194:	d055      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x1bba>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800a196:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a19a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800a19e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a1a2:	d031      	beq.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x1b80>
 800a1a4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a1a8:	d82a      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 800a1aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1ae:	d02d      	beq.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x1b84>
 800a1b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1b4:	d824      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 800a1b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1ba:	d029      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 800a1bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1c0:	d81e      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 800a1c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1c6:	d011      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1b64>
 800a1c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1cc:	d818      	bhi.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d020      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x1b8c>
 800a1d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1d6:	d113      	bne.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a1d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a1dc:	3308      	adds	r3, #8
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f003 f902 	bl	800d3e8 <RCCEx_PLL2_Config>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800a1ea:	e014      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a1ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a1f0:	3330      	adds	r3, #48	@ 0x30
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f003 f990 	bl	800d518 <RCCEx_PLL3_Config>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800a1fe:	e00a      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800a206:	e006      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 800a208:	bf00      	nop
 800a20a:	e004      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 800a20c:	bf00      	nop
 800a20e:	e002      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 800a210:	bf00      	nop
 800a212:	e000      	b.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 800a214:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a216:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10d      	bne.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800a21e:	4b39      	ldr	r3, [pc, #228]	@ (800a304 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800a220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a224:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800a228:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a22c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800a230:	4934      	ldr	r1, [pc, #208]	@ (800a304 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800a232:	4313      	orrs	r3, r2
 800a234:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800a238:	e003      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x1bba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a23a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a23e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a242:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	2100      	movs	r1, #0
 800a24c:	6239      	str	r1, [r7, #32]
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
 800a254:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a258:	460b      	mov	r3, r1
 800a25a:	4313      	orrs	r3, r2
 800a25c:	d058      	beq.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 800a25e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a266:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a26a:	d031      	beq.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800a26c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a270:	d82a      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 800a272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a276:	d02d      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4c>
 800a278:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a27c:	d824      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 800a27e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a282:	d029      	beq.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
 800a284:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a288:	d81e      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 800a28a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a28e:	d011      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x1c2c>
 800a290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a294:	d818      	bhi.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 800a296:	2b00      	cmp	r3, #0
 800a298:	d020      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x1c54>
 800a29a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a29e:	d113      	bne.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a2a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f003 f89e 	bl	800d3e8 <RCCEx_PLL2_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a2b2:	e014      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x1c56>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a2b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a2b8:	3330      	adds	r3, #48	@ 0x30
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f003 f92c 	bl	800d518 <RCCEx_PLL3_Config>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a2c6:	e00a      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800a2ce:	e006      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 800a2d0:	bf00      	nop
 800a2d2:	e004      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 800a2d4:	bf00      	nop
 800a2d6:	e002      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 800a2d8:	bf00      	nop
 800a2da:	e000      	b.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 800a2dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2de:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d110      	bne.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800a2e6:	4b07      	ldr	r3, [pc, #28]	@ (800a304 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800a2e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a2ec:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800a2f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a2f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2f8:	4902      	ldr	r1, [pc, #8]	@ (800a304 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800a300:	e006      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
 800a302:	bf00      	nop
 800a304:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a308:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a30c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a310:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	2100      	movs	r1, #0
 800a31a:	61b9      	str	r1, [r7, #24]
 800a31c:	f003 0302 	and.w	r3, r3, #2
 800a320:	61fb      	str	r3, [r7, #28]
 800a322:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a326:	460b      	mov	r3, r1
 800a328:	4313      	orrs	r3, r2
 800a32a:	d03d      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800a32c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a330:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a334:	2b03      	cmp	r3, #3
 800a336:	d81c      	bhi.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
 800a338:	a201      	add	r2, pc, #4	@ (adr r2, 800a340 <HAL_RCCEx_PeriphCLKConfig+0x1cb8>)
 800a33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33e:	bf00      	nop
 800a340:	0800a37b 	.word	0x0800a37b
 800a344:	0800a351 	.word	0x0800a351
 800a348:	0800a35f 	.word	0x0800a35f
 800a34c:	0800a37b 	.word	0x0800a37b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a350:	4b6f      	ldr	r3, [pc, #444]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a354:	4a6e      	ldr	r2, [pc, #440]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a35a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800a35c:	e00e      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x1cf4>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a35e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a362:	3308      	adds	r3, #8
 800a364:	4618      	mov	r0, r3
 800a366:	f003 f83f 	bl	800d3e8 <RCCEx_PLL2_Config>
 800a36a:	4603      	mov	r3, r0
 800a36c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 800a370:	e004      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800a378:	e000      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
        break;
 800a37a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a37c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a380:	2b00      	cmp	r3, #0
 800a382:	d10d      	bne.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x1d18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800a384:	4b62      	ldr	r3, [pc, #392]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a386:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a38a:	f023 0203 	bic.w	r2, r3, #3
 800a38e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a392:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a396:	495e      	ldr	r1, [pc, #376]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a398:	4313      	orrs	r3, r2
 800a39a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a39e:	e003      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a3a4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a3a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	6139      	str	r1, [r7, #16]
 800a3b4:	f003 0304 	and.w	r3, r3, #4
 800a3b8:	617b      	str	r3, [r7, #20]
 800a3ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	d03a      	beq.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800a3c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a3c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a3cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3d0:	d00e      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
 800a3d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3d6:	d815      	bhi.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d017      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x1d84>
 800a3dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3e0:	d110      	bne.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3e2:	4b4b      	ldr	r3, [pc, #300]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3e6:	4a4a      	ldr	r2, [pc, #296]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a3e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3ec:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800a3ee:	e00e      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a3f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a3f4:	3308      	adds	r3, #8
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f002 fff6 	bl	800d3e8 <RCCEx_PLL2_Config>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800a402:	e004      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      default:
        ret = HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800a40a:	e000      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x1d86>
        break;
 800a40c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a40e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10d      	bne.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x1daa>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800a416:	4b3e      	ldr	r3, [pc, #248]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a41c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a420:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a424:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a428:	4939      	ldr	r1, [pc, #228]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a42a:	4313      	orrs	r3, r2
 800a42c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 800a430:	e003      	b.n	800a43a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a432:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a436:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a43a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a442:	2100      	movs	r1, #0
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	f003 0310 	and.w	r3, r3, #16
 800a44a:	60fb      	str	r3, [r7, #12]
 800a44c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a450:	460b      	mov	r3, r1
 800a452:	4313      	orrs	r3, r2
 800a454:	d038      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1e40>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800a456:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a45a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800a45e:	2b30      	cmp	r3, #48	@ 0x30
 800a460:	d01b      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x1e12>
 800a462:	2b30      	cmp	r3, #48	@ 0x30
 800a464:	d815      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
 800a466:	2b10      	cmp	r3, #16
 800a468:	d002      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 800a46a:	2b20      	cmp	r3, #32
 800a46c:	d007      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 800a46e:	e010      	b.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a470:	4b27      	ldr	r3, [pc, #156]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a474:	4a26      	ldr	r2, [pc, #152]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a47a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800a47c:	e00e      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x1e14>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a47e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a482:	3330      	adds	r3, #48	@ 0x30
 800a484:	4618      	mov	r0, r3
 800a486:	f003 f847 	bl	800d518 <RCCEx_PLL3_Config>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 800a490:	e004      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800a498:	e000      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        break;
 800a49a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a49c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10d      	bne.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800a4a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a4a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a4aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a4ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a4b2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800a4b6:	4916      	ldr	r1, [pc, #88]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a4be:	e003      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x1e40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800a4c4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a4c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	6039      	str	r1, [r7, #0]
 800a4d4:	f003 0308 	and.w	r3, r3, #8
 800a4d8:	607b      	str	r3, [r7, #4]
 800a4da:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	d00c      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0x1e76>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800a4e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a4e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a4ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a4ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800a4f2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800a4f6:	4906      	ldr	r1, [pc, #24]	@ (800a510 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800a4fe:	f897 3152 	ldrb.w	r3, [r7, #338]	@ 0x152
}
 800a502:	4618      	mov	r0, r3
 800a504:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 800a508:	46bd      	mov	sp, r7
 800a50a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a50e:	bf00      	nop
 800a510:	44020c00 	.word	0x44020c00

0800a514 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 800a514:	b480      	push	{r7}
 800a516:	b08b      	sub	sp, #44	@ 0x2c
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a51c:	4bae      	ldr	r3, [pc, #696]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a51e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a524:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a526:	4bac      	ldr	r3, [pc, #688]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52a:	f003 0303 	and.w	r3, r3, #3
 800a52e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800a530:	4ba9      	ldr	r3, [pc, #676]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a534:	0a1b      	lsrs	r3, r3, #8
 800a536:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a53a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a53c:	4ba6      	ldr	r3, [pc, #664]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a540:	091b      	lsrs	r3, r3, #4
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a548:	4ba3      	ldr	r3, [pc, #652]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a54a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a54c:	08db      	lsrs	r3, r3, #3
 800a54e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	fb02 f303 	mul.w	r3, r2, r3
 800a558:	ee07 3a90 	vmov	s15, r3
 800a55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a560:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 8126 	beq.w	800a7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	2b03      	cmp	r3, #3
 800a570:	d053      	beq.n	800a61a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	2b03      	cmp	r3, #3
 800a576:	d86f      	bhi.n	800a658 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d003      	beq.n	800a586 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	2b02      	cmp	r3, #2
 800a582:	d02b      	beq.n	800a5dc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a584:	e068      	b.n	800a658 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a586:	4b94      	ldr	r3, [pc, #592]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	08db      	lsrs	r3, r3, #3
 800a58c:	f003 0303 	and.w	r3, r3, #3
 800a590:	4a92      	ldr	r2, [pc, #584]	@ (800a7dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800a592:	fa22 f303 	lsr.w	r3, r2, r3
 800a596:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	ee07 3a90 	vmov	s15, r3
 800a5a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5b0:	6a3b      	ldr	r3, [r7, #32]
 800a5b2:	ee07 3a90 	vmov	s15, r3
 800a5b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ba:	ed97 6a04 	vldr	s12, [r7, #16]
 800a5be:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800a7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800a5c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800a5da:	e068      	b.n	800a6ae <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	ee07 3a90 	vmov	s15, r3
 800a5e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5e6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800a7e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800a5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ee:	6a3b      	ldr	r3, [r7, #32]
 800a5f0:	ee07 3a90 	vmov	s15, r3
 800a5f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5f8:	ed97 6a04 	vldr	s12, [r7, #16]
 800a5fc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800a600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a608:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a60c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a610:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a614:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800a618:	e049      	b.n	800a6ae <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	ee07 3a90 	vmov	s15, r3
 800a620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a624:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800a7e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 800a628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	ee07 3a90 	vmov	s15, r3
 800a632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a636:	ed97 6a04 	vldr	s12, [r7, #16]
 800a63a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800a7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800a63e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a646:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a64a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a64e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a652:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800a656:	e02a      	b.n	800a6ae <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a658:	4b5f      	ldr	r3, [pc, #380]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	08db      	lsrs	r3, r3, #3
 800a65e:	f003 0303 	and.w	r3, r3, #3
 800a662:	4a5e      	ldr	r2, [pc, #376]	@ (800a7dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800a664:	fa22 f303 	lsr.w	r3, r2, r3
 800a668:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	ee07 3a90 	vmov	s15, r3
 800a670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	ee07 3a90 	vmov	s15, r3
 800a67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	ee07 3a90 	vmov	s15, r3
 800a688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a68c:	ed97 6a04 	vldr	s12, [r7, #16]
 800a690:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800a7e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800a694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a69c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800a6ac:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6ae:	4b4a      	ldr	r3, [pc, #296]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6ba:	d121      	bne.n	800a700 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a6bc:	4b46      	ldr	r3, [pc, #280]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d017      	beq.n	800a6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a6c8:	4b43      	ldr	r3, [pc, #268]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a6ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6cc:	0a5b      	lsrs	r3, r3, #9
 800a6ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6d2:	ee07 3a90 	vmov	s15, r3
 800a6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800a6da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6de:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a6e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a6e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6ee:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	601a      	str	r2, [r3, #0]
 800a6f6:	e006      	b.n	800a706 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	601a      	str	r2, [r3, #0]
 800a6fe:	e002      	b.n	800a706 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a706:	4b34      	ldr	r3, [pc, #208]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a70e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a712:	d121      	bne.n	800a758 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a714:	4b30      	ldr	r3, [pc, #192]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d017      	beq.n	800a750 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a720:	4b2d      	ldr	r3, [pc, #180]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a724:	0c1b      	lsrs	r3, r3, #16
 800a726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a72a:	ee07 3a90 	vmov	s15, r3
 800a72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a732:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a736:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a73a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a73e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a746:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	605a      	str	r2, [r3, #4]
 800a74e:	e006      	b.n	800a75e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	605a      	str	r2, [r3, #4]
 800a756:	e002      	b.n	800a75e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a75e:	4b1e      	ldr	r3, [pc, #120]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a766:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a76a:	d121      	bne.n	800a7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a76c:	4b1a      	ldr	r3, [pc, #104]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a76e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a774:	2b00      	cmp	r3, #0
 800a776:	d017      	beq.n	800a7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a778:	4b17      	ldr	r3, [pc, #92]	@ (800a7d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800a77a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a77c:	0e1b      	lsrs	r3, r3, #24
 800a77e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a782:	ee07 3a90 	vmov	s15, r3
 800a786:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800a78a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a78e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800a792:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a79a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a79e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a7a6:	e010      	b.n	800a7ca <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	609a      	str	r2, [r3, #8]
}
 800a7ae:	e00c      	b.n	800a7ca <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	609a      	str	r2, [r3, #8]
}
 800a7b6:	e008      	b.n	800a7ca <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	609a      	str	r2, [r3, #8]
}
 800a7ca:	bf00      	nop
 800a7cc:	372c      	adds	r7, #44	@ 0x2c
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	44020c00 	.word	0x44020c00
 800a7dc:	03d09000 	.word	0x03d09000
 800a7e0:	46000000 	.word	0x46000000
 800a7e4:	4a742400 	.word	0x4a742400
 800a7e8:	4af42400 	.word	0x4af42400

0800a7ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b08b      	sub	sp, #44	@ 0x2c
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a7f4:	4bae      	ldr	r3, [pc, #696]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a7f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7fc:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a7fe:	4bac      	ldr	r3, [pc, #688]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a802:	f003 0303 	and.w	r3, r3, #3
 800a806:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800a808:	4ba9      	ldr	r3, [pc, #676]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a80a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a80c:	0a1b      	lsrs	r3, r3, #8
 800a80e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a812:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a814:	4ba6      	ldr	r3, [pc, #664]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a818:	091b      	lsrs	r3, r3, #4
 800a81a:	f003 0301 	and.w	r3, r3, #1
 800a81e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a820:	4ba3      	ldr	r3, [pc, #652]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a824:	08db      	lsrs	r3, r3, #3
 800a826:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a82a:	697a      	ldr	r2, [r7, #20]
 800a82c:	fb02 f303 	mul.w	r3, r2, r3
 800a830:	ee07 3a90 	vmov	s15, r3
 800a834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a838:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f000 8126 	beq.w	800aa90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	2b03      	cmp	r3, #3
 800a848:	d053      	beq.n	800a8f2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	2b03      	cmp	r3, #3
 800a84e:	d86f      	bhi.n	800a930 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d003      	beq.n	800a85e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d02b      	beq.n	800a8b4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800a85c:	e068      	b.n	800a930 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a85e:	4b94      	ldr	r3, [pc, #592]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	08db      	lsrs	r3, r3, #3
 800a864:	f003 0303 	and.w	r3, r3, #3
 800a868:	4a92      	ldr	r2, [pc, #584]	@ (800aab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800a86a:	fa22 f303 	lsr.w	r3, r2, r3
 800a86e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	ee07 3a90 	vmov	s15, r3
 800a876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	ee07 3a90 	vmov	s15, r3
 800a880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a888:	6a3b      	ldr	r3, [r7, #32]
 800a88a:	ee07 3a90 	vmov	s15, r3
 800a88e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a892:	ed97 6a04 	vldr	s12, [r7, #16]
 800a896:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800aab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800a89a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a89e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800a8b2:	e068      	b.n	800a986 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	ee07 3a90 	vmov	s15, r3
 800a8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8be:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800aabc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800a8c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8c6:	6a3b      	ldr	r3, [r7, #32]
 800a8c8:	ee07 3a90 	vmov	s15, r3
 800a8cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8d0:	ed97 6a04 	vldr	s12, [r7, #16]
 800a8d4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800a8d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800a8f0:	e049      	b.n	800a986 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	ee07 3a90 	vmov	s15, r3
 800a8f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8fc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800aac0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 800a900:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	ee07 3a90 	vmov	s15, r3
 800a90a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a90e:	ed97 6a04 	vldr	s12, [r7, #16]
 800a912:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800aab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800a916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a91a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a91e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a92a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800a92e:	e02a      	b.n	800a986 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a930:	4b5f      	ldr	r3, [pc, #380]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	08db      	lsrs	r3, r3, #3
 800a936:	f003 0303 	and.w	r3, r3, #3
 800a93a:	4a5e      	ldr	r2, [pc, #376]	@ (800aab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800a93c:	fa22 f303 	lsr.w	r3, r2, r3
 800a940:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	ee07 3a90 	vmov	s15, r3
 800a948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	ee07 3a90 	vmov	s15, r3
 800a952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a95a:	6a3b      	ldr	r3, [r7, #32]
 800a95c:	ee07 3a90 	vmov	s15, r3
 800a960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a964:	ed97 6a04 	vldr	s12, [r7, #16]
 800a968:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800aab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800a96c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a974:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a97c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a980:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800a984:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a986:	4b4a      	ldr	r3, [pc, #296]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a98e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a992:	d121      	bne.n	800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a994:	4b46      	ldr	r3, [pc, #280]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a998:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d017      	beq.n	800a9d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a9a0:	4b43      	ldr	r3, [pc, #268]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a9a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9a4:	0a5b      	lsrs	r3, r3, #9
 800a9a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800a9b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9b6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800a9ba:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a9be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9c6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	601a      	str	r2, [r3, #0]
 800a9ce:	e006      	b.n	800a9de <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	601a      	str	r2, [r3, #0]
 800a9d6:	e002      	b.n	800a9de <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9de:	4b34      	ldr	r3, [pc, #208]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9ea:	d121      	bne.n	800aa30 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a9ec:	4b30      	ldr	r3, [pc, #192]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d017      	beq.n	800aa28 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a9f8:	4b2d      	ldr	r3, [pc, #180]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800a9fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9fc:	0c1b      	lsrs	r3, r3, #16
 800a9fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800aa0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa0e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800aa12:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800aa16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa1e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	605a      	str	r2, [r3, #4]
 800aa26:	e006      	b.n	800aa36 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	605a      	str	r2, [r3, #4]
 800aa2e:	e002      	b.n	800aa36 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa36:	4b1e      	ldr	r3, [pc, #120]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa42:	d121      	bne.n	800aa88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800aa44:	4b1a      	ldr	r3, [pc, #104]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800aa46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d017      	beq.n	800aa80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800aa50:	4b17      	ldr	r3, [pc, #92]	@ (800aab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800aa52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa54:	0e1b      	lsrs	r3, r3, #24
 800aa56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa5a:	ee07 3a90 	vmov	s15, r3
 800aa5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800aa62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa66:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800aa6a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800aa6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa76:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aa7e:	e010      	b.n	800aaa2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	609a      	str	r2, [r3, #8]
}
 800aa86:	e00c      	b.n	800aaa2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	609a      	str	r2, [r3, #8]
}
 800aa8e:	e008      	b.n	800aaa2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	609a      	str	r2, [r3, #8]
}
 800aaa2:	bf00      	nop
 800aaa4:	372c      	adds	r7, #44	@ 0x2c
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	44020c00 	.word	0x44020c00
 800aab4:	03d09000 	.word	0x03d09000
 800aab8:	46000000 	.word	0x46000000
 800aabc:	4a742400 	.word	0x4a742400
 800aac0:	4af42400 	.word	0x4af42400

0800aac4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b08b      	sub	sp, #44	@ 0x2c
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800aacc:	4bae      	ldr	r3, [pc, #696]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800aace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad4:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800aad6:	4bac      	ldr	r3, [pc, #688]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800aad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aada:	f003 0303 	and.w	r3, r3, #3
 800aade:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800aae0:	4ba9      	ldr	r3, [pc, #676]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800aae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aae4:	0a1b      	lsrs	r3, r3, #8
 800aae6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aaea:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800aaec:	4ba6      	ldr	r3, [pc, #664]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800aaee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaf0:	091b      	lsrs	r3, r3, #4
 800aaf2:	f003 0301 	and.w	r3, r3, #1
 800aaf6:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800aaf8:	4ba3      	ldr	r3, [pc, #652]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800aafa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aafc:	08db      	lsrs	r3, r3, #3
 800aafe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	fb02 f303 	mul.w	r3, r2, r3
 800ab08:	ee07 3a90 	vmov	s15, r3
 800ab0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab10:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f000 8126 	beq.w	800ad68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	d053      	beq.n	800abca <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d86f      	bhi.n	800ac08 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d003      	beq.n	800ab36 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d02b      	beq.n	800ab8c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800ab34:	e068      	b.n	800ac08 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab36:	4b94      	ldr	r3, [pc, #592]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	08db      	lsrs	r3, r3, #3
 800ab3c:	f003 0303 	and.w	r3, r3, #3
 800ab40:	4a92      	ldr	r2, [pc, #584]	@ (800ad8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800ab42:	fa22 f303 	lsr.w	r3, r2, r3
 800ab46:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	ee07 3a90 	vmov	s15, r3
 800ab58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	ee07 3a90 	vmov	s15, r3
 800ab66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab6a:	ed97 6a04 	vldr	s12, [r7, #16]
 800ab6e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800ad90 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800ab72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab86:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800ab8a:	e068      	b.n	800ac5e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab96:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800ad94 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800ab9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	ee07 3a90 	vmov	s15, r3
 800aba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba8:	ed97 6a04 	vldr	s12, [r7, #16]
 800abac:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ad90 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800abb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800abc8:	e049      	b.n	800ac5e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	ee07 3a90 	vmov	s15, r3
 800abd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800ad98 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 800abd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abe6:	ed97 6a04 	vldr	s12, [r7, #16]
 800abea:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800ad90 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800abee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800ac06:	e02a      	b.n	800ac5e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac08:	4b5f      	ldr	r3, [pc, #380]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	08db      	lsrs	r3, r3, #3
 800ac0e:	f003 0303 	and.w	r3, r3, #3
 800ac12:	4a5e      	ldr	r2, [pc, #376]	@ (800ad8c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800ac14:	fa22 f303 	lsr.w	r3, r2, r3
 800ac18:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	ee07 3a90 	vmov	s15, r3
 800ac20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	ee07 3a90 	vmov	s15, r3
 800ac2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac3c:	ed97 6a04 	vldr	s12, [r7, #16]
 800ac40:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800ad90 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800ac44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800ac5c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac5e:	4b4a      	ldr	r3, [pc, #296]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac6a:	d121      	bne.n	800acb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800ac6c:	4b46      	ldr	r3, [pc, #280]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ac6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d017      	beq.n	800aca8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ac78:	4b43      	ldr	r3, [pc, #268]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ac7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac7c:	0a5b      	lsrs	r3, r3, #9
 800ac7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800ac8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac8e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800ac92:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ac96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac9e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	e006      	b.n	800acb6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	e002      	b.n	800acb6 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acb6:	4b34      	ldr	r3, [pc, #208]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acc2:	d121      	bne.n	800ad08 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800acc4:	4b30      	ldr	r3, [pc, #192]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800acc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d017      	beq.n	800ad00 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800acd0:	4b2d      	ldr	r3, [pc, #180]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800acd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acd4:	0c1b      	lsrs	r3, r3, #16
 800acd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acda:	ee07 3a90 	vmov	s15, r3
 800acde:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800ace2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ace6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800acea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800acee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acf6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	605a      	str	r2, [r3, #4]
 800acfe:	e006      	b.n	800ad0e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	605a      	str	r2, [r3, #4]
 800ad06:	e002      	b.n	800ad0e <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad0e:	4b1e      	ldr	r3, [pc, #120]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad1a:	d121      	bne.n	800ad60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800ad1c:	4b1a      	ldr	r3, [pc, #104]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ad1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d017      	beq.n	800ad58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800ad28:	4b17      	ldr	r3, [pc, #92]	@ (800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800ad2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad2c:	0e1b      	lsrs	r3, r3, #24
 800ad2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800ad3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad3e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800ad42:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ad46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad4e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800ad56:	e010      	b.n	800ad7a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	609a      	str	r2, [r3, #8]
}
 800ad5e:	e00c      	b.n	800ad7a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	609a      	str	r2, [r3, #8]
}
 800ad66:	e008      	b.n	800ad7a <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	609a      	str	r2, [r3, #8]
}
 800ad7a:	bf00      	nop
 800ad7c:	372c      	adds	r7, #44	@ 0x2c
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	44020c00 	.word	0x44020c00
 800ad8c:	03d09000 	.word	0x03d09000
 800ad90:	46000000 	.word	0x46000000
 800ad94:	4a742400 	.word	0x4a742400
 800ad98:	4af42400 	.word	0x4af42400

0800ad9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ad9c:	b590      	push	{r4, r7, lr}
 800ad9e:	b08f      	sub	sp, #60	@ 0x3c
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800ada6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800adaa:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 800adae:	4321      	orrs	r1, r4
 800adb0:	d150      	bne.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800adb2:	4b26      	ldr	r3, [pc, #152]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800adb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800adb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adbc:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800adbe:	4b23      	ldr	r3, [pc, #140]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800adc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800adc4:	f003 0302 	and.w	r3, r3, #2
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d108      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800adcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800add2:	d104      	bne.n	800adde <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800add4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800add8:	637b      	str	r3, [r7, #52]	@ 0x34
 800adda:	f002 baf6 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800adde:	4b1b      	ldr	r3, [pc, #108]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ade0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ade4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ade8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adec:	d108      	bne.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800adee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adf4:	d104      	bne.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800adf6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800adfa:	637b      	str	r3, [r7, #52]	@ 0x34
 800adfc:	f002 bae5 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800ae00:	4b12      	ldr	r3, [pc, #72]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae0c:	d119      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae14:	d115      	bne.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800ae16:	4b0d      	ldr	r3, [pc, #52]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ae18:	69db      	ldr	r3, [r3, #28]
 800ae1a:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800ae1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae22:	d30a      	bcc.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800ae24:	4b09      	ldr	r3, [pc, #36]	@ (800ae4c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800ae26:	69db      	ldr	r3, [r3, #28]
 800ae28:	0a1b      	lsrs	r3, r3, #8
 800ae2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae2e:	4a08      	ldr	r2, [pc, #32]	@ (800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800ae30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae34:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800ae36:	f002 bac8 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
      }
      else
      {
        frequency = 0U;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800ae3e:	f002 bac4 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800ae42:	2300      	movs	r3, #0
 800ae44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae46:	f002 bac0 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800ae4a:	bf00      	nop
 800ae4c:	44020c00 	.word	0x44020c00
 800ae50:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800ae54:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae58:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 800ae5c:	ea50 0104 	orrs.w	r1, r0, r4
 800ae60:	f001 8242 	beq.w	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x154c>
 800ae64:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae68:	2801      	cmp	r0, #1
 800ae6a:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 800ae6e:	f082 82a9 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800ae72:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae76:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800ae7a:	ea50 0104 	orrs.w	r1, r0, r4
 800ae7e:	f001 8139 	beq.w	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 800ae82:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae86:	2801      	cmp	r0, #1
 800ae88:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 800ae8c:	f082 829a 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800ae90:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ae94:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800ae98:	ea50 0104 	orrs.w	r1, r0, r4
 800ae9c:	f001 85ce 	beq.w	800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x1ca0>
 800aea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aea4:	2801      	cmp	r0, #1
 800aea6:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800aeaa:	f082 828b 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800aeae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aeb2:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800aeb6:	ea50 0104 	orrs.w	r1, r0, r4
 800aeba:	f001 8518 	beq.w	800c8ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b52>
 800aebe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aec2:	2801      	cmp	r0, #1
 800aec4:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800aec8:	f082 827c 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800aecc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aed0:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800aed4:	ea50 0104 	orrs.w	r1, r0, r4
 800aed8:	f001 846a 	beq.w	800c7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a14>
 800aedc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aee0:	2801      	cmp	r0, #1
 800aee2:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800aee6:	f082 826d 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800aeea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aeee:	f1a1 0420 	sub.w	r4, r1, #32
 800aef2:	ea50 0104 	orrs.w	r1, r0, r4
 800aef6:	f001 83b4 	beq.w	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0x18c6>
 800aefa:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aefe:	2801      	cmp	r0, #1
 800af00:	f171 0120 	sbcs.w	r1, r1, #32
 800af04:	f082 825e 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800af08:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af0c:	f1a1 0410 	sub.w	r4, r1, #16
 800af10:	ea50 0104 	orrs.w	r1, r0, r4
 800af14:	f002 8222 	beq.w	800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x25c0>
 800af18:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af1c:	2801      	cmp	r0, #1
 800af1e:	f171 0110 	sbcs.w	r1, r1, #16
 800af22:	f082 824f 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800af26:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af2a:	f1a1 0408 	sub.w	r4, r1, #8
 800af2e:	ea50 0104 	orrs.w	r1, r0, r4
 800af32:	f002 8198 	beq.w	800d266 <HAL_RCCEx_GetPeriphCLKFreq+0x24ca>
 800af36:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af3a:	2801      	cmp	r0, #1
 800af3c:	f171 0108 	sbcs.w	r1, r1, #8
 800af40:	f082 8240 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800af44:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af48:	1f0c      	subs	r4, r1, #4
 800af4a:	ea50 0104 	orrs.w	r1, r0, r4
 800af4e:	f001 8614 	beq.w	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x1dde>
 800af52:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af56:	2801      	cmp	r0, #1
 800af58:	f171 0104 	sbcs.w	r1, r1, #4
 800af5c:	f082 8232 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800af60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af64:	1e8c      	subs	r4, r1, #2
 800af66:	ea50 0104 	orrs.w	r1, r0, r4
 800af6a:	f002 810f 	beq.w	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800af6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af72:	2801      	cmp	r0, #1
 800af74:	f171 0102 	sbcs.w	r1, r1, #2
 800af78:	f082 8224 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800af7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af80:	1e4c      	subs	r4, r1, #1
 800af82:	ea50 0104 	orrs.w	r1, r0, r4
 800af86:	f002 809a 	beq.w	800d0be <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800af8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af8e:	2801      	cmp	r0, #1
 800af90:	f171 0101 	sbcs.w	r1, r1, #1
 800af94:	f082 8216 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800af98:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af9c:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800afa0:	4321      	orrs	r1, r4
 800afa2:	f002 8025 	beq.w	800cff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800afa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afaa:	4cd6      	ldr	r4, [pc, #856]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x568>)
 800afac:	42a0      	cmp	r0, r4
 800afae:	f171 0100 	sbcs.w	r1, r1, #0
 800afb2:	f082 8207 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800afb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afba:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 800afbe:	4321      	orrs	r1, r4
 800afc0:	f001 87a5 	beq.w	800cf0e <HAL_RCCEx_GetPeriphCLKFreq+0x2172>
 800afc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afc8:	4ccf      	ldr	r4, [pc, #828]	@ (800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800afca:	42a0      	cmp	r0, r4
 800afcc:	f171 0100 	sbcs.w	r1, r1, #0
 800afd0:	f082 81f8 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800afd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afd8:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 800afdc:	4321      	orrs	r1, r4
 800afde:	f001 871d 	beq.w	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x2080>
 800afe2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800afe6:	4cc9      	ldr	r4, [pc, #804]	@ (800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800afe8:	42a0      	cmp	r0, r4
 800afea:	f171 0100 	sbcs.w	r1, r1, #0
 800afee:	f082 81e9 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800aff2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aff6:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800affa:	4321      	orrs	r1, r4
 800affc:	f001 8666 	beq.w	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x1f30>
 800b000:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b004:	4cc2      	ldr	r4, [pc, #776]	@ (800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800b006:	42a0      	cmp	r0, r4
 800b008:	f171 0100 	sbcs.w	r1, r1, #0
 800b00c:	f082 81da 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b010:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b014:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800b018:	4321      	orrs	r1, r4
 800b01a:	f001 85de 	beq.w	800cbda <HAL_RCCEx_GetPeriphCLKFreq+0x1e3e>
 800b01e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b022:	4cbc      	ldr	r4, [pc, #752]	@ (800b314 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800b024:	42a0      	cmp	r0, r4
 800b026:	f171 0100 	sbcs.w	r1, r1, #0
 800b02a:	f082 81cb 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b02e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b032:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800b036:	4321      	orrs	r1, r4
 800b038:	f002 814a 	beq.w	800d2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2534>
 800b03c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b040:	4cb5      	ldr	r4, [pc, #724]	@ (800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800b042:	42a0      	cmp	r0, r4
 800b044:	f171 0100 	sbcs.w	r1, r1, #0
 800b048:	f082 81bc 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b04c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b050:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800b054:	4321      	orrs	r1, r4
 800b056:	f000 826b 	beq.w	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b05a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b05e:	4caf      	ldr	r4, [pc, #700]	@ (800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800b060:	42a0      	cmp	r0, r4
 800b062:	f171 0100 	sbcs.w	r1, r1, #0
 800b066:	f082 81ad 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b06a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b06e:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 800b072:	4321      	orrs	r1, r4
 800b074:	f000 87e9 	beq.w	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 800b078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b07c:	4ca8      	ldr	r4, [pc, #672]	@ (800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800b07e:	42a0      	cmp	r0, r4
 800b080:	f171 0100 	sbcs.w	r1, r1, #0
 800b084:	f082 819e 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b088:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b08c:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 800b090:	4321      	orrs	r1, r4
 800b092:	f000 81ce 	beq.w	800b432 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 800b096:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b09a:	4ca2      	ldr	r4, [pc, #648]	@ (800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b09c:	42a0      	cmp	r0, r4
 800b09e:	f171 0100 	sbcs.w	r1, r1, #0
 800b0a2:	f082 818f 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b0a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0aa:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 800b0ae:	4321      	orrs	r1, r4
 800b0b0:	f000 8140 	beq.w	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 800b0b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0b8:	4c9b      	ldr	r4, [pc, #620]	@ (800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b0ba:	42a0      	cmp	r0, r4
 800b0bc:	f171 0100 	sbcs.w	r1, r1, #0
 800b0c0:	f082 8180 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b0c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0c8:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800b0cc:	4321      	orrs	r1, r4
 800b0ce:	f001 8229 	beq.w	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x1788>
 800b0d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0d6:	4c95      	ldr	r4, [pc, #596]	@ (800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b0d8:	42a0      	cmp	r0, r4
 800b0da:	f171 0100 	sbcs.w	r1, r1, #0
 800b0de:	f082 8171 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b0e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0e6:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800b0ea:	4321      	orrs	r1, r4
 800b0ec:	f001 8173 	beq.w	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x163a>
 800b0f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b0f4:	4c8e      	ldr	r4, [pc, #568]	@ (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b0f6:	42a0      	cmp	r0, r4
 800b0f8:	f171 0100 	sbcs.w	r1, r1, #0
 800b0fc:	f082 8162 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b100:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b104:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800b108:	4321      	orrs	r1, r4
 800b10a:	f001 8130 	beq.w	800c36e <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 800b10e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b112:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 800b116:	f171 0100 	sbcs.w	r1, r1, #0
 800b11a:	f082 8153 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b11e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b122:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 800b126:	4321      	orrs	r1, r4
 800b128:	f001 8093 	beq.w	800c252 <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 800b12c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b130:	f248 0401 	movw	r4, #32769	@ 0x8001
 800b134:	42a0      	cmp	r0, r4
 800b136:	f171 0100 	sbcs.w	r1, r1, #0
 800b13a:	f082 8143 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b13e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b142:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 800b146:	4321      	orrs	r1, r4
 800b148:	f001 8040 	beq.w	800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1430>
 800b14c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b150:	f244 0401 	movw	r4, #16385	@ 0x4001
 800b154:	42a0      	cmp	r0, r4
 800b156:	f171 0100 	sbcs.w	r1, r1, #0
 800b15a:	f082 8133 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b15e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b162:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800b166:	4321      	orrs	r1, r4
 800b168:	f000 87ed 	beq.w	800c146 <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
 800b16c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b170:	f242 0401 	movw	r4, #8193	@ 0x2001
 800b174:	42a0      	cmp	r0, r4
 800b176:	f171 0100 	sbcs.w	r1, r1, #0
 800b17a:	f082 8123 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b17e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b182:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800b186:	4321      	orrs	r1, r4
 800b188:	f000 86f9 	beq.w	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800b18c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b190:	f241 0401 	movw	r4, #4097	@ 0x1001
 800b194:	42a0      	cmp	r0, r4
 800b196:	f171 0100 	sbcs.w	r1, r1, #0
 800b19a:	f082 8113 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b19e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1a2:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800b1a6:	4321      	orrs	r1, r4
 800b1a8:	f000 8683 	beq.w	800beb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800b1ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1b0:	f640 0401 	movw	r4, #2049	@ 0x801
 800b1b4:	42a0      	cmp	r0, r4
 800b1b6:	f171 0100 	sbcs.w	r1, r1, #0
 800b1ba:	f082 8103 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b1be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1c2:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800b1c6:	4321      	orrs	r1, r4
 800b1c8:	f000 860d 	beq.w	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x104a>
 800b1cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1d0:	f240 4401 	movw	r4, #1025	@ 0x401
 800b1d4:	42a0      	cmp	r0, r4
 800b1d6:	f171 0100 	sbcs.w	r1, r1, #0
 800b1da:	f082 80f3 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b1de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1e2:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800b1e6:	4321      	orrs	r1, r4
 800b1e8:	f000 858b 	beq.w	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 800b1ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1f0:	f240 2401 	movw	r4, #513	@ 0x201
 800b1f4:	42a0      	cmp	r0, r4
 800b1f6:	f171 0100 	sbcs.w	r1, r1, #0
 800b1fa:	f082 80e3 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b1fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b202:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 800b206:	4321      	orrs	r1, r4
 800b208:	f000 8510 	beq.w	800bc2c <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800b20c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b210:	f240 1401 	movw	r4, #257	@ 0x101
 800b214:	42a0      	cmp	r0, r4
 800b216:	f171 0100 	sbcs.w	r1, r1, #0
 800b21a:	f082 80d3 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b21e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b222:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 800b226:	4321      	orrs	r1, r4
 800b228:	f000 8495 	beq.w	800bb56 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 800b22c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b230:	2881      	cmp	r0, #129	@ 0x81
 800b232:	f171 0100 	sbcs.w	r1, r1, #0
 800b236:	f082 80c5 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b23a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b23e:	2821      	cmp	r0, #33	@ 0x21
 800b240:	f171 0100 	sbcs.w	r1, r1, #0
 800b244:	d254      	bcs.n	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800b246:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b24a:	4301      	orrs	r1, r0
 800b24c:	f002 80ba 	beq.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b250:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b254:	1e42      	subs	r2, r0, #1
 800b256:	f141 33ff 	adc.w	r3, r1, #4294967295
 800b25a:	2a20      	cmp	r2, #32
 800b25c:	f173 0100 	sbcs.w	r1, r3, #0
 800b260:	f082 80b0 	bcs.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b264:	2a1f      	cmp	r2, #31
 800b266:	f202 80ad 	bhi.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b26a:	a101      	add	r1, pc, #4	@ (adr r1, 800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 800b26c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b270:	0800b575 	.word	0x0800b575
 800b274:	0800b655 	.word	0x0800b655
 800b278:	0800d3c5 	.word	0x0800d3c5
 800b27c:	0800b715 	.word	0x0800b715
 800b280:	0800d3c5 	.word	0x0800d3c5
 800b284:	0800d3c5 	.word	0x0800d3c5
 800b288:	0800d3c5 	.word	0x0800d3c5
 800b28c:	0800b7e5 	.word	0x0800b7e5
 800b290:	0800d3c5 	.word	0x0800d3c5
 800b294:	0800d3c5 	.word	0x0800d3c5
 800b298:	0800d3c5 	.word	0x0800d3c5
 800b29c:	0800d3c5 	.word	0x0800d3c5
 800b2a0:	0800d3c5 	.word	0x0800d3c5
 800b2a4:	0800d3c5 	.word	0x0800d3c5
 800b2a8:	0800d3c5 	.word	0x0800d3c5
 800b2ac:	0800b8c7 	.word	0x0800b8c7
 800b2b0:	0800d3c5 	.word	0x0800d3c5
 800b2b4:	0800d3c5 	.word	0x0800d3c5
 800b2b8:	0800d3c5 	.word	0x0800d3c5
 800b2bc:	0800d3c5 	.word	0x0800d3c5
 800b2c0:	0800d3c5 	.word	0x0800d3c5
 800b2c4:	0800d3c5 	.word	0x0800d3c5
 800b2c8:	0800d3c5 	.word	0x0800d3c5
 800b2cc:	0800d3c5 	.word	0x0800d3c5
 800b2d0:	0800d3c5 	.word	0x0800d3c5
 800b2d4:	0800d3c5 	.word	0x0800d3c5
 800b2d8:	0800d3c5 	.word	0x0800d3c5
 800b2dc:	0800d3c5 	.word	0x0800d3c5
 800b2e0:	0800d3c5 	.word	0x0800d3c5
 800b2e4:	0800d3c5 	.word	0x0800d3c5
 800b2e8:	0800d3c5 	.word	0x0800d3c5
 800b2ec:	0800b99d 	.word	0x0800b99d
 800b2f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2f4:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800b2f8:	430b      	orrs	r3, r1
 800b2fa:	f000 83ba 	beq.w	800ba72 <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
 800b2fe:	f002 b861 	b.w	800d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800b302:	bf00      	nop
 800b304:	80000001 	.word	0x80000001
 800b308:	40000001 	.word	0x40000001
 800b30c:	20000001 	.word	0x20000001
 800b310:	10000001 	.word	0x10000001
 800b314:	08000001 	.word	0x08000001
 800b318:	04000001 	.word	0x04000001
 800b31c:	00400001 	.word	0x00400001
 800b320:	00200001 	.word	0x00200001
 800b324:	00100001 	.word	0x00100001
 800b328:	00080001 	.word	0x00080001
 800b32c:	00040001 	.word	0x00040001
 800b330:	00020001 	.word	0x00020001
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b334:	4b9f      	ldr	r3, [pc, #636]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b33a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b33e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800b340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b342:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b346:	d036      	beq.n	800b3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 800b348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b34e:	d86b      	bhi.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b352:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b356:	d02b      	beq.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b35e:	d863      	bhi.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b366:	d01b      	beq.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800b368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b36e:	d85b      	bhi.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b372:	2b00      	cmp	r3, #0
 800b374:	d004      	beq.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800b376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b37c:	d008      	beq.n	800b390 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
 800b37e:	e053      	b.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b380:	f107 0320 	add.w	r3, r7, #32
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff f8c5 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b38e:	e04e      	b.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b390:	f107 0314 	add.w	r3, r7, #20
 800b394:	4618      	mov	r0, r3
 800b396:	f7ff fa29 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b39e:	e046      	b.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3a0:	f107 0308 	add.w	r3, r7, #8
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7ff fb8d 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b3ae:	e03e      	b.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b3b0:	4b81      	ldr	r3, [pc, #516]	@ (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800b3b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b3b4:	e03b      	b.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3b6:	4b7f      	ldr	r3, [pc, #508]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b3b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b3bc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b3c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3c2:	4b7c      	ldr	r3, [pc, #496]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 0302 	and.w	r3, r3, #2
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d10c      	bne.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d109      	bne.n	800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b3d4:	4b77      	ldr	r3, [pc, #476]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	08db      	lsrs	r3, r3, #3
 800b3da:	f003 0303 	and.w	r3, r3, #3
 800b3de:	4a77      	ldr	r2, [pc, #476]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b3e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3e6:	e01e      	b.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3e8:	4b72      	ldr	r3, [pc, #456]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b3f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3f4:	d106      	bne.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800b3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3fc:	d102      	bne.n	800b404 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b3fe:	4b70      	ldr	r3, [pc, #448]	@ (800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800b400:	637b      	str	r3, [r7, #52]	@ 0x34
 800b402:	e010      	b.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b404:	4b6b      	ldr	r3, [pc, #428]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b40c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b410:	d106      	bne.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b414:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b418:	d102      	bne.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b41a:	4b6a      	ldr	r3, [pc, #424]	@ (800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800b41c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b41e:	e002      	b.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b420:	2300      	movs	r3, #0
 800b422:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b424:	e003      	b.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800b426:	e002      	b.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          default :
          {
            frequency = 0U;
 800b428:	2300      	movs	r3, #0
 800b42a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b42c:	bf00      	nop
          }
        }
        break;
 800b42e:	f001 bfcc 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b432:	4b60      	ldr	r3, [pc, #384]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b434:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b438:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 800b43c:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800b43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b440:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b444:	d036      	beq.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800b446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b448:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b44c:	d86b      	bhi.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800b44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b450:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b454:	d02b      	beq.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x712>
 800b456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b458:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800b45c:	d863      	bhi.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800b45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b460:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b464:	d01b      	beq.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800b466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b468:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b46c:	d85b      	bhi.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800b46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b470:	2b00      	cmp	r3, #0
 800b472:	d004      	beq.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800b474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b476:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b47a:	d008      	beq.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 800b47c:	e053      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b47e:	f107 0320 	add.w	r3, r7, #32
 800b482:	4618      	mov	r0, r3
 800b484:	f7ff f846 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b48c:	e04e      	b.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b48e:	f107 0314 	add.w	r3, r7, #20
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff f9aa 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b49c:	e046      	b.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b49e:	f107 0308 	add.w	r3, r7, #8
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff fb0e 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4ac:	e03e      	b.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b4ae:	4b42      	ldr	r3, [pc, #264]	@ (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800b4b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b4b2:	e03b      	b.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b4b4:	4b3f      	ldr	r3, [pc, #252]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b4b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b4ba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b4be:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b4c0:	4b3c      	ldr	r3, [pc, #240]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0302 	and.w	r3, r3, #2
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d10c      	bne.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800b4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d109      	bne.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b4d2:	4b38      	ldr	r3, [pc, #224]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	08db      	lsrs	r3, r3, #3
 800b4d8:	f003 0303 	and.w	r3, r3, #3
 800b4dc:	4a37      	ldr	r2, [pc, #220]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800b4de:	fa22 f303 	lsr.w	r3, r2, r3
 800b4e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4e4:	e01e      	b.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4e6:	4b33      	ldr	r3, [pc, #204]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b4ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4f2:	d106      	bne.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 800b4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4fa:	d102      	bne.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b4fc:	4b30      	ldr	r3, [pc, #192]	@ (800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800b4fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b500:	e010      	b.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b502:	4b2c      	ldr	r3, [pc, #176]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b50a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b50e:	d106      	bne.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b516:	d102      	bne.n	800b51e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b518:	4b2a      	ldr	r3, [pc, #168]	@ (800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800b51a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b51c:	e002      	b.n	800b524 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b51e:	2300      	movs	r3, #0
 800b520:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b522:	e003      	b.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
 800b524:	e002      	b.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          default :
          {
            frequency = 0U;
 800b526:	2300      	movs	r3, #0
 800b528:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b52a:	bf00      	nop
          }
        }
        break;
 800b52c:	f001 bf4d 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800b530:	4b20      	ldr	r3, [pc, #128]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b532:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b53a:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800b53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d108      	bne.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b542:	f107 0320 	add.w	r3, r7, #32
 800b546:	4618      	mov	r0, r3
 800b548:	f7fe ffe4 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b550:	f001 bf3b 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800b554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b556:	2b40      	cmp	r3, #64	@ 0x40
 800b558:	d108      	bne.n	800b56c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b55a:	f107 0314 	add.w	r3, r7, #20
 800b55e:	4618      	mov	r0, r3
 800b560:	f7ff f944 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b568:	f001 bf2f 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 800b56c:	2300      	movs	r3, #0
 800b56e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b570:	f001 bf2b 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b574:	4b0f      	ldr	r3, [pc, #60]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b576:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b57a:	f003 0307 	and.w	r3, r3, #7
 800b57e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b582:	2b00      	cmp	r3, #0
 800b584:	d104      	bne.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b586:	f7fd f81b 	bl	80085c0 <HAL_RCC_GetPCLK2Freq>
 800b58a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800b58c:	f001 bf1d 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800b590:	4b08      	ldr	r3, [pc, #32]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b59c:	d114      	bne.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800b59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d111      	bne.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5a4:	f107 0314 	add.w	r3, r7, #20
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7ff f91f 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5b2:	e04d      	b.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 800b5b4:	44020c00 	.word	0x44020c00
 800b5b8:	00bb8000 	.word	0x00bb8000
 800b5bc:	03d09000 	.word	0x03d09000
 800b5c0:	003d0900 	.word	0x003d0900
 800b5c4:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800b5c8:	4ba0      	ldr	r3, [pc, #640]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5d4:	d10a      	bne.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d107      	bne.n	800b5ec <HAL_RCCEx_GetPeriphCLKFreq+0x850>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5dc:	f107 0308 	add.w	r3, r7, #8
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7ff fa6f 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5ea:	e031      	b.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b5ec:	4b97      	ldr	r3, [pc, #604]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 0302 	and.w	r3, r3, #2
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d10c      	bne.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fa:	2b03      	cmp	r3, #3
 800b5fc:	d109      	bne.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b5fe:	4b93      	ldr	r3, [pc, #588]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	08db      	lsrs	r3, r3, #3
 800b604:	f003 0303 	and.w	r3, r3, #3
 800b608:	4a91      	ldr	r2, [pc, #580]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800b60a:	fa22 f303 	lsr.w	r3, r2, r3
 800b60e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b610:	e01e      	b.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800b612:	4b8e      	ldr	r3, [pc, #568]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b61a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b61e:	d105      	bne.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x890>
 800b620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b622:	2b04      	cmp	r3, #4
 800b624:	d102      	bne.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = CSI_VALUE;
 800b626:	4b8b      	ldr	r3, [pc, #556]	@ (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800b628:	637b      	str	r3, [r7, #52]	@ 0x34
 800b62a:	e011      	b.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b62c:	4b87      	ldr	r3, [pc, #540]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b62e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b632:	f003 0302 	and.w	r3, r3, #2
 800b636:	2b02      	cmp	r3, #2
 800b638:	d106      	bne.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800b63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63c:	2b05      	cmp	r3, #5
 800b63e:	d103      	bne.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          frequency = LSE_VALUE;
 800b640:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b644:	637b      	str	r3, [r7, #52]	@ 0x34
 800b646:	e003      	b.n	800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = 0U;
 800b648:	2300      	movs	r3, #0
 800b64a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b64c:	f001 bebd 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b650:	f001 bebb 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b654:	4b7d      	ldr	r3, [pc, #500]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b656:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b65a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b65e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b662:	2b00      	cmp	r3, #0
 800b664:	d104      	bne.n	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b666:	f7fc ff95 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800b66a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800b66c:	f001 bead 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800b670:	4b76      	ldr	r3, [pc, #472]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b678:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b67c:	d10a      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800b67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b680:	2b08      	cmp	r3, #8
 800b682:	d107      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b684:	f107 0314 	add.w	r3, r7, #20
 800b688:	4618      	mov	r0, r3
 800b68a:	f7ff f8af 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	637b      	str	r3, [r7, #52]	@ 0x34
 800b692:	e03d      	b.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800b694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b696:	2b10      	cmp	r3, #16
 800b698:	d108      	bne.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b69a:	f107 0308 	add.w	r3, r7, #8
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7ff fa10 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6a8:	f001 be8f 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b6ac:	4b67      	ldr	r3, [pc, #412]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f003 0302 	and.w	r3, r3, #2
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d10c      	bne.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ba:	2b18      	cmp	r3, #24
 800b6bc:	d109      	bne.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b6be:	4b63      	ldr	r3, [pc, #396]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	08db      	lsrs	r3, r3, #3
 800b6c4:	f003 0303 	and.w	r3, r3, #3
 800b6c8:	4a61      	ldr	r2, [pc, #388]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800b6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6d0:	e01e      	b.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800b6d2:	4b5e      	ldr	r3, [pc, #376]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b6da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6de:	d105      	bne.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e2:	2b20      	cmp	r3, #32
 800b6e4:	d102      	bne.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x950>
          frequency = CSI_VALUE;
 800b6e6:	4b5b      	ldr	r3, [pc, #364]	@ (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800b6e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6ea:	e011      	b.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b6ec:	4b57      	ldr	r3, [pc, #348]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b6ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b6f2:	f003 0302 	and.w	r3, r3, #2
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d106      	bne.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fc:	2b28      	cmp	r3, #40	@ 0x28
 800b6fe:	d103      	bne.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = LSE_VALUE;
 800b700:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b704:	637b      	str	r3, [r7, #52]	@ 0x34
 800b706:	e003      	b.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = 0U;
 800b708:	2300      	movs	r3, #0
 800b70a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b70c:	f001 be5d 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b710:	f001 be5b 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b714:	4b4d      	ldr	r3, [pc, #308]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b71a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b71e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b722:	2b00      	cmp	r3, #0
 800b724:	d104      	bne.n	800b730 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b726:	f7fc ff35 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800b72a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800b72c:	f001 be4d 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800b730:	4b46      	ldr	r3, [pc, #280]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b738:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b73c:	d10a      	bne.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b740:	2b40      	cmp	r3, #64	@ 0x40
 800b742:	d107      	bne.n	800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b744:	f107 0314 	add.w	r3, r7, #20
 800b748:	4618      	mov	r0, r3
 800b74a:	f7ff f84f 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	637b      	str	r3, [r7, #52]	@ 0x34
 800b752:	e045      	b.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800b754:	4b3d      	ldr	r3, [pc, #244]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b75c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b760:	d10a      	bne.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b764:	2b80      	cmp	r3, #128	@ 0x80
 800b766:	d107      	bne.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b768:	f107 0308 	add.w	r3, r7, #8
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7ff f9a9 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	637b      	str	r3, [r7, #52]	@ 0x34
 800b776:	e033      	b.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b778:	4b34      	ldr	r3, [pc, #208]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 0302 	and.w	r3, r3, #2
 800b780:	2b02      	cmp	r3, #2
 800b782:	d10c      	bne.n	800b79e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b786:	2bc0      	cmp	r3, #192	@ 0xc0
 800b788:	d109      	bne.n	800b79e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b78a:	4b30      	ldr	r3, [pc, #192]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	08db      	lsrs	r3, r3, #3
 800b790:	f003 0303 	and.w	r3, r3, #3
 800b794:	4a2e      	ldr	r2, [pc, #184]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800b796:	fa22 f303 	lsr.w	r3, r2, r3
 800b79a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b79c:	e020      	b.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800b79e:	4b2b      	ldr	r3, [pc, #172]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7aa:	d106      	bne.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800b7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7b2:	d102      	bne.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = CSI_VALUE;
 800b7b4:	4b27      	ldr	r3, [pc, #156]	@ (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800b7b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7b8:	e012      	b.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b7ba:	4b24      	ldr	r3, [pc, #144]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b7bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7c0:	f003 0302 	and.w	r3, r3, #2
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d107      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ca:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b7ce:	d103      	bne.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
          frequency = LSE_VALUE;
 800b7d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7d6:	e003      	b.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          frequency = 0U;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b7dc:	f001 bdf5 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b7e0:	f001 bdf3 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b7e4:	4b19      	ldr	r3, [pc, #100]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b7e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b7ea:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800b7ee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d104      	bne.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b7f6:	f7fc fecd 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800b7fa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800b7fc:	f001 bde5 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800b800:	4b12      	ldr	r3, [pc, #72]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b80c:	d10b      	bne.n	800b826 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 800b80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b814:	d107      	bne.n	800b826 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b816:	f107 0314 	add.w	r3, r7, #20
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7fe ffe6 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	637b      	str	r3, [r7, #52]	@ 0x34
 800b824:	e04d      	b.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800b826:	4b09      	ldr	r3, [pc, #36]	@ (800b84c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b82e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b832:	d111      	bne.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800b834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b83a:	d10d      	bne.n	800b858 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b83c:	f107 0308 	add.w	r3, r7, #8
 800b840:	4618      	mov	r0, r3
 800b842:	f7ff f93f 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	637b      	str	r3, [r7, #52]	@ 0x34
 800b84a:	e03a      	b.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 800b84c:	44020c00 	.word	0x44020c00
 800b850:	03d09000 	.word	0x03d09000
 800b854:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b858:	4ba0      	ldr	r3, [pc, #640]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0302 	and.w	r3, r3, #2
 800b860:	2b02      	cmp	r3, #2
 800b862:	d10d      	bne.n	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b866:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b86a:	d109      	bne.n	800b880 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b86c:	4b9b      	ldr	r3, [pc, #620]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	08db      	lsrs	r3, r3, #3
 800b872:	f003 0303 	and.w	r3, r3, #3
 800b876:	4a9a      	ldr	r2, [pc, #616]	@ (800bae0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800b878:	fa22 f303 	lsr.w	r3, r2, r3
 800b87c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b87e:	e020      	b.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800b880:	4b96      	ldr	r3, [pc, #600]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b88c:	d106      	bne.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 800b88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b894:	d102      	bne.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = CSI_VALUE;
 800b896:	4b93      	ldr	r3, [pc, #588]	@ (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800b898:	637b      	str	r3, [r7, #52]	@ 0x34
 800b89a:	e012      	b.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b89c:	4b8f      	ldr	r3, [pc, #572]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b89e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b8a2:	f003 0302 	and.w	r3, r3, #2
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d107      	bne.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ac:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b8b0:	d103      	bne.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          frequency = LSE_VALUE;
 800b8b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8b8:	e003      	b.n	800b8c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
          frequency = 0U;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8be:	f001 bd84 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b8c2:	f001 bd82 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b8c6:	4b85      	ldr	r3, [pc, #532]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b8c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b8cc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b8d0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d104      	bne.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b8d8:	f7fc fe5c 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800b8dc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800b8de:	f001 bd74 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800b8e2:	4b7e      	ldr	r3, [pc, #504]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8ee:	d10b      	bne.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800b8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8f6:	d107      	bne.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8f8:	f107 0314 	add.w	r3, r7, #20
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fe ff75 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	637b      	str	r3, [r7, #52]	@ 0x34
 800b906:	e047      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 800b908:	4b74      	ldr	r3, [pc, #464]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b914:	d10b      	bne.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800b916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b91c:	d107      	bne.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b91e:	f107 0308 	add.w	r3, r7, #8
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff f8ce 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b92c:	e034      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b92e:	4b6b      	ldr	r3, [pc, #428]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f003 0302 	and.w	r3, r3, #2
 800b936:	2b02      	cmp	r3, #2
 800b938:	d10d      	bne.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
 800b93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b93c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b940:	d109      	bne.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b942:	4b66      	ldr	r3, [pc, #408]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	08db      	lsrs	r3, r3, #3
 800b948:	f003 0303 	and.w	r3, r3, #3
 800b94c:	4a64      	ldr	r2, [pc, #400]	@ (800bae0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800b94e:	fa22 f303 	lsr.w	r3, r2, r3
 800b952:	637b      	str	r3, [r7, #52]	@ 0x34
 800b954:	e020      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800b956:	4b61      	ldr	r3, [pc, #388]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b95e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b962:	d106      	bne.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 800b964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b966:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b96a:	d102      	bne.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
          frequency = CSI_VALUE;
 800b96c:	4b5d      	ldr	r3, [pc, #372]	@ (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800b96e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b970:	e012      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b972:	4b5a      	ldr	r3, [pc, #360]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b978:	f003 0302 	and.w	r3, r3, #2
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d107      	bne.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800b980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b982:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b986:	d103      	bne.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
          frequency = LSE_VALUE;
 800b988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b98c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b98e:	e003      	b.n	800b998 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
          frequency = 0U;
 800b990:	2300      	movs	r3, #0
 800b992:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b994:	f001 bd19 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800b998:	f001 bd17 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b99c:	4b4f      	ldr	r3, [pc, #316]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b99e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800b9a2:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800b9a6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d104      	bne.n	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800b9ae:	f7fc fdf1 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800b9b2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800b9b4:	f001 bd09 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800b9b8:	4b48      	ldr	r3, [pc, #288]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9c4:	d10b      	bne.n	800b9de <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9cc:	d107      	bne.n	800b9de <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9ce:	f107 0314 	add.w	r3, r7, #20
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fe ff0a 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9dc:	e047      	b.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800b9de:	4b3f      	ldr	r3, [pc, #252]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b9e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9ea:	d10b      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 800b9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9f2:	d107      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9f4:	f107 0308 	add.w	r3, r7, #8
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff f863 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba02:	e034      	b.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800ba04:	4b35      	ldr	r3, [pc, #212]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f003 0302 	and.w	r3, r3, #2
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d10d      	bne.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
 800ba10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba12:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800ba16:	d109      	bne.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ba18:	4b30      	ldr	r3, [pc, #192]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	08db      	lsrs	r3, r3, #3
 800ba1e:	f003 0303 	and.w	r3, r3, #3
 800ba22:	4a2f      	ldr	r2, [pc, #188]	@ (800bae0 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800ba24:	fa22 f303 	lsr.w	r3, r2, r3
 800ba28:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba2a:	e020      	b.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800ba2c:	4b2b      	ldr	r3, [pc, #172]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba38:	d106      	bne.n	800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba40:	d102      	bne.n	800ba48 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
          frequency = CSI_VALUE;
 800ba42:	4b28      	ldr	r3, [pc, #160]	@ (800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800ba44:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba46:	e012      	b.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800ba48:	4b24      	ldr	r3, [pc, #144]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ba4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba4e:	f003 0302 	and.w	r3, r3, #2
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d107      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
 800ba56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba58:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800ba5c:	d103      	bne.n	800ba66 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
          frequency = LSE_VALUE;
 800ba5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba62:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba64:	e003      	b.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
          frequency = 0U;
 800ba66:	2300      	movs	r3, #0
 800ba68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ba6a:	f001 bcae 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800ba6e:	f001 bcac 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800ba72:	4b1a      	ldr	r3, [pc, #104]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ba74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ba78:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 800ba7c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800ba7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d104      	bne.n	800ba8e <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800ba84:	f7fc fd86 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800ba88:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800ba8a:	f001 bc9e 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800ba8e:	4b13      	ldr	r3, [pc, #76]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba9a:	d10b      	bne.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
 800ba9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800baa2:	d107      	bne.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800baa4:	f107 0314 	add.w	r3, r7, #20
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7fe fe9f 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bab2:	e04e      	b.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800bab4:	4b09      	ldr	r3, [pc, #36]	@ (800badc <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800babc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bac0:	d112      	bne.n	800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800bac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bac8:	d10e      	bne.n	800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800baca:	f107 0308 	add.w	r3, r7, #8
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fe fff8 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bad8:	e03b      	b.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 800bada:	bf00      	nop
 800badc:	44020c00 	.word	0x44020c00
 800bae0:	03d09000 	.word	0x03d09000
 800bae4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800bae8:	4ba0      	ldr	r3, [pc, #640]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 0302 	and.w	r3, r3, #2
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d10d      	bne.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 800baf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800bafa:	d109      	bne.n	800bb10 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bafc:	4b9b      	ldr	r3, [pc, #620]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	08db      	lsrs	r3, r3, #3
 800bb02:	f003 0303 	and.w	r3, r3, #3
 800bb06:	4a9a      	ldr	r2, [pc, #616]	@ (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 800bb08:	fa22 f303 	lsr.w	r3, r2, r3
 800bb0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb0e:	e020      	b.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800bb10:	4b96      	ldr	r3, [pc, #600]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb1c:	d106      	bne.n	800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb24:	d102      	bne.n	800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
          frequency = CSI_VALUE;
 800bb26:	4b93      	ldr	r3, [pc, #588]	@ (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 800bb28:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb2a:	e012      	b.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800bb2c:	4b8f      	ldr	r3, [pc, #572]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bb2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bb32:	f003 0302 	and.w	r3, r3, #2
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d107      	bne.n	800bb4a <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800bb40:	d103      	bne.n	800bb4a <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
          frequency = LSE_VALUE;
 800bb42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bb46:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb48:	e003      	b.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
          frequency = 0U;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bb4e:	f001 bc3c 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800bb52:	f001 bc3a 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800bb56:	4b85      	ldr	r3, [pc, #532]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bb58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bb5c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800bb60:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800bb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d104      	bne.n	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bb68:	f7fc fd14 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800bb6c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800bb6e:	f001 bc2c 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800bb72:	4b7e      	ldr	r3, [pc, #504]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb7e:	d10b      	bne.n	800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800bb80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb86:	d107      	bne.n	800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb88:	f107 0314 	add.w	r3, r7, #20
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7fe fe2d 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb96:	e047      	b.n	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800bb98:	4b74      	ldr	r3, [pc, #464]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bba4:	d10b      	bne.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800bba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bbac:	d107      	bne.n	800bbbe <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bbae:	f107 0308 	add.w	r3, r7, #8
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fe ff86 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbbc:	e034      	b.n	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800bbbe:	4b6b      	ldr	r3, [pc, #428]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 0302 	and.w	r3, r3, #2
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d10d      	bne.n	800bbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 800bbca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbcc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bbd0:	d109      	bne.n	800bbe6 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bbd2:	4b66      	ldr	r3, [pc, #408]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	08db      	lsrs	r3, r3, #3
 800bbd8:	f003 0303 	and.w	r3, r3, #3
 800bbdc:	4a64      	ldr	r2, [pc, #400]	@ (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 800bbde:	fa22 f303 	lsr.w	r3, r2, r3
 800bbe2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbe4:	e020      	b.n	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800bbe6:	4b61      	ldr	r3, [pc, #388]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bbee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbf2:	d106      	bne.n	800bc02 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 800bbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbf6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bbfa:	d102      	bne.n	800bc02 <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
          frequency = CSI_VALUE;
 800bbfc:	4b5d      	ldr	r3, [pc, #372]	@ (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 800bbfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc00:	e012      	b.n	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800bc02:	4b5a      	ldr	r3, [pc, #360]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bc04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bc08:	f003 0302 	and.w	r3, r3, #2
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d107      	bne.n	800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 800bc10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc12:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bc16:	d103      	bne.n	800bc20 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
          frequency = LSE_VALUE;
 800bc18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc1e:	e003      	b.n	800bc28 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
          frequency = 0U;
 800bc20:	2300      	movs	r3, #0
 800bc22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bc24:	f001 bbd1 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800bc28:	f001 bbcf 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800bc2c:	4b4f      	ldr	r3, [pc, #316]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bc2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bc32:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800bc36:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800bc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d104      	bne.n	800bc48 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bc3e:	f7fc fca9 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800bc42:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800bc44:	f001 bbc1 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800bc48:	4b48      	ldr	r3, [pc, #288]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bc54:	d10b      	bne.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 800bc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc5c:	d107      	bne.n	800bc6e <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc5e:	f107 0314 	add.w	r3, r7, #20
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7fe fdc2 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc6c:	e047      	b.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800bc6e:	4b3f      	ldr	r3, [pc, #252]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc7a:	d10b      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800bc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc82:	d107      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc84:	f107 0308 	add.w	r3, r7, #8
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fe ff1b 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc92:	e034      	b.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800bc94:	4b35      	ldr	r3, [pc, #212]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f003 0302 	and.w	r3, r3, #2
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d10d      	bne.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800bca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bca6:	d109      	bne.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bca8:	4b30      	ldr	r3, [pc, #192]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	08db      	lsrs	r3, r3, #3
 800bcae:	f003 0303 	and.w	r3, r3, #3
 800bcb2:	4a2f      	ldr	r2, [pc, #188]	@ (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 800bcb4:	fa22 f303 	lsr.w	r3, r2, r3
 800bcb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcba:	e020      	b.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800bcbc:	4b2b      	ldr	r3, [pc, #172]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bcc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bcc8:	d106      	bne.n	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 800bcca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bccc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bcd0:	d102      	bne.n	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
          frequency = CSI_VALUE;
 800bcd2:	4b28      	ldr	r3, [pc, #160]	@ (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 800bcd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcd6:	e012      	b.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800bcd8:	4b24      	ldr	r3, [pc, #144]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bcda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bcde:	f003 0302 	and.w	r3, r3, #2
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d107      	bne.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 800bce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bcec:	d103      	bne.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
          frequency = LSE_VALUE;
 800bcee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcf4:	e003      	b.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
          frequency = 0U;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bcfa:	f001 bb66 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800bcfe:	f001 bb64 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800bd02:	4b1a      	ldr	r3, [pc, #104]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bd04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bd08:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800bd0c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d104      	bne.n	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bd14:	f7fc fc3e 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800bd18:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800bd1a:	f001 bb56 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800bd1e:	4b13      	ldr	r3, [pc, #76]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd2a:	d10b      	bne.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd32:	d107      	bne.n	800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd34:	f107 0314 	add.w	r3, r7, #20
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fe fd57 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd42:	e04e      	b.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800bd44:	4b09      	ldr	r3, [pc, #36]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd50:	d112      	bne.n	800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800bd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd58:	d10e      	bne.n	800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd5a:	f107 0308 	add.w	r3, r7, #8
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7fe feb0 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd68:	e03b      	b.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
 800bd6a:	bf00      	nop
 800bd6c:	44020c00 	.word	0x44020c00
 800bd70:	03d09000 	.word	0x03d09000
 800bd74:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800bd78:	4b9f      	ldr	r3, [pc, #636]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f003 0302 	and.w	r3, r3, #2
 800bd80:	2b02      	cmp	r3, #2
 800bd82:	d10d      	bne.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
 800bd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd86:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800bd8a:	d109      	bne.n	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bd8c:	4b9a      	ldr	r3, [pc, #616]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	08db      	lsrs	r3, r3, #3
 800bd92:	f003 0303 	and.w	r3, r3, #3
 800bd96:	4a99      	ldr	r2, [pc, #612]	@ (800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800bd98:	fa22 f303 	lsr.w	r3, r2, r3
 800bd9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd9e:	e020      	b.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800bda0:	4b95      	ldr	r3, [pc, #596]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bda8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdac:	d106      	bne.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 800bdae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdb4:	d102      	bne.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
          frequency = CSI_VALUE;
 800bdb6:	4b92      	ldr	r3, [pc, #584]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 800bdb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdba:	e012      	b.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800bdbc:	4b8e      	ldr	r3, [pc, #568]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bdbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bdc2:	f003 0302 	and.w	r3, r3, #2
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d107      	bne.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
 800bdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdcc:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800bdd0:	d103      	bne.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
          frequency = LSE_VALUE;
 800bdd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bdd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdd8:	e003      	b.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
          frequency = 0U;
 800bdda:	2300      	movs	r3, #0
 800bddc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bdde:	f001 baf4 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800bde2:	f001 baf2 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800bde6:	4b84      	ldr	r3, [pc, #528]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bde8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bdec:	f003 0307 	and.w	r3, r3, #7
 800bdf0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d104      	bne.n	800be02 <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bdf8:	f7fc fbcc 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800bdfc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800bdfe:	f001 bae4 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800be02:	4b7d      	ldr	r3, [pc, #500]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800be0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800be0e:	d10a      	bne.n	800be26 <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
 800be10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be12:	2b01      	cmp	r3, #1
 800be14:	d107      	bne.n	800be26 <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be16:	f107 0314 	add.w	r3, r7, #20
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fe fce6 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	637b      	str	r3, [r7, #52]	@ 0x34
 800be24:	e043      	b.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800be26:	4b74      	ldr	r3, [pc, #464]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800be2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be32:	d10a      	bne.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
 800be34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be36:	2b02      	cmp	r3, #2
 800be38:	d107      	bne.n	800be4a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be3a:	f107 0308 	add.w	r3, r7, #8
 800be3e:	4618      	mov	r0, r3
 800be40:	f7fe fe40 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	637b      	str	r3, [r7, #52]	@ 0x34
 800be48:	e031      	b.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800be4a:	4b6b      	ldr	r3, [pc, #428]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 0302 	and.w	r3, r3, #2
 800be52:	2b02      	cmp	r3, #2
 800be54:	d10c      	bne.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 800be56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be58:	2b03      	cmp	r3, #3
 800be5a:	d109      	bne.n	800be70 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800be5c:	4b66      	ldr	r3, [pc, #408]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	08db      	lsrs	r3, r3, #3
 800be62:	f003 0303 	and.w	r3, r3, #3
 800be66:	4a65      	ldr	r2, [pc, #404]	@ (800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800be68:	fa22 f303 	lsr.w	r3, r2, r3
 800be6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800be6e:	e01e      	b.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800be70:	4b61      	ldr	r3, [pc, #388]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be7c:	d105      	bne.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
 800be7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be80:	2b04      	cmp	r3, #4
 800be82:	d102      	bne.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
          frequency = CSI_VALUE;
 800be84:	4b5e      	ldr	r3, [pc, #376]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 800be86:	637b      	str	r3, [r7, #52]	@ 0x34
 800be88:	e011      	b.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800be8a:	4b5b      	ldr	r3, [pc, #364]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800be8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800be90:	f003 0302 	and.w	r3, r3, #2
 800be94:	2b02      	cmp	r3, #2
 800be96:	d106      	bne.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
 800be98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9a:	2b05      	cmp	r3, #5
 800be9c:	d103      	bne.n	800bea6 <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
          frequency = LSE_VALUE;
 800be9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bea2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bea4:	e003      	b.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
          frequency = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800beaa:	f001 ba8e 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800beae:	f001 ba8c 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800beb2:	4b51      	ldr	r3, [pc, #324]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800beb4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800beb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bebc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800bebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d104      	bne.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bec4:	f7fc fb66 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800bec8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800beca:	f001 ba7e 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800bece:	4b4a      	ldr	r3, [pc, #296]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bed6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800beda:	d10a      	bne.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800bedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bede:	2b10      	cmp	r3, #16
 800bee0:	d107      	bne.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bee2:	f107 0314 	add.w	r3, r7, #20
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fe fc80 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	637b      	str	r3, [r7, #52]	@ 0x34
 800bef0:	e043      	b.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800bef2:	4b41      	ldr	r3, [pc, #260]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800befa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800befe:	d10a      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
 800bf00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf02:	2b20      	cmp	r3, #32
 800bf04:	d107      	bne.n	800bf16 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf06:	f107 0308 	add.w	r3, r7, #8
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fe fdda 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf14:	e031      	b.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800bf16:	4b38      	ldr	r3, [pc, #224]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 0302 	and.w	r3, r3, #2
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d10c      	bne.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800bf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf24:	2b30      	cmp	r3, #48	@ 0x30
 800bf26:	d109      	bne.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bf28:	4b33      	ldr	r3, [pc, #204]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	08db      	lsrs	r3, r3, #3
 800bf2e:	f003 0303 	and.w	r3, r3, #3
 800bf32:	4a32      	ldr	r2, [pc, #200]	@ (800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800bf34:	fa22 f303 	lsr.w	r3, r2, r3
 800bf38:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf3a:	e01e      	b.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800bf3c:	4b2e      	ldr	r3, [pc, #184]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf48:	d105      	bne.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf4c:	2b40      	cmp	r3, #64	@ 0x40
 800bf4e:	d102      	bne.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
          frequency = CSI_VALUE;
 800bf50:	4b2b      	ldr	r3, [pc, #172]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 800bf52:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf54:	e011      	b.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800bf56:	4b28      	ldr	r3, [pc, #160]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bf58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf5c:	f003 0302 	and.w	r3, r3, #2
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d106      	bne.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800bf64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf66:	2b50      	cmp	r3, #80	@ 0x50
 800bf68:	d103      	bne.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = LSE_VALUE;
 800bf6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf70:	e003      	b.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
          frequency = 0U;
 800bf72:	2300      	movs	r3, #0
 800bf74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf76:	f001 ba28 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800bf7a:	f001 ba26 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800bf7e:	4b1e      	ldr	r3, [pc, #120]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bf80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bf84:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800bf88:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800bf8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d104      	bne.n	800bf9a <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800bf90:	f7fc fb2c 	bl	80085ec <HAL_RCC_GetPCLK3Freq>
 800bf94:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800bf96:	f001 ba18 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bfa0:	d108      	bne.n	800bfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1218>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfa2:	f107 0314 	add.w	r3, r7, #20
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fe fc20 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bfb0:	f001 ba0b 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bfba:	d108      	bne.n	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfbc:	f107 0308 	add.w	r3, r7, #8
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fe fd7f 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bfca:	f001 b9fe 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800bfce:	4b0a      	ldr	r3, [pc, #40]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f003 0302 	and.w	r3, r3, #2
 800bfd6:	2b02      	cmp	r3, #2
 800bfd8:	d114      	bne.n	800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
 800bfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bfe0:	d110      	bne.n	800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800bfe2:	4b05      	ldr	r3, [pc, #20]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	08db      	lsrs	r3, r3, #3
 800bfe8:	f003 0303 	and.w	r3, r3, #3
 800bfec:	4a03      	ldr	r2, [pc, #12]	@ (800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 800bfee:	fa22 f303 	lsr.w	r3, r2, r3
 800bff2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bff4:	e027      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
 800bff6:	bf00      	nop
 800bff8:	44020c00 	.word	0x44020c00
 800bffc:	03d09000 	.word	0x03d09000
 800c000:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800c004:	4ba0      	ldr	r3, [pc, #640]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c00c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c010:	d106      	bne.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 800c012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c014:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c018:	d102      	bne.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
          frequency = CSI_VALUE;
 800c01a:	4b9c      	ldr	r3, [pc, #624]	@ (800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 800c01c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c01e:	e012      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800c020:	4b99      	ldr	r3, [pc, #612]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c026:	f003 0302 	and.w	r3, r3, #2
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d107      	bne.n	800c03e <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
 800c02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c030:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c034:	d103      	bne.n	800c03e <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
          frequency = LSE_VALUE;
 800c036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c03a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c03c:	e003      	b.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
          frequency = 0U;
 800c03e:	2300      	movs	r3, #0
 800c040:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c042:	f001 b9c2 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c046:	f001 b9c0 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800c04a:	4b8f      	ldr	r3, [pc, #572]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c04c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c050:	f003 0307 	and.w	r3, r3, #7
 800c054:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800c056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d104      	bne.n	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800c05c:	f7fc fa7e 	bl	800855c <HAL_RCC_GetHCLKFreq>
 800c060:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800c062:	f001 b9b2 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800c066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d104      	bne.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
          frequency = HAL_RCC_GetSysClockFreq();
 800c06c:	f7fc f94a 	bl	8008304 <HAL_RCC_GetSysClockFreq>
 800c070:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800c072:	f001 b9aa 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800c076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d108      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c07c:	f107 0314 	add.w	r3, r7, #20
 800c080:	4618      	mov	r0, r3
 800c082:	f7fe fbb3 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c08a:	f001 b99e 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800c08e:	4b7e      	ldr	r3, [pc, #504]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c096:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c09a:	d105      	bne.n	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
 800c09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c09e:	2b03      	cmp	r3, #3
 800c0a0:	d102      	bne.n	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
          frequency = HSE_VALUE;
 800c0a2:	4b7b      	ldr	r3, [pc, #492]	@ (800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>)
 800c0a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0a6:	e023      	b.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800c0a8:	4b77      	ldr	r3, [pc, #476]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 0302 	and.w	r3, r3, #2
 800c0b0:	2b02      	cmp	r3, #2
 800c0b2:	d10c      	bne.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b6:	2b04      	cmp	r3, #4
 800c0b8:	d109      	bne.n	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c0ba:	4b73      	ldr	r3, [pc, #460]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	08db      	lsrs	r3, r3, #3
 800c0c0:	f003 0303 	and.w	r3, r3, #3
 800c0c4:	4a73      	ldr	r2, [pc, #460]	@ (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 800c0c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0cc:	e010      	b.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800c0ce:	4b6e      	ldr	r3, [pc, #440]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c0d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0da:	d105      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0de:	2b05      	cmp	r3, #5
 800c0e0:	d102      	bne.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
          frequency = CSI_VALUE;
 800c0e2:	4b6a      	ldr	r3, [pc, #424]	@ (800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 800c0e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0e6:	e003      	b.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
          frequency = 0U;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c0ec:	f001 b96d 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c0f0:	f001 b96b 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800c0f4:	4b64      	ldr	r3, [pc, #400]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c0f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c0fa:	f003 0308 	and.w	r3, r3, #8
 800c0fe:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800c100:	4b61      	ldr	r3, [pc, #388]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c106:	f003 0302 	and.w	r3, r3, #2
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	d106      	bne.n	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 800c10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c110:	2b00      	cmp	r3, #0
 800c112:	d103      	bne.n	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
        {
          frequency = LSE_VALUE;
 800c114:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c118:	637b      	str	r3, [r7, #52]	@ 0x34
 800c11a:	e012      	b.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800c11c:	4b5a      	ldr	r3, [pc, #360]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c11e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c122:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c12a:	d106      	bne.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 800c12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c12e:	2b08      	cmp	r3, #8
 800c130:	d103      	bne.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
        {
          frequency = LSI_VALUE;
 800c132:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c136:	637b      	str	r3, [r7, #52]	@ 0x34
 800c138:	e003      	b.n	800c142 <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800c13e:	f001 b944 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c142:	f001 b942 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800c146:	4b50      	ldr	r3, [pc, #320]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c148:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c14c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c150:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800c152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c154:	2b00      	cmp	r3, #0
 800c156:	d104      	bne.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c158:	f7fc fa1c 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800c15c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c15e:	f001 b934 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800c162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c168:	d108      	bne.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c16a:	f107 0308 	add.w	r3, r7, #8
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe fca8 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c178:	f001 b927 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800c17c:	4b42      	ldr	r3, [pc, #264]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f003 0302 	and.w	r3, r3, #2
 800c184:	2b02      	cmp	r3, #2
 800c186:	d10d      	bne.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
 800c188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c18a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c18e:	d109      	bne.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c190:	4b3d      	ldr	r3, [pc, #244]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	08db      	lsrs	r3, r3, #3
 800c196:	f003 0303 	and.w	r3, r3, #3
 800c19a:	4a3e      	ldr	r2, [pc, #248]	@ (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 800c19c:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1a2:	e011      	b.n	800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800c1a4:	4b38      	ldr	r3, [pc, #224]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c1ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1b0:	d106      	bne.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c1b8:	d102      	bne.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
          frequency = CSI_VALUE;
 800c1ba:	4b34      	ldr	r3, [pc, #208]	@ (800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 800c1bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1be:	e003      	b.n	800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
          frequency = 0U;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1c4:	f001 b901 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c1c8:	f001 b8ff 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800c1cc:	4b2e      	ldr	r3, [pc, #184]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c1ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c1d2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800c1d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d104      	bne.n	800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c1de:	f7fc f9d9 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800c1e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800c1e4:	f001 b8f1 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800c1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c1ee:	d108      	bne.n	800c202 <HAL_RCCEx_GetPeriphCLKFreq+0x1466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1f0:	f107 0308 	add.w	r3, r7, #8
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe fc65 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1fe:	f001 b8e4 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800c202:	4b21      	ldr	r3, [pc, #132]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f003 0302 	and.w	r3, r3, #2
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d10d      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
 800c20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c210:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c214:	d109      	bne.n	800c22a <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c216:	4b1c      	ldr	r3, [pc, #112]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	08db      	lsrs	r3, r3, #3
 800c21c:	f003 0303 	and.w	r3, r3, #3
 800c220:	4a1c      	ldr	r2, [pc, #112]	@ (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 800c222:	fa22 f303 	lsr.w	r3, r2, r3
 800c226:	637b      	str	r3, [r7, #52]	@ 0x34
 800c228:	e011      	b.n	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800c22a:	4b17      	ldr	r3, [pc, #92]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c236:	d106      	bne.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
 800c238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c23a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800c23e:	d102      	bne.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
          frequency = CSI_VALUE;
 800c240:	4b12      	ldr	r3, [pc, #72]	@ (800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 800c242:	637b      	str	r3, [r7, #52]	@ 0x34
 800c244:	e003      	b.n	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
          frequency = 0U;
 800c246:	2300      	movs	r3, #0
 800c248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c24a:	f001 b8be 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c24e:	f001 b8bc 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800c252:	4b0d      	ldr	r3, [pc, #52]	@ (800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 800c254:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c258:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c25c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800c25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c260:	2b00      	cmp	r3, #0
 800c262:	d104      	bne.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x14d2>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c264:	f7fc f9c2 	bl	80085ec <HAL_RCC_GetPCLK3Freq>
 800c268:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800c26a:	f001 b8ae 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800c26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c270:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c274:	d110      	bne.n	800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x14fc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c276:	f107 0308 	add.w	r3, r7, #8
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fe fc22 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c284:	f001 b8a1 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c288:	44020c00 	.word	0x44020c00
 800c28c:	003d0900 	.word	0x003d0900
 800c290:	007a1200 	.word	0x007a1200
 800c294:	03d09000 	.word	0x03d09000
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800c298:	4b9e      	ldr	r3, [pc, #632]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f003 0302 	and.w	r3, r3, #2
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d10d      	bne.n	800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
 800c2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c2aa:	d109      	bne.n	800c2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c2ac:	4b99      	ldr	r3, [pc, #612]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	08db      	lsrs	r3, r3, #3
 800c2b2:	f003 0303 	and.w	r3, r3, #3
 800c2b6:	4a98      	ldr	r2, [pc, #608]	@ (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800c2b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c2bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2be:	e011      	b.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800c2c0:	4b94      	ldr	r3, [pc, #592]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c2c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2cc:	d106      	bne.n	800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
 800c2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c2d4:	d102      	bne.n	800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
          frequency = CSI_VALUE;
 800c2d6:	4b91      	ldr	r3, [pc, #580]	@ (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 800c2d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c2da:	e003      	b.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
          frequency = 0U;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2e0:	f001 b873 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c2e4:	f001 b871 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c2e8:	4b8a      	ldr	r3, [pc, #552]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c2ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c2ee:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800c2f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d104      	bne.n	800c304 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800c2fa:	f7fc f977 	bl	80085ec <HAL_RCC_GetPCLK3Freq>
 800c2fe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800c300:	f001 b863 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800c304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c306:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c30a:	d108      	bne.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x1582>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c30c:	f107 0308 	add.w	r3, r7, #8
 800c310:	4618      	mov	r0, r3
 800c312:	f7fe fbd7 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c31a:	f001 b856 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800c31e:	4b7d      	ldr	r3, [pc, #500]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 0302 	and.w	r3, r3, #2
 800c326:	2b02      	cmp	r3, #2
 800c328:	d10d      	bne.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
 800c32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c32c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c330:	d109      	bne.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c332:	4b78      	ldr	r3, [pc, #480]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	08db      	lsrs	r3, r3, #3
 800c338:	f003 0303 	and.w	r3, r3, #3
 800c33c:	4a76      	ldr	r2, [pc, #472]	@ (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800c33e:	fa22 f303 	lsr.w	r3, r2, r3
 800c342:	637b      	str	r3, [r7, #52]	@ 0x34
 800c344:	e011      	b.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800c346:	4b73      	ldr	r3, [pc, #460]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c34e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c352:	d106      	bne.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 800c354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c356:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c35a:	d102      	bne.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
          frequency = CSI_VALUE;
 800c35c:	4b6f      	ldr	r3, [pc, #444]	@ (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 800c35e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c360:	e003      	b.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
          frequency = 0U;
 800c362:	2300      	movs	r3, #0
 800c364:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c366:	f001 b830 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c36a:	f001 b82e 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800c36e:	4b69      	ldr	r3, [pc, #420]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c370:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c374:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800c378:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800c37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d104      	bne.n	800c38a <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c380:	f7fc f908 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800c384:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c386:	f001 b820 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800c38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c390:	d108      	bne.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c392:	f107 0308 	add.w	r3, r7, #8
 800c396:	4618      	mov	r0, r3
 800c398:	f7fe fb94 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3a0:	f001 b813 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800c3a4:	4b5b      	ldr	r3, [pc, #364]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f003 0302 	and.w	r3, r3, #2
 800c3ac:	2b02      	cmp	r3, #2
 800c3ae:	d10e      	bne.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c3b6:	d10a      	bne.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c3b8:	4b56      	ldr	r3, [pc, #344]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	08db      	lsrs	r3, r3, #3
 800c3be:	f003 0303 	and.w	r3, r3, #3
 800c3c2:	4a55      	ldr	r2, [pc, #340]	@ (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800c3c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c3c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3ca:	f000 bffe 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c3d2:	f000 bffa 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c3d6:	4b4f      	ldr	r3, [pc, #316]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c3d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c3dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c3e0:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800c3e8:	d056      	beq.n	800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ec:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800c3f0:	f200 808b 	bhi.w	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800c3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3fa:	d03e      	beq.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x16de>
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c402:	f200 8082 	bhi.w	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c408:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c40c:	d027      	beq.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x16c2>
 800c40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c410:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c414:	d879      	bhi.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800c416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c41c:	d017      	beq.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x16b2>
 800c41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c424:	d871      	bhi.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800c426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d004      	beq.n	800c436 <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 800c42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c432:	d004      	beq.n	800c43e <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
 800c434:	e069      	b.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c436:	f7fc f8d9 	bl	80085ec <HAL_RCC_GetPCLK3Freq>
 800c43a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800c43c:	e068      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c43e:	f107 0314 	add.w	r3, r7, #20
 800c442:	4618      	mov	r0, r3
 800c444:	f7fe f9d2 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c44c:	e060      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c44e:	f107 0308 	add.w	r3, r7, #8
 800c452:	4618      	mov	r0, r3
 800c454:	f7fe fb36 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c45c:	e058      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c45e:	4b2d      	ldr	r3, [pc, #180]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c464:	f003 0302 	and.w	r3, r3, #2
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d103      	bne.n	800c474 <HAL_RCCEx_GetPeriphCLKFreq+0x16d8>
            {
              frequency = LSE_VALUE;
 800c46c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c470:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c472:	e04d      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c478:	e04a      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c47a:	4b26      	ldr	r3, [pc, #152]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c47c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c480:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c484:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c488:	d103      	bne.n	800c492 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            {
              frequency = LSI_VALUE;
 800c48a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c48e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c490:	e03e      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 800c492:	2300      	movs	r3, #0
 800c494:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c496:	e03b      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c498:	4b1e      	ldr	r3, [pc, #120]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c49a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c49e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4a4:	4b1b      	ldr	r3, [pc, #108]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 0302 	and.w	r3, r3, #2
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d10c      	bne.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
 800c4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d109      	bne.n	800c4ca <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c4b6:	4b17      	ldr	r3, [pc, #92]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	08db      	lsrs	r3, r3, #3
 800c4bc:	f003 0303 	and.w	r3, r3, #3
 800c4c0:	4a15      	ldr	r2, [pc, #84]	@ (800c518 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800c4c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c4c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4c8:	e01e      	b.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4ca:	4b12      	ldr	r3, [pc, #72]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c4d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4d6:	d106      	bne.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
 800c4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4de:	d102      	bne.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c4e0:	4b0e      	ldr	r3, [pc, #56]	@ (800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 800c4e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4e4:	e010      	b.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c4f2:	d106      	bne.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
 800c4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c4fa:	d102      	bne.n	800c502 <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c4fc:	4b08      	ldr	r3, [pc, #32]	@ (800c520 <HAL_RCCEx_GetPeriphCLKFreq+0x1784>)
 800c4fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800c500:	e002      	b.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c502:	2300      	movs	r3, #0
 800c504:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c506:	e003      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
 800c508:	e002      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          default :
          {
            frequency = 0U;
 800c50a:	2300      	movs	r3, #0
 800c50c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c50e:	bf00      	nop
          }
        }
        break;
 800c510:	f000 bf5b 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c514:	44020c00 	.word	0x44020c00
 800c518:	03d09000 	.word	0x03d09000
 800c51c:	003d0900 	.word	0x003d0900
 800c520:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c524:	4b9e      	ldr	r3, [pc, #632]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c526:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c52a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800c52e:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800c530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c532:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c536:	d056      	beq.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x184a>
 800c538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800c53e:	f200 808b 	bhi.w	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 800c542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c548:	d03e      	beq.n	800c5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x182c>
 800c54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c550:	f200 8082 	bhi.w	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 800c554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c556:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c55a:	d027      	beq.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x1810>
 800c55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c562:	d879      	bhi.n	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 800c564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c56a:	d017      	beq.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x1800>
 800c56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c572:	d871      	bhi.n	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 800c574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c576:	2b00      	cmp	r3, #0
 800c578:	d004      	beq.n	800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>
 800c57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c580:	d004      	beq.n	800c58c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800c582:	e069      	b.n	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800c584:	f7fc f806 	bl	8008594 <HAL_RCC_GetPCLK1Freq>
 800c588:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800c58a:	e068      	b.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c58c:	f107 0314 	add.w	r3, r7, #20
 800c590:	4618      	mov	r0, r3
 800c592:	f7fe f92b 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c59a:	e060      	b.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c59c:	f107 0308 	add.w	r3, r7, #8
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7fe fa8f 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c5aa:	e058      	b.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c5ac:	4b7c      	ldr	r3, [pc, #496]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c5ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5b2:	f003 0302 	and.w	r3, r3, #2
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d103      	bne.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1826>
            {
              frequency = LSE_VALUE;
 800c5ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c5c0:	e04d      	b.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c5c6:	e04a      	b.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c5c8:	4b75      	ldr	r3, [pc, #468]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c5ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c5ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c5d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c5d6:	d103      	bne.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1844>
            {
              frequency = LSI_VALUE;
 800c5d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c5dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c5de:	e03e      	b.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c5e4:	e03b      	b.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5e6:	4b6e      	ldr	r3, [pc, #440]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c5e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c5ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c5f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5f2:	4b6b      	ldr	r3, [pc, #428]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f003 0302 	and.w	r3, r3, #2
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d10c      	bne.n	800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
 800c5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c600:	2b00      	cmp	r3, #0
 800c602:	d109      	bne.n	800c618 <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c604:	4b66      	ldr	r3, [pc, #408]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	08db      	lsrs	r3, r3, #3
 800c60a:	f003 0303 	and.w	r3, r3, #3
 800c60e:	4a65      	ldr	r2, [pc, #404]	@ (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 800c610:	fa22 f303 	lsr.w	r3, r2, r3
 800c614:	637b      	str	r3, [r7, #52]	@ 0x34
 800c616:	e01e      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c618:	4b61      	ldr	r3, [pc, #388]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c624:	d106      	bne.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
 800c626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c62c:	d102      	bne.n	800c634 <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c62e:	4b5e      	ldr	r3, [pc, #376]	@ (800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 800c630:	637b      	str	r3, [r7, #52]	@ 0x34
 800c632:	e010      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c634:	4b5a      	ldr	r3, [pc, #360]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c63c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c640:	d106      	bne.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
 800c642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c644:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c648:	d102      	bne.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c64a:	4b58      	ldr	r3, [pc, #352]	@ (800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 800c64c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c64e:	e002      	b.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c650:	2300      	movs	r3, #0
 800c652:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c654:	e003      	b.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
 800c656:	e002      	b.n	800c65e <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          default :
          {
            frequency = 0U;
 800c658:	2300      	movs	r3, #0
 800c65a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c65c:	bf00      	nop
          }
        }
        break;
 800c65e:	f000 beb4 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800c662:	4b4f      	ldr	r3, [pc, #316]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c664:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c668:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800c66c:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800c66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c674:	d056      	beq.n	800c724 <HAL_RCCEx_GetPeriphCLKFreq+0x1988>
 800c676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c67c:	f200 808b 	bhi.w	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 800c680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c682:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c686:	d03e      	beq.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x196a>
 800c688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c68e:	f200 8082 	bhi.w	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 800c692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c694:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c698:	d027      	beq.n	800c6ea <HAL_RCCEx_GetPeriphCLKFreq+0x194e>
 800c69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c6a0:	d879      	bhi.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6a8:	d017      	beq.n	800c6da <HAL_RCCEx_GetPeriphCLKFreq+0x193e>
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6b0:	d871      	bhi.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d004      	beq.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1926>
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6be:	d004      	beq.n	800c6ca <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800c6c0:	e069      	b.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c6c2:	f7fb ff93 	bl	80085ec <HAL_RCC_GetPCLK3Freq>
 800c6c6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800c6c8:	e068      	b.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6ca:	f107 0314 	add.w	r3, r7, #20
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fe f88c 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c6d8:	e060      	b.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6da:	f107 0308 	add.w	r3, r7, #8
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fe f9f0 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c6e8:	e058      	b.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c6ea:	4b2d      	ldr	r3, [pc, #180]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c6ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c6f0:	f003 0302 	and.w	r3, r3, #2
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d103      	bne.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x1964>
            {
              frequency = LSE_VALUE;
 800c6f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c6fe:	e04d      	b.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c704:	e04a      	b.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c706:	4b26      	ldr	r3, [pc, #152]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c70c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c710:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c714:	d103      	bne.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x1982>
            {
              frequency = LSI_VALUE;
 800c716:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c71a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c71c:	e03e      	b.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 800c71e:	2300      	movs	r3, #0
 800c720:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c722:	e03b      	b.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c724:	4b1e      	ldr	r3, [pc, #120]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c726:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c72a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c72e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c730:	4b1b      	ldr	r3, [pc, #108]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 0302 	and.w	r3, r3, #2
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d10c      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
 800c73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d109      	bne.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c742:	4b17      	ldr	r3, [pc, #92]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	08db      	lsrs	r3, r3, #3
 800c748:	f003 0303 	and.w	r3, r3, #3
 800c74c:	4a15      	ldr	r2, [pc, #84]	@ (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 800c74e:	fa22 f303 	lsr.w	r3, r2, r3
 800c752:	637b      	str	r3, [r7, #52]	@ 0x34
 800c754:	e01e      	b.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c756:	4b12      	ldr	r3, [pc, #72]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c75e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c762:	d106      	bne.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
 800c764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c76a:	d102      	bne.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c76c:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 800c76e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c770:	e010      	b.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c772:	4b0b      	ldr	r3, [pc, #44]	@ (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c77a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c77e:	d106      	bne.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
 800c780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c782:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c786:	d102      	bne.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c788:	4b08      	ldr	r3, [pc, #32]	@ (800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 800c78a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c78c:	e002      	b.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c792:	e003      	b.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
 800c794:	e002      	b.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          default :
          {
            frequency = 0U;
 800c796:	2300      	movs	r3, #0
 800c798:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c79a:	bf00      	nop
          }
        }
        break;
 800c79c:	f000 be15 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800c7a0:	44020c00 	.word	0x44020c00
 800c7a4:	03d09000 	.word	0x03d09000
 800c7a8:	003d0900 	.word	0x003d0900
 800c7ac:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800c7b0:	4b9e      	ldr	r3, [pc, #632]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c7b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c7b6:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800c7ba:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800c7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7be:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800c7c2:	d056      	beq.n	800c872 <HAL_RCCEx_GetPeriphCLKFreq+0x1ad6>
 800c7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800c7ca:	f200 808b 	bhi.w	800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c7d4:	d03e      	beq.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x1ab8>
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c7dc:	f200 8082 	bhi.w	800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c7e6:	d027      	beq.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x1a9c>
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c7ee:	d879      	bhi.n	800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c7f6:	d017      	beq.n	800c828 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8c>
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c7fe:	d871      	bhi.n	800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 800c800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c802:	2b00      	cmp	r3, #0
 800c804:	d004      	beq.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>
 800c806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c808:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c80c:	d004      	beq.n	800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800c80e:	e069      	b.n	800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c810:	f7fb feec 	bl	80085ec <HAL_RCC_GetPCLK3Freq>
 800c814:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800c816:	e068      	b.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c818:	f107 0314 	add.w	r3, r7, #20
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fd ffe5 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c826:	e060      	b.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c828:	f107 0308 	add.w	r3, r7, #8
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7fe f949 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c836:	e058      	b.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c838:	4b7c      	ldr	r3, [pc, #496]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c83a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c83e:	f003 0302 	and.w	r3, r3, #2
 800c842:	2b02      	cmp	r3, #2
 800c844:	d103      	bne.n	800c84e <HAL_RCCEx_GetPeriphCLKFreq+0x1ab2>
            {
              frequency = LSE_VALUE;
 800c846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c84a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c84c:	e04d      	b.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 800c84e:	2300      	movs	r3, #0
 800c850:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c852:	e04a      	b.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c854:	4b75      	ldr	r3, [pc, #468]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c856:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c85a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c85e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c862:	d103      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x1ad0>
            {
              frequency = LSI_VALUE;
 800c864:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c868:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c86a:	e03e      	b.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c870:	e03b      	b.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c872:	4b6e      	ldr	r3, [pc, #440]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c878:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c87c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c87e:	4b6b      	ldr	r3, [pc, #428]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f003 0302 	and.w	r3, r3, #2
 800c886:	2b02      	cmp	r3, #2
 800c888:	d10c      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
 800c88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d109      	bne.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c890:	4b66      	ldr	r3, [pc, #408]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	08db      	lsrs	r3, r3, #3
 800c896:	f003 0303 	and.w	r3, r3, #3
 800c89a:	4a65      	ldr	r2, [pc, #404]	@ (800ca30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 800c89c:	fa22 f303 	lsr.w	r3, r2, r3
 800c8a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8a2:	e01e      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8a4:	4b61      	ldr	r3, [pc, #388]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c8ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8b0:	d106      	bne.n	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
 800c8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8b8:	d102      	bne.n	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c8ba:	4b5e      	ldr	r3, [pc, #376]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 800c8bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8be:	e010      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8c0:	4b5a      	ldr	r3, [pc, #360]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c8cc:	d106      	bne.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
 800c8ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c8d4:	d102      	bne.n	800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800c8d6:	4b58      	ldr	r3, [pc, #352]	@ (800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 800c8d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8da:	e002      	b.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800c8e0:	e003      	b.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
 800c8e2:	e002      	b.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          default :
          {
            frequency = 0U;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c8e8:	bf00      	nop
          }
        }
        break;
 800c8ea:	f000 bd6e 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800c8ee:	4b4f      	ldr	r3, [pc, #316]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c8f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800c8f4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800c8f8:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8fc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c900:	d056      	beq.n	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c14>
 800c902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c904:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c908:	f200 808b 	bhi.w	800ca22 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 800c90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c90e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c912:	d03e      	beq.n	800c992 <HAL_RCCEx_GetPeriphCLKFreq+0x1bf6>
 800c914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c916:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c91a:	f200 8082 	bhi.w	800ca22 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 800c91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c920:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c924:	d027      	beq.n	800c976 <HAL_RCCEx_GetPeriphCLKFreq+0x1bda>
 800c926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c928:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c92c:	d879      	bhi.n	800ca22 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 800c92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c930:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c934:	d017      	beq.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x1bca>
 800c936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c938:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c93c:	d871      	bhi.n	800ca22 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 800c93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c940:	2b00      	cmp	r3, #0
 800c942:	d004      	beq.n	800c94e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb2>
 800c944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c946:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c94a:	d004      	beq.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800c94c:	e069      	b.n	800ca22 <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c94e:	f7fb fe4d 	bl	80085ec <HAL_RCC_GetPCLK3Freq>
 800c952:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800c954:	e068      	b.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c956:	f107 0314 	add.w	r3, r7, #20
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7fd ff46 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c964:	e060      	b.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c966:	f107 0308 	add.w	r3, r7, #8
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fe f8aa 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c974:	e058      	b.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800c976:	4b2d      	ldr	r3, [pc, #180]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c97c:	f003 0302 	and.w	r3, r3, #2
 800c980:	2b02      	cmp	r3, #2
 800c982:	d103      	bne.n	800c98c <HAL_RCCEx_GetPeriphCLKFreq+0x1bf0>
            {
              frequency = LSE_VALUE;
 800c984:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c988:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c98a:	e04d      	b.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c990:	e04a      	b.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800c992:	4b26      	ldr	r3, [pc, #152]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c99c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c9a0:	d103      	bne.n	800c9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1c0e>
            {
              frequency = LSI_VALUE;
 800c9a2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800c9a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800c9a8:	e03e      	b.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800c9ae:	e03b      	b.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9b0:	4b1e      	ldr	r3, [pc, #120]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c9b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800c9b6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c9ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9bc:	4b1b      	ldr	r3, [pc, #108]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f003 0302 	and.w	r3, r3, #2
 800c9c4:	2b02      	cmp	r3, #2
 800c9c6:	d10c      	bne.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
 800c9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d109      	bne.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800c9ce:	4b17      	ldr	r3, [pc, #92]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	08db      	lsrs	r3, r3, #3
 800c9d4:	f003 0303 	and.w	r3, r3, #3
 800c9d8:	4a15      	ldr	r2, [pc, #84]	@ (800ca30 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 800c9da:	fa22 f303 	lsr.w	r3, r2, r3
 800c9de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9e0:	e01e      	b.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9e2:	4b12      	ldr	r3, [pc, #72]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c9ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9ee:	d106      	bne.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
 800c9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9f6:	d102      	bne.n	800c9fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800c9f8:	4b0e      	ldr	r3, [pc, #56]	@ (800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 800c9fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9fc:	e010      	b.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9fe:	4b0b      	ldr	r3, [pc, #44]	@ (800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca0a:	d106      	bne.n	800ca1a <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
 800ca0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca12:	d102      	bne.n	800ca1a <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ca14:	4b08      	ldr	r3, [pc, #32]	@ (800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 800ca16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca18:	e002      	b.n	800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ca1e:	e003      	b.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
 800ca20:	e002      	b.n	800ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          default :
          {
            frequency = 0U;
 800ca22:	2300      	movs	r3, #0
 800ca24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ca26:	bf00      	nop
          }
        }
        break;
 800ca28:	f000 bccf 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800ca2c:	44020c00 	.word	0x44020c00
 800ca30:	03d09000 	.word	0x03d09000
 800ca34:	003d0900 	.word	0x003d0900
 800ca38:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800ca3c:	4b9e      	ldr	r3, [pc, #632]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800ca3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ca42:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ca46:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800ca48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca4e:	d056      	beq.n	800cafe <HAL_RCCEx_GetPeriphCLKFreq+0x1d62>
 800ca50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca56:	f200 808b 	bhi.w	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca60:	d03e      	beq.n	800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d44>
 800ca62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca68:	f200 8082 	bhi.w	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ca72:	d027      	beq.n	800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d28>
 800ca74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ca7a:	d879      	bhi.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 800ca7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca82:	d017      	beq.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d18>
 800ca84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca8a:	d871      	bhi.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 800ca8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d004      	beq.n	800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>
 800ca92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca98:	d004      	beq.n	800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 800ca9a:	e069      	b.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ca9c:	f7fb fda6 	bl	80085ec <HAL_RCC_GetPCLK3Freq>
 800caa0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800caa2:	e068      	b.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caa4:	f107 0314 	add.w	r3, r7, #20
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fd fe9f 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cab2:	e060      	b.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cab4:	f107 0308 	add.w	r3, r7, #8
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fe f803 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cac2:	e058      	b.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800cac4:	4b7c      	ldr	r3, [pc, #496]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800caca:	f003 0302 	and.w	r3, r3, #2
 800cace:	2b02      	cmp	r3, #2
 800cad0:	d103      	bne.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x1d3e>
            {
              frequency = LSE_VALUE;
 800cad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cad6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800cad8:	e04d      	b.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cade:	e04a      	b.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800cae0:	4b75      	ldr	r3, [pc, #468]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cae6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800caea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800caee:	d103      	bne.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d5c>
            {
              frequency = LSI_VALUE;
 800caf0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800caf4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800caf6:	e03e      	b.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cafc:	e03b      	b.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cafe:	4b6e      	ldr	r3, [pc, #440]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cb00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cb04:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800cb08:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb0a:	4b6b      	ldr	r3, [pc, #428]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f003 0302 	and.w	r3, r3, #2
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	d10c      	bne.n	800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
 800cb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d109      	bne.n	800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cb1c:	4b66      	ldr	r3, [pc, #408]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	08db      	lsrs	r3, r3, #3
 800cb22:	f003 0303 	and.w	r3, r3, #3
 800cb26:	4a65      	ldr	r2, [pc, #404]	@ (800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 800cb28:	fa22 f303 	lsr.w	r3, r2, r3
 800cb2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb2e:	e01e      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb30:	4b61      	ldr	r3, [pc, #388]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cb38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb3c:	d106      	bne.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
 800cb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb44:	d102      	bne.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cb46:	4b5e      	ldr	r3, [pc, #376]	@ (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 800cb48:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb4a:	e010      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb4c:	4b5a      	ldr	r3, [pc, #360]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb58:	d106      	bne.n	800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
 800cb5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cb60:	d102      	bne.n	800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cb62:	4b58      	ldr	r3, [pc, #352]	@ (800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 800cb64:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb66:	e002      	b.n	800cb6e <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800cb6c:	e003      	b.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
 800cb6e:	e002      	b.n	800cb76 <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          default :
          {
            frequency = 0U;
 800cb70:	2300      	movs	r3, #0
 800cb72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cb74:	bf00      	nop
          }
        }
        break;
 800cb76:	f000 bc28 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cb7a:	4b4f      	ldr	r3, [pc, #316]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cb7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cb80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cb84:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800cb86:	4b4c      	ldr	r3, [pc, #304]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb92:	d106      	bne.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
 800cb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d103      	bne.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
        {
          frequency = HSE_VALUE;
 800cb9a:	4b4a      	ldr	r3, [pc, #296]	@ (800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 800cb9c:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800cb9e:	f000 bc14 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800cba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cba8:	d108      	bne.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x1e20>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbaa:	f107 0320 	add.w	r3, r7, #32
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fd fcb0 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbb8:	f000 bc07 	b.w	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbc2:	d107      	bne.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e38>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbc4:	f107 0314 	add.w	r3, r7, #20
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fd fe0f 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbce:	69bb      	ldr	r3, [r7, #24]
 800cbd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbd2:	e3fa      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cbd8:	e3f7      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800cbda:	4b37      	ldr	r3, [pc, #220]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cbdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cbe0:	f003 0307 	and.w	r3, r3, #7
 800cbe4:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe8:	2b04      	cmp	r3, #4
 800cbea:	d861      	bhi.n	800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f14>
 800cbec:	a201      	add	r2, pc, #4	@ (adr r2, 800cbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e58>)
 800cbee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf2:	bf00      	nop
 800cbf4:	0800cc09 	.word	0x0800cc09
 800cbf8:	0800cc19 	.word	0x0800cc19
 800cbfc:	0800cc29 	.word	0x0800cc29
 800cc00:	0800cc39 	.word	0x0800cc39
 800cc04:	0800cc3f 	.word	0x0800cc3f
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc08:	f107 0320 	add.w	r3, r7, #32
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7fd fc81 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cc16:	e04e      	b.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc18:	f107 0314 	add.w	r3, r7, #20
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7fd fde5 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cc26:	e046      	b.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc28:	f107 0308 	add.w	r3, r7, #8
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fd ff49 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cc36:	e03e      	b.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cc38:	4b23      	ldr	r3, [pc, #140]	@ (800ccc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2c>)
 800cc3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cc3c:	e03b      	b.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc3e:	4b1e      	ldr	r3, [pc, #120]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cc40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cc44:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800cc48:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc4a:	4b1b      	ldr	r3, [pc, #108]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0302 	and.w	r3, r3, #2
 800cc52:	2b02      	cmp	r3, #2
 800cc54:	d10c      	bne.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
 800cc56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d109      	bne.n	800cc70 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cc5c:	4b16      	ldr	r3, [pc, #88]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	08db      	lsrs	r3, r3, #3
 800cc62:	f003 0303 	and.w	r3, r3, #3
 800cc66:	4a15      	ldr	r2, [pc, #84]	@ (800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 800cc68:	fa22 f303 	lsr.w	r3, r2, r3
 800cc6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc6e:	e01e      	b.n	800ccae <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc70:	4b11      	ldr	r3, [pc, #68]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cc78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc7c:	d106      	bne.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
 800cc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc84:	d102      	bne.n	800cc8c <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cc86:	4b0e      	ldr	r3, [pc, #56]	@ (800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 800cc88:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc8a:	e010      	b.n	800ccae <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc8c:	4b0a      	ldr	r3, [pc, #40]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc98:	d106      	bne.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
 800cc9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cca0:	d102      	bne.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cca2:	4b08      	ldr	r3, [pc, #32]	@ (800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 800cca4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cca6:	e002      	b.n	800ccae <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ccac:	e003      	b.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
 800ccae:	e002      	b.n	800ccb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          default:
          {
            frequency = 0;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ccb4:	bf00      	nop
          }
        }
        break;
 800ccb6:	e388      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800ccb8:	44020c00 	.word	0x44020c00
 800ccbc:	03d09000 	.word	0x03d09000
 800ccc0:	003d0900 	.word	0x003d0900
 800ccc4:	007a1200 	.word	0x007a1200
 800ccc8:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800cccc:	4ba9      	ldr	r3, [pc, #676]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800ccce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ccd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ccd6:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800ccd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccda:	2b20      	cmp	r3, #32
 800ccdc:	f200 809a 	bhi.w	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x2078>
 800cce0:	a201      	add	r2, pc, #4	@ (adr r2, 800cce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4c>)
 800cce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce6:	bf00      	nop
 800cce8:	0800cd6d 	.word	0x0800cd6d
 800ccec:	0800ce15 	.word	0x0800ce15
 800ccf0:	0800ce15 	.word	0x0800ce15
 800ccf4:	0800ce15 	.word	0x0800ce15
 800ccf8:	0800ce15 	.word	0x0800ce15
 800ccfc:	0800ce15 	.word	0x0800ce15
 800cd00:	0800ce15 	.word	0x0800ce15
 800cd04:	0800ce15 	.word	0x0800ce15
 800cd08:	0800cd7d 	.word	0x0800cd7d
 800cd0c:	0800ce15 	.word	0x0800ce15
 800cd10:	0800ce15 	.word	0x0800ce15
 800cd14:	0800ce15 	.word	0x0800ce15
 800cd18:	0800ce15 	.word	0x0800ce15
 800cd1c:	0800ce15 	.word	0x0800ce15
 800cd20:	0800ce15 	.word	0x0800ce15
 800cd24:	0800ce15 	.word	0x0800ce15
 800cd28:	0800cd8d 	.word	0x0800cd8d
 800cd2c:	0800ce15 	.word	0x0800ce15
 800cd30:	0800ce15 	.word	0x0800ce15
 800cd34:	0800ce15 	.word	0x0800ce15
 800cd38:	0800ce15 	.word	0x0800ce15
 800cd3c:	0800ce15 	.word	0x0800ce15
 800cd40:	0800ce15 	.word	0x0800ce15
 800cd44:	0800ce15 	.word	0x0800ce15
 800cd48:	0800cd9d 	.word	0x0800cd9d
 800cd4c:	0800ce15 	.word	0x0800ce15
 800cd50:	0800ce15 	.word	0x0800ce15
 800cd54:	0800ce15 	.word	0x0800ce15
 800cd58:	0800ce15 	.word	0x0800ce15
 800cd5c:	0800ce15 	.word	0x0800ce15
 800cd60:	0800ce15 	.word	0x0800ce15
 800cd64:	0800ce15 	.word	0x0800ce15
 800cd68:	0800cda3 	.word	0x0800cda3
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd6c:	f107 0320 	add.w	r3, r7, #32
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fd fbcf 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd78:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cd7a:	e04e      	b.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd7c:	f107 0314 	add.w	r3, r7, #20
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7fd fd33 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cd8a:	e046      	b.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd8c:	f107 0308 	add.w	r3, r7, #8
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fd fe97 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cd9a:	e03e      	b.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800cd9c:	4b76      	ldr	r3, [pc, #472]	@ (800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 800cd9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cda0:	e03b      	b.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cda2:	4b74      	ldr	r3, [pc, #464]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800cda4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800cda8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800cdac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cdae:	4b71      	ldr	r3, [pc, #452]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 0302 	and.w	r3, r3, #2
 800cdb6:	2b02      	cmp	r3, #2
 800cdb8:	d10c      	bne.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
 800cdba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d109      	bne.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cdc0:	4b6c      	ldr	r3, [pc, #432]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	08db      	lsrs	r3, r3, #3
 800cdc6:	f003 0303 	and.w	r3, r3, #3
 800cdca:	4a6c      	ldr	r2, [pc, #432]	@ (800cf7c <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 800cdcc:	fa22 f303 	lsr.w	r3, r2, r3
 800cdd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdd2:	e01e      	b.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cdd4:	4b67      	ldr	r3, [pc, #412]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cddc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cde0:	d106      	bne.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
 800cde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cde8:	d102      	bne.n	800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cdea:	4b65      	ldr	r3, [pc, #404]	@ (800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 800cdec:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdee:	e010      	b.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdf0:	4b60      	ldr	r3, [pc, #384]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cdfc:	d106      	bne.n	800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
 800cdfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ce04:	d102      	bne.n	800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ce06:	4b5f      	ldr	r3, [pc, #380]	@ (800cf84 <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 800ce08:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce0a:	e002      	b.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ce10:	e003      	b.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
 800ce12:	e002      	b.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          default:
          {
            frequency = 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ce18:	bf00      	nop
          }
        }
        break;
 800ce1a:	e2d6      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800ce1c:	4b55      	ldr	r3, [pc, #340]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800ce1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ce22:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800ce26:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 800ce28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce2e:	d031      	beq.n	800ce94 <HAL_RCCEx_GetPeriphCLKFreq+0x20f8>
 800ce30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce36:	d866      	bhi.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 800ce38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce3a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce3c:	d027      	beq.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0x20f2>
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce40:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce42:	d860      	bhi.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 800ce44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce46:	2b80      	cmp	r3, #128	@ 0x80
 800ce48:	d019      	beq.n	800ce7e <HAL_RCCEx_GetPeriphCLKFreq+0x20e2>
 800ce4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce4c:	2b80      	cmp	r3, #128	@ 0x80
 800ce4e:	d85a      	bhi.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 800ce50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d003      	beq.n	800ce5e <HAL_RCCEx_GetPeriphCLKFreq+0x20c2>
 800ce56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce58:	2b40      	cmp	r3, #64	@ 0x40
 800ce5a:	d008      	beq.n	800ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x20d2>
 800ce5c:	e053      	b.n	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce5e:	f107 0320 	add.w	r3, r7, #32
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fd fb56 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ce6c:	e04e      	b.n	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce6e:	f107 0314 	add.w	r3, r7, #20
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fd fcba 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ce7c:	e046      	b.n	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce7e:	f107 0308 	add.w	r3, r7, #8
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fd fe1e 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ce8c:	e03e      	b.n	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800ce8e:	4b3a      	ldr	r3, [pc, #232]	@ (800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 800ce90:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ce92:	e03b      	b.n	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce94:	4b37      	ldr	r3, [pc, #220]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800ce96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ce9a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ce9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cea0:	4b34      	ldr	r3, [pc, #208]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f003 0302 	and.w	r3, r3, #2
 800cea8:	2b02      	cmp	r3, #2
 800ceaa:	d10c      	bne.n	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800ceac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d109      	bne.n	800cec6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ceb2:	4b30      	ldr	r3, [pc, #192]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	08db      	lsrs	r3, r3, #3
 800ceb8:	f003 0303 	and.w	r3, r3, #3
 800cebc:	4a2f      	ldr	r2, [pc, #188]	@ (800cf7c <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 800cebe:	fa22 f303 	lsr.w	r3, r2, r3
 800cec2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cec4:	e01e      	b.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cec6:	4b2b      	ldr	r3, [pc, #172]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cece:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ced2:	d106      	bne.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
 800ced4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ced6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ceda:	d102      	bne.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800cedc:	4b28      	ldr	r3, [pc, #160]	@ (800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 800cede:	637b      	str	r3, [r7, #52]	@ 0x34
 800cee0:	e010      	b.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cee2:	4b24      	ldr	r3, [pc, #144]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ceea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ceee:	d106      	bne.n	800cefe <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
 800cef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cef6:	d102      	bne.n	800cefe <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800cef8:	4b22      	ldr	r3, [pc, #136]	@ (800cf84 <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 800cefa:	637b      	str	r3, [r7, #52]	@ 0x34
 800cefc:	e002      	b.n	800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800cefe:	2300      	movs	r3, #0
 800cf00:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800cf02:	e003      	b.n	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
 800cf04:	e002      	b.n	800cf0c <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          default:
          {
            frequency = 0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800cf0a:	bf00      	nop
          }
        }
        break;
 800cf0c:	e25d      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800cf0e:	4b19      	ldr	r3, [pc, #100]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800cf10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cf14:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800cf18:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d103      	bne.n	800cf28 <HAL_RCCEx_GetPeriphCLKFreq+0x218c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800cf20:	f7fb fb4e 	bl	80085c0 <HAL_RCC_GetPCLK2Freq>
 800cf24:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800cf26:	e250      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800cf28:	4b12      	ldr	r3, [pc, #72]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf34:	d10b      	bne.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
 800cf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf3c:	d107      	bne.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf3e:	f107 0314 	add.w	r3, r7, #20
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fd fc52 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf4c:	e04f      	b.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800cf4e:	4b09      	ldr	r3, [pc, #36]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf5a:	d115      	bne.n	800cf88 <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
 800cf5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf62:	d111      	bne.n	800cf88 <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf64:	f107 0308 	add.w	r3, r7, #8
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fd fdab 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf72:	e03c      	b.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
 800cf74:	44020c00 	.word	0x44020c00
 800cf78:	00bb8000 	.word	0x00bb8000
 800cf7c:	03d09000 	.word	0x03d09000
 800cf80:	003d0900 	.word	0x003d0900
 800cf84:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800cf88:	4b94      	ldr	r3, [pc, #592]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f003 0302 	and.w	r3, r3, #2
 800cf90:	2b02      	cmp	r3, #2
 800cf92:	d10d      	bne.n	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
 800cf94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf96:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cf9a:	d109      	bne.n	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800cf9c:	4b8f      	ldr	r3, [pc, #572]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	08db      	lsrs	r3, r3, #3
 800cfa2:	f003 0303 	and.w	r3, r3, #3
 800cfa6:	4a8e      	ldr	r2, [pc, #568]	@ (800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 800cfa8:	fa22 f303 	lsr.w	r3, r2, r3
 800cfac:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfae:	e01e      	b.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800cfb0:	4b8a      	ldr	r3, [pc, #552]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cfb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfbc:	d106      	bne.n	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
 800cfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cfc4:	d102      	bne.n	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
          frequency = CSI_VALUE;
 800cfc6:	4b87      	ldr	r3, [pc, #540]	@ (800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 800cfc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfca:	e010      	b.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800cfcc:	4b83      	ldr	r3, [pc, #524]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfd8:	d106      	bne.n	800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
 800cfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfdc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800cfe0:	d102      	bne.n	800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
          frequency = HSE_VALUE;
 800cfe2:	4b81      	ldr	r3, [pc, #516]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 800cfe4:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfe6:	e002      	b.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
          frequency = 0U;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800cfec:	e1ed      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800cfee:	e1ec      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800cff0:	4b7a      	ldr	r3, [pc, #488]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800cff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cff6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cffa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800cffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d103      	bne.n	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0x226e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800d002:	f7fb faf3 	bl	80085ec <HAL_RCC_GetPCLK3Freq>
 800d006:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800d008:	e1df      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800d00a:	4b74      	ldr	r3, [pc, #464]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d012:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d016:	d10b      	bne.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
 800d018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d01a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d01e:	d107      	bne.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d020:	f107 0314 	add.w	r3, r7, #20
 800d024:	4618      	mov	r0, r3
 800d026:	f7fd fbe1 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d02e:	e045      	b.n	800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800d030:	4b6a      	ldr	r3, [pc, #424]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d038:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d03c:	d10b      	bne.n	800d056 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800d03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d044:	d107      	bne.n	800d056 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d046:	f107 0308 	add.w	r3, r7, #8
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fd fd3a 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	637b      	str	r3, [r7, #52]	@ 0x34
 800d054:	e032      	b.n	800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800d056:	4b61      	ldr	r3, [pc, #388]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f003 0302 	and.w	r3, r3, #2
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d10d      	bne.n	800d07e <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
 800d062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d064:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d068:	d109      	bne.n	800d07e <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d06a:	4b5c      	ldr	r3, [pc, #368]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	08db      	lsrs	r3, r3, #3
 800d070:	f003 0303 	and.w	r3, r3, #3
 800d074:	4a5a      	ldr	r2, [pc, #360]	@ (800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 800d076:	fa22 f303 	lsr.w	r3, r2, r3
 800d07a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d07c:	e01e      	b.n	800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800d07e:	4b57      	ldr	r3, [pc, #348]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d086:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d08a:	d106      	bne.n	800d09a <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
 800d08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d08e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d092:	d102      	bne.n	800d09a <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
          frequency = CSI_VALUE;
 800d094:	4b53      	ldr	r3, [pc, #332]	@ (800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 800d096:	637b      	str	r3, [r7, #52]	@ 0x34
 800d098:	e010      	b.n	800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800d09a:	4b50      	ldr	r3, [pc, #320]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0a6:	d106      	bne.n	800d0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
 800d0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0aa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800d0ae:	d102      	bne.n	800d0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
          frequency = HSE_VALUE;
 800d0b0:	4b4d      	ldr	r3, [pc, #308]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 800d0b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0b4:	e002      	b.n	800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
          frequency = 0U;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d0ba:	e186      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800d0bc:	e185      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d0be:	4b47      	ldr	r3, [pc, #284]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d0c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d0c4:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800d0c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d103      	bne.n	800d0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x233c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800d0d0:	f7fb fa76 	bl	80085c0 <HAL_RCC_GetPCLK2Freq>
 800d0d4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800d0d6:	e178      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800d0d8:	4b40      	ldr	r3, [pc, #256]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0e4:	d10b      	bne.n	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d0ec:	d107      	bne.n	800d0fe <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0ee:	f107 0314 	add.w	r3, r7, #20
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7fd fb7a 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0fc:	e045      	b.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800d0fe:	4b37      	ldr	r3, [pc, #220]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d10a:	d10b      	bne.n	800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
 800d10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d10e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d112:	d107      	bne.n	800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d114:	f107 0308 	add.w	r3, r7, #8
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fd fcd3 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	637b      	str	r3, [r7, #52]	@ 0x34
 800d122:	e032      	b.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800d124:	4b2d      	ldr	r3, [pc, #180]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f003 0302 	and.w	r3, r3, #2
 800d12c:	2b02      	cmp	r3, #2
 800d12e:	d10d      	bne.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
 800d130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d132:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800d136:	d109      	bne.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d138:	4b28      	ldr	r3, [pc, #160]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	08db      	lsrs	r3, r3, #3
 800d13e:	f003 0303 	and.w	r3, r3, #3
 800d142:	4a27      	ldr	r2, [pc, #156]	@ (800d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 800d144:	fa22 f303 	lsr.w	r3, r2, r3
 800d148:	637b      	str	r3, [r7, #52]	@ 0x34
 800d14a:	e01e      	b.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800d14c:	4b23      	ldr	r3, [pc, #140]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d158:	d106      	bne.n	800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
 800d15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d160:	d102      	bne.n	800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
          frequency = CSI_VALUE;
 800d162:	4b20      	ldr	r3, [pc, #128]	@ (800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 800d164:	637b      	str	r3, [r7, #52]	@ 0x34
 800d166:	e010      	b.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800d168:	4b1c      	ldr	r3, [pc, #112]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d170:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d174:	d106      	bne.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
 800d176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d178:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800d17c:	d102      	bne.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
          frequency = HSE_VALUE;
 800d17e:	4b1a      	ldr	r3, [pc, #104]	@ (800d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 800d180:	637b      	str	r3, [r7, #52]	@ 0x34
 800d182:	e002      	b.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
          frequency = 0U;
 800d184:	2300      	movs	r3, #0
 800d186:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d188:	e11f      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800d18a:	e11e      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800d18c:	4b13      	ldr	r3, [pc, #76]	@ (800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 800d18e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d192:	f003 0303 	and.w	r3, r3, #3
 800d196:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800d198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19a:	2b03      	cmp	r3, #3
 800d19c:	d85f      	bhi.n	800d25e <HAL_RCCEx_GetPeriphCLKFreq+0x24c2>
 800d19e:	a201      	add	r2, pc, #4	@ (adr r2, 800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2408>)
 800d1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a4:	0800d1b5 	.word	0x0800d1b5
 800d1a8:	0800d1bd 	.word	0x0800d1bd
 800d1ac:	0800d1cd 	.word	0x0800d1cd
 800d1b0:	0800d1ed 	.word	0x0800d1ed
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800d1b4:	f7fb f9d2 	bl	800855c <HAL_RCC_GetHCLKFreq>
 800d1b8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800d1ba:	e053      	b.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d1bc:	f107 0320 	add.w	r3, r7, #32
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fd f9a7 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d1ca:	e04b      	b.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1cc:	f107 0314 	add.w	r3, r7, #20
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7fd fb0b 	bl	800a7ec <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800d1d6:	69fb      	ldr	r3, [r7, #28]
 800d1d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d1da:	e043      	b.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 800d1dc:	44020c00 	.word	0x44020c00
 800d1e0:	03d09000 	.word	0x03d09000
 800d1e4:	003d0900 	.word	0x003d0900
 800d1e8:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d1ec:	4b79      	ldr	r3, [pc, #484]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d1ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d1f2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d1f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d1f8:	4b76      	ldr	r3, [pc, #472]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 0302 	and.w	r3, r3, #2
 800d200:	2b02      	cmp	r3, #2
 800d202:	d10c      	bne.n	800d21e <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
 800d204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d206:	2b00      	cmp	r3, #0
 800d208:	d109      	bne.n	800d21e <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800d20a:	4b72      	ldr	r3, [pc, #456]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	08db      	lsrs	r3, r3, #3
 800d210:	f003 0303 	and.w	r3, r3, #3
 800d214:	4a70      	ldr	r2, [pc, #448]	@ (800d3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x263c>)
 800d216:	fa22 f303 	lsr.w	r3, r2, r3
 800d21a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d21c:	e01e      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d21e:	4b6d      	ldr	r3, [pc, #436]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d22a:	d106      	bne.n	800d23a <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
 800d22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d22e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d232:	d102      	bne.n	800d23a <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800d234:	4b69      	ldr	r3, [pc, #420]	@ (800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x2640>)
 800d236:	637b      	str	r3, [r7, #52]	@ 0x34
 800d238:	e010      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d23a:	4b66      	ldr	r3, [pc, #408]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d242:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d246:	d106      	bne.n	800d256 <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
 800d248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d24e:	d102      	bne.n	800d256 <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800d250:	4b63      	ldr	r3, [pc, #396]	@ (800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2644>)
 800d252:	637b      	str	r3, [r7, #52]	@ 0x34
 800d254:	e002      	b.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800d256:	2300      	movs	r3, #0
 800d258:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800d25a:	e003      	b.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 800d25c:	e002      	b.n	800d264 <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          default:
          {
            frequency = 0U;
 800d25e:	2300      	movs	r3, #0
 800d260:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d262:	bf00      	nop
          }
        }
        break;
 800d264:	e0b1      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800d266:	4b5b      	ldr	r3, [pc, #364]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d26c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d270:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800d272:	4b58      	ldr	r3, [pc, #352]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d278:	f003 0302 	and.w	r3, r3, #2
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d106      	bne.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
 800d280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d282:	2b00      	cmp	r3, #0
 800d284:	d103      	bne.n	800d28e <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
        {
          frequency = LSE_VALUE;
 800d286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d28a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d28c:	e01f      	b.n	800d2ce <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800d28e:	4b51      	ldr	r3, [pc, #324]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d298:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d29c:	d106      	bne.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
 800d29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a0:	2b40      	cmp	r3, #64	@ 0x40
 800d2a2:	d103      	bne.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
        {
          frequency = LSI_VALUE;
 800d2a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d2a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2aa:	e010      	b.n	800d2ce <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800d2ac:	4b49      	ldr	r3, [pc, #292]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d2b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2b8:	d106      	bne.n	800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2bc:	2b80      	cmp	r3, #128	@ 0x80
 800d2be:	d103      	bne.n	800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
        {
          frequency = CSI_VALUE / 122U;
 800d2c0:	f248 0312 	movw	r3, #32786	@ 0x8012
 800d2c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2c6:	e002      	b.n	800d2ce <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800d2cc:	e07d      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800d2ce:	e07c      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800d2d0:	4b40      	ldr	r3, [pc, #256]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d2d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800d2d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d2da:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800d2dc:	4b3d      	ldr	r3, [pc, #244]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d2e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2e8:	d105      	bne.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d102      	bne.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = HSI48_VALUE;
 800d2f0:	4b3c      	ldr	r3, [pc, #240]	@ (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 800d2f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2f4:	e031      	b.n	800d35a <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800d2f6:	4b37      	ldr	r3, [pc, #220]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d2fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d302:	d10a      	bne.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
 800d304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d306:	2b10      	cmp	r3, #16
 800d308:	d107      	bne.n	800d31a <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d30a:	f107 0320 	add.w	r3, r7, #32
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fd f900 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d316:	637b      	str	r3, [r7, #52]	@ 0x34
 800d318:	e01f      	b.n	800d35a <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800d31a:	4b2e      	ldr	r3, [pc, #184]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d31c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d320:	f003 0302 	and.w	r3, r3, #2
 800d324:	2b02      	cmp	r3, #2
 800d326:	d106      	bne.n	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
 800d328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32a:	2b20      	cmp	r3, #32
 800d32c:	d103      	bne.n	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        {
          frequency = LSE_VALUE;
 800d32e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d332:	637b      	str	r3, [r7, #52]	@ 0x34
 800d334:	e011      	b.n	800d35a <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800d336:	4b27      	ldr	r3, [pc, #156]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d33c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d344:	d106      	bne.n	800d354 <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
 800d346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d348:	2b30      	cmp	r3, #48	@ 0x30
 800d34a:	d103      	bne.n	800d354 <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
        {
          frequency = LSI_VALUE;
 800d34c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d350:	637b      	str	r3, [r7, #52]	@ 0x34
 800d352:	e002      	b.n	800d35a <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800d354:	2300      	movs	r3, #0
 800d356:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800d358:	e037      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800d35a:	e036      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800d35c:	4b1d      	ldr	r3, [pc, #116]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d35e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d362:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d366:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800d368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d36a:	2b10      	cmp	r3, #16
 800d36c:	d107      	bne.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x25e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d36e:	f107 0320 	add.w	r3, r7, #32
 800d372:	4618      	mov	r0, r3
 800d374:	f7fd f8ce 	bl	800a514 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d37a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800d37c:	e025      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800d37e:	4b15      	ldr	r3, [pc, #84]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d386:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d38a:	d10a      	bne.n	800d3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
 800d38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d38e:	2b20      	cmp	r3, #32
 800d390:	d107      	bne.n	800d3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d392:	f107 0308 	add.w	r3, r7, #8
 800d396:	4618      	mov	r0, r3
 800d398:	f7fd fb94 	bl	800aac4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3a0:	e00f      	b.n	800d3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800d3a2:	4b0c      	ldr	r3, [pc, #48]	@ (800d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d3aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d3ae:	d105      	bne.n	800d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3b2:	2b30      	cmp	r3, #48	@ 0x30
 800d3b4:	d102      	bne.n	800d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = HSI48_VALUE;
 800d3b6:	4b0b      	ldr	r3, [pc, #44]	@ (800d3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 800d3b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3ba:	e002      	b.n	800d3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800d3c0:	e003      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800d3c2:	e002      	b.n	800d3ca <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      default:
        frequency = 0U;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d3c8:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800d3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	373c      	adds	r7, #60	@ 0x3c
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd90      	pop	{r4, r7, pc}
 800d3d4:	44020c00 	.word	0x44020c00
 800d3d8:	03d09000 	.word	0x03d09000
 800d3dc:	003d0900 	.word	0x003d0900
 800d3e0:	007a1200 	.word	0x007a1200
 800d3e4:	02dc6c00 	.word	0x02dc6c00

0800d3e8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800d3f0:	4b48      	ldr	r3, [pc, #288]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4a47      	ldr	r2, [pc, #284]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d3f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d3fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d3fc:	f7f6 fcd2 	bl	8003da4 <HAL_GetTick>
 800d400:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d402:	e008      	b.n	800d416 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d404:	f7f6 fcce 	bl	8003da4 <HAL_GetTick>
 800d408:	4602      	mov	r2, r0
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	2b02      	cmp	r3, #2
 800d410:	d901      	bls.n	800d416 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d412:	2303      	movs	r3, #3
 800d414:	e07a      	b.n	800d50c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d416:	4b3f      	ldr	r3, [pc, #252]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1f0      	bne.n	800d404 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800d422:	4b3c      	ldr	r3, [pc, #240]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d426:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d42a:	f023 0303 	bic.w	r3, r3, #3
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	6811      	ldr	r1, [r2, #0]
 800d432:	687a      	ldr	r2, [r7, #4]
 800d434:	6852      	ldr	r2, [r2, #4]
 800d436:	0212      	lsls	r2, r2, #8
 800d438:	430a      	orrs	r2, r1
 800d43a:	4936      	ldr	r1, [pc, #216]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d43c:	4313      	orrs	r3, r2
 800d43e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	3b01      	subs	r3, #1
 800d446:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	3b01      	subs	r3, #1
 800d450:	025b      	lsls	r3, r3, #9
 800d452:	b29b      	uxth	r3, r3
 800d454:	431a      	orrs	r2, r3
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	3b01      	subs	r3, #1
 800d45c:	041b      	lsls	r3, r3, #16
 800d45e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d462:	431a      	orrs	r2, r3
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	695b      	ldr	r3, [r3, #20]
 800d468:	3b01      	subs	r3, #1
 800d46a:	061b      	lsls	r3, r3, #24
 800d46c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d470:	4928      	ldr	r1, [pc, #160]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d472:	4313      	orrs	r3, r2
 800d474:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800d476:	4b27      	ldr	r3, [pc, #156]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d47a:	f023 020c 	bic.w	r2, r3, #12
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	699b      	ldr	r3, [r3, #24]
 800d482:	4924      	ldr	r1, [pc, #144]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d484:	4313      	orrs	r3, r2
 800d486:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800d488:	4b22      	ldr	r3, [pc, #136]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d48c:	f023 0220 	bic.w	r2, r3, #32
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	69db      	ldr	r3, [r3, #28]
 800d494:	491f      	ldr	r1, [pc, #124]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d496:	4313      	orrs	r3, r2
 800d498:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800d49a:	4b1e      	ldr	r3, [pc, #120]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4a2:	491c      	ldr	r1, [pc, #112]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d4a4:	4313      	orrs	r3, r2
 800d4a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800d4a8:	4b1a      	ldr	r3, [pc, #104]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d4aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4ac:	4a19      	ldr	r2, [pc, #100]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d4ae:	f023 0310 	bic.w	r3, r3, #16
 800d4b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800d4b4:	4b17      	ldr	r3, [pc, #92]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d4b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d4bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	6a12      	ldr	r2, [r2, #32]
 800d4c4:	00d2      	lsls	r2, r2, #3
 800d4c6:	4913      	ldr	r1, [pc, #76]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800d4cc:	4b11      	ldr	r3, [pc, #68]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d4ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4d0:	4a10      	ldr	r2, [pc, #64]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d4d2:	f043 0310 	orr.w	r3, r3, #16
 800d4d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800d4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a0d      	ldr	r2, [pc, #52]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d4de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d4e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d4e4:	f7f6 fc5e 	bl	8003da4 <HAL_GetTick>
 800d4e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d4ea:	e008      	b.n	800d4fe <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d4ec:	f7f6 fc5a 	bl	8003da4 <HAL_GetTick>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	d901      	bls.n	800d4fe <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800d4fa:	2303      	movs	r3, #3
 800d4fc:	e006      	b.n	800d50c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d4fe:	4b05      	ldr	r3, [pc, #20]	@ (800d514 <RCCEx_PLL2_Config+0x12c>)
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d506:	2b00      	cmp	r3, #0
 800d508:	d0f0      	beq.n	800d4ec <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800d50a:	2300      	movs	r3, #0

}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3710      	adds	r7, #16
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	44020c00 	.word	0x44020c00

0800d518 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b084      	sub	sp, #16
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800d520:	4b48      	ldr	r3, [pc, #288]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a47      	ldr	r2, [pc, #284]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d52a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d52c:	f7f6 fc3a 	bl	8003da4 <HAL_GetTick>
 800d530:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d532:	e008      	b.n	800d546 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d534:	f7f6 fc36 	bl	8003da4 <HAL_GetTick>
 800d538:	4602      	mov	r2, r0
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	1ad3      	subs	r3, r2, r3
 800d53e:	2b02      	cmp	r3, #2
 800d540:	d901      	bls.n	800d546 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800d542:	2303      	movs	r3, #3
 800d544:	e07a      	b.n	800d63c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d546:	4b3f      	ldr	r3, [pc, #252]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1f0      	bne.n	800d534 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800d552:	4b3c      	ldr	r3, [pc, #240]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d556:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d55a:	f023 0303 	bic.w	r3, r3, #3
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	6811      	ldr	r1, [r2, #0]
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	6852      	ldr	r2, [r2, #4]
 800d566:	0212      	lsls	r2, r2, #8
 800d568:	430a      	orrs	r2, r1
 800d56a:	4936      	ldr	r1, [pc, #216]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d56c:	4313      	orrs	r3, r2
 800d56e:	630b      	str	r3, [r1, #48]	@ 0x30
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	3b01      	subs	r3, #1
 800d576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	3b01      	subs	r3, #1
 800d580:	025b      	lsls	r3, r3, #9
 800d582:	b29b      	uxth	r3, r3
 800d584:	431a      	orrs	r2, r3
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	691b      	ldr	r3, [r3, #16]
 800d58a:	3b01      	subs	r3, #1
 800d58c:	041b      	lsls	r3, r3, #16
 800d58e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d592:	431a      	orrs	r2, r3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	695b      	ldr	r3, [r3, #20]
 800d598:	3b01      	subs	r3, #1
 800d59a:	061b      	lsls	r3, r3, #24
 800d59c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d5a0:	4928      	ldr	r1, [pc, #160]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d5a6:	4b27      	ldr	r3, [pc, #156]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d5a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5aa:	f023 020c 	bic.w	r2, r3, #12
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	699b      	ldr	r3, [r3, #24]
 800d5b2:	4924      	ldr	r1, [pc, #144]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800d5b8:	4b22      	ldr	r3, [pc, #136]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d5ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5bc:	f023 0220 	bic.w	r2, r3, #32
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	69db      	ldr	r3, [r3, #28]
 800d5c4:	491f      	ldr	r1, [pc, #124]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800d5ca:	4b1e      	ldr	r3, [pc, #120]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d5cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5d2:	491c      	ldr	r1, [pc, #112]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800d5d8:	4b1a      	ldr	r3, [pc, #104]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d5da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5dc:	4a19      	ldr	r2, [pc, #100]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d5de:	f023 0310 	bic.w	r3, r3, #16
 800d5e2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800d5e4:	4b17      	ldr	r3, [pc, #92]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d5e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d5e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d5ec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	6a12      	ldr	r2, [r2, #32]
 800d5f4:	00d2      	lsls	r2, r2, #3
 800d5f6:	4913      	ldr	r1, [pc, #76]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800d5fc:	4b11      	ldr	r3, [pc, #68]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d5fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d600:	4a10      	ldr	r2, [pc, #64]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d602:	f043 0310 	orr.w	r3, r3, #16
 800d606:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800d608:	4b0e      	ldr	r3, [pc, #56]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4a0d      	ldr	r2, [pc, #52]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d60e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d612:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d614:	f7f6 fbc6 	bl	8003da4 <HAL_GetTick>
 800d618:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d61a:	e008      	b.n	800d62e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d61c:	f7f6 fbc2 	bl	8003da4 <HAL_GetTick>
 800d620:	4602      	mov	r2, r0
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	1ad3      	subs	r3, r2, r3
 800d626:	2b02      	cmp	r3, #2
 800d628:	d901      	bls.n	800d62e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800d62a:	2303      	movs	r3, #3
 800d62c:	e006      	b.n	800d63c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d62e:	4b05      	ldr	r3, [pc, #20]	@ (800d644 <RCCEx_PLL3_Config+0x12c>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d636:	2b00      	cmp	r3, #0
 800d638:	d0f0      	beq.n	800d61c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	44020c00 	.word	0x44020c00

0800d648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d101      	bne.n	800d65a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d656:	2301      	movs	r3, #1
 800d658:	e049      	b.n	800d6ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d660:	b2db      	uxtb	r3, r3
 800d662:	2b00      	cmp	r3, #0
 800d664:	d106      	bne.n	800d674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f7f5 fca2 	bl	8002fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2202      	movs	r2, #2
 800d678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	3304      	adds	r3, #4
 800d684:	4619      	mov	r1, r3
 800d686:	4610      	mov	r0, r2
 800d688:	f001 fa22 	bl	800ead0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2201      	movs	r2, #1
 800d690:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d6ec:	2300      	movs	r3, #0
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3708      	adds	r7, #8
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
	...

0800d6f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d706:	b2db      	uxtb	r3, r3
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d001      	beq.n	800d710 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d70c:	2301      	movs	r3, #1
 800d70e:	e074      	b.n	800d7fa <HAL_TIM_Base_Start+0x102>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2202      	movs	r2, #2
 800d714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	4a3a      	ldr	r2, [pc, #232]	@ (800d808 <HAL_TIM_Base_Start+0x110>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d04a      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a39      	ldr	r2, [pc, #228]	@ (800d80c <HAL_TIM_Base_Start+0x114>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d045      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d734:	d040      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d73e:	d03b      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a32      	ldr	r2, [pc, #200]	@ (800d810 <HAL_TIM_Base_Start+0x118>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d036      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a31      	ldr	r2, [pc, #196]	@ (800d814 <HAL_TIM_Base_Start+0x11c>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d031      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a2f      	ldr	r2, [pc, #188]	@ (800d818 <HAL_TIM_Base_Start+0x120>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d02c      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a2e      	ldr	r2, [pc, #184]	@ (800d81c <HAL_TIM_Base_Start+0x124>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d027      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a2c      	ldr	r2, [pc, #176]	@ (800d820 <HAL_TIM_Base_Start+0x128>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d022      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a2b      	ldr	r2, [pc, #172]	@ (800d824 <HAL_TIM_Base_Start+0x12c>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d01d      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a29      	ldr	r2, [pc, #164]	@ (800d828 <HAL_TIM_Base_Start+0x130>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d018      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a28      	ldr	r2, [pc, #160]	@ (800d82c <HAL_TIM_Base_Start+0x134>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d013      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	4a26      	ldr	r2, [pc, #152]	@ (800d830 <HAL_TIM_Base_Start+0x138>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d00e      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4a25      	ldr	r2, [pc, #148]	@ (800d834 <HAL_TIM_Base_Start+0x13c>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d009      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a23      	ldr	r2, [pc, #140]	@ (800d838 <HAL_TIM_Base_Start+0x140>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d004      	beq.n	800d7b8 <HAL_TIM_Base_Start+0xc0>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a22      	ldr	r2, [pc, #136]	@ (800d83c <HAL_TIM_Base_Start+0x144>)
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	d115      	bne.n	800d7e4 <HAL_TIM_Base_Start+0xec>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	689a      	ldr	r2, [r3, #8]
 800d7be:	4b20      	ldr	r3, [pc, #128]	@ (800d840 <HAL_TIM_Base_Start+0x148>)
 800d7c0:	4013      	ands	r3, r2
 800d7c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b06      	cmp	r3, #6
 800d7c8:	d015      	beq.n	800d7f6 <HAL_TIM_Base_Start+0xfe>
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7d0:	d011      	beq.n	800d7f6 <HAL_TIM_Base_Start+0xfe>
    {
      __HAL_TIM_ENABLE(htim);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f042 0201 	orr.w	r2, r2, #1
 800d7e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7e2:	e008      	b.n	800d7f6 <HAL_TIM_Base_Start+0xfe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f042 0201 	orr.w	r2, r2, #1
 800d7f2:	601a      	str	r2, [r3, #0]
 800d7f4:	e000      	b.n	800d7f8 <HAL_TIM_Base_Start+0x100>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	40012c00 	.word	0x40012c00
 800d80c:	50012c00 	.word	0x50012c00
 800d810:	40000400 	.word	0x40000400
 800d814:	50000400 	.word	0x50000400
 800d818:	40000800 	.word	0x40000800
 800d81c:	50000800 	.word	0x50000800
 800d820:	40000c00 	.word	0x40000c00
 800d824:	50000c00 	.word	0x50000c00
 800d828:	40013400 	.word	0x40013400
 800d82c:	50013400 	.word	0x50013400
 800d830:	40001800 	.word	0x40001800
 800d834:	50001800 	.word	0x50001800
 800d838:	40014000 	.word	0x40014000
 800d83c:	50014000 	.word	0x50014000
 800d840:	00010007 	.word	0x00010007

0800d844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d844:	b480      	push	{r7}
 800d846:	b085      	sub	sp, #20
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d852:	b2db      	uxtb	r3, r3
 800d854:	2b01      	cmp	r3, #1
 800d856:	d001      	beq.n	800d85c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d858:	2301      	movs	r3, #1
 800d85a:	e07c      	b.n	800d956 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2202      	movs	r2, #2
 800d860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	68da      	ldr	r2, [r3, #12]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f042 0201 	orr.w	r2, r2, #1
 800d872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a3a      	ldr	r2, [pc, #232]	@ (800d964 <HAL_TIM_Base_Start_IT+0x120>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d04a      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4a39      	ldr	r2, [pc, #228]	@ (800d968 <HAL_TIM_Base_Start_IT+0x124>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d045      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d890:	d040      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d89a:	d03b      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a32      	ldr	r2, [pc, #200]	@ (800d96c <HAL_TIM_Base_Start_IT+0x128>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d036      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a31      	ldr	r2, [pc, #196]	@ (800d970 <HAL_TIM_Base_Start_IT+0x12c>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d031      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a2f      	ldr	r2, [pc, #188]	@ (800d974 <HAL_TIM_Base_Start_IT+0x130>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d02c      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a2e      	ldr	r2, [pc, #184]	@ (800d978 <HAL_TIM_Base_Start_IT+0x134>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d027      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a2c      	ldr	r2, [pc, #176]	@ (800d97c <HAL_TIM_Base_Start_IT+0x138>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d022      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a2b      	ldr	r2, [pc, #172]	@ (800d980 <HAL_TIM_Base_Start_IT+0x13c>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d01d      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4a29      	ldr	r2, [pc, #164]	@ (800d984 <HAL_TIM_Base_Start_IT+0x140>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d018      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4a28      	ldr	r2, [pc, #160]	@ (800d988 <HAL_TIM_Base_Start_IT+0x144>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d013      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4a26      	ldr	r2, [pc, #152]	@ (800d98c <HAL_TIM_Base_Start_IT+0x148>)
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d00e      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a25      	ldr	r2, [pc, #148]	@ (800d990 <HAL_TIM_Base_Start_IT+0x14c>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d009      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a23      	ldr	r2, [pc, #140]	@ (800d994 <HAL_TIM_Base_Start_IT+0x150>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d004      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xd0>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4a22      	ldr	r2, [pc, #136]	@ (800d998 <HAL_TIM_Base_Start_IT+0x154>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d115      	bne.n	800d940 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	689a      	ldr	r2, [r3, #8]
 800d91a:	4b20      	ldr	r3, [pc, #128]	@ (800d99c <HAL_TIM_Base_Start_IT+0x158>)
 800d91c:	4013      	ands	r3, r2
 800d91e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2b06      	cmp	r3, #6
 800d924:	d015      	beq.n	800d952 <HAL_TIM_Base_Start_IT+0x10e>
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d92c:	d011      	beq.n	800d952 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f042 0201 	orr.w	r2, r2, #1
 800d93c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d93e:	e008      	b.n	800d952 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f042 0201 	orr.w	r2, r2, #1
 800d94e:	601a      	str	r2, [r3, #0]
 800d950:	e000      	b.n	800d954 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d952:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d954:	2300      	movs	r3, #0
}
 800d956:	4618      	mov	r0, r3
 800d958:	3714      	adds	r7, #20
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	40012c00 	.word	0x40012c00
 800d968:	50012c00 	.word	0x50012c00
 800d96c:	40000400 	.word	0x40000400
 800d970:	50000400 	.word	0x50000400
 800d974:	40000800 	.word	0x40000800
 800d978:	50000800 	.word	0x50000800
 800d97c:	40000c00 	.word	0x40000c00
 800d980:	50000c00 	.word	0x50000c00
 800d984:	40013400 	.word	0x40013400
 800d988:	50013400 	.word	0x50013400
 800d98c:	40001800 	.word	0x40001800
 800d990:	50001800 	.word	0x50001800
 800d994:	40014000 	.word	0x40014000
 800d998:	50014000 	.word	0x50014000
 800d99c:	00010007 	.word	0x00010007

0800d9a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d101      	bne.n	800d9b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e049      	b.n	800da46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d106      	bne.n	800d9cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7f5 fb4a 	bl	8003060 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2202      	movs	r2, #2
 800d9d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681a      	ldr	r2, [r3, #0]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	3304      	adds	r3, #4
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4610      	mov	r0, r2
 800d9e0:	f001 f876 	bl	800ead0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2201      	movs	r2, #1
 800da08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2201      	movs	r2, #1
 800da10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2201      	movs	r2, #1
 800da20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2201      	movs	r2, #1
 800da30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2201      	movs	r2, #1
 800da40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
	...

0800da50 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
 800da5c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800da5e:	2300      	movs	r3, #0
 800da60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d109      	bne.n	800da7c <HAL_TIM_PWM_Start_DMA+0x2c>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	2b02      	cmp	r3, #2
 800da72:	bf0c      	ite	eq
 800da74:	2301      	moveq	r3, #1
 800da76:	2300      	movne	r3, #0
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	e03c      	b.n	800daf6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	2b04      	cmp	r3, #4
 800da80:	d109      	bne.n	800da96 <HAL_TIM_PWM_Start_DMA+0x46>
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	2b02      	cmp	r3, #2
 800da8c:	bf0c      	ite	eq
 800da8e:	2301      	moveq	r3, #1
 800da90:	2300      	movne	r3, #0
 800da92:	b2db      	uxtb	r3, r3
 800da94:	e02f      	b.n	800daf6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800da96:	68bb      	ldr	r3, [r7, #8]
 800da98:	2b08      	cmp	r3, #8
 800da9a:	d109      	bne.n	800dab0 <HAL_TIM_PWM_Start_DMA+0x60>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	2b02      	cmp	r3, #2
 800daa6:	bf0c      	ite	eq
 800daa8:	2301      	moveq	r3, #1
 800daaa:	2300      	movne	r3, #0
 800daac:	b2db      	uxtb	r3, r3
 800daae:	e022      	b.n	800daf6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	2b0c      	cmp	r3, #12
 800dab4:	d109      	bne.n	800daca <HAL_TIM_PWM_Start_DMA+0x7a>
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	bf0c      	ite	eq
 800dac2:	2301      	moveq	r3, #1
 800dac4:	2300      	movne	r3, #0
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	e015      	b.n	800daf6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	2b10      	cmp	r3, #16
 800dace:	d109      	bne.n	800dae4 <HAL_TIM_PWM_Start_DMA+0x94>
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	2b02      	cmp	r3, #2
 800dada:	bf0c      	ite	eq
 800dadc:	2301      	moveq	r3, #1
 800dade:	2300      	movne	r3, #0
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	e008      	b.n	800daf6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800daea:	b2db      	uxtb	r3, r3
 800daec:	2b02      	cmp	r3, #2
 800daee:	bf0c      	ite	eq
 800daf0:	2301      	moveq	r3, #1
 800daf2:	2300      	movne	r3, #0
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d001      	beq.n	800dafe <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800dafa:	2302      	movs	r3, #2
 800dafc:	e20c      	b.n	800df18 <HAL_TIM_PWM_Start_DMA+0x4c8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d109      	bne.n	800db18 <HAL_TIM_PWM_Start_DMA+0xc8>
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	bf0c      	ite	eq
 800db10:	2301      	moveq	r3, #1
 800db12:	2300      	movne	r3, #0
 800db14:	b2db      	uxtb	r3, r3
 800db16:	e03c      	b.n	800db92 <HAL_TIM_PWM_Start_DMA+0x142>
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	2b04      	cmp	r3, #4
 800db1c:	d109      	bne.n	800db32 <HAL_TIM_PWM_Start_DMA+0xe2>
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800db24:	b2db      	uxtb	r3, r3
 800db26:	2b01      	cmp	r3, #1
 800db28:	bf0c      	ite	eq
 800db2a:	2301      	moveq	r3, #1
 800db2c:	2300      	movne	r3, #0
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	e02f      	b.n	800db92 <HAL_TIM_PWM_Start_DMA+0x142>
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	2b08      	cmp	r3, #8
 800db36:	d109      	bne.n	800db4c <HAL_TIM_PWM_Start_DMA+0xfc>
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	2b01      	cmp	r3, #1
 800db42:	bf0c      	ite	eq
 800db44:	2301      	moveq	r3, #1
 800db46:	2300      	movne	r3, #0
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	e022      	b.n	800db92 <HAL_TIM_PWM_Start_DMA+0x142>
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	2b0c      	cmp	r3, #12
 800db50:	d109      	bne.n	800db66 <HAL_TIM_PWM_Start_DMA+0x116>
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	bf0c      	ite	eq
 800db5e:	2301      	moveq	r3, #1
 800db60:	2300      	movne	r3, #0
 800db62:	b2db      	uxtb	r3, r3
 800db64:	e015      	b.n	800db92 <HAL_TIM_PWM_Start_DMA+0x142>
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	2b10      	cmp	r3, #16
 800db6a:	d109      	bne.n	800db80 <HAL_TIM_PWM_Start_DMA+0x130>
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800db72:	b2db      	uxtb	r3, r3
 800db74:	2b01      	cmp	r3, #1
 800db76:	bf0c      	ite	eq
 800db78:	2301      	moveq	r3, #1
 800db7a:	2300      	movne	r3, #0
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	e008      	b.n	800db92 <HAL_TIM_PWM_Start_DMA+0x142>
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800db86:	b2db      	uxtb	r3, r3
 800db88:	2b01      	cmp	r3, #1
 800db8a:	bf0c      	ite	eq
 800db8c:	2301      	moveq	r3, #1
 800db8e:	2300      	movne	r3, #0
 800db90:	b2db      	uxtb	r3, r3
 800db92:	2b00      	cmp	r3, #0
 800db94:	d034      	beq.n	800dc00 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <HAL_TIM_PWM_Start_DMA+0x152>
 800db9c:	887b      	ldrh	r3, [r7, #2]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d101      	bne.n	800dba6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800dba2:	2301      	movs	r3, #1
 800dba4:	e1b8      	b.n	800df18 <HAL_TIM_PWM_Start_DMA+0x4c8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d104      	bne.n	800dbb6 <HAL_TIM_PWM_Start_DMA+0x166>
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2202      	movs	r2, #2
 800dbb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dbb4:	e026      	b.n	800dc04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	2b04      	cmp	r3, #4
 800dbba:	d104      	bne.n	800dbc6 <HAL_TIM_PWM_Start_DMA+0x176>
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2202      	movs	r2, #2
 800dbc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dbc4:	e01e      	b.n	800dc04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	2b08      	cmp	r3, #8
 800dbca:	d104      	bne.n	800dbd6 <HAL_TIM_PWM_Start_DMA+0x186>
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2202      	movs	r2, #2
 800dbd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dbd4:	e016      	b.n	800dc04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	2b0c      	cmp	r3, #12
 800dbda:	d104      	bne.n	800dbe6 <HAL_TIM_PWM_Start_DMA+0x196>
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	2202      	movs	r2, #2
 800dbe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dbe4:	e00e      	b.n	800dc04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	2b10      	cmp	r3, #16
 800dbea:	d104      	bne.n	800dbf6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2202      	movs	r2, #2
 800dbf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dbf4:	e006      	b.n	800dc04 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2202      	movs	r2, #2
 800dbfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dbfe:	e001      	b.n	800dc04 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800dc00:	2301      	movs	r3, #1
 800dc02:	e189      	b.n	800df18 <HAL_TIM_PWM_Start_DMA+0x4c8>
  }

  switch (Channel)
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	2b0c      	cmp	r3, #12
 800dc08:	f200 80ae 	bhi.w	800dd68 <HAL_TIM_PWM_Start_DMA+0x318>
 800dc0c:	a201      	add	r2, pc, #4	@ (adr r2, 800dc14 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800dc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc12:	bf00      	nop
 800dc14:	0800dc49 	.word	0x0800dc49
 800dc18:	0800dd69 	.word	0x0800dd69
 800dc1c:	0800dd69 	.word	0x0800dd69
 800dc20:	0800dd69 	.word	0x0800dd69
 800dc24:	0800dc91 	.word	0x0800dc91
 800dc28:	0800dd69 	.word	0x0800dd69
 800dc2c:	0800dd69 	.word	0x0800dd69
 800dc30:	0800dd69 	.word	0x0800dd69
 800dc34:	0800dcd9 	.word	0x0800dcd9
 800dc38:	0800dd69 	.word	0x0800dd69
 800dc3c:	0800dd69 	.word	0x0800dd69
 800dc40:	0800dd69 	.word	0x0800dd69
 800dc44:	0800dd21 	.word	0x0800dd21
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc4c:	4a67      	ldr	r2, [pc, #412]	@ (800ddec <HAL_TIM_PWM_Start_DMA+0x39c>)
 800dc4e:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc54:	4a66      	ldr	r2, [pc, #408]	@ (800ddf0 <HAL_TIM_PWM_Start_DMA+0x3a0>)
 800dc56:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc5c:	4a65      	ldr	r2, [pc, #404]	@ (800ddf4 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800dc5e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800dc64:	6879      	ldr	r1, [r7, #4]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	3334      	adds	r3, #52	@ 0x34
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	887b      	ldrh	r3, [r7, #2]
 800dc70:	f000 fe10 	bl	800e894 <TIM_DMA_Start_IT>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d001      	beq.n	800dc7e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e14c      	b.n	800df18 <HAL_TIM_PWM_Start_DMA+0x4c8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68da      	ldr	r2, [r3, #12]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dc8c:	60da      	str	r2, [r3, #12]
      break;
 800dc8e:	e06e      	b.n	800dd6e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc94:	4a55      	ldr	r2, [pc, #340]	@ (800ddec <HAL_TIM_PWM_Start_DMA+0x39c>)
 800dc96:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc9c:	4a54      	ldr	r2, [pc, #336]	@ (800ddf0 <HAL_TIM_PWM_Start_DMA+0x3a0>)
 800dc9e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dca4:	4a53      	ldr	r2, [pc, #332]	@ (800ddf4 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800dca6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800dcac:	6879      	ldr	r1, [r7, #4]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	3338      	adds	r3, #56	@ 0x38
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	887b      	ldrh	r3, [r7, #2]
 800dcb8:	f000 fdec 	bl	800e894 <TIM_DMA_Start_IT>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d001      	beq.n	800dcc6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e128      	b.n	800df18 <HAL_TIM_PWM_Start_DMA+0x4c8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	68da      	ldr	r2, [r3, #12]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dcd4:	60da      	str	r2, [r3, #12]
      break;
 800dcd6:	e04a      	b.n	800dd6e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcdc:	4a43      	ldr	r2, [pc, #268]	@ (800ddec <HAL_TIM_PWM_Start_DMA+0x39c>)
 800dcde:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dce4:	4a42      	ldr	r2, [pc, #264]	@ (800ddf0 <HAL_TIM_PWM_Start_DMA+0x3a0>)
 800dce6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcec:	4a41      	ldr	r2, [pc, #260]	@ (800ddf4 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800dcee:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800dcf4:	6879      	ldr	r1, [r7, #4]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	333c      	adds	r3, #60	@ 0x3c
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	887b      	ldrh	r3, [r7, #2]
 800dd00:	f000 fdc8 	bl	800e894 <TIM_DMA_Start_IT>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d001      	beq.n	800dd0e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	e104      	b.n	800df18 <HAL_TIM_PWM_Start_DMA+0x4c8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	68da      	ldr	r2, [r3, #12]
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dd1c:	60da      	str	r2, [r3, #12]
      break;
 800dd1e:	e026      	b.n	800dd6e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd24:	4a31      	ldr	r2, [pc, #196]	@ (800ddec <HAL_TIM_PWM_Start_DMA+0x39c>)
 800dd26:	661a      	str	r2, [r3, #96]	@ 0x60
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd2c:	4a30      	ldr	r2, [pc, #192]	@ (800ddf0 <HAL_TIM_PWM_Start_DMA+0x3a0>)
 800dd2e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd34:	4a2f      	ldr	r2, [pc, #188]	@ (800ddf4 <HAL_TIM_PWM_Start_DMA+0x3a4>)
 800dd36:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Enable the DMA channel */
      if (TIM_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dd3c:	6879      	ldr	r1, [r7, #4]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	3340      	adds	r3, #64	@ 0x40
 800dd44:	461a      	mov	r2, r3
 800dd46:	887b      	ldrh	r3, [r7, #2]
 800dd48:	f000 fda4 	bl	800e894 <TIM_DMA_Start_IT>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d001      	beq.n	800dd56 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800dd52:	2301      	movs	r3, #1
 800dd54:	e0e0      	b.n	800df18 <HAL_TIM_PWM_Start_DMA+0x4c8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	68da      	ldr	r2, [r3, #12]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dd64:	60da      	str	r2, [r3, #12]
      break;
 800dd66:	e002      	b.n	800dd6e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	75fb      	strb	r3, [r7, #23]
      break;
 800dd6c:	bf00      	nop
  }

  if (status == HAL_OK)
 800dd6e:	7dfb      	ldrb	r3, [r7, #23]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f040 80d0 	bne.w	800df16 <HAL_TIM_PWM_Start_DMA+0x4c6>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	68b9      	ldr	r1, [r7, #8]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f001 fc42 	bl	800f608 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a1b      	ldr	r2, [pc, #108]	@ (800ddf8 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d02c      	beq.n	800dde8 <HAL_TIM_PWM_Start_DMA+0x398>
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a1a      	ldr	r2, [pc, #104]	@ (800ddfc <HAL_TIM_PWM_Start_DMA+0x3ac>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d027      	beq.n	800dde8 <HAL_TIM_PWM_Start_DMA+0x398>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a18      	ldr	r2, [pc, #96]	@ (800de00 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d022      	beq.n	800dde8 <HAL_TIM_PWM_Start_DMA+0x398>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a17      	ldr	r2, [pc, #92]	@ (800de04 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d01d      	beq.n	800dde8 <HAL_TIM_PWM_Start_DMA+0x398>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a15      	ldr	r2, [pc, #84]	@ (800de08 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d018      	beq.n	800dde8 <HAL_TIM_PWM_Start_DMA+0x398>
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a14      	ldr	r2, [pc, #80]	@ (800de0c <HAL_TIM_PWM_Start_DMA+0x3bc>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d013      	beq.n	800dde8 <HAL_TIM_PWM_Start_DMA+0x398>
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4a12      	ldr	r2, [pc, #72]	@ (800de10 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d00e      	beq.n	800dde8 <HAL_TIM_PWM_Start_DMA+0x398>
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4a11      	ldr	r2, [pc, #68]	@ (800de14 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d009      	beq.n	800dde8 <HAL_TIM_PWM_Start_DMA+0x398>
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	4a0f      	ldr	r2, [pc, #60]	@ (800de18 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d004      	beq.n	800dde8 <HAL_TIM_PWM_Start_DMA+0x398>
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	4a0e      	ldr	r2, [pc, #56]	@ (800de1c <HAL_TIM_PWM_Start_DMA+0x3cc>)
 800dde4:	4293      	cmp	r3, r2
 800dde6:	d11b      	bne.n	800de20 <HAL_TIM_PWM_Start_DMA+0x3d0>
 800dde8:	2301      	movs	r3, #1
 800ddea:	e01a      	b.n	800de22 <HAL_TIM_PWM_Start_DMA+0x3d2>
 800ddec:	0800ea01 	.word	0x0800ea01
 800ddf0:	0800ea69 	.word	0x0800ea69
 800ddf4:	0800e96f 	.word	0x0800e96f
 800ddf8:	40012c00 	.word	0x40012c00
 800ddfc:	50012c00 	.word	0x50012c00
 800de00:	40013400 	.word	0x40013400
 800de04:	50013400 	.word	0x50013400
 800de08:	40014000 	.word	0x40014000
 800de0c:	50014000 	.word	0x50014000
 800de10:	40014400 	.word	0x40014400
 800de14:	50014400 	.word	0x50014400
 800de18:	40014800 	.word	0x40014800
 800de1c:	50014800 	.word	0x50014800
 800de20:	2300      	movs	r3, #0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d007      	beq.n	800de36 <HAL_TIM_PWM_Start_DMA+0x3e6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800de34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a39      	ldr	r2, [pc, #228]	@ (800df20 <HAL_TIM_PWM_Start_DMA+0x4d0>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d04a      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4a37      	ldr	r2, [pc, #220]	@ (800df24 <HAL_TIM_PWM_Start_DMA+0x4d4>)
 800de46:	4293      	cmp	r3, r2
 800de48:	d045      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de52:	d040      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800de5c:	d03b      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a31      	ldr	r2, [pc, #196]	@ (800df28 <HAL_TIM_PWM_Start_DMA+0x4d8>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d036      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a2f      	ldr	r2, [pc, #188]	@ (800df2c <HAL_TIM_PWM_Start_DMA+0x4dc>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d031      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a2e      	ldr	r2, [pc, #184]	@ (800df30 <HAL_TIM_PWM_Start_DMA+0x4e0>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d02c      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4a2c      	ldr	r2, [pc, #176]	@ (800df34 <HAL_TIM_PWM_Start_DMA+0x4e4>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d027      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a2b      	ldr	r2, [pc, #172]	@ (800df38 <HAL_TIM_PWM_Start_DMA+0x4e8>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d022      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4a29      	ldr	r2, [pc, #164]	@ (800df3c <HAL_TIM_PWM_Start_DMA+0x4ec>)
 800de96:	4293      	cmp	r3, r2
 800de98:	d01d      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4a28      	ldr	r2, [pc, #160]	@ (800df40 <HAL_TIM_PWM_Start_DMA+0x4f0>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d018      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	4a26      	ldr	r2, [pc, #152]	@ (800df44 <HAL_TIM_PWM_Start_DMA+0x4f4>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d013      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	4a25      	ldr	r2, [pc, #148]	@ (800df48 <HAL_TIM_PWM_Start_DMA+0x4f8>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d00e      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4a23      	ldr	r2, [pc, #140]	@ (800df4c <HAL_TIM_PWM_Start_DMA+0x4fc>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d009      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4a22      	ldr	r2, [pc, #136]	@ (800df50 <HAL_TIM_PWM_Start_DMA+0x500>)
 800dec8:	4293      	cmp	r3, r2
 800deca:	d004      	beq.n	800ded6 <HAL_TIM_PWM_Start_DMA+0x486>
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a20      	ldr	r2, [pc, #128]	@ (800df54 <HAL_TIM_PWM_Start_DMA+0x504>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d115      	bne.n	800df02 <HAL_TIM_PWM_Start_DMA+0x4b2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	689a      	ldr	r2, [r3, #8]
 800dedc:	4b1e      	ldr	r3, [pc, #120]	@ (800df58 <HAL_TIM_PWM_Start_DMA+0x508>)
 800dede:	4013      	ands	r3, r2
 800dee0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	2b06      	cmp	r3, #6
 800dee6:	d015      	beq.n	800df14 <HAL_TIM_PWM_Start_DMA+0x4c4>
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800deee:	d011      	beq.n	800df14 <HAL_TIM_PWM_Start_DMA+0x4c4>
      {
        __HAL_TIM_ENABLE(htim);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f042 0201 	orr.w	r2, r2, #1
 800defe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df00:	e008      	b.n	800df14 <HAL_TIM_PWM_Start_DMA+0x4c4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f042 0201 	orr.w	r2, r2, #1
 800df10:	601a      	str	r2, [r3, #0]
 800df12:	e000      	b.n	800df16 <HAL_TIM_PWM_Start_DMA+0x4c6>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df14:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800df16:	7dfb      	ldrb	r3, [r7, #23]
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3718      	adds	r7, #24
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	40012c00 	.word	0x40012c00
 800df24:	50012c00 	.word	0x50012c00
 800df28:	40000400 	.word	0x40000400
 800df2c:	50000400 	.word	0x50000400
 800df30:	40000800 	.word	0x40000800
 800df34:	50000800 	.word	0x50000800
 800df38:	40000c00 	.word	0x40000c00
 800df3c:	50000c00 	.word	0x50000c00
 800df40:	40013400 	.word	0x40013400
 800df44:	50013400 	.word	0x50013400
 800df48:	40001800 	.word	0x40001800
 800df4c:	50001800 	.word	0x50001800
 800df50:	40014000 	.word	0x40014000
 800df54:	50014000 	.word	0x50014000
 800df58:	00010007 	.word	0x00010007

0800df5c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df66:	2300      	movs	r3, #0
 800df68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	2b0c      	cmp	r3, #12
 800df6e:	d855      	bhi.n	800e01c <HAL_TIM_PWM_Stop_DMA+0xc0>
 800df70:	a201      	add	r2, pc, #4	@ (adr r2, 800df78 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800df72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df76:	bf00      	nop
 800df78:	0800dfad 	.word	0x0800dfad
 800df7c:	0800e01d 	.word	0x0800e01d
 800df80:	0800e01d 	.word	0x0800e01d
 800df84:	0800e01d 	.word	0x0800e01d
 800df88:	0800dfc9 	.word	0x0800dfc9
 800df8c:	0800e01d 	.word	0x0800e01d
 800df90:	0800e01d 	.word	0x0800e01d
 800df94:	0800e01d 	.word	0x0800e01d
 800df98:	0800dfe5 	.word	0x0800dfe5
 800df9c:	0800e01d 	.word	0x0800e01d
 800dfa0:	0800e01d 	.word	0x0800e01d
 800dfa4:	0800e01d 	.word	0x0800e01d
 800dfa8:	0800e001 	.word	0x0800e001
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	68da      	ldr	r2, [r3, #12]
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800dfba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7f7 fecb 	bl	8005d5c <HAL_DMA_Abort_IT>
      break;
 800dfc6:	e02c      	b.n	800e022 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	68da      	ldr	r2, [r3, #12]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dfd6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7f7 febd 	bl	8005d5c <HAL_DMA_Abort_IT>
      break;
 800dfe2:	e01e      	b.n	800e022 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	68da      	ldr	r2, [r3, #12]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dff2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7f7 feaf 	bl	8005d5c <HAL_DMA_Abort_IT>
      break;
 800dffe:	e010      	b.n	800e022 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68da      	ldr	r2, [r3, #12]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e00e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e014:	4618      	mov	r0, r3
 800e016:	f7f7 fea1 	bl	8005d5c <HAL_DMA_Abort_IT>
      break;
 800e01a:	e002      	b.n	800e022 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	73fb      	strb	r3, [r7, #15]
      break;
 800e020:	bf00      	nop
  }

  if (status == HAL_OK)
 800e022:	7bfb      	ldrb	r3, [r7, #15]
 800e024:	2b00      	cmp	r3, #0
 800e026:	f040 809a 	bne.w	800e15e <HAL_TIM_PWM_Stop_DMA+0x202>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2200      	movs	r2, #0
 800e030:	6839      	ldr	r1, [r7, #0]
 800e032:	4618      	mov	r0, r3
 800e034:	f001 fae8 	bl	800f608 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a4a      	ldr	r2, [pc, #296]	@ (800e168 <HAL_TIM_PWM_Stop_DMA+0x20c>)
 800e03e:	4293      	cmp	r3, r2
 800e040:	d02c      	beq.n	800e09c <HAL_TIM_PWM_Stop_DMA+0x140>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	4a49      	ldr	r2, [pc, #292]	@ (800e16c <HAL_TIM_PWM_Stop_DMA+0x210>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d027      	beq.n	800e09c <HAL_TIM_PWM_Stop_DMA+0x140>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4a47      	ldr	r2, [pc, #284]	@ (800e170 <HAL_TIM_PWM_Stop_DMA+0x214>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d022      	beq.n	800e09c <HAL_TIM_PWM_Stop_DMA+0x140>
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a46      	ldr	r2, [pc, #280]	@ (800e174 <HAL_TIM_PWM_Stop_DMA+0x218>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d01d      	beq.n	800e09c <HAL_TIM_PWM_Stop_DMA+0x140>
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a44      	ldr	r2, [pc, #272]	@ (800e178 <HAL_TIM_PWM_Stop_DMA+0x21c>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d018      	beq.n	800e09c <HAL_TIM_PWM_Stop_DMA+0x140>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a43      	ldr	r2, [pc, #268]	@ (800e17c <HAL_TIM_PWM_Stop_DMA+0x220>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d013      	beq.n	800e09c <HAL_TIM_PWM_Stop_DMA+0x140>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	4a41      	ldr	r2, [pc, #260]	@ (800e180 <HAL_TIM_PWM_Stop_DMA+0x224>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d00e      	beq.n	800e09c <HAL_TIM_PWM_Stop_DMA+0x140>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a40      	ldr	r2, [pc, #256]	@ (800e184 <HAL_TIM_PWM_Stop_DMA+0x228>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d009      	beq.n	800e09c <HAL_TIM_PWM_Stop_DMA+0x140>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a3e      	ldr	r2, [pc, #248]	@ (800e188 <HAL_TIM_PWM_Stop_DMA+0x22c>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d004      	beq.n	800e09c <HAL_TIM_PWM_Stop_DMA+0x140>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	4a3d      	ldr	r2, [pc, #244]	@ (800e18c <HAL_TIM_PWM_Stop_DMA+0x230>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d101      	bne.n	800e0a0 <HAL_TIM_PWM_Stop_DMA+0x144>
 800e09c:	2301      	movs	r3, #1
 800e09e:	e000      	b.n	800e0a2 <HAL_TIM_PWM_Stop_DMA+0x146>
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d017      	beq.n	800e0d6 <HAL_TIM_PWM_Stop_DMA+0x17a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	6a1a      	ldr	r2, [r3, #32]
 800e0ac:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d10f      	bne.n	800e0d6 <HAL_TIM_PWM_Stop_DMA+0x17a>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	6a1a      	ldr	r2, [r3, #32]
 800e0bc:	f244 4344 	movw	r3, #17476	@ 0x4444
 800e0c0:	4013      	ands	r3, r2
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d107      	bne.n	800e0d6 <HAL_TIM_PWM_Stop_DMA+0x17a>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e0d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	6a1a      	ldr	r2, [r3, #32]
 800e0dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e0e0:	4013      	ands	r3, r2
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d10f      	bne.n	800e106 <HAL_TIM_PWM_Stop_DMA+0x1aa>
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	6a1a      	ldr	r2, [r3, #32]
 800e0ec:	f244 4344 	movw	r3, #17476	@ 0x4444
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d107      	bne.n	800e106 <HAL_TIM_PWM_Stop_DMA+0x1aa>
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f022 0201 	bic.w	r2, r2, #1
 800e104:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d104      	bne.n	800e116 <HAL_TIM_PWM_Stop_DMA+0x1ba>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2201      	movs	r2, #1
 800e110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e114:	e023      	b.n	800e15e <HAL_TIM_PWM_Stop_DMA+0x202>
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	2b04      	cmp	r3, #4
 800e11a:	d104      	bne.n	800e126 <HAL_TIM_PWM_Stop_DMA+0x1ca>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e124:	e01b      	b.n	800e15e <HAL_TIM_PWM_Stop_DMA+0x202>
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	2b08      	cmp	r3, #8
 800e12a:	d104      	bne.n	800e136 <HAL_TIM_PWM_Stop_DMA+0x1da>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2201      	movs	r2, #1
 800e130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e134:	e013      	b.n	800e15e <HAL_TIM_PWM_Stop_DMA+0x202>
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	2b0c      	cmp	r3, #12
 800e13a:	d104      	bne.n	800e146 <HAL_TIM_PWM_Stop_DMA+0x1ea>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2201      	movs	r2, #1
 800e140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e144:	e00b      	b.n	800e15e <HAL_TIM_PWM_Stop_DMA+0x202>
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	2b10      	cmp	r3, #16
 800e14a:	d104      	bne.n	800e156 <HAL_TIM_PWM_Stop_DMA+0x1fa>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e154:	e003      	b.n	800e15e <HAL_TIM_PWM_Stop_DMA+0x202>
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800e15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	40012c00 	.word	0x40012c00
 800e16c:	50012c00 	.word	0x50012c00
 800e170:	40013400 	.word	0x40013400
 800e174:	50013400 	.word	0x50013400
 800e178:	40014000 	.word	0x40014000
 800e17c:	50014000 	.word	0x50014000
 800e180:	40014400 	.word	0x40014400
 800e184:	50014400 	.word	0x50014400
 800e188:	40014800 	.word	0x40014800
 800e18c:	50014800 	.word	0x50014800

0800e190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	68db      	ldr	r3, [r3, #12]
 800e19e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	691b      	ldr	r3, [r3, #16]
 800e1a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	f003 0302 	and.w	r3, r3, #2
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d020      	beq.n	800e1f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f003 0302 	and.w	r3, r3, #2
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d01b      	beq.n	800e1f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f06f 0202 	mvn.w	r2, #2
 800e1c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	699b      	ldr	r3, [r3, #24]
 800e1d2:	f003 0303 	and.w	r3, r3, #3
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d003      	beq.n	800e1e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 fb9f 	bl	800e91e <HAL_TIM_IC_CaptureCallback>
 800e1e0:	e005      	b.n	800e1ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 fb91 	bl	800e90a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f7f4 f839 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	f003 0304 	and.w	r3, r3, #4
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d020      	beq.n	800e240 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f003 0304 	and.w	r3, r3, #4
 800e204:	2b00      	cmp	r3, #0
 800e206:	d01b      	beq.n	800e240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f06f 0204 	mvn.w	r2, #4
 800e210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2202      	movs	r2, #2
 800e216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	699b      	ldr	r3, [r3, #24]
 800e21e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e222:	2b00      	cmp	r3, #0
 800e224:	d003      	beq.n	800e22e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 fb79 	bl	800e91e <HAL_TIM_IC_CaptureCallback>
 800e22c:	e005      	b.n	800e23a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 fb6b 	bl	800e90a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f7f4 f813 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2200      	movs	r2, #0
 800e23e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	f003 0308 	and.w	r3, r3, #8
 800e246:	2b00      	cmp	r3, #0
 800e248:	d020      	beq.n	800e28c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	f003 0308 	and.w	r3, r3, #8
 800e250:	2b00      	cmp	r3, #0
 800e252:	d01b      	beq.n	800e28c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f06f 0208 	mvn.w	r2, #8
 800e25c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2204      	movs	r2, #4
 800e262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	69db      	ldr	r3, [r3, #28]
 800e26a:	f003 0303 	and.w	r3, r3, #3
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d003      	beq.n	800e27a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 fb53 	bl	800e91e <HAL_TIM_IC_CaptureCallback>
 800e278:	e005      	b.n	800e286 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fb45 	bl	800e90a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7f3 ffed 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	f003 0310 	and.w	r3, r3, #16
 800e292:	2b00      	cmp	r3, #0
 800e294:	d020      	beq.n	800e2d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f003 0310 	and.w	r3, r3, #16
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d01b      	beq.n	800e2d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f06f 0210 	mvn.w	r2, #16
 800e2a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2208      	movs	r2, #8
 800e2ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	69db      	ldr	r3, [r3, #28]
 800e2b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d003      	beq.n	800e2c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f000 fb2d 	bl	800e91e <HAL_TIM_IC_CaptureCallback>
 800e2c4:	e005      	b.n	800e2d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 fb1f 	bl	800e90a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7f3 ffc7 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	f003 0301 	and.w	r3, r3, #1
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d00c      	beq.n	800e2fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f003 0301 	and.w	r3, r3, #1
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d007      	beq.n	800e2fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f06f 0201 	mvn.w	r2, #1
 800e2f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7f3 ffcc 	bl	8002294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e302:	2b00      	cmp	r3, #0
 800e304:	d104      	bne.n	800e310 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00c      	beq.n	800e32a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e316:	2b00      	cmp	r3, #0
 800e318:	d007      	beq.n	800e32a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f001 fb09 	bl	800f93c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00c      	beq.n	800e34e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d007      	beq.n	800e34e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f001 fb01 	bl	800f950 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00c      	beq.n	800e372 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d007      	beq.n	800e372 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e36a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f000 faea 	bl	800e946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	f003 0320 	and.w	r3, r3, #32
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00c      	beq.n	800e396 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f003 0320 	and.w	r3, r3, #32
 800e382:	2b00      	cmp	r3, #0
 800e384:	d007      	beq.n	800e396 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f06f 0220 	mvn.w	r2, #32
 800e38e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f001 fac9 	bl	800f928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d00c      	beq.n	800e3ba <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d007      	beq.n	800e3ba <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800e3b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f001 fad5 	bl	800f964 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d00c      	beq.n	800e3de <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d007      	beq.n	800e3de <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800e3d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f001 facd 	bl	800f978 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d00c      	beq.n	800e402 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d007      	beq.n	800e402 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800e3fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f001 fac5 	bl	800f98c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00c      	beq.n	800e426 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e412:	2b00      	cmp	r3, #0
 800e414:	d007      	beq.n	800e426 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800e41e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f001 fabd 	bl	800f9a0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e426:	bf00      	nop
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
	...

0800e430 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b086      	sub	sp, #24
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e43c:	2300      	movs	r3, #0
 800e43e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e446:	2b01      	cmp	r3, #1
 800e448:	d101      	bne.n	800e44e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e44a:	2302      	movs	r3, #2
 800e44c:	e0ff      	b.n	800e64e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2201      	movs	r2, #1
 800e452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2b14      	cmp	r3, #20
 800e45a:	f200 80f0 	bhi.w	800e63e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e45e:	a201      	add	r2, pc, #4	@ (adr r2, 800e464 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e464:	0800e4b9 	.word	0x0800e4b9
 800e468:	0800e63f 	.word	0x0800e63f
 800e46c:	0800e63f 	.word	0x0800e63f
 800e470:	0800e63f 	.word	0x0800e63f
 800e474:	0800e4f9 	.word	0x0800e4f9
 800e478:	0800e63f 	.word	0x0800e63f
 800e47c:	0800e63f 	.word	0x0800e63f
 800e480:	0800e63f 	.word	0x0800e63f
 800e484:	0800e53b 	.word	0x0800e53b
 800e488:	0800e63f 	.word	0x0800e63f
 800e48c:	0800e63f 	.word	0x0800e63f
 800e490:	0800e63f 	.word	0x0800e63f
 800e494:	0800e57b 	.word	0x0800e57b
 800e498:	0800e63f 	.word	0x0800e63f
 800e49c:	0800e63f 	.word	0x0800e63f
 800e4a0:	0800e63f 	.word	0x0800e63f
 800e4a4:	0800e5bd 	.word	0x0800e5bd
 800e4a8:	0800e63f 	.word	0x0800e63f
 800e4ac:	0800e63f 	.word	0x0800e63f
 800e4b0:	0800e63f 	.word	0x0800e63f
 800e4b4:	0800e5fd 	.word	0x0800e5fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	68b9      	ldr	r1, [r7, #8]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f000 fc30 	bl	800ed24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	699a      	ldr	r2, [r3, #24]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f042 0208 	orr.w	r2, r2, #8
 800e4d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	699a      	ldr	r2, [r3, #24]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f022 0204 	bic.w	r2, r2, #4
 800e4e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	6999      	ldr	r1, [r3, #24]
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	691a      	ldr	r2, [r3, #16]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	430a      	orrs	r2, r1
 800e4f4:	619a      	str	r2, [r3, #24]
      break;
 800e4f6:	e0a5      	b.n	800e644 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	68b9      	ldr	r1, [r7, #8]
 800e4fe:	4618      	mov	r0, r3
 800e500:	f000 fcd2 	bl	800eea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	699a      	ldr	r2, [r3, #24]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	699a      	ldr	r2, [r3, #24]
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	6999      	ldr	r1, [r3, #24]
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	691b      	ldr	r3, [r3, #16]
 800e52e:	021a      	lsls	r2, r3, #8
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	430a      	orrs	r2, r1
 800e536:	619a      	str	r2, [r3, #24]
      break;
 800e538:	e084      	b.n	800e644 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	68b9      	ldr	r1, [r7, #8]
 800e540:	4618      	mov	r0, r3
 800e542:	f000 fd61 	bl	800f008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	69da      	ldr	r2, [r3, #28]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f042 0208 	orr.w	r2, r2, #8
 800e554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	69da      	ldr	r2, [r3, #28]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f022 0204 	bic.w	r2, r2, #4
 800e564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	69d9      	ldr	r1, [r3, #28]
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	691a      	ldr	r2, [r3, #16]
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	430a      	orrs	r2, r1
 800e576:	61da      	str	r2, [r3, #28]
      break;
 800e578:	e064      	b.n	800e644 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	68b9      	ldr	r1, [r7, #8]
 800e580:	4618      	mov	r0, r3
 800e582:	f000 fdef 	bl	800f164 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	69da      	ldr	r2, [r3, #28]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	69da      	ldr	r2, [r3, #28]
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e5a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	69d9      	ldr	r1, [r3, #28]
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	021a      	lsls	r2, r3, #8
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	430a      	orrs	r2, r1
 800e5b8:	61da      	str	r2, [r3, #28]
      break;
 800e5ba:	e043      	b.n	800e644 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	68b9      	ldr	r1, [r7, #8]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f000 fe7e 	bl	800f2c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f042 0208 	orr.w	r2, r2, #8
 800e5d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f022 0204 	bic.w	r2, r2, #4
 800e5e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	691a      	ldr	r2, [r3, #16]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	430a      	orrs	r2, r1
 800e5f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e5fa:	e023      	b.n	800e644 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68b9      	ldr	r1, [r7, #8]
 800e602:	4618      	mov	r0, r3
 800e604:	f000 fee0 	bl	800f3c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e616:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e626:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	691b      	ldr	r3, [r3, #16]
 800e632:	021a      	lsls	r2, r3, #8
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	430a      	orrs	r2, r1
 800e63a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e63c:	e002      	b.n	800e644 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e63e:	2301      	movs	r3, #1
 800e640:	75fb      	strb	r3, [r7, #23]
      break;
 800e642:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2200      	movs	r2, #0
 800e648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e64c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop

0800e658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e662:	2300      	movs	r3, #0
 800e664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	d101      	bne.n	800e674 <HAL_TIM_ConfigClockSource+0x1c>
 800e670:	2302      	movs	r3, #2
 800e672:	e0fe      	b.n	800e872 <HAL_TIM_ConfigClockSource+0x21a>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2201      	movs	r2, #1
 800e678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2202      	movs	r2, #2
 800e680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	689b      	ldr	r3, [r3, #8]
 800e68a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800e692:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e69e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	68ba      	ldr	r2, [r7, #8]
 800e6a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e6b0:	f000 80c9 	beq.w	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e6b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e6b8:	f200 80ce 	bhi.w	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e6bc:	4a6f      	ldr	r2, [pc, #444]	@ (800e87c <HAL_TIM_ConfigClockSource+0x224>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	f000 80c1 	beq.w	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e6c4:	4a6d      	ldr	r2, [pc, #436]	@ (800e87c <HAL_TIM_ConfigClockSource+0x224>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	f200 80c6 	bhi.w	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e6cc:	4a6c      	ldr	r2, [pc, #432]	@ (800e880 <HAL_TIM_ConfigClockSource+0x228>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	f000 80b9 	beq.w	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e6d4:	4a6a      	ldr	r2, [pc, #424]	@ (800e880 <HAL_TIM_ConfigClockSource+0x228>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	f200 80be 	bhi.w	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e6dc:	4a69      	ldr	r2, [pc, #420]	@ (800e884 <HAL_TIM_ConfigClockSource+0x22c>)
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	f000 80b1 	beq.w	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e6e4:	4a67      	ldr	r2, [pc, #412]	@ (800e884 <HAL_TIM_ConfigClockSource+0x22c>)
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	f200 80b6 	bhi.w	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e6ec:	4a66      	ldr	r2, [pc, #408]	@ (800e888 <HAL_TIM_ConfigClockSource+0x230>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	f000 80a9 	beq.w	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e6f4:	4a64      	ldr	r2, [pc, #400]	@ (800e888 <HAL_TIM_ConfigClockSource+0x230>)
 800e6f6:	4293      	cmp	r3, r2
 800e6f8:	f200 80ae 	bhi.w	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e6fc:	4a63      	ldr	r2, [pc, #396]	@ (800e88c <HAL_TIM_ConfigClockSource+0x234>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	f000 80a1 	beq.w	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e704:	4a61      	ldr	r2, [pc, #388]	@ (800e88c <HAL_TIM_ConfigClockSource+0x234>)
 800e706:	4293      	cmp	r3, r2
 800e708:	f200 80a6 	bhi.w	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e70c:	4a60      	ldr	r2, [pc, #384]	@ (800e890 <HAL_TIM_ConfigClockSource+0x238>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	f000 8099 	beq.w	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e714:	4a5e      	ldr	r2, [pc, #376]	@ (800e890 <HAL_TIM_ConfigClockSource+0x238>)
 800e716:	4293      	cmp	r3, r2
 800e718:	f200 809e 	bhi.w	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e71c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e720:	f000 8091 	beq.w	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e724:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e728:	f200 8096 	bhi.w	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e72c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e730:	f000 8089 	beq.w	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e734:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e738:	f200 808e 	bhi.w	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e73c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e740:	d03e      	beq.n	800e7c0 <HAL_TIM_ConfigClockSource+0x168>
 800e742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e746:	f200 8087 	bhi.w	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e74a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e74e:	f000 8086 	beq.w	800e85e <HAL_TIM_ConfigClockSource+0x206>
 800e752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e756:	d87f      	bhi.n	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e758:	2b70      	cmp	r3, #112	@ 0x70
 800e75a:	d01a      	beq.n	800e792 <HAL_TIM_ConfigClockSource+0x13a>
 800e75c:	2b70      	cmp	r3, #112	@ 0x70
 800e75e:	d87b      	bhi.n	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e760:	2b60      	cmp	r3, #96	@ 0x60
 800e762:	d050      	beq.n	800e806 <HAL_TIM_ConfigClockSource+0x1ae>
 800e764:	2b60      	cmp	r3, #96	@ 0x60
 800e766:	d877      	bhi.n	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e768:	2b50      	cmp	r3, #80	@ 0x50
 800e76a:	d03c      	beq.n	800e7e6 <HAL_TIM_ConfigClockSource+0x18e>
 800e76c:	2b50      	cmp	r3, #80	@ 0x50
 800e76e:	d873      	bhi.n	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e770:	2b40      	cmp	r3, #64	@ 0x40
 800e772:	d058      	beq.n	800e826 <HAL_TIM_ConfigClockSource+0x1ce>
 800e774:	2b40      	cmp	r3, #64	@ 0x40
 800e776:	d86f      	bhi.n	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e778:	2b30      	cmp	r3, #48	@ 0x30
 800e77a:	d064      	beq.n	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e77c:	2b30      	cmp	r3, #48	@ 0x30
 800e77e:	d86b      	bhi.n	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e780:	2b20      	cmp	r3, #32
 800e782:	d060      	beq.n	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e784:	2b20      	cmp	r3, #32
 800e786:	d867      	bhi.n	800e858 <HAL_TIM_ConfigClockSource+0x200>
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d05c      	beq.n	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e78c:	2b10      	cmp	r3, #16
 800e78e:	d05a      	beq.n	800e846 <HAL_TIM_ConfigClockSource+0x1ee>
 800e790:	e062      	b.n	800e858 <HAL_TIM_ConfigClockSource+0x200>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e7a2:	f000 ff11 	bl	800f5c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	689b      	ldr	r3, [r3, #8]
 800e7ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e7b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	68ba      	ldr	r2, [r7, #8]
 800e7bc:	609a      	str	r2, [r3, #8]
      break;
 800e7be:	e04f      	b.n	800e860 <HAL_TIM_ConfigClockSource+0x208>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e7d0:	f000 fefa 	bl	800f5c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	689a      	ldr	r2, [r3, #8]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e7e2:	609a      	str	r2, [r3, #8]
      break;
 800e7e4:	e03c      	b.n	800e860 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	f000 fe6c 	bl	800f4d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2150      	movs	r1, #80	@ 0x50
 800e7fe:	4618      	mov	r0, r3
 800e800:	f000 fec5 	bl	800f58e <TIM_ITRx_SetConfig>
      break;
 800e804:	e02c      	b.n	800e860 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e812:	461a      	mov	r2, r3
 800e814:	f000 fe8b 	bl	800f52e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2160      	movs	r1, #96	@ 0x60
 800e81e:	4618      	mov	r0, r3
 800e820:	f000 feb5 	bl	800f58e <TIM_ITRx_SetConfig>
      break;
 800e824:	e01c      	b.n	800e860 <HAL_TIM_ConfigClockSource+0x208>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e832:	461a      	mov	r2, r3
 800e834:	f000 fe4c 	bl	800f4d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2140      	movs	r1, #64	@ 0x40
 800e83e:	4618      	mov	r0, r3
 800e840:	f000 fea5 	bl	800f58e <TIM_ITRx_SetConfig>
      break;
 800e844:	e00c      	b.n	800e860 <HAL_TIM_ConfigClockSource+0x208>
    case TIM_CLOCKSOURCE_ITR12:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4619      	mov	r1, r3
 800e850:	4610      	mov	r0, r2
 800e852:	f000 fe9c 	bl	800f58e <TIM_ITRx_SetConfig>
      break;
 800e856:	e003      	b.n	800e860 <HAL_TIM_ConfigClockSource+0x208>
    }

    default:
      status = HAL_ERROR;
 800e858:	2301      	movs	r3, #1
 800e85a:	73fb      	strb	r3, [r7, #15]
      break;
 800e85c:	e000      	b.n	800e860 <HAL_TIM_ConfigClockSource+0x208>
      break;
 800e85e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e870:	7bfb      	ldrb	r3, [r7, #15]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	00100070 	.word	0x00100070
 800e880:	00100060 	.word	0x00100060
 800e884:	00100050 	.word	0x00100050
 800e888:	00100040 	.word	0x00100040
 800e88c:	00100030 	.word	0x00100030
 800e890:	00100020 	.word	0x00100020

0800e894 <TIM_DMA_Start_IT>:
  * @param  length   : The size of a source block transfer in byte.
  * @retval HAL status
  */
HAL_StatusTypeDef TIM_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t src, uint32_t dst,
                                   uint32_t length)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
 800e8a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status ;

  /* Enable the DMA channel */
  if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e8a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d020      	beq.n	800e8f0 <TIM_DMA_Start_IT+0x5c>
  {
    if ((hdma->LinkedListQueue != 0U) && (hdma->LinkedListQueue->Head != 0U))
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d019      	beq.n	800e8ea <TIM_DMA_Start_IT+0x56>
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d014      	beq.n	800e8ea <TIM_DMA_Start_IT+0x56>
    {
      /* Enable the DMA channel */
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = length;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	609a      	str	r2, [r3, #8]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = src;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68ba      	ldr	r2, [r7, #8]
 800e8d2:	60da      	str	r2, [r3, #12]
      hdma->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = dst;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	687a      	ldr	r2, [r7, #4]
 800e8dc:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hdma);
 800e8de:	68f8      	ldr	r0, [r7, #12]
 800e8e0:	f7f7 feac 	bl	800663c <HAL_DMAEx_List_Start_IT>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	75fb      	strb	r3, [r7, #23]
 800e8e8:	e00a      	b.n	800e900 <TIM_DMA_Start_IT+0x6c>
    }
    else
    {
      status = HAL_ERROR;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	75fb      	strb	r3, [r7, #23]
 800e8ee:	e007      	b.n	800e900 <TIM_DMA_Start_IT+0x6c>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hdma, src, dst, length);
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	68b9      	ldr	r1, [r7, #8]
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f7f7 f94e 	bl	8005b98 <HAL_DMA_Start_IT>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e900:	7dfb      	ldrb	r3, [r7, #23]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3718      	adds	r7, #24
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e90a:	b480      	push	{r7}
 800e90c:	b083      	sub	sp, #12
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e912:	bf00      	nop
 800e914:	370c      	adds	r7, #12
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr

0800e91e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e91e:	b480      	push	{r7}
 800e920:	b083      	sub	sp, #12
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e926:	bf00      	nop
 800e928:	370c      	adds	r7, #12
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr

0800e932 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e932:	b480      	push	{r7}
 800e934:	b083      	sub	sp, #12
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e93a:	bf00      	nop
 800e93c:	370c      	adds	r7, #12
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr

0800e946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e946:	b480      	push	{r7}
 800e948:	b083      	sub	sp, #12
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e94e:	bf00      	nop
 800e950:	370c      	adds	r7, #12
 800e952:	46bd      	mov	sp, r7
 800e954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e958:	4770      	bx	lr

0800e95a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e95a:	b480      	push	{r7}
 800e95c:	b083      	sub	sp, #12
 800e95e:	af00      	add	r7, sp, #0
 800e960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e962:	bf00      	nop
 800e964:	370c      	adds	r7, #12
 800e966:	46bd      	mov	sp, r7
 800e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96c:	4770      	bx	lr

0800e96e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800e96e:	b580      	push	{r7, lr}
 800e970:	b084      	sub	sp, #16
 800e972:	af00      	add	r7, sp, #0
 800e974:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e97a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e980:	687a      	ldr	r2, [r7, #4]
 800e982:	429a      	cmp	r2, r3
 800e984:	d107      	bne.n	800e996 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2201      	movs	r2, #1
 800e98a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2201      	movs	r2, #1
 800e990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e994:	e02a      	b.n	800e9ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e99a:	687a      	ldr	r2, [r7, #4]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d107      	bne.n	800e9b0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2202      	movs	r2, #2
 800e9a4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e9ae:	e01d      	b.n	800e9ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d107      	bne.n	800e9ca <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2204      	movs	r2, #4
 800e9be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e9c8:	e010      	b.n	800e9ec <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d107      	bne.n	800e9e4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2208      	movs	r2, #8
 800e9d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2201      	movs	r2, #1
 800e9de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e9e2:	e003      	b.n	800e9ec <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f7ff ffb4 	bl	800e95a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	771a      	strb	r2, [r3, #28]
}
 800e9f8:	bf00      	nop
 800e9fa:	3710      	adds	r7, #16
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ea0c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d103      	bne.n	800ea20 <TIM_DMADelayPulseCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	771a      	strb	r2, [r3, #28]
 800ea1e:	e019      	b.n	800ea54 <TIM_DMADelayPulseCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d103      	bne.n	800ea32 <TIM_DMADelayPulseCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2202      	movs	r2, #2
 800ea2e:	771a      	strb	r2, [r3, #28]
 800ea30:	e010      	b.n	800ea54 <TIM_DMADelayPulseCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea36:	687a      	ldr	r2, [r7, #4]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d103      	bne.n	800ea44 <TIM_DMADelayPulseCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2204      	movs	r2, #4
 800ea40:	771a      	strb	r2, [r3, #28]
 800ea42:	e007      	b.n	800ea54 <TIM_DMADelayPulseCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d102      	bne.n	800ea54 <TIM_DMADelayPulseCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2208      	movs	r2, #8
 800ea52:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f7f3 fc03 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	771a      	strb	r2, [r3, #28]
}
 800ea60:	bf00      	nop
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ea74:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea7a:	687a      	ldr	r2, [r7, #4]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d103      	bne.n	800ea88 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2201      	movs	r2, #1
 800ea84:	771a      	strb	r2, [r3, #28]
 800ea86:	e019      	b.n	800eabc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d103      	bne.n	800ea9a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2202      	movs	r2, #2
 800ea96:	771a      	strb	r2, [r3, #28]
 800ea98:	e010      	b.n	800eabc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d103      	bne.n	800eaac <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2204      	movs	r2, #4
 800eaa8:	771a      	strb	r2, [r3, #28]
 800eaaa:	e007      	b.n	800eabc <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d102      	bne.n	800eabc <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2208      	movs	r2, #8
 800eaba:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800eabc:	68f8      	ldr	r0, [r7, #12]
 800eabe:	f7ff ff38 	bl	800e932 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2200      	movs	r2, #0
 800eac6:	771a      	strb	r2, [r3, #28]
}
 800eac8:	bf00      	nop
 800eaca:	3710      	adds	r7, #16
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	4a7a      	ldr	r2, [pc, #488]	@ (800eccc <TIM_Base_SetConfig+0x1fc>)
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d02b      	beq.n	800eb40 <TIM_Base_SetConfig+0x70>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	4a79      	ldr	r2, [pc, #484]	@ (800ecd0 <TIM_Base_SetConfig+0x200>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d027      	beq.n	800eb40 <TIM_Base_SetConfig+0x70>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eaf6:	d023      	beq.n	800eb40 <TIM_Base_SetConfig+0x70>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eafe:	d01f      	beq.n	800eb40 <TIM_Base_SetConfig+0x70>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	4a74      	ldr	r2, [pc, #464]	@ (800ecd4 <TIM_Base_SetConfig+0x204>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d01b      	beq.n	800eb40 <TIM_Base_SetConfig+0x70>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	4a73      	ldr	r2, [pc, #460]	@ (800ecd8 <TIM_Base_SetConfig+0x208>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d017      	beq.n	800eb40 <TIM_Base_SetConfig+0x70>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	4a72      	ldr	r2, [pc, #456]	@ (800ecdc <TIM_Base_SetConfig+0x20c>)
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d013      	beq.n	800eb40 <TIM_Base_SetConfig+0x70>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4a71      	ldr	r2, [pc, #452]	@ (800ece0 <TIM_Base_SetConfig+0x210>)
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d00f      	beq.n	800eb40 <TIM_Base_SetConfig+0x70>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	4a70      	ldr	r2, [pc, #448]	@ (800ece4 <TIM_Base_SetConfig+0x214>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d00b      	beq.n	800eb40 <TIM_Base_SetConfig+0x70>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	4a6f      	ldr	r2, [pc, #444]	@ (800ece8 <TIM_Base_SetConfig+0x218>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d007      	beq.n	800eb40 <TIM_Base_SetConfig+0x70>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	4a6e      	ldr	r2, [pc, #440]	@ (800ecec <TIM_Base_SetConfig+0x21c>)
 800eb34:	4293      	cmp	r3, r2
 800eb36:	d003      	beq.n	800eb40 <TIM_Base_SetConfig+0x70>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	4a6d      	ldr	r2, [pc, #436]	@ (800ecf0 <TIM_Base_SetConfig+0x220>)
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d108      	bne.n	800eb52 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	4a5d      	ldr	r2, [pc, #372]	@ (800eccc <TIM_Base_SetConfig+0x1fc>)
 800eb56:	4293      	cmp	r3, r2
 800eb58:	d05b      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	4a5c      	ldr	r2, [pc, #368]	@ (800ecd0 <TIM_Base_SetConfig+0x200>)
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d057      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb68:	d053      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eb70:	d04f      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	4a57      	ldr	r2, [pc, #348]	@ (800ecd4 <TIM_Base_SetConfig+0x204>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d04b      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4a56      	ldr	r2, [pc, #344]	@ (800ecd8 <TIM_Base_SetConfig+0x208>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d047      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	4a55      	ldr	r2, [pc, #340]	@ (800ecdc <TIM_Base_SetConfig+0x20c>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d043      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4a54      	ldr	r2, [pc, #336]	@ (800ece0 <TIM_Base_SetConfig+0x210>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d03f      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4a53      	ldr	r2, [pc, #332]	@ (800ece4 <TIM_Base_SetConfig+0x214>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d03b      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a52      	ldr	r2, [pc, #328]	@ (800ece8 <TIM_Base_SetConfig+0x218>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d037      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a51      	ldr	r2, [pc, #324]	@ (800ecec <TIM_Base_SetConfig+0x21c>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d033      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4a50      	ldr	r2, [pc, #320]	@ (800ecf0 <TIM_Base_SetConfig+0x220>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d02f      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4a4f      	ldr	r2, [pc, #316]	@ (800ecf4 <TIM_Base_SetConfig+0x224>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d02b      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4a4e      	ldr	r2, [pc, #312]	@ (800ecf8 <TIM_Base_SetConfig+0x228>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d027      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4a4d      	ldr	r2, [pc, #308]	@ (800ecfc <TIM_Base_SetConfig+0x22c>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d023      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4a4c      	ldr	r2, [pc, #304]	@ (800ed00 <TIM_Base_SetConfig+0x230>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d01f      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4a4b      	ldr	r2, [pc, #300]	@ (800ed04 <TIM_Base_SetConfig+0x234>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d01b      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4a4a      	ldr	r2, [pc, #296]	@ (800ed08 <TIM_Base_SetConfig+0x238>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d017      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	4a49      	ldr	r2, [pc, #292]	@ (800ed0c <TIM_Base_SetConfig+0x23c>)
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	d013      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	4a48      	ldr	r2, [pc, #288]	@ (800ed10 <TIM_Base_SetConfig+0x240>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d00f      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	4a47      	ldr	r2, [pc, #284]	@ (800ed14 <TIM_Base_SetConfig+0x244>)
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	d00b      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4a46      	ldr	r2, [pc, #280]	@ (800ed18 <TIM_Base_SetConfig+0x248>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d007      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	4a45      	ldr	r2, [pc, #276]	@ (800ed1c <TIM_Base_SetConfig+0x24c>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d003      	beq.n	800ec12 <TIM_Base_SetConfig+0x142>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4a44      	ldr	r2, [pc, #272]	@ (800ed20 <TIM_Base_SetConfig+0x250>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d108      	bne.n	800ec24 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ec18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	68db      	ldr	r3, [r3, #12]
 800ec1e:	68fa      	ldr	r2, [r7, #12]
 800ec20:	4313      	orrs	r3, r2
 800ec22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	695b      	ldr	r3, [r3, #20]
 800ec2e:	4313      	orrs	r3, r2
 800ec30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	68fa      	ldr	r2, [r7, #12]
 800ec36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	689a      	ldr	r2, [r3, #8]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	681a      	ldr	r2, [r3, #0]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	4a20      	ldr	r2, [pc, #128]	@ (800eccc <TIM_Base_SetConfig+0x1fc>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d023      	beq.n	800ec98 <TIM_Base_SetConfig+0x1c8>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	4a1f      	ldr	r2, [pc, #124]	@ (800ecd0 <TIM_Base_SetConfig+0x200>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d01f      	beq.n	800ec98 <TIM_Base_SetConfig+0x1c8>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	4a24      	ldr	r2, [pc, #144]	@ (800ecec <TIM_Base_SetConfig+0x21c>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d01b      	beq.n	800ec98 <TIM_Base_SetConfig+0x1c8>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4a23      	ldr	r2, [pc, #140]	@ (800ecf0 <TIM_Base_SetConfig+0x220>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d017      	beq.n	800ec98 <TIM_Base_SetConfig+0x1c8>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4a28      	ldr	r2, [pc, #160]	@ (800ed0c <TIM_Base_SetConfig+0x23c>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d013      	beq.n	800ec98 <TIM_Base_SetConfig+0x1c8>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	4a27      	ldr	r2, [pc, #156]	@ (800ed10 <TIM_Base_SetConfig+0x240>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d00f      	beq.n	800ec98 <TIM_Base_SetConfig+0x1c8>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a26      	ldr	r2, [pc, #152]	@ (800ed14 <TIM_Base_SetConfig+0x244>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d00b      	beq.n	800ec98 <TIM_Base_SetConfig+0x1c8>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	4a25      	ldr	r2, [pc, #148]	@ (800ed18 <TIM_Base_SetConfig+0x248>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d007      	beq.n	800ec98 <TIM_Base_SetConfig+0x1c8>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4a24      	ldr	r2, [pc, #144]	@ (800ed1c <TIM_Base_SetConfig+0x24c>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d003      	beq.n	800ec98 <TIM_Base_SetConfig+0x1c8>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	4a23      	ldr	r2, [pc, #140]	@ (800ed20 <TIM_Base_SetConfig+0x250>)
 800ec94:	4293      	cmp	r3, r2
 800ec96:	d103      	bne.n	800eca0 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	691a      	ldr	r2, [r3, #16]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2201      	movs	r2, #1
 800eca4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	691b      	ldr	r3, [r3, #16]
 800ecaa:	f003 0301 	and.w	r3, r3, #1
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d105      	bne.n	800ecbe <TIM_Base_SetConfig+0x1ee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	691b      	ldr	r3, [r3, #16]
 800ecb6:	f023 0201 	bic.w	r2, r3, #1
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	611a      	str	r2, [r3, #16]
  }
}
 800ecbe:	bf00      	nop
 800ecc0:	3714      	adds	r7, #20
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop
 800eccc:	40012c00 	.word	0x40012c00
 800ecd0:	50012c00 	.word	0x50012c00
 800ecd4:	40000400 	.word	0x40000400
 800ecd8:	50000400 	.word	0x50000400
 800ecdc:	40000800 	.word	0x40000800
 800ece0:	50000800 	.word	0x50000800
 800ece4:	40000c00 	.word	0x40000c00
 800ece8:	50000c00 	.word	0x50000c00
 800ecec:	40013400 	.word	0x40013400
 800ecf0:	50013400 	.word	0x50013400
 800ecf4:	40001800 	.word	0x40001800
 800ecf8:	50001800 	.word	0x50001800
 800ecfc:	40001c00 	.word	0x40001c00
 800ed00:	50001c00 	.word	0x50001c00
 800ed04:	40002000 	.word	0x40002000
 800ed08:	50002000 	.word	0x50002000
 800ed0c:	40014000 	.word	0x40014000
 800ed10:	50014000 	.word	0x50014000
 800ed14:	40014400 	.word	0x40014400
 800ed18:	50014400 	.word	0x50014400
 800ed1c:	40014800 	.word	0x40014800
 800ed20:	50014800 	.word	0x50014800

0800ed24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b087      	sub	sp, #28
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6a1b      	ldr	r3, [r3, #32]
 800ed32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6a1b      	ldr	r3, [r3, #32]
 800ed38:	f023 0201 	bic.w	r2, r3, #1
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	699b      	ldr	r3, [r3, #24]
 800ed4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ed52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f023 0303 	bic.w	r3, r3, #3
 800ed5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	68fa      	ldr	r2, [r7, #12]
 800ed66:	4313      	orrs	r3, r2
 800ed68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	f023 0302 	bic.w	r3, r3, #2
 800ed70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	697a      	ldr	r2, [r7, #20]
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4a40      	ldr	r2, [pc, #256]	@ (800ee80 <TIM_OC1_SetConfig+0x15c>)
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d023      	beq.n	800edcc <TIM_OC1_SetConfig+0xa8>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4a3f      	ldr	r2, [pc, #252]	@ (800ee84 <TIM_OC1_SetConfig+0x160>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d01f      	beq.n	800edcc <TIM_OC1_SetConfig+0xa8>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4a3e      	ldr	r2, [pc, #248]	@ (800ee88 <TIM_OC1_SetConfig+0x164>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d01b      	beq.n	800edcc <TIM_OC1_SetConfig+0xa8>
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	4a3d      	ldr	r2, [pc, #244]	@ (800ee8c <TIM_OC1_SetConfig+0x168>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d017      	beq.n	800edcc <TIM_OC1_SetConfig+0xa8>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	4a3c      	ldr	r2, [pc, #240]	@ (800ee90 <TIM_OC1_SetConfig+0x16c>)
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d013      	beq.n	800edcc <TIM_OC1_SetConfig+0xa8>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	4a3b      	ldr	r2, [pc, #236]	@ (800ee94 <TIM_OC1_SetConfig+0x170>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d00f      	beq.n	800edcc <TIM_OC1_SetConfig+0xa8>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	4a3a      	ldr	r2, [pc, #232]	@ (800ee98 <TIM_OC1_SetConfig+0x174>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d00b      	beq.n	800edcc <TIM_OC1_SetConfig+0xa8>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4a39      	ldr	r2, [pc, #228]	@ (800ee9c <TIM_OC1_SetConfig+0x178>)
 800edb8:	4293      	cmp	r3, r2
 800edba:	d007      	beq.n	800edcc <TIM_OC1_SetConfig+0xa8>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	4a38      	ldr	r2, [pc, #224]	@ (800eea0 <TIM_OC1_SetConfig+0x17c>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d003      	beq.n	800edcc <TIM_OC1_SetConfig+0xa8>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4a37      	ldr	r2, [pc, #220]	@ (800eea4 <TIM_OC1_SetConfig+0x180>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d10c      	bne.n	800ede6 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	f023 0308 	bic.w	r3, r3, #8
 800edd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	68db      	ldr	r3, [r3, #12]
 800edd8:	697a      	ldr	r2, [r7, #20]
 800edda:	4313      	orrs	r3, r2
 800eddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	f023 0304 	bic.w	r3, r3, #4
 800ede4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4a25      	ldr	r2, [pc, #148]	@ (800ee80 <TIM_OC1_SetConfig+0x15c>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d023      	beq.n	800ee36 <TIM_OC1_SetConfig+0x112>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4a24      	ldr	r2, [pc, #144]	@ (800ee84 <TIM_OC1_SetConfig+0x160>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d01f      	beq.n	800ee36 <TIM_OC1_SetConfig+0x112>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4a23      	ldr	r2, [pc, #140]	@ (800ee88 <TIM_OC1_SetConfig+0x164>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d01b      	beq.n	800ee36 <TIM_OC1_SetConfig+0x112>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4a22      	ldr	r2, [pc, #136]	@ (800ee8c <TIM_OC1_SetConfig+0x168>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d017      	beq.n	800ee36 <TIM_OC1_SetConfig+0x112>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4a21      	ldr	r2, [pc, #132]	@ (800ee90 <TIM_OC1_SetConfig+0x16c>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d013      	beq.n	800ee36 <TIM_OC1_SetConfig+0x112>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	4a20      	ldr	r2, [pc, #128]	@ (800ee94 <TIM_OC1_SetConfig+0x170>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d00f      	beq.n	800ee36 <TIM_OC1_SetConfig+0x112>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	4a1f      	ldr	r2, [pc, #124]	@ (800ee98 <TIM_OC1_SetConfig+0x174>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d00b      	beq.n	800ee36 <TIM_OC1_SetConfig+0x112>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4a1e      	ldr	r2, [pc, #120]	@ (800ee9c <TIM_OC1_SetConfig+0x178>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d007      	beq.n	800ee36 <TIM_OC1_SetConfig+0x112>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4a1d      	ldr	r2, [pc, #116]	@ (800eea0 <TIM_OC1_SetConfig+0x17c>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d003      	beq.n	800ee36 <TIM_OC1_SetConfig+0x112>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	4a1c      	ldr	r2, [pc, #112]	@ (800eea4 <TIM_OC1_SetConfig+0x180>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d111      	bne.n	800ee5a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ee3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ee44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	695b      	ldr	r3, [r3, #20]
 800ee4a:	693a      	ldr	r2, [r7, #16]
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	699b      	ldr	r3, [r3, #24]
 800ee54:	693a      	ldr	r2, [r7, #16]
 800ee56:	4313      	orrs	r3, r2
 800ee58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	693a      	ldr	r2, [r7, #16]
 800ee5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	68fa      	ldr	r2, [r7, #12]
 800ee64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	685a      	ldr	r2, [r3, #4]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	697a      	ldr	r2, [r7, #20]
 800ee72:	621a      	str	r2, [r3, #32]
}
 800ee74:	bf00      	nop
 800ee76:	371c      	adds	r7, #28
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr
 800ee80:	40012c00 	.word	0x40012c00
 800ee84:	50012c00 	.word	0x50012c00
 800ee88:	40013400 	.word	0x40013400
 800ee8c:	50013400 	.word	0x50013400
 800ee90:	40014000 	.word	0x40014000
 800ee94:	50014000 	.word	0x50014000
 800ee98:	40014400 	.word	0x40014400
 800ee9c:	50014400 	.word	0x50014400
 800eea0:	40014800 	.word	0x40014800
 800eea4:	50014800 	.word	0x50014800

0800eea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b087      	sub	sp, #28
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a1b      	ldr	r3, [r3, #32]
 800eeb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6a1b      	ldr	r3, [r3, #32]
 800eebc:	f023 0210 	bic.w	r2, r3, #16
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	699b      	ldr	r3, [r3, #24]
 800eece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eeda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	021b      	lsls	r3, r3, #8
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	4313      	orrs	r3, r2
 800eeee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	f023 0320 	bic.w	r3, r3, #32
 800eef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	689b      	ldr	r3, [r3, #8]
 800eefc:	011b      	lsls	r3, r3, #4
 800eefe:	697a      	ldr	r2, [r7, #20]
 800ef00:	4313      	orrs	r3, r2
 800ef02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a36      	ldr	r2, [pc, #216]	@ (800efe0 <TIM_OC2_SetConfig+0x138>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d00b      	beq.n	800ef24 <TIM_OC2_SetConfig+0x7c>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4a35      	ldr	r2, [pc, #212]	@ (800efe4 <TIM_OC2_SetConfig+0x13c>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d007      	beq.n	800ef24 <TIM_OC2_SetConfig+0x7c>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a34      	ldr	r2, [pc, #208]	@ (800efe8 <TIM_OC2_SetConfig+0x140>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d003      	beq.n	800ef24 <TIM_OC2_SetConfig+0x7c>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4a33      	ldr	r2, [pc, #204]	@ (800efec <TIM_OC2_SetConfig+0x144>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d10d      	bne.n	800ef40 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ef2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	011b      	lsls	r3, r3, #4
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	4313      	orrs	r3, r2
 800ef36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4a27      	ldr	r2, [pc, #156]	@ (800efe0 <TIM_OC2_SetConfig+0x138>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d023      	beq.n	800ef90 <TIM_OC2_SetConfig+0xe8>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a26      	ldr	r2, [pc, #152]	@ (800efe4 <TIM_OC2_SetConfig+0x13c>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d01f      	beq.n	800ef90 <TIM_OC2_SetConfig+0xe8>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	4a25      	ldr	r2, [pc, #148]	@ (800efe8 <TIM_OC2_SetConfig+0x140>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d01b      	beq.n	800ef90 <TIM_OC2_SetConfig+0xe8>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4a24      	ldr	r2, [pc, #144]	@ (800efec <TIM_OC2_SetConfig+0x144>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d017      	beq.n	800ef90 <TIM_OC2_SetConfig+0xe8>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4a23      	ldr	r2, [pc, #140]	@ (800eff0 <TIM_OC2_SetConfig+0x148>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d013      	beq.n	800ef90 <TIM_OC2_SetConfig+0xe8>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a22      	ldr	r2, [pc, #136]	@ (800eff4 <TIM_OC2_SetConfig+0x14c>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d00f      	beq.n	800ef90 <TIM_OC2_SetConfig+0xe8>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4a21      	ldr	r2, [pc, #132]	@ (800eff8 <TIM_OC2_SetConfig+0x150>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d00b      	beq.n	800ef90 <TIM_OC2_SetConfig+0xe8>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	4a20      	ldr	r2, [pc, #128]	@ (800effc <TIM_OC2_SetConfig+0x154>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d007      	beq.n	800ef90 <TIM_OC2_SetConfig+0xe8>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	4a1f      	ldr	r2, [pc, #124]	@ (800f000 <TIM_OC2_SetConfig+0x158>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d003      	beq.n	800ef90 <TIM_OC2_SetConfig+0xe8>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	4a1e      	ldr	r2, [pc, #120]	@ (800f004 <TIM_OC2_SetConfig+0x15c>)
 800ef8c:	4293      	cmp	r3, r2
 800ef8e:	d113      	bne.n	800efb8 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ef96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ef9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	695b      	ldr	r3, [r3, #20]
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	693a      	ldr	r2, [r7, #16]
 800efa8:	4313      	orrs	r3, r2
 800efaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	699b      	ldr	r3, [r3, #24]
 800efb0:	009b      	lsls	r3, r3, #2
 800efb2:	693a      	ldr	r2, [r7, #16]
 800efb4:	4313      	orrs	r3, r2
 800efb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	693a      	ldr	r2, [r7, #16]
 800efbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	685a      	ldr	r2, [r3, #4]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	697a      	ldr	r2, [r7, #20]
 800efd0:	621a      	str	r2, [r3, #32]
}
 800efd2:	bf00      	nop
 800efd4:	371c      	adds	r7, #28
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	40012c00 	.word	0x40012c00
 800efe4:	50012c00 	.word	0x50012c00
 800efe8:	40013400 	.word	0x40013400
 800efec:	50013400 	.word	0x50013400
 800eff0:	40014000 	.word	0x40014000
 800eff4:	50014000 	.word	0x50014000
 800eff8:	40014400 	.word	0x40014400
 800effc:	50014400 	.word	0x50014400
 800f000:	40014800 	.word	0x40014800
 800f004:	50014800 	.word	0x50014800

0800f008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f008:	b480      	push	{r7}
 800f00a:	b087      	sub	sp, #28
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a1b      	ldr	r3, [r3, #32]
 800f016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6a1b      	ldr	r3, [r3, #32]
 800f01c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	69db      	ldr	r3, [r3, #28]
 800f02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f023 0303 	bic.w	r3, r3, #3
 800f042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	4313      	orrs	r3, r2
 800f04c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	689b      	ldr	r3, [r3, #8]
 800f05a:	021b      	lsls	r3, r3, #8
 800f05c:	697a      	ldr	r2, [r7, #20]
 800f05e:	4313      	orrs	r3, r2
 800f060:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	4a35      	ldr	r2, [pc, #212]	@ (800f13c <TIM_OC3_SetConfig+0x134>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d00b      	beq.n	800f082 <TIM_OC3_SetConfig+0x7a>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4a34      	ldr	r2, [pc, #208]	@ (800f140 <TIM_OC3_SetConfig+0x138>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d007      	beq.n	800f082 <TIM_OC3_SetConfig+0x7a>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4a33      	ldr	r2, [pc, #204]	@ (800f144 <TIM_OC3_SetConfig+0x13c>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d003      	beq.n	800f082 <TIM_OC3_SetConfig+0x7a>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4a32      	ldr	r2, [pc, #200]	@ (800f148 <TIM_OC3_SetConfig+0x140>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d10d      	bne.n	800f09e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	021b      	lsls	r3, r3, #8
 800f090:	697a      	ldr	r2, [r7, #20]
 800f092:	4313      	orrs	r3, r2
 800f094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f09c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	4a26      	ldr	r2, [pc, #152]	@ (800f13c <TIM_OC3_SetConfig+0x134>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d023      	beq.n	800f0ee <TIM_OC3_SetConfig+0xe6>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4a25      	ldr	r2, [pc, #148]	@ (800f140 <TIM_OC3_SetConfig+0x138>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d01f      	beq.n	800f0ee <TIM_OC3_SetConfig+0xe6>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	4a24      	ldr	r2, [pc, #144]	@ (800f144 <TIM_OC3_SetConfig+0x13c>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d01b      	beq.n	800f0ee <TIM_OC3_SetConfig+0xe6>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	4a23      	ldr	r2, [pc, #140]	@ (800f148 <TIM_OC3_SetConfig+0x140>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	d017      	beq.n	800f0ee <TIM_OC3_SetConfig+0xe6>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4a22      	ldr	r2, [pc, #136]	@ (800f14c <TIM_OC3_SetConfig+0x144>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d013      	beq.n	800f0ee <TIM_OC3_SetConfig+0xe6>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a21      	ldr	r2, [pc, #132]	@ (800f150 <TIM_OC3_SetConfig+0x148>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d00f      	beq.n	800f0ee <TIM_OC3_SetConfig+0xe6>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a20      	ldr	r2, [pc, #128]	@ (800f154 <TIM_OC3_SetConfig+0x14c>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d00b      	beq.n	800f0ee <TIM_OC3_SetConfig+0xe6>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4a1f      	ldr	r2, [pc, #124]	@ (800f158 <TIM_OC3_SetConfig+0x150>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d007      	beq.n	800f0ee <TIM_OC3_SetConfig+0xe6>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a1e      	ldr	r2, [pc, #120]	@ (800f15c <TIM_OC3_SetConfig+0x154>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d003      	beq.n	800f0ee <TIM_OC3_SetConfig+0xe6>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	4a1d      	ldr	r2, [pc, #116]	@ (800f160 <TIM_OC3_SetConfig+0x158>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d113      	bne.n	800f116 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f0f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f0fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	695b      	ldr	r3, [r3, #20]
 800f102:	011b      	lsls	r3, r3, #4
 800f104:	693a      	ldr	r2, [r7, #16]
 800f106:	4313      	orrs	r3, r2
 800f108:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	699b      	ldr	r3, [r3, #24]
 800f10e:	011b      	lsls	r3, r3, #4
 800f110:	693a      	ldr	r2, [r7, #16]
 800f112:	4313      	orrs	r3, r2
 800f114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	693a      	ldr	r2, [r7, #16]
 800f11a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	685a      	ldr	r2, [r3, #4]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	697a      	ldr	r2, [r7, #20]
 800f12e:	621a      	str	r2, [r3, #32]
}
 800f130:	bf00      	nop
 800f132:	371c      	adds	r7, #28
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr
 800f13c:	40012c00 	.word	0x40012c00
 800f140:	50012c00 	.word	0x50012c00
 800f144:	40013400 	.word	0x40013400
 800f148:	50013400 	.word	0x50013400
 800f14c:	40014000 	.word	0x40014000
 800f150:	50014000 	.word	0x50014000
 800f154:	40014400 	.word	0x40014400
 800f158:	50014400 	.word	0x50014400
 800f15c:	40014800 	.word	0x40014800
 800f160:	50014800 	.word	0x50014800

0800f164 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f164:	b480      	push	{r7}
 800f166:	b087      	sub	sp, #28
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6a1b      	ldr	r3, [r3, #32]
 800f172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6a1b      	ldr	r3, [r3, #32]
 800f178:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	69db      	ldr	r3, [r3, #28]
 800f18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f19e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	021b      	lsls	r3, r3, #8
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f1b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	689b      	ldr	r3, [r3, #8]
 800f1b8:	031b      	lsls	r3, r3, #12
 800f1ba:	697a      	ldr	r2, [r7, #20]
 800f1bc:	4313      	orrs	r3, r2
 800f1be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a36      	ldr	r2, [pc, #216]	@ (800f29c <TIM_OC4_SetConfig+0x138>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d00b      	beq.n	800f1e0 <TIM_OC4_SetConfig+0x7c>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a35      	ldr	r2, [pc, #212]	@ (800f2a0 <TIM_OC4_SetConfig+0x13c>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d007      	beq.n	800f1e0 <TIM_OC4_SetConfig+0x7c>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a34      	ldr	r2, [pc, #208]	@ (800f2a4 <TIM_OC4_SetConfig+0x140>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d003      	beq.n	800f1e0 <TIM_OC4_SetConfig+0x7c>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4a33      	ldr	r2, [pc, #204]	@ (800f2a8 <TIM_OC4_SetConfig+0x144>)
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d10d      	bne.n	800f1fc <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f1e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	031b      	lsls	r3, r3, #12
 800f1ee:	697a      	ldr	r2, [r7, #20]
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f1fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	4a27      	ldr	r2, [pc, #156]	@ (800f29c <TIM_OC4_SetConfig+0x138>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d023      	beq.n	800f24c <TIM_OC4_SetConfig+0xe8>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4a26      	ldr	r2, [pc, #152]	@ (800f2a0 <TIM_OC4_SetConfig+0x13c>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d01f      	beq.n	800f24c <TIM_OC4_SetConfig+0xe8>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4a25      	ldr	r2, [pc, #148]	@ (800f2a4 <TIM_OC4_SetConfig+0x140>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d01b      	beq.n	800f24c <TIM_OC4_SetConfig+0xe8>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4a24      	ldr	r2, [pc, #144]	@ (800f2a8 <TIM_OC4_SetConfig+0x144>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d017      	beq.n	800f24c <TIM_OC4_SetConfig+0xe8>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4a23      	ldr	r2, [pc, #140]	@ (800f2ac <TIM_OC4_SetConfig+0x148>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d013      	beq.n	800f24c <TIM_OC4_SetConfig+0xe8>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4a22      	ldr	r2, [pc, #136]	@ (800f2b0 <TIM_OC4_SetConfig+0x14c>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d00f      	beq.n	800f24c <TIM_OC4_SetConfig+0xe8>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4a21      	ldr	r2, [pc, #132]	@ (800f2b4 <TIM_OC4_SetConfig+0x150>)
 800f230:	4293      	cmp	r3, r2
 800f232:	d00b      	beq.n	800f24c <TIM_OC4_SetConfig+0xe8>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	4a20      	ldr	r2, [pc, #128]	@ (800f2b8 <TIM_OC4_SetConfig+0x154>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d007      	beq.n	800f24c <TIM_OC4_SetConfig+0xe8>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	4a1f      	ldr	r2, [pc, #124]	@ (800f2bc <TIM_OC4_SetConfig+0x158>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d003      	beq.n	800f24c <TIM_OC4_SetConfig+0xe8>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	4a1e      	ldr	r2, [pc, #120]	@ (800f2c0 <TIM_OC4_SetConfig+0x15c>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d113      	bne.n	800f274 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f252:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f25a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	695b      	ldr	r3, [r3, #20]
 800f260:	019b      	lsls	r3, r3, #6
 800f262:	693a      	ldr	r2, [r7, #16]
 800f264:	4313      	orrs	r3, r2
 800f266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	699b      	ldr	r3, [r3, #24]
 800f26c:	019b      	lsls	r3, r3, #6
 800f26e:	693a      	ldr	r2, [r7, #16]
 800f270:	4313      	orrs	r3, r2
 800f272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	693a      	ldr	r2, [r7, #16]
 800f278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	68fa      	ldr	r2, [r7, #12]
 800f27e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	685a      	ldr	r2, [r3, #4]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	697a      	ldr	r2, [r7, #20]
 800f28c:	621a      	str	r2, [r3, #32]
}
 800f28e:	bf00      	nop
 800f290:	371c      	adds	r7, #28
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop
 800f29c:	40012c00 	.word	0x40012c00
 800f2a0:	50012c00 	.word	0x50012c00
 800f2a4:	40013400 	.word	0x40013400
 800f2a8:	50013400 	.word	0x50013400
 800f2ac:	40014000 	.word	0x40014000
 800f2b0:	50014000 	.word	0x50014000
 800f2b4:	40014400 	.word	0x40014400
 800f2b8:	50014400 	.word	0x50014400
 800f2bc:	40014800 	.word	0x40014800
 800f2c0:	50014800 	.word	0x50014800

0800f2c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b087      	sub	sp, #28
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6a1b      	ldr	r3, [r3, #32]
 800f2d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6a1b      	ldr	r3, [r3, #32]
 800f2d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f2f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	4313      	orrs	r3, r2
 800f300:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f308:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	041b      	lsls	r3, r3, #16
 800f310:	693a      	ldr	r2, [r7, #16]
 800f312:	4313      	orrs	r3, r2
 800f314:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a21      	ldr	r2, [pc, #132]	@ (800f3a0 <TIM_OC5_SetConfig+0xdc>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d023      	beq.n	800f366 <TIM_OC5_SetConfig+0xa2>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a20      	ldr	r2, [pc, #128]	@ (800f3a4 <TIM_OC5_SetConfig+0xe0>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d01f      	beq.n	800f366 <TIM_OC5_SetConfig+0xa2>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a1f      	ldr	r2, [pc, #124]	@ (800f3a8 <TIM_OC5_SetConfig+0xe4>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d01b      	beq.n	800f366 <TIM_OC5_SetConfig+0xa2>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4a1e      	ldr	r2, [pc, #120]	@ (800f3ac <TIM_OC5_SetConfig+0xe8>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d017      	beq.n	800f366 <TIM_OC5_SetConfig+0xa2>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4a1d      	ldr	r2, [pc, #116]	@ (800f3b0 <TIM_OC5_SetConfig+0xec>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d013      	beq.n	800f366 <TIM_OC5_SetConfig+0xa2>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4a1c      	ldr	r2, [pc, #112]	@ (800f3b4 <TIM_OC5_SetConfig+0xf0>)
 800f342:	4293      	cmp	r3, r2
 800f344:	d00f      	beq.n	800f366 <TIM_OC5_SetConfig+0xa2>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	4a1b      	ldr	r2, [pc, #108]	@ (800f3b8 <TIM_OC5_SetConfig+0xf4>)
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d00b      	beq.n	800f366 <TIM_OC5_SetConfig+0xa2>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	4a1a      	ldr	r2, [pc, #104]	@ (800f3bc <TIM_OC5_SetConfig+0xf8>)
 800f352:	4293      	cmp	r3, r2
 800f354:	d007      	beq.n	800f366 <TIM_OC5_SetConfig+0xa2>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4a19      	ldr	r2, [pc, #100]	@ (800f3c0 <TIM_OC5_SetConfig+0xfc>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d003      	beq.n	800f366 <TIM_OC5_SetConfig+0xa2>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4a18      	ldr	r2, [pc, #96]	@ (800f3c4 <TIM_OC5_SetConfig+0x100>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d109      	bne.n	800f37a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f36c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	695b      	ldr	r3, [r3, #20]
 800f372:	021b      	lsls	r3, r3, #8
 800f374:	697a      	ldr	r2, [r7, #20]
 800f376:	4313      	orrs	r3, r2
 800f378:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	697a      	ldr	r2, [r7, #20]
 800f37e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	68fa      	ldr	r2, [r7, #12]
 800f384:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	685a      	ldr	r2, [r3, #4]
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	693a      	ldr	r2, [r7, #16]
 800f392:	621a      	str	r2, [r3, #32]
}
 800f394:	bf00      	nop
 800f396:	371c      	adds	r7, #28
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr
 800f3a0:	40012c00 	.word	0x40012c00
 800f3a4:	50012c00 	.word	0x50012c00
 800f3a8:	40013400 	.word	0x40013400
 800f3ac:	50013400 	.word	0x50013400
 800f3b0:	40014000 	.word	0x40014000
 800f3b4:	50014000 	.word	0x50014000
 800f3b8:	40014400 	.word	0x40014400
 800f3bc:	50014400 	.word	0x50014400
 800f3c0:	40014800 	.word	0x40014800
 800f3c4:	50014800 	.word	0x50014800

0800f3c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b087      	sub	sp, #28
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6a1b      	ldr	r3, [r3, #32]
 800f3d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6a1b      	ldr	r3, [r3, #32]
 800f3dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f3f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f3fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	021b      	lsls	r3, r3, #8
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	4313      	orrs	r3, r2
 800f406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f40e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	051b      	lsls	r3, r3, #20
 800f416:	693a      	ldr	r2, [r7, #16]
 800f418:	4313      	orrs	r3, r2
 800f41a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4a22      	ldr	r2, [pc, #136]	@ (800f4a8 <TIM_OC6_SetConfig+0xe0>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d023      	beq.n	800f46c <TIM_OC6_SetConfig+0xa4>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	4a21      	ldr	r2, [pc, #132]	@ (800f4ac <TIM_OC6_SetConfig+0xe4>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d01f      	beq.n	800f46c <TIM_OC6_SetConfig+0xa4>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	4a20      	ldr	r2, [pc, #128]	@ (800f4b0 <TIM_OC6_SetConfig+0xe8>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d01b      	beq.n	800f46c <TIM_OC6_SetConfig+0xa4>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4a1f      	ldr	r2, [pc, #124]	@ (800f4b4 <TIM_OC6_SetConfig+0xec>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d017      	beq.n	800f46c <TIM_OC6_SetConfig+0xa4>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4a1e      	ldr	r2, [pc, #120]	@ (800f4b8 <TIM_OC6_SetConfig+0xf0>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d013      	beq.n	800f46c <TIM_OC6_SetConfig+0xa4>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	4a1d      	ldr	r2, [pc, #116]	@ (800f4bc <TIM_OC6_SetConfig+0xf4>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d00f      	beq.n	800f46c <TIM_OC6_SetConfig+0xa4>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	4a1c      	ldr	r2, [pc, #112]	@ (800f4c0 <TIM_OC6_SetConfig+0xf8>)
 800f450:	4293      	cmp	r3, r2
 800f452:	d00b      	beq.n	800f46c <TIM_OC6_SetConfig+0xa4>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4a1b      	ldr	r2, [pc, #108]	@ (800f4c4 <TIM_OC6_SetConfig+0xfc>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d007      	beq.n	800f46c <TIM_OC6_SetConfig+0xa4>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4a1a      	ldr	r2, [pc, #104]	@ (800f4c8 <TIM_OC6_SetConfig+0x100>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d003      	beq.n	800f46c <TIM_OC6_SetConfig+0xa4>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	4a19      	ldr	r2, [pc, #100]	@ (800f4cc <TIM_OC6_SetConfig+0x104>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d109      	bne.n	800f480 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f472:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	695b      	ldr	r3, [r3, #20]
 800f478:	029b      	lsls	r3, r3, #10
 800f47a:	697a      	ldr	r2, [r7, #20]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	697a      	ldr	r2, [r7, #20]
 800f484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	685a      	ldr	r2, [r3, #4]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	693a      	ldr	r2, [r7, #16]
 800f498:	621a      	str	r2, [r3, #32]
}
 800f49a:	bf00      	nop
 800f49c:	371c      	adds	r7, #28
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr
 800f4a6:	bf00      	nop
 800f4a8:	40012c00 	.word	0x40012c00
 800f4ac:	50012c00 	.word	0x50012c00
 800f4b0:	40013400 	.word	0x40013400
 800f4b4:	50013400 	.word	0x50013400
 800f4b8:	40014000 	.word	0x40014000
 800f4bc:	50014000 	.word	0x50014000
 800f4c0:	40014400 	.word	0x40014400
 800f4c4:	50014400 	.word	0x50014400
 800f4c8:	40014800 	.word	0x40014800
 800f4cc:	50014800 	.word	0x50014800

0800f4d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b087      	sub	sp, #28
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	6a1b      	ldr	r3, [r3, #32]
 800f4e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	6a1b      	ldr	r3, [r3, #32]
 800f4e6:	f023 0201 	bic.w	r2, r3, #1
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	699b      	ldr	r3, [r3, #24]
 800f4f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f4fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	011b      	lsls	r3, r3, #4
 800f500:	693a      	ldr	r2, [r7, #16]
 800f502:	4313      	orrs	r3, r2
 800f504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f506:	697b      	ldr	r3, [r7, #20]
 800f508:	f023 030a 	bic.w	r3, r3, #10
 800f50c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f50e:	697a      	ldr	r2, [r7, #20]
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	4313      	orrs	r3, r2
 800f514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	693a      	ldr	r2, [r7, #16]
 800f51a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	697a      	ldr	r2, [r7, #20]
 800f520:	621a      	str	r2, [r3, #32]
}
 800f522:	bf00      	nop
 800f524:	371c      	adds	r7, #28
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr

0800f52e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f52e:	b480      	push	{r7}
 800f530:	b087      	sub	sp, #28
 800f532:	af00      	add	r7, sp, #0
 800f534:	60f8      	str	r0, [r7, #12]
 800f536:	60b9      	str	r1, [r7, #8]
 800f538:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	6a1b      	ldr	r3, [r3, #32]
 800f53e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	6a1b      	ldr	r3, [r3, #32]
 800f544:	f023 0210 	bic.w	r2, r3, #16
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	699b      	ldr	r3, [r3, #24]
 800f550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f558:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	031b      	lsls	r3, r3, #12
 800f55e:	693a      	ldr	r2, [r7, #16]
 800f560:	4313      	orrs	r3, r2
 800f562:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f56a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	011b      	lsls	r3, r3, #4
 800f570:	697a      	ldr	r2, [r7, #20]
 800f572:	4313      	orrs	r3, r2
 800f574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	693a      	ldr	r2, [r7, #16]
 800f57a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	697a      	ldr	r2, [r7, #20]
 800f580:	621a      	str	r2, [r3, #32]
}
 800f582:	bf00      	nop
 800f584:	371c      	adds	r7, #28
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr

0800f58e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f58e:	b480      	push	{r7}
 800f590:	b085      	sub	sp, #20
 800f592:	af00      	add	r7, sp, #0
 800f594:	6078      	str	r0, [r7, #4]
 800f596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	689b      	ldr	r3, [r3, #8]
 800f59c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f5a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	f043 0307 	orr.w	r3, r3, #7
 800f5b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	68fa      	ldr	r2, [r7, #12]
 800f5ba:	609a      	str	r2, [r3, #8]
}
 800f5bc:	bf00      	nop
 800f5be:	3714      	adds	r7, #20
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b087      	sub	sp, #28
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	689b      	ldr	r3, [r3, #8]
 800f5da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f5e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	021a      	lsls	r2, r3, #8
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	431a      	orrs	r2, r3
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	4313      	orrs	r3, r2
 800f5f0:	697a      	ldr	r2, [r7, #20]
 800f5f2:	4313      	orrs	r3, r2
 800f5f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	697a      	ldr	r2, [r7, #20]
 800f5fa:	609a      	str	r2, [r3, #8]
}
 800f5fc:	bf00      	nop
 800f5fe:	371c      	adds	r7, #28
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f608:	b480      	push	{r7}
 800f60a:	b087      	sub	sp, #28
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	f003 031f 	and.w	r3, r3, #31
 800f61a:	2201      	movs	r2, #1
 800f61c:	fa02 f303 	lsl.w	r3, r2, r3
 800f620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6a1a      	ldr	r2, [r3, #32]
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	43db      	mvns	r3, r3
 800f62a:	401a      	ands	r2, r3
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	6a1a      	ldr	r2, [r3, #32]
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	f003 031f 	and.w	r3, r3, #31
 800f63a:	6879      	ldr	r1, [r7, #4]
 800f63c:	fa01 f303 	lsl.w	r3, r1, r3
 800f640:	431a      	orrs	r2, r3
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	621a      	str	r2, [r3, #32]
}
 800f646:	bf00      	nop
 800f648:	371c      	adds	r7, #28
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
	...

0800f654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f654:	b480      	push	{r7}
 800f656:	b085      	sub	sp, #20
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f664:	2b01      	cmp	r3, #1
 800f666:	d101      	bne.n	800f66c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f668:	2302      	movs	r3, #2
 800f66a:	e0a1      	b.n	800f7b0 <HAL_TIMEx_MasterConfigSynchronization+0x15c>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2201      	movs	r2, #1
 800f670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2202      	movs	r2, #2
 800f678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	689b      	ldr	r3, [r3, #8]
 800f68a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a4a      	ldr	r2, [pc, #296]	@ (800f7bc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d00e      	beq.n	800f6b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a49      	ldr	r2, [pc, #292]	@ (800f7c0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d009      	beq.n	800f6b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	4a47      	ldr	r2, [pc, #284]	@ (800f7c4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800f6a6:	4293      	cmp	r3, r2
 800f6a8:	d004      	beq.n	800f6b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4a46      	ldr	r2, [pc, #280]	@ (800f7c8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d108      	bne.n	800f6c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f6ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f6cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f6d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	68fa      	ldr	r2, [r7, #12]
 800f6d8:	4313      	orrs	r3, r2
 800f6da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4a34      	ldr	r2, [pc, #208]	@ (800f7bc <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	d04a      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	4a33      	ldr	r2, [pc, #204]	@ (800f7c0 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d045      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f700:	d040      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f70a:	d03b      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4a2e      	ldr	r2, [pc, #184]	@ (800f7cc <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d036      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	4a2d      	ldr	r2, [pc, #180]	@ (800f7d0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d031      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	4a2b      	ldr	r2, [pc, #172]	@ (800f7d4 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800f726:	4293      	cmp	r3, r2
 800f728:	d02c      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4a2a      	ldr	r2, [pc, #168]	@ (800f7d8 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d027      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a28      	ldr	r2, [pc, #160]	@ (800f7dc <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d022      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	4a27      	ldr	r2, [pc, #156]	@ (800f7e0 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d01d      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a1d      	ldr	r2, [pc, #116]	@ (800f7c4 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d018      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4a1c      	ldr	r2, [pc, #112]	@ (800f7c8 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d013      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	4a20      	ldr	r2, [pc, #128]	@ (800f7e4 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d00e      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4a1f      	ldr	r2, [pc, #124]	@ (800f7e8 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d009      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a1d      	ldr	r2, [pc, #116]	@ (800f7ec <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d004      	beq.n	800f784 <HAL_TIMEx_MasterConfigSynchronization+0x130>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	4a1c      	ldr	r2, [pc, #112]	@ (800f7f0 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d10c      	bne.n	800f79e <HAL_TIMEx_MasterConfigSynchronization+0x14a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f78a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	68ba      	ldr	r2, [r7, #8]
 800f792:	4313      	orrs	r3, r2
 800f794:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	68ba      	ldr	r2, [r7, #8]
 800f79c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f7ae:	2300      	movs	r3, #0
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3714      	adds	r7, #20
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr
 800f7bc:	40012c00 	.word	0x40012c00
 800f7c0:	50012c00 	.word	0x50012c00
 800f7c4:	40013400 	.word	0x40013400
 800f7c8:	50013400 	.word	0x50013400
 800f7cc:	40000400 	.word	0x40000400
 800f7d0:	50000400 	.word	0x50000400
 800f7d4:	40000800 	.word	0x40000800
 800f7d8:	50000800 	.word	0x50000800
 800f7dc:	40000c00 	.word	0x40000c00
 800f7e0:	50000c00 	.word	0x50000c00
 800f7e4:	40001800 	.word	0x40001800
 800f7e8:	50001800 	.word	0x50001800
 800f7ec:	40014000 	.word	0x40014000
 800f7f0:	50014000 	.word	0x50014000

0800f7f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b085      	sub	sp, #20
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f7fe:	2300      	movs	r3, #0
 800f800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d101      	bne.n	800f810 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f80c:	2302      	movs	r3, #2
 800f80e:	e07d      	b.n	800f90c <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2201      	movs	r2, #1
 800f814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	4313      	orrs	r3, r2
 800f824:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	689b      	ldr	r3, [r3, #8]
 800f830:	4313      	orrs	r3, r2
 800f832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	4313      	orrs	r3, r2
 800f840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4313      	orrs	r3, r2
 800f84e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	691b      	ldr	r3, [r3, #16]
 800f85a:	4313      	orrs	r3, r2
 800f85c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	695b      	ldr	r3, [r3, #20]
 800f868:	4313      	orrs	r3, r2
 800f86a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f876:	4313      	orrs	r3, r2
 800f878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	699b      	ldr	r3, [r3, #24]
 800f884:	041b      	lsls	r3, r3, #16
 800f886:	4313      	orrs	r3, r2
 800f888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	69db      	ldr	r3, [r3, #28]
 800f894:	4313      	orrs	r3, r2
 800f896:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	4a1e      	ldr	r2, [pc, #120]	@ (800f918 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d00e      	beq.n	800f8c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	4a1d      	ldr	r2, [pc, #116]	@ (800f91c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d009      	beq.n	800f8c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	4a1b      	ldr	r2, [pc, #108]	@ (800f920 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d004      	beq.n	800f8c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	4a1a      	ldr	r2, [pc, #104]	@ (800f924 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	d11c      	bne.n	800f8fa <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8ca:	051b      	lsls	r3, r3, #20
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	6a1b      	ldr	r3, [r3, #32]
 800f8da:	4313      	orrs	r3, r2
 800f8dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	68fa      	ldr	r2, [r7, #12]
 800f900:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2200      	movs	r2, #0
 800f906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f90a:	2300      	movs	r3, #0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3714      	adds	r7, #20
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	4770      	bx	lr
 800f918:	40012c00 	.word	0x40012c00
 800f91c:	50012c00 	.word	0x50012c00
 800f920:	40013400 	.word	0x40013400
 800f924:	50013400 	.word	0x50013400

0800f928 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f930:	bf00      	nop
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f944:	bf00      	nop
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f958:	bf00      	nop
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f96c:	bf00      	nop
 800f96e:	370c      	adds	r7, #12
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr

0800f978 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f980:	bf00      	nop
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr

0800f98c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b083      	sub	sp, #12
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f994:	bf00      	nop
 800f996:	370c      	adds	r7, #12
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr

0800f9a0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b083      	sub	sp, #12
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f9a8:	bf00      	nop
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d101      	bne.n	800f9c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	e042      	b.n	800fa4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d106      	bne.n	800f9de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7f3 fc6b 	bl	80032b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2224      	movs	r2, #36	@ 0x24
 800f9e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f022 0201 	bic.w	r2, r2, #1
 800f9f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d002      	beq.n	800fa04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 fdf4 	bl	80105ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f000 fc03 	bl	8010210 <UART_SetConfig>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d101      	bne.n	800fa14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fa10:	2301      	movs	r3, #1
 800fa12:	e01b      	b.n	800fa4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	685a      	ldr	r2, [r3, #4]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fa22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	689a      	ldr	r2, [r3, #8]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fa32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f042 0201 	orr.w	r2, r2, #1
 800fa42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f000 fe73 	bl	8010730 <UART_CheckIdleState>
 800fa4a:	4603      	mov	r3, r0
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3708      	adds	r7, #8
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b08c      	sub	sp, #48	@ 0x30
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	4613      	mov	r3, r2
 800fa60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800fa62:	88fb      	ldrh	r3, [r7, #6]
 800fa64:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa6c:	2b20      	cmp	r3, #32
 800fa6e:	f040 80ad 	bne.w	800fbcc <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d002      	beq.n	800fa7e <HAL_UART_Transmit_DMA+0x2a>
 800fa78:	88fb      	ldrh	r3, [r7, #6]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d101      	bne.n	800fa82 <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e0a5      	b.n	800fbce <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	68ba      	ldr	r2, [r7, #8]
 800fa86:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	88fa      	ldrh	r2, [r7, #6]
 800fa8c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	88fa      	ldrh	r2, [r7, #6]
 800fa94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2221      	movs	r2, #33	@ 0x21
 800faa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	2240      	movs	r2, #64	@ 0x40
 800faae:	621a      	str	r2, [r3, #32]

#endif /* USART_DMAREQUESTS_SW_WA */
    if (huart->hdmatx != NULL)
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d06d      	beq.n	800fb94 <HAL_UART_Transmit_DMA+0x140>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fabc:	4a46      	ldr	r2, [pc, #280]	@ (800fbd8 <HAL_UART_Transmit_DMA+0x184>)
 800fabe:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fac4:	4a45      	ldr	r2, [pc, #276]	@ (800fbdc <HAL_UART_Transmit_DMA+0x188>)
 800fac6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800facc:	4a44      	ldr	r2, [pc, #272]	@ (800fbe0 <HAL_UART_Transmit_DMA+0x18c>)
 800face:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fad4:	2200      	movs	r2, #0
 800fad6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	689b      	ldr	r3, [r3, #8]
 800fadc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fae0:	d106      	bne.n	800faf0 <HAL_UART_Transmit_DMA+0x9c>
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	691b      	ldr	r3, [r3, #16]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d102      	bne.n	800faf0 <HAL_UART_Transmit_DMA+0x9c>
      {
        nbByte = Size * 2U;
 800faea:	88fb      	ldrh	r3, [r7, #6]
 800faec:	005b      	lsls	r3, r3, #1
 800faee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800faf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800faf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d02d      	beq.n	800fb5a <HAL_UART_Transmit_DMA+0x106>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d024      	beq.n	800fb52 <HAL_UART_Transmit_DMA+0xfe>
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d01e      	beq.n	800fb52 <HAL_UART_Transmit_DMA+0xfe>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800fb1e:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f103 0228 	add.w	r2, r3, #40	@ 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7f6 fd79 	bl	800663c <HAL_DMAEx_List_Start_IT>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800fb50:	e012      	b.n	800fb78 <HAL_UART_Transmit_DMA+0x124>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 800fb52:	2301      	movs	r3, #1
 800fb54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800fb58:	e00e      	b.n	800fb78 <HAL_UART_Transmit_DMA+0x124>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb62:	4619      	mov	r1, r3
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	3328      	adds	r3, #40	@ 0x28
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800fb6e:	f7f6 f813 	bl	8005b98 <HAL_DMA_Start_IT>
 800fb72:	4603      	mov	r3, r0
 800fb74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }

      if (status != HAL_OK)
 800fb78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d009      	beq.n	800fb94 <HAL_UART_Transmit_DMA+0x140>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2210      	movs	r2, #16
 800fb84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2220      	movs	r2, #32
 800fb8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800fb90:	2301      	movs	r3, #1
 800fb92:	e01c      	b.n	800fbce <HAL_UART_Transmit_DMA+0x17a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);

#endif /* USART_DMAREQUESTS_SW_WA */
    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	3308      	adds	r3, #8
 800fb9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb9c:	69bb      	ldr	r3, [r7, #24]
 800fb9e:	e853 3f00 	ldrex	r3, [r3]
 800fba2:	617b      	str	r3, [r7, #20]
   return(result);
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fbaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	3308      	adds	r3, #8
 800fbb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbb4:	627a      	str	r2, [r7, #36]	@ 0x24
 800fbb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb8:	6a39      	ldr	r1, [r7, #32]
 800fbba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbbc:	e841 2300 	strex	r3, r2, [r1]
 800fbc0:	61fb      	str	r3, [r7, #28]
   return(result);
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d1e5      	bne.n	800fb94 <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	e000      	b.n	800fbce <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 800fbcc:	2302      	movs	r3, #2
  }
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3730      	adds	r7, #48	@ 0x30
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	08010c9f 	.word	0x08010c9f
 800fbdc:	08010cff 	.word	0x08010cff
 800fbe0:	08010eb5 	.word	0x08010eb5

0800fbe4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b0ae      	sub	sp, #184	@ 0xb8
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	69db      	ldr	r3, [r3, #28]
 800fbf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fc0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fc0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fc12:	4013      	ands	r3, r2
 800fc14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (errorflags == 0U)
 800fc18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d11b      	bne.n	800fc58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fc20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fc24:	f003 0320 	and.w	r3, r3, #32
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d015      	beq.n	800fc58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fc2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fc30:	f003 0320 	and.w	r3, r3, #32
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d105      	bne.n	800fc44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fc38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fc3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d009      	beq.n	800fc58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	f000 82ac 	beq.w	80101a6 <HAL_UART_IRQHandler+0x5c2>
      {
        huart->RxISR(huart);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	4798      	blx	r3
      }
      return;
 800fc56:	e2a6      	b.n	80101a6 <HAL_UART_IRQHandler+0x5c2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fc58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f000 80fd 	beq.w	800fe5c <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fc62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800fc66:	4b7a      	ldr	r3, [pc, #488]	@ (800fe50 <HAL_UART_IRQHandler+0x26c>)
 800fc68:	4013      	ands	r3, r2
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d106      	bne.n	800fc7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fc6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fc72:	4b78      	ldr	r3, [pc, #480]	@ (800fe54 <HAL_UART_IRQHandler+0x270>)
 800fc74:	4013      	ands	r3, r2
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f000 80f0 	beq.w	800fe5c <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fc7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fc80:	f003 0301 	and.w	r3, r3, #1
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d011      	beq.n	800fcac <HAL_UART_IRQHandler+0xc8>
 800fc88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fc8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d00b      	beq.n	800fcac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2201      	movs	r2, #1
 800fc9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fca2:	f043 0201 	orr.w	r2, r3, #1
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fcb0:	f003 0302 	and.w	r3, r3, #2
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d011      	beq.n	800fcdc <HAL_UART_IRQHandler+0xf8>
 800fcb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fcbc:	f003 0301 	and.w	r3, r3, #1
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d00b      	beq.n	800fcdc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	2202      	movs	r2, #2
 800fcca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcd2:	f043 0204 	orr.w	r2, r3, #4
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fcdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fce0:	f003 0304 	and.w	r3, r3, #4
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d011      	beq.n	800fd0c <HAL_UART_IRQHandler+0x128>
 800fce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fcec:	f003 0301 	and.w	r3, r3, #1
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d00b      	beq.n	800fd0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2204      	movs	r2, #4
 800fcfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd02:	f043 0202 	orr.w	r2, r3, #2
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fd0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fd10:	f003 0308 	and.w	r3, r3, #8
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d017      	beq.n	800fd48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fd1c:	f003 0320 	and.w	r3, r3, #32
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d105      	bne.n	800fd30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fd24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800fd28:	4b49      	ldr	r3, [pc, #292]	@ (800fe50 <HAL_UART_IRQHandler+0x26c>)
 800fd2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d00b      	beq.n	800fd48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2208      	movs	r2, #8
 800fd36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd3e:	f043 0208 	orr.w	r2, r3, #8
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fd48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fd4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d012      	beq.n	800fd7a <HAL_UART_IRQHandler+0x196>
 800fd54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fd58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d00c      	beq.n	800fd7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fd68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd70:	f043 0220 	orr.w	r2, r3, #32
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	f000 8212 	beq.w	80101aa <HAL_UART_IRQHandler+0x5c6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fd8a:	f003 0320 	and.w	r3, r3, #32
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d013      	beq.n	800fdba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fd96:	f003 0320 	and.w	r3, r3, #32
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d105      	bne.n	800fdaa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fd9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fda2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d007      	beq.n	800fdba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d003      	beq.n	800fdba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdce:	2b40      	cmp	r3, #64	@ 0x40
 800fdd0:	d005      	beq.n	800fdde <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fdd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800fdd6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d02e      	beq.n	800fe3c <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 fef7 	bl	8010bd2 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	689b      	ldr	r3, [r3, #8]
 800fdea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdee:	2b40      	cmp	r3, #64	@ 0x40
 800fdf0:	d120      	bne.n	800fe34 <HAL_UART_IRQHandler+0x250>
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d017      	beq.n	800fe2c <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe02:	4a15      	ldr	r2, [pc, #84]	@ (800fe58 <HAL_UART_IRQHandler+0x274>)
 800fe04:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7f5 ffa5 	bl	8005d5c <HAL_DMA_Abort_IT>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d019      	beq.n	800fe4c <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fe26:	4610      	mov	r0, r2
 800fe28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe2a:	e00f      	b.n	800fe4c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7f2 f96d 	bl	800210c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe32:	e00b      	b.n	800fe4c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f7f2 f969 	bl	800210c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe3a:	e007      	b.n	800fe4c <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7f2 f965 	bl	800210c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2200      	movs	r2, #0
 800fe46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fe4a:	e1ae      	b.n	80101aa <HAL_UART_IRQHandler+0x5c6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe4c:	bf00      	nop
    return;
 800fe4e:	e1ac      	b.n	80101aa <HAL_UART_IRQHandler+0x5c6>
 800fe50:	10000001 	.word	0x10000001
 800fe54:	04000120 	.word	0x04000120
 800fe58:	08010f35 	.word	0x08010f35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe60:	2b01      	cmp	r3, #1
 800fe62:	f040 8142 	bne.w	80100ea <HAL_UART_IRQHandler+0x506>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fe66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800fe6a:	f003 0310 	and.w	r3, r3, #16
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	f000 813b 	beq.w	80100ea <HAL_UART_IRQHandler+0x506>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fe74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800fe78:	f003 0310 	and.w	r3, r3, #16
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	f000 8134 	beq.w	80100ea <HAL_UART_IRQHandler+0x506>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2210      	movs	r2, #16
 800fe88:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	689b      	ldr	r3, [r3, #8]
 800fe90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe94:	2b40      	cmp	r3, #64	@ 0x40
 800fe96:	f040 80aa 	bne.w	800ffee <HAL_UART_IRQHandler+0x40a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fea4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
      if ((nb_remaining_rx_data > 0U)
 800fea8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800feac:	2b00      	cmp	r3, #0
 800feae:	f000 8084 	beq.w	800ffba <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800feb8:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800febc:	429a      	cmp	r2, r3
 800febe:	d27c      	bcs.n	800ffba <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800fec6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fed2:	2b81      	cmp	r3, #129	@ 0x81
 800fed4:	d060      	beq.n	800ff98 <HAL_UART_IRQHandler+0x3b4>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fedc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fede:	e853 3f00 	ldrex	r3, [r3]
 800fee2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fee4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fee6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800feea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	461a      	mov	r2, r3
 800fef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fefc:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fefe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ff00:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ff04:	e841 2300 	strex	r3, r2, [r1]
 800ff08:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ff0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d1e2      	bne.n	800fed6 <HAL_UART_IRQHandler+0x2f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	3308      	adds	r3, #8
 800ff16:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ff1a:	e853 3f00 	ldrex	r3, [r3]
 800ff1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ff20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff22:	f023 0301 	bic.w	r3, r3, #1
 800ff26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	3308      	adds	r3, #8
 800ff30:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ff34:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ff36:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff38:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ff3a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ff3c:	e841 2300 	strex	r3, r2, [r1]
 800ff40:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ff42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d1e3      	bne.n	800ff10 <HAL_UART_IRQHandler+0x32c>
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2220      	movs	r2, #32
 800ff4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff5e:	e853 3f00 	ldrex	r3, [r3]
 800ff62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ff64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ff66:	f023 0310 	bic.w	r3, r3, #16
 800ff6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	461a      	mov	r2, r3
 800ff74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ff78:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ff7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ff7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ff80:	e841 2300 	strex	r3, r2, [r1]
 800ff84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ff86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d1e4      	bne.n	800ff56 <HAL_UART_IRQHandler+0x372>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7f5 fe66 	bl	8005c64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2202      	movs	r2, #2
 800ff9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	1ad3      	subs	r3, r2, r3
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	4619      	mov	r1, r3
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7f2 f87e 	bl	80020b4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ffb8:	e0f9      	b.n	80101ae <HAL_UART_IRQHandler+0x5ca>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ffc0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	f040 80f2 	bne.w	80101ae <HAL_UART_IRQHandler+0x5ca>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ffd2:	2b81      	cmp	r3, #129	@ 0x81
 800ffd4:	f040 80eb 	bne.w	80101ae <HAL_UART_IRQHandler+0x5ca>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2202      	movs	r2, #2
 800ffdc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f7f2 f864 	bl	80020b4 <HAL_UARTEx_RxEventCallback>
      return;
 800ffec:	e0df      	b.n	80101ae <HAL_UART_IRQHandler+0x5ca>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	1ad3      	subs	r3, r2, r3
 800fffe:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
      if ((huart->RxXferCount > 0U)
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010008:	b29b      	uxth	r3, r3
 801000a:	2b00      	cmp	r3, #0
 801000c:	f000 80d1 	beq.w	80101b2 <HAL_UART_IRQHandler+0x5ce>
          && (nb_rx_data > 0U))
 8010010:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8010014:	2b00      	cmp	r3, #0
 8010016:	f000 80cc 	beq.w	80101b2 <HAL_UART_IRQHandler+0x5ce>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010022:	e853 3f00 	ldrex	r3, [r3]
 8010026:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801002a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801002e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	461a      	mov	r2, r3
 8010038:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801003c:	647b      	str	r3, [r7, #68]	@ 0x44
 801003e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010040:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010044:	e841 2300 	strex	r3, r2, [r1]
 8010048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801004a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1e4      	bne.n	801001a <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	3308      	adds	r3, #8
 8010056:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801005a:	e853 3f00 	ldrex	r3, [r3]
 801005e:	623b      	str	r3, [r7, #32]
   return(result);
 8010060:	6a3b      	ldr	r3, [r7, #32]
 8010062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010066:	f023 0301 	bic.w	r3, r3, #1
 801006a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	3308      	adds	r3, #8
 8010074:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8010078:	633a      	str	r2, [r7, #48]	@ 0x30
 801007a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801007c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801007e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010080:	e841 2300 	strex	r3, r2, [r1]
 8010084:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010088:	2b00      	cmp	r3, #0
 801008a:	d1e1      	bne.n	8010050 <HAL_UART_IRQHandler+0x46c>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2220      	movs	r2, #32
 8010090:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2200      	movs	r2, #0
 8010098:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2200      	movs	r2, #0
 801009e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	e853 3f00 	ldrex	r3, [r3]
 80100ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f023 0310 	bic.w	r3, r3, #16
 80100b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	461a      	mov	r2, r3
 80100be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80100c2:	61fb      	str	r3, [r7, #28]
 80100c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c6:	69b9      	ldr	r1, [r7, #24]
 80100c8:	69fa      	ldr	r2, [r7, #28]
 80100ca:	e841 2300 	strex	r3, r2, [r1]
 80100ce:	617b      	str	r3, [r7, #20]
   return(result);
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d1e4      	bne.n	80100a0 <HAL_UART_IRQHandler+0x4bc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2202      	movs	r2, #2
 80100da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80100dc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 80100e0:	4619      	mov	r1, r3
 80100e2:	6878      	ldr	r0, [r7, #4]
 80100e4:	f7f1 ffe6 	bl	80020b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80100e8:	e063      	b.n	80101b2 <HAL_UART_IRQHandler+0x5ce>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80100ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80100ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d00e      	beq.n	8010114 <HAL_UART_IRQHandler+0x530>
 80100f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80100fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d008      	beq.n	8010114 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801010a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 ff4e 	bl	8010fae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010112:	e051      	b.n	80101b8 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801011c:	2b00      	cmp	r3, #0
 801011e:	d014      	beq.n	801014a <HAL_UART_IRQHandler+0x566>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010120:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8010124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010128:	2b00      	cmp	r3, #0
 801012a:	d105      	bne.n	8010138 <HAL_UART_IRQHandler+0x554>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801012c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010130:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010134:	2b00      	cmp	r3, #0
 8010136:	d008      	beq.n	801014a <HAL_UART_IRQHandler+0x566>
  {
    if (huart->TxISR != NULL)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801013c:	2b00      	cmp	r3, #0
 801013e:	d03a      	beq.n	80101b6 <HAL_UART_IRQHandler+0x5d2>
    {
      huart->TxISR(huart);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	4798      	blx	r3
    }
    return;
 8010148:	e035      	b.n	80101b6 <HAL_UART_IRQHandler+0x5d2>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801014a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801014e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010152:	2b00      	cmp	r3, #0
 8010154:	d009      	beq.n	801016a <HAL_UART_IRQHandler+0x586>
 8010156:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801015a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801015e:	2b00      	cmp	r3, #0
 8010160:	d003      	beq.n	801016a <HAL_UART_IRQHandler+0x586>
  {
    UART_EndTransmit_IT(huart);
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f000 fef8 	bl	8010f58 <UART_EndTransmit_IT>
    return;
 8010168:	e026      	b.n	80101b8 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801016a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801016e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010172:	2b00      	cmp	r3, #0
 8010174:	d009      	beq.n	801018a <HAL_UART_IRQHandler+0x5a6>
 8010176:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801017a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801017e:	2b00      	cmp	r3, #0
 8010180:	d003      	beq.n	801018a <HAL_UART_IRQHandler+0x5a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 ff27 	bl	8010fd6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010188:	e016      	b.n	80101b8 <HAL_UART_IRQHandler+0x5d4>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801018a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801018e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010192:	2b00      	cmp	r3, #0
 8010194:	d010      	beq.n	80101b8 <HAL_UART_IRQHandler+0x5d4>
 8010196:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801019a:	2b00      	cmp	r3, #0
 801019c:	da0c      	bge.n	80101b8 <HAL_UART_IRQHandler+0x5d4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f000 ff0f 	bl	8010fc2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80101a4:	e008      	b.n	80101b8 <HAL_UART_IRQHandler+0x5d4>
      return;
 80101a6:	bf00      	nop
 80101a8:	e006      	b.n	80101b8 <HAL_UART_IRQHandler+0x5d4>
    return;
 80101aa:	bf00      	nop
 80101ac:	e004      	b.n	80101b8 <HAL_UART_IRQHandler+0x5d4>
      return;
 80101ae:	bf00      	nop
 80101b0:	e002      	b.n	80101b8 <HAL_UART_IRQHandler+0x5d4>
      return;
 80101b2:	bf00      	nop
 80101b4:	e000      	b.n	80101b8 <HAL_UART_IRQHandler+0x5d4>
    return;
 80101b6:	bf00      	nop
  }
}
 80101b8:	37b8      	adds	r7, #184	@ 0xb8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop

080101c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b083      	sub	sp, #12
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80101c8:	bf00      	nop
 80101ca:	370c      	adds	r7, #12
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr

080101d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80101dc:	bf00      	nop
 80101de:	370c      	adds	r7, #12
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr

080101e8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b083      	sub	sp, #12
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80101f0:	bf00      	nop
 80101f2:	370c      	adds	r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr

080101fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80101fc:	b480      	push	{r7}
 80101fe:	b083      	sub	sp, #12
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010204:	bf00      	nop
 8010206:	370c      	adds	r7, #12
 8010208:	46bd      	mov	sp, r7
 801020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020e:	4770      	bx	lr

08010210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010214:	b094      	sub	sp, #80	@ 0x50
 8010216:	af00      	add	r7, sp, #0
 8010218:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801021a:	2300      	movs	r3, #0
 801021c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8010220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	4b78      	ldr	r3, [pc, #480]	@ (8010408 <UART_SetConfig+0x1f8>)
 8010226:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801022a:	689a      	ldr	r2, [r3, #8]
 801022c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801022e:	691b      	ldr	r3, [r3, #16]
 8010230:	431a      	orrs	r2, r3
 8010232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010234:	695b      	ldr	r3, [r3, #20]
 8010236:	431a      	orrs	r2, r3
 8010238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801023a:	69db      	ldr	r3, [r3, #28]
 801023c:	4313      	orrs	r3, r2
 801023e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4971      	ldr	r1, [pc, #452]	@ (801040c <UART_SetConfig+0x1fc>)
 8010248:	4019      	ands	r1, r3
 801024a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010250:	430b      	orrs	r3, r1
 8010252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 801025e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010260:	68d9      	ldr	r1, [r3, #12]
 8010262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	ea40 0301 	orr.w	r3, r0, r1
 801026a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801026c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801026e:	699b      	ldr	r3, [r3, #24]
 8010270:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	4b64      	ldr	r3, [pc, #400]	@ (8010408 <UART_SetConfig+0x1f8>)
 8010278:	429a      	cmp	r2, r3
 801027a:	d009      	beq.n	8010290 <UART_SetConfig+0x80>
 801027c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801027e:	681a      	ldr	r2, [r3, #0]
 8010280:	4b63      	ldr	r3, [pc, #396]	@ (8010410 <UART_SetConfig+0x200>)
 8010282:	429a      	cmp	r2, r3
 8010284:	d004      	beq.n	8010290 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010288:	6a1a      	ldr	r2, [r3, #32]
 801028a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801028c:	4313      	orrs	r3, r2
 801028e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	689b      	ldr	r3, [r3, #8]
 8010296:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 801029a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 801029e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102a4:	430b      	orrs	r3, r1
 80102a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80102a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ae:	f023 000f 	bic.w	r0, r3, #15
 80102b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80102b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	ea40 0301 	orr.w	r3, r0, r1
 80102be:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80102c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102c2:	681a      	ldr	r2, [r3, #0]
 80102c4:	4b53      	ldr	r3, [pc, #332]	@ (8010414 <UART_SetConfig+0x204>)
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d102      	bne.n	80102d0 <UART_SetConfig+0xc0>
 80102ca:	2301      	movs	r3, #1
 80102cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102ce:	e066      	b.n	801039e <UART_SetConfig+0x18e>
 80102d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	4b50      	ldr	r3, [pc, #320]	@ (8010418 <UART_SetConfig+0x208>)
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d102      	bne.n	80102e0 <UART_SetConfig+0xd0>
 80102da:	2302      	movs	r3, #2
 80102dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102de:	e05e      	b.n	801039e <UART_SetConfig+0x18e>
 80102e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	4b4d      	ldr	r3, [pc, #308]	@ (801041c <UART_SetConfig+0x20c>)
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d102      	bne.n	80102f0 <UART_SetConfig+0xe0>
 80102ea:	2304      	movs	r3, #4
 80102ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102ee:	e056      	b.n	801039e <UART_SetConfig+0x18e>
 80102f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	4b4a      	ldr	r3, [pc, #296]	@ (8010420 <UART_SetConfig+0x210>)
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d102      	bne.n	8010300 <UART_SetConfig+0xf0>
 80102fa:	2308      	movs	r3, #8
 80102fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80102fe:	e04e      	b.n	801039e <UART_SetConfig+0x18e>
 8010300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010302:	681a      	ldr	r2, [r3, #0]
 8010304:	4b47      	ldr	r3, [pc, #284]	@ (8010424 <UART_SetConfig+0x214>)
 8010306:	429a      	cmp	r2, r3
 8010308:	d102      	bne.n	8010310 <UART_SetConfig+0x100>
 801030a:	2310      	movs	r3, #16
 801030c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801030e:	e046      	b.n	801039e <UART_SetConfig+0x18e>
 8010310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	4b44      	ldr	r3, [pc, #272]	@ (8010428 <UART_SetConfig+0x218>)
 8010316:	429a      	cmp	r2, r3
 8010318:	d102      	bne.n	8010320 <UART_SetConfig+0x110>
 801031a:	2320      	movs	r3, #32
 801031c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801031e:	e03e      	b.n	801039e <UART_SetConfig+0x18e>
 8010320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	4b41      	ldr	r3, [pc, #260]	@ (801042c <UART_SetConfig+0x21c>)
 8010326:	429a      	cmp	r2, r3
 8010328:	d102      	bne.n	8010330 <UART_SetConfig+0x120>
 801032a:	2340      	movs	r3, #64	@ 0x40
 801032c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801032e:	e036      	b.n	801039e <UART_SetConfig+0x18e>
 8010330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	4b3e      	ldr	r3, [pc, #248]	@ (8010430 <UART_SetConfig+0x220>)
 8010336:	429a      	cmp	r2, r3
 8010338:	d102      	bne.n	8010340 <UART_SetConfig+0x130>
 801033a:	2380      	movs	r3, #128	@ 0x80
 801033c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801033e:	e02e      	b.n	801039e <UART_SetConfig+0x18e>
 8010340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	4b3b      	ldr	r3, [pc, #236]	@ (8010434 <UART_SetConfig+0x224>)
 8010346:	429a      	cmp	r2, r3
 8010348:	d103      	bne.n	8010352 <UART_SetConfig+0x142>
 801034a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801034e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010350:	e025      	b.n	801039e <UART_SetConfig+0x18e>
 8010352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	4b38      	ldr	r3, [pc, #224]	@ (8010438 <UART_SetConfig+0x228>)
 8010358:	429a      	cmp	r2, r3
 801035a:	d103      	bne.n	8010364 <UART_SetConfig+0x154>
 801035c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010362:	e01c      	b.n	801039e <UART_SetConfig+0x18e>
 8010364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010366:	681a      	ldr	r2, [r3, #0]
 8010368:	4b34      	ldr	r3, [pc, #208]	@ (801043c <UART_SetConfig+0x22c>)
 801036a:	429a      	cmp	r2, r3
 801036c:	d103      	bne.n	8010376 <UART_SetConfig+0x166>
 801036e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010372:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010374:	e013      	b.n	801039e <UART_SetConfig+0x18e>
 8010376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010378:	681a      	ldr	r2, [r3, #0]
 801037a:	4b31      	ldr	r3, [pc, #196]	@ (8010440 <UART_SetConfig+0x230>)
 801037c:	429a      	cmp	r2, r3
 801037e:	d103      	bne.n	8010388 <UART_SetConfig+0x178>
 8010380:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010386:	e00a      	b.n	801039e <UART_SetConfig+0x18e>
 8010388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	4b1e      	ldr	r3, [pc, #120]	@ (8010408 <UART_SetConfig+0x1f8>)
 801038e:	429a      	cmp	r2, r3
 8010390:	d103      	bne.n	801039a <UART_SetConfig+0x18a>
 8010392:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010398:	e001      	b.n	801039e <UART_SetConfig+0x18e>
 801039a:	2300      	movs	r3, #0
 801039c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801039e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	4b19      	ldr	r3, [pc, #100]	@ (8010408 <UART_SetConfig+0x1f8>)
 80103a4:	429a      	cmp	r2, r3
 80103a6:	d005      	beq.n	80103b4 <UART_SetConfig+0x1a4>
 80103a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103aa:	681a      	ldr	r2, [r3, #0]
 80103ac:	4b18      	ldr	r3, [pc, #96]	@ (8010410 <UART_SetConfig+0x200>)
 80103ae:	429a      	cmp	r2, r3
 80103b0:	f040 8094 	bne.w	80104dc <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80103b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80103b6:	2200      	movs	r2, #0
 80103b8:	623b      	str	r3, [r7, #32]
 80103ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80103bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80103c0:	f7fa fcec 	bl	800ad9c <HAL_RCCEx_GetPeriphCLKFreq>
 80103c4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80103c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f000 80f7 	beq.w	80105bc <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80103ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103d2:	4a1c      	ldr	r2, [pc, #112]	@ (8010444 <UART_SetConfig+0x234>)
 80103d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103d8:	461a      	mov	r2, r3
 80103da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80103dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80103e0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103e4:	685a      	ldr	r2, [r3, #4]
 80103e6:	4613      	mov	r3, r2
 80103e8:	005b      	lsls	r3, r3, #1
 80103ea:	4413      	add	r3, r2
 80103ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d305      	bcc.n	80103fe <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80103f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d924      	bls.n	8010448 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80103fe:	2301      	movs	r3, #1
 8010400:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010404:	e069      	b.n	80104da <UART_SetConfig+0x2ca>
 8010406:	bf00      	nop
 8010408:	44002400 	.word	0x44002400
 801040c:	cfff69f3 	.word	0xcfff69f3
 8010410:	54002400 	.word	0x54002400
 8010414:	40013800 	.word	0x40013800
 8010418:	40004400 	.word	0x40004400
 801041c:	40004800 	.word	0x40004800
 8010420:	40004c00 	.word	0x40004c00
 8010424:	40005000 	.word	0x40005000
 8010428:	40006400 	.word	0x40006400
 801042c:	40007800 	.word	0x40007800
 8010430:	40007c00 	.word	0x40007c00
 8010434:	40008000 	.word	0x40008000
 8010438:	40006800 	.word	0x40006800
 801043c:	40006c00 	.word	0x40006c00
 8010440:	40008400 	.word	0x40008400
 8010444:	08014a28 	.word	0x08014a28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801044a:	2200      	movs	r2, #0
 801044c:	61bb      	str	r3, [r7, #24]
 801044e:	61fa      	str	r2, [r7, #28]
 8010450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010454:	4a64      	ldr	r2, [pc, #400]	@ (80105e8 <UART_SetConfig+0x3d8>)
 8010456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801045a:	b29b      	uxth	r3, r3
 801045c:	2200      	movs	r2, #0
 801045e:	613b      	str	r3, [r7, #16]
 8010460:	617a      	str	r2, [r7, #20]
 8010462:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010466:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801046a:	f7f0 fa43 	bl	80008f4 <__aeabi_uldivmod>
 801046e:	4602      	mov	r2, r0
 8010470:	460b      	mov	r3, r1
 8010472:	4610      	mov	r0, r2
 8010474:	4619      	mov	r1, r3
 8010476:	f04f 0200 	mov.w	r2, #0
 801047a:	f04f 0300 	mov.w	r3, #0
 801047e:	020b      	lsls	r3, r1, #8
 8010480:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010484:	0202      	lsls	r2, r0, #8
 8010486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010488:	6849      	ldr	r1, [r1, #4]
 801048a:	0849      	lsrs	r1, r1, #1
 801048c:	2000      	movs	r0, #0
 801048e:	460c      	mov	r4, r1
 8010490:	4605      	mov	r5, r0
 8010492:	eb12 0804 	adds.w	r8, r2, r4
 8010496:	eb43 0905 	adc.w	r9, r3, r5
 801049a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801049c:	685b      	ldr	r3, [r3, #4]
 801049e:	2200      	movs	r2, #0
 80104a0:	60bb      	str	r3, [r7, #8]
 80104a2:	60fa      	str	r2, [r7, #12]
 80104a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80104a8:	4640      	mov	r0, r8
 80104aa:	4649      	mov	r1, r9
 80104ac:	f7f0 fa22 	bl	80008f4 <__aeabi_uldivmod>
 80104b0:	4602      	mov	r2, r0
 80104b2:	460b      	mov	r3, r1
 80104b4:	4613      	mov	r3, r2
 80104b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80104b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80104be:	d308      	bcc.n	80104d2 <UART_SetConfig+0x2c2>
 80104c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80104c6:	d204      	bcs.n	80104d2 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80104c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80104ce:	60da      	str	r2, [r3, #12]
 80104d0:	e003      	b.n	80104da <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80104d2:	2301      	movs	r3, #1
 80104d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80104d8:	e070      	b.n	80105bc <UART_SetConfig+0x3ac>
 80104da:	e06f      	b.n	80105bc <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80104dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104de:	69db      	ldr	r3, [r3, #28]
 80104e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80104e4:	d13c      	bne.n	8010560 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80104e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80104e8:	2200      	movs	r2, #0
 80104ea:	603b      	str	r3, [r7, #0]
 80104ec:	607a      	str	r2, [r7, #4]
 80104ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80104f2:	f7fa fc53 	bl	800ad9c <HAL_RCCEx_GetPeriphCLKFreq>
 80104f6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80104f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d05e      	beq.n	80105bc <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010502:	4a39      	ldr	r2, [pc, #228]	@ (80105e8 <UART_SetConfig+0x3d8>)
 8010504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010508:	461a      	mov	r2, r3
 801050a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801050c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010510:	005a      	lsls	r2, r3, #1
 8010512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	085b      	lsrs	r3, r3, #1
 8010518:	441a      	add	r2, r3
 801051a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010522:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010526:	2b0f      	cmp	r3, #15
 8010528:	d916      	bls.n	8010558 <UART_SetConfig+0x348>
 801052a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801052c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010530:	d212      	bcs.n	8010558 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010534:	b29b      	uxth	r3, r3
 8010536:	f023 030f 	bic.w	r3, r3, #15
 801053a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801053c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801053e:	085b      	lsrs	r3, r3, #1
 8010540:	b29b      	uxth	r3, r3
 8010542:	f003 0307 	and.w	r3, r3, #7
 8010546:	b29a      	uxth	r2, r3
 8010548:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801054a:	4313      	orrs	r3, r2
 801054c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 801054e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010554:	60da      	str	r2, [r3, #12]
 8010556:	e031      	b.n	80105bc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8010558:	2301      	movs	r3, #1
 801055a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801055e:	e02d      	b.n	80105bc <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8010560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010562:	2200      	movs	r2, #0
 8010564:	469a      	mov	sl, r3
 8010566:	4693      	mov	fp, r2
 8010568:	4650      	mov	r0, sl
 801056a:	4659      	mov	r1, fp
 801056c:	f7fa fc16 	bl	800ad9c <HAL_RCCEx_GetPeriphCLKFreq>
 8010570:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8010572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010574:	2b00      	cmp	r3, #0
 8010576:	d021      	beq.n	80105bc <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801057a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801057c:	4a1a      	ldr	r2, [pc, #104]	@ (80105e8 <UART_SetConfig+0x3d8>)
 801057e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010582:	461a      	mov	r2, r3
 8010584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010586:	fbb3 f2f2 	udiv	r2, r3, r2
 801058a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	085b      	lsrs	r3, r3, #1
 8010590:	441a      	add	r2, r3
 8010592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	fbb2 f3f3 	udiv	r3, r2, r3
 801059a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801059c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801059e:	2b0f      	cmp	r3, #15
 80105a0:	d909      	bls.n	80105b6 <UART_SetConfig+0x3a6>
 80105a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80105a8:	d205      	bcs.n	80105b6 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80105aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105ac:	b29a      	uxth	r2, r3
 80105ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	60da      	str	r2, [r3, #12]
 80105b4:	e002      	b.n	80105bc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80105b6:	2301      	movs	r3, #1
 80105b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80105bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105be:	2201      	movs	r2, #1
 80105c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80105c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105c6:	2201      	movs	r2, #1
 80105c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80105cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105ce:	2200      	movs	r2, #0
 80105d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80105d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105d4:	2200      	movs	r2, #0
 80105d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80105d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80105dc:	4618      	mov	r0, r3
 80105de:	3750      	adds	r7, #80	@ 0x50
 80105e0:	46bd      	mov	sp, r7
 80105e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80105e6:	bf00      	nop
 80105e8:	08014a28 	.word	0x08014a28

080105ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b083      	sub	sp, #12
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105f8:	f003 0308 	and.w	r3, r3, #8
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00a      	beq.n	8010616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	430a      	orrs	r2, r1
 8010614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801061a:	f003 0301 	and.w	r3, r3, #1
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00a      	beq.n	8010638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	430a      	orrs	r2, r1
 8010636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801063c:	f003 0302 	and.w	r3, r3, #2
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00a      	beq.n	801065a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	430a      	orrs	r2, r1
 8010658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801065e:	f003 0304 	and.w	r3, r3, #4
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00a      	beq.n	801067c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	430a      	orrs	r2, r1
 801067a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010680:	f003 0310 	and.w	r3, r3, #16
 8010684:	2b00      	cmp	r3, #0
 8010686:	d00a      	beq.n	801069e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	689b      	ldr	r3, [r3, #8]
 801068e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	430a      	orrs	r2, r1
 801069c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106a2:	f003 0320 	and.w	r3, r3, #32
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d00a      	beq.n	80106c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	689b      	ldr	r3, [r3, #8]
 80106b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	430a      	orrs	r2, r1
 80106be:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d01a      	beq.n	8010702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	685b      	ldr	r3, [r3, #4]
 80106d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	430a      	orrs	r2, r1
 80106e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80106ea:	d10a      	bne.n	8010702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	685b      	ldr	r3, [r3, #4]
 80106f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	430a      	orrs	r2, r1
 8010700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801070a:	2b00      	cmp	r3, #0
 801070c:	d00a      	beq.n	8010724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	430a      	orrs	r2, r1
 8010722:	605a      	str	r2, [r3, #4]
  }
}
 8010724:	bf00      	nop
 8010726:	370c      	adds	r7, #12
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b098      	sub	sp, #96	@ 0x60
 8010734:	af02      	add	r7, sp, #8
 8010736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010740:	f7f3 fb30 	bl	8003da4 <HAL_GetTick>
 8010744:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f003 0308 	and.w	r3, r3, #8
 8010750:	2b08      	cmp	r3, #8
 8010752:	d12f      	bne.n	80107b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010754:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010758:	9300      	str	r3, [sp, #0]
 801075a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801075c:	2200      	movs	r2, #0
 801075e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f000 f88e 	bl	8010884 <UART_WaitOnFlagUntilTimeout>
 8010768:	4603      	mov	r3, r0
 801076a:	2b00      	cmp	r3, #0
 801076c:	d022      	beq.n	80107b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010776:	e853 3f00 	ldrex	r3, [r3]
 801077a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801077c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801077e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010782:	653b      	str	r3, [r7, #80]	@ 0x50
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	461a      	mov	r2, r3
 801078a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801078c:	647b      	str	r3, [r7, #68]	@ 0x44
 801078e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010790:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010792:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010794:	e841 2300 	strex	r3, r2, [r1]
 8010798:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801079a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801079c:	2b00      	cmp	r3, #0
 801079e:	d1e6      	bne.n	801076e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2220      	movs	r2, #32
 80107a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2200      	movs	r2, #0
 80107ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80107b0:	2303      	movs	r3, #3
 80107b2:	e063      	b.n	801087c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f003 0304 	and.w	r3, r3, #4
 80107be:	2b04      	cmp	r3, #4
 80107c0:	d149      	bne.n	8010856 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80107c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80107c6:	9300      	str	r3, [sp, #0]
 80107c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107ca:	2200      	movs	r2, #0
 80107cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f000 f857 	bl	8010884 <UART_WaitOnFlagUntilTimeout>
 80107d6:	4603      	mov	r3, r0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d03c      	beq.n	8010856 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e4:	e853 3f00 	ldrex	r3, [r3]
 80107e8:	623b      	str	r3, [r7, #32]
   return(result);
 80107ea:	6a3b      	ldr	r3, [r7, #32]
 80107ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80107f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	461a      	mov	r2, r3
 80107f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80107fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010802:	e841 2300 	strex	r3, r2, [r1]
 8010806:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801080a:	2b00      	cmp	r3, #0
 801080c:	d1e6      	bne.n	80107dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	3308      	adds	r3, #8
 8010814:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010816:	693b      	ldr	r3, [r7, #16]
 8010818:	e853 3f00 	ldrex	r3, [r3]
 801081c:	60fb      	str	r3, [r7, #12]
   return(result);
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	f023 0301 	bic.w	r3, r3, #1
 8010824:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	3308      	adds	r3, #8
 801082c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801082e:	61fa      	str	r2, [r7, #28]
 8010830:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010832:	69b9      	ldr	r1, [r7, #24]
 8010834:	69fa      	ldr	r2, [r7, #28]
 8010836:	e841 2300 	strex	r3, r2, [r1]
 801083a:	617b      	str	r3, [r7, #20]
   return(result);
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d1e5      	bne.n	801080e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2220      	movs	r2, #32
 8010846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2200      	movs	r2, #0
 801084e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010852:	2303      	movs	r3, #3
 8010854:	e012      	b.n	801087c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2220      	movs	r2, #32
 801085a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2220      	movs	r2, #32
 8010862:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2200      	movs	r2, #0
 801086a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2200      	movs	r2, #0
 8010870:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2200      	movs	r2, #0
 8010876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801087a:	2300      	movs	r3, #0
}
 801087c:	4618      	mov	r0, r3
 801087e:	3758      	adds	r7, #88	@ 0x58
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b084      	sub	sp, #16
 8010888:	af00      	add	r7, sp, #0
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	603b      	str	r3, [r7, #0]
 8010890:	4613      	mov	r3, r2
 8010892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010894:	e04f      	b.n	8010936 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	f1b3 3fff 	cmp.w	r3, #4294967295
 801089c:	d04b      	beq.n	8010936 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801089e:	f7f3 fa81 	bl	8003da4 <HAL_GetTick>
 80108a2:	4602      	mov	r2, r0
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	1ad3      	subs	r3, r2, r3
 80108a8:	69ba      	ldr	r2, [r7, #24]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d302      	bcc.n	80108b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d101      	bne.n	80108b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80108b4:	2303      	movs	r3, #3
 80108b6:	e04e      	b.n	8010956 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	f003 0304 	and.w	r3, r3, #4
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d037      	beq.n	8010936 <UART_WaitOnFlagUntilTimeout+0xb2>
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	2b80      	cmp	r3, #128	@ 0x80
 80108ca:	d034      	beq.n	8010936 <UART_WaitOnFlagUntilTimeout+0xb2>
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	2b40      	cmp	r3, #64	@ 0x40
 80108d0:	d031      	beq.n	8010936 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	69db      	ldr	r3, [r3, #28]
 80108d8:	f003 0308 	and.w	r3, r3, #8
 80108dc:	2b08      	cmp	r3, #8
 80108de:	d110      	bne.n	8010902 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	2208      	movs	r2, #8
 80108e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80108e8:	68f8      	ldr	r0, [r7, #12]
 80108ea:	f000 f972 	bl	8010bd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2208      	movs	r2, #8
 80108f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2200      	movs	r2, #0
 80108fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80108fe:	2301      	movs	r3, #1
 8010900:	e029      	b.n	8010956 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	69db      	ldr	r3, [r3, #28]
 8010908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801090c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010910:	d111      	bne.n	8010936 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801091a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801091c:	68f8      	ldr	r0, [r7, #12]
 801091e:	f000 f958 	bl	8010bd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2220      	movs	r2, #32
 8010926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2200      	movs	r2, #0
 801092e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010932:	2303      	movs	r3, #3
 8010934:	e00f      	b.n	8010956 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	69da      	ldr	r2, [r3, #28]
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	4013      	ands	r3, r2
 8010940:	68ba      	ldr	r2, [r7, #8]
 8010942:	429a      	cmp	r2, r3
 8010944:	bf0c      	ite	eq
 8010946:	2301      	moveq	r3, #1
 8010948:	2300      	movne	r3, #0
 801094a:	b2db      	uxtb	r3, r3
 801094c:	461a      	mov	r2, r3
 801094e:	79fb      	ldrb	r3, [r7, #7]
 8010950:	429a      	cmp	r2, r3
 8010952:	d0a0      	beq.n	8010896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010954:	2300      	movs	r3, #0
}
 8010956:	4618      	mov	r0, r3
 8010958:	3710      	adds	r7, #16
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
	...

08010960 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b098      	sub	sp, #96	@ 0x60
 8010964:	af00      	add	r7, sp, #0
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	60b9      	str	r1, [r7, #8]
 801096a:	4613      	mov	r3, r2
 801096c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 801096e:	88fb      	ldrh	r3, [r7, #6]
 8010970:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c

  huart->pRxBuffPtr = pData;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	68ba      	ldr	r2, [r7, #8]
 8010978:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	88fa      	ldrh	r2, [r7, #6]
 801097e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	2200      	movs	r2, #0
 8010986:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	2222      	movs	r2, #34	@ 0x22
 801098e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010998:	2b00      	cmp	r3, #0
 801099a:	d07c      	beq.n	8010a96 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109a2:	4a68      	ldr	r2, [pc, #416]	@ (8010b44 <UART_Start_Receive_DMA+0x1e4>)
 80109a4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109ac:	4a66      	ldr	r2, [pc, #408]	@ (8010b48 <UART_Start_Receive_DMA+0x1e8>)
 80109ae:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109b6:	4a65      	ldr	r2, [pc, #404]	@ (8010b4c <UART_Start_Receive_DMA+0x1ec>)
 80109b8:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109c0:	2200      	movs	r2, #0
 80109c2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	689b      	ldr	r3, [r3, #8]
 80109c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109cc:	d107      	bne.n	80109de <UART_Start_Receive_DMA+0x7e>
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	691b      	ldr	r3, [r3, #16]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d103      	bne.n	80109de <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 80109d6:	88fb      	ldrh	r3, [r7, #6]
 80109d8:	005b      	lsls	r3, r3, #1
 80109da:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d034      	beq.n	8010a58 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d02a      	beq.n	8010a50 <UART_Start_Receive_DMA+0xf0>
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d023      	beq.n	8010a50 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8010a16:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7f5 fdfa 	bl	800663c <HAL_DMAEx_List_Start_IT>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010a4e:	e014      	b.n	8010a7a <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 8010a50:	2301      	movs	r3, #1
 8010a52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8010a56:	e010      	b.n	8010a7a <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	3324      	adds	r3, #36	@ 0x24
 8010a64:	4619      	mov	r1, r3
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a6a:	461a      	mov	r2, r3
 8010a6c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8010a70:	f7f5 f892 	bl	8005b98 <HAL_DMA_Start_IT>
 8010a74:	4603      	mov	r3, r0
 8010a76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    }

    if (status != HAL_OK)
 8010a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d009      	beq.n	8010a96 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2210      	movs	r2, #16
 8010a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	2220      	movs	r2, #32
 8010a8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010a92:	2301      	movs	r3, #1
 8010a94:	e051      	b.n	8010b3a <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	691b      	ldr	r3, [r3, #16]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d018      	beq.n	8010ad0 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010aa6:	e853 3f00 	ldrex	r3, [r3]
 8010aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010ab2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	461a      	mov	r2, r3
 8010aba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010abe:	64ba      	str	r2, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010ac2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010ac4:	e841 2300 	strex	r3, r2, [r1]
 8010ac8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010aca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d1e6      	bne.n	8010a9e <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	3308      	adds	r3, #8
 8010ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ada:	e853 3f00 	ldrex	r3, [r3]
 8010ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ae2:	f043 0301 	orr.w	r3, r3, #1
 8010ae6:	657b      	str	r3, [r7, #84]	@ 0x54
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	3308      	adds	r3, #8
 8010aee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010af0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8010af2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010af4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010af6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010af8:	e841 2300 	strex	r3, r2, [r1]
 8010afc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d1e5      	bne.n	8010ad0 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	3308      	adds	r3, #8
 8010b0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b0c:	69bb      	ldr	r3, [r7, #24]
 8010b0e:	e853 3f00 	ldrex	r3, [r3]
 8010b12:	617b      	str	r3, [r7, #20]
   return(result);
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	3308      	adds	r3, #8
 8010b22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010b24:	627a      	str	r2, [r7, #36]	@ 0x24
 8010b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b28:	6a39      	ldr	r1, [r7, #32]
 8010b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b2c:	e841 2300 	strex	r3, r2, [r1]
 8010b30:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d1e5      	bne.n	8010b04 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 8010b38:	2300      	movs	r3, #0
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3760      	adds	r7, #96	@ 0x60
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}
 8010b42:	bf00      	nop
 8010b44:	08010d1b 	.word	0x08010d1b
 8010b48:	08010e43 	.word	0x08010e43
 8010b4c:	08010eb5 	.word	0x08010eb5

08010b50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010b50:	b480      	push	{r7}
 8010b52:	b08f      	sub	sp, #60	@ 0x3c
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b5e:	6a3b      	ldr	r3, [r7, #32]
 8010b60:	e853 3f00 	ldrex	r3, [r3]
 8010b64:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b66:	69fb      	ldr	r3, [r7, #28]
 8010b68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	461a      	mov	r2, r3
 8010b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b78:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b7e:	e841 2300 	strex	r3, r2, [r1]
 8010b82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d1e6      	bne.n	8010b58 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	3308      	adds	r3, #8
 8010b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	e853 3f00 	ldrex	r3, [r3]
 8010b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010ba0:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	3308      	adds	r3, #8
 8010ba8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010baa:	61ba      	str	r2, [r7, #24]
 8010bac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bae:	6979      	ldr	r1, [r7, #20]
 8010bb0:	69ba      	ldr	r2, [r7, #24]
 8010bb2:	e841 2300 	strex	r3, r2, [r1]
 8010bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d1e5      	bne.n	8010b8a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2220      	movs	r2, #32
 8010bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010bc6:	bf00      	nop
 8010bc8:	373c      	adds	r7, #60	@ 0x3c
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr

08010bd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010bd2:	b480      	push	{r7}
 8010bd4:	b095      	sub	sp, #84	@ 0x54
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010be2:	e853 3f00 	ldrex	r3, [r3]
 8010be6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	461a      	mov	r2, r3
 8010bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8010bfa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010bfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010c00:	e841 2300 	strex	r3, r2, [r1]
 8010c04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d1e6      	bne.n	8010bda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	3308      	adds	r3, #8
 8010c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c14:	6a3b      	ldr	r3, [r7, #32]
 8010c16:	e853 3f00 	ldrex	r3, [r3]
 8010c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c1c:	69fb      	ldr	r3, [r7, #28]
 8010c1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010c22:	f023 0301 	bic.w	r3, r3, #1
 8010c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	3308      	adds	r3, #8
 8010c2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c38:	e841 2300 	strex	r3, r2, [r1]
 8010c3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d1e3      	bne.n	8010c0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	d118      	bne.n	8010c7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	e853 3f00 	ldrex	r3, [r3]
 8010c58:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	f023 0310 	bic.w	r3, r3, #16
 8010c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	461a      	mov	r2, r3
 8010c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c6a:	61bb      	str	r3, [r7, #24]
 8010c6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c6e:	6979      	ldr	r1, [r7, #20]
 8010c70:	69ba      	ldr	r2, [r7, #24]
 8010c72:	e841 2300 	strex	r3, r2, [r1]
 8010c76:	613b      	str	r3, [r7, #16]
   return(result);
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d1e6      	bne.n	8010c4c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2220      	movs	r2, #32
 8010c82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2200      	movs	r2, #0
 8010c8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010c92:	bf00      	nop
 8010c94:	3754      	adds	r7, #84	@ 0x54
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr

08010c9e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010c9e:	b580      	push	{r7, lr}
 8010ca0:	b08a      	sub	sp, #40	@ 0x28
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010caa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010cb0:	2b81      	cmp	r3, #129	@ 0x81
 8010cb2:	d01d      	beq.n	8010cf0 <UART_DMATransmitCplt+0x52>
  {
    huart->TxXferCount = 0U;
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	e853 3f00 	ldrex	r3, [r3]
 8010cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cd0:	623b      	str	r3, [r7, #32]
 8010cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	6a3b      	ldr	r3, [r7, #32]
 8010cda:	61fb      	str	r3, [r7, #28]
 8010cdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cde:	69b9      	ldr	r1, [r7, #24]
 8010ce0:	69fa      	ldr	r2, [r7, #28]
 8010ce2:	e841 2300 	strex	r3, r2, [r1]
 8010ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d1e6      	bne.n	8010cbc <UART_DMATransmitCplt+0x1e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010cee:	e002      	b.n	8010cf6 <UART_DMATransmitCplt+0x58>
    HAL_UART_TxCpltCallback(huart);
 8010cf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010cf2:	f7ff fa65 	bl	80101c0 <HAL_UART_TxCpltCallback>
}
 8010cf6:	bf00      	nop
 8010cf8:	3728      	adds	r7, #40	@ 0x28
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}

08010cfe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010cfe:	b580      	push	{r7, lr}
 8010d00:	b084      	sub	sp, #16
 8010d02:	af00      	add	r7, sp, #0
 8010d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	f7ff fa61 	bl	80101d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d12:	bf00      	nop
 8010d14:	3710      	adds	r7, #16
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}

08010d1a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010d1a:	b580      	push	{r7, lr}
 8010d1c:	b096      	sub	sp, #88	@ 0x58
 8010d1e:	af00      	add	r7, sp, #0
 8010d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010d26:	657b      	str	r3, [r7, #84]	@ 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d2c:	2b81      	cmp	r3, #129	@ 0x81
 8010d2e:	d057      	beq.n	8010de0 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 8010d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d32:	2200      	movs	r2, #0
 8010d34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d40:	e853 3f00 	ldrex	r3, [r3]
 8010d44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	461a      	mov	r2, r3
 8010d54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d56:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d58:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010d5e:	e841 2300 	strex	r3, r2, [r1]
 8010d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d1e6      	bne.n	8010d38 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	3308      	adds	r3, #8
 8010d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d72:	6a3b      	ldr	r3, [r7, #32]
 8010d74:	e853 3f00 	ldrex	r3, [r3]
 8010d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d7a:	69fb      	ldr	r3, [r7, #28]
 8010d7c:	f023 0301 	bic.w	r3, r3, #1
 8010d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	3308      	adds	r3, #8
 8010d88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d92:	e841 2300 	strex	r3, r2, [r1]
 8010d96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d1e5      	bne.n	8010d6a <UART_DMAReceiveCplt+0x50>
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010da0:	2220      	movs	r2, #32
 8010da2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010da8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d118      	bne.n	8010de0 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	e853 3f00 	ldrex	r3, [r3]
 8010dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	f023 0310 	bic.w	r3, r3, #16
 8010dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	461a      	mov	r2, r3
 8010dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010dcc:	61bb      	str	r3, [r7, #24]
 8010dce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd0:	6979      	ldr	r1, [r7, #20]
 8010dd2:	69ba      	ldr	r2, [r7, #24]
 8010dd4:	e841 2300 	strex	r3, r2, [r1]
 8010dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d1e6      	bne.n	8010dae <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010de2:	2200      	movs	r2, #0
 8010de4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dea:	2b01      	cmp	r3, #1
 8010dec:	d122      	bne.n	8010e34 <UART_DMAReceiveCplt+0x11a>
  {
    huart->RxXferCount = 0;
 8010dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010df0:	2200      	movs	r2, #0
 8010df2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010dfc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if (nb_remaining_rx_data < huart->RxXferSize)
 8010e00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010e06:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d204      	bcs.n	8010e18 <UART_DMAReceiveCplt+0xfe>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8010e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e10:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010e14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	1ad3      	subs	r3, r2, r3
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010e2e:	f7f1 f941 	bl	80020b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010e32:	e002      	b.n	8010e3a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8010e34:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010e36:	f7ff f9d7 	bl	80101e8 <HAL_UART_RxCpltCallback>
}
 8010e3a:	bf00      	nop
 8010e3c:	3758      	adds	r7, #88	@ 0x58
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}

08010e42 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010e42:	b580      	push	{r7, lr}
 8010e44:	b084      	sub	sp, #16
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e4e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	2201      	movs	r2, #1
 8010e54:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e5a:	2b01      	cmp	r3, #1
 8010e5c:	d123      	bne.n	8010ea6 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010e64:	085b      	lsrs	r3, r3, #1
 8010e66:	b29a      	uxth	r2, r3
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e74:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010e7c:	897a      	ldrh	r2, [r7, #10]
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d803      	bhi.n	8010e8a <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	897a      	ldrh	r2, [r7, #10]
 8010e86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	1ad3      	subs	r3, r2, r3
 8010e9a:	b29b      	uxth	r3, r3
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	68f8      	ldr	r0, [r7, #12]
 8010ea0:	f7f1 f908 	bl	80020b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010ea4:	e002      	b.n	8010eac <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8010ea6:	68f8      	ldr	r0, [r7, #12]
 8010ea8:	f7ff f9a8 	bl	80101fc <HAL_UART_RxHalfCpltCallback>
}
 8010eac:	bf00      	nop
 8010eae:	3710      	adds	r7, #16
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b086      	sub	sp, #24
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ec0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ec8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010ed0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	689b      	ldr	r3, [r3, #8]
 8010ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010edc:	2b80      	cmp	r3, #128	@ 0x80
 8010ede:	d109      	bne.n	8010ef4 <UART_DMAError+0x40>
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	2b21      	cmp	r3, #33	@ 0x21
 8010ee4:	d106      	bne.n	8010ef4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010eee:	6978      	ldr	r0, [r7, #20]
 8010ef0:	f7ff fe2e 	bl	8010b50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	689b      	ldr	r3, [r3, #8]
 8010efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010efe:	2b40      	cmp	r3, #64	@ 0x40
 8010f00:	d109      	bne.n	8010f16 <UART_DMAError+0x62>
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2b22      	cmp	r3, #34	@ 0x22
 8010f06:	d106      	bne.n	8010f16 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010f10:	6978      	ldr	r0, [r7, #20]
 8010f12:	f7ff fe5e 	bl	8010bd2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010f16:	697b      	ldr	r3, [r7, #20]
 8010f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010f1c:	f043 0210 	orr.w	r2, r3, #16
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010f26:	6978      	ldr	r0, [r7, #20]
 8010f28:	f7f1 f8f0 	bl	800210c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f2c:	bf00      	nop
 8010f2e:	3718      	adds	r7, #24
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b084      	sub	sp, #16
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010f40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	2200      	movs	r2, #0
 8010f46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010f4a:	68f8      	ldr	r0, [r7, #12]
 8010f4c:	f7f1 f8de 	bl	800210c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f50:	bf00      	nop
 8010f52:	3710      	adds	r7, #16
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}

08010f58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b088      	sub	sp, #32
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	e853 3f00 	ldrex	r3, [r3]
 8010f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f74:	61fb      	str	r3, [r7, #28]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	69fb      	ldr	r3, [r7, #28]
 8010f7e:	61bb      	str	r3, [r7, #24]
 8010f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f82:	6979      	ldr	r1, [r7, #20]
 8010f84:	69ba      	ldr	r2, [r7, #24]
 8010f86:	e841 2300 	strex	r3, r2, [r1]
 8010f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d1e6      	bne.n	8010f60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2220      	movs	r2, #32
 8010f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f7ff f90d 	bl	80101c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fa6:	bf00      	nop
 8010fa8:	3720      	adds	r7, #32
 8010faa:	46bd      	mov	sp, r7
 8010fac:	bd80      	pop	{r7, pc}

08010fae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010fae:	b480      	push	{r7}
 8010fb0:	b083      	sub	sp, #12
 8010fb2:	af00      	add	r7, sp, #0
 8010fb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010fb6:	bf00      	nop
 8010fb8:	370c      	adds	r7, #12
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr

08010fc2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010fc2:	b480      	push	{r7}
 8010fc4:	b083      	sub	sp, #12
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010fca:	bf00      	nop
 8010fcc:	370c      	adds	r7, #12
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr

08010fd6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010fd6:	b480      	push	{r7}
 8010fd8:	b083      	sub	sp, #12
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010fde:	bf00      	nop
 8010fe0:	370c      	adds	r7, #12
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe8:	4770      	bx	lr

08010fea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010fea:	b480      	push	{r7}
 8010fec:	b085      	sub	sp, #20
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d101      	bne.n	8011000 <HAL_UARTEx_DisableFifoMode+0x16>
 8010ffc:	2302      	movs	r3, #2
 8010ffe:	e027      	b.n	8011050 <HAL_UARTEx_DisableFifoMode+0x66>
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2201      	movs	r2, #1
 8011004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2224      	movs	r2, #36	@ 0x24
 801100c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	681a      	ldr	r2, [r3, #0]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f022 0201 	bic.w	r2, r2, #1
 8011026:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801102e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2200      	movs	r2, #0
 8011034:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	68fa      	ldr	r2, [r7, #12]
 801103c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2220      	movs	r2, #32
 8011042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2200      	movs	r2, #0
 801104a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801104e:	2300      	movs	r3, #0
}
 8011050:	4618      	mov	r0, r3
 8011052:	3714      	adds	r7, #20
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr

0801105c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b084      	sub	sp, #16
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801106c:	2b01      	cmp	r3, #1
 801106e:	d101      	bne.n	8011074 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011070:	2302      	movs	r3, #2
 8011072:	e02d      	b.n	80110d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2201      	movs	r2, #1
 8011078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2224      	movs	r2, #36	@ 0x24
 8011080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	681a      	ldr	r2, [r3, #0]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	f022 0201 	bic.w	r2, r2, #1
 801109a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	689b      	ldr	r3, [r3, #8]
 80110a2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	683a      	ldr	r2, [r7, #0]
 80110ac:	430a      	orrs	r2, r1
 80110ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f000 f8af 	bl	8011214 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	68fa      	ldr	r2, [r7, #12]
 80110bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2220      	movs	r2, #32
 80110c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	2200      	movs	r2, #0
 80110ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80110ce:	2300      	movs	r3, #0
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b084      	sub	sp, #16
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80110e8:	2b01      	cmp	r3, #1
 80110ea:	d101      	bne.n	80110f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80110ec:	2302      	movs	r3, #2
 80110ee:	e02d      	b.n	801114c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2201      	movs	r2, #1
 80110f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2224      	movs	r2, #36	@ 0x24
 80110fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	681a      	ldr	r2, [r3, #0]
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	f022 0201 	bic.w	r2, r2, #1
 8011116:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	689b      	ldr	r3, [r3, #8]
 801111e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	683a      	ldr	r2, [r7, #0]
 8011128:	430a      	orrs	r2, r1
 801112a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f000 f871 	bl	8011214 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	68fa      	ldr	r2, [r7, #12]
 8011138:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	2220      	movs	r2, #32
 801113e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2200      	movs	r2, #0
 8011146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801114a:	2300      	movs	r3, #0
}
 801114c:	4618      	mov	r0, r3
 801114e:	3710      	adds	r7, #16
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}

08011154 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b08c      	sub	sp, #48	@ 0x30
 8011158:	af00      	add	r7, sp, #0
 801115a:	60f8      	str	r0, [r7, #12]
 801115c:	60b9      	str	r1, [r7, #8]
 801115e:	4613      	mov	r3, r2
 8011160:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011168:	2b20      	cmp	r3, #32
 801116a:	d142      	bne.n	80111f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d002      	beq.n	8011178 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8011172:	88fb      	ldrh	r3, [r7, #6]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d101      	bne.n	801117c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8011178:	2301      	movs	r3, #1
 801117a:	e03b      	b.n	80111f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	2201      	movs	r2, #1
 8011180:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2200      	movs	r2, #0
 8011186:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8011188:	88fb      	ldrh	r3, [r7, #6]
 801118a:	461a      	mov	r2, r3
 801118c:	68b9      	ldr	r1, [r7, #8]
 801118e:	68f8      	ldr	r0, [r7, #12]
 8011190:	f7ff fbe6 	bl	8010960 <UART_Start_Receive_DMA>
 8011194:	4603      	mov	r3, r0
 8011196:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801119a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d124      	bne.n	80111ec <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111a6:	2b01      	cmp	r3, #1
 80111a8:	d11d      	bne.n	80111e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2210      	movs	r2, #16
 80111b0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111b8:	69bb      	ldr	r3, [r7, #24]
 80111ba:	e853 3f00 	ldrex	r3, [r3]
 80111be:	617b      	str	r3, [r7, #20]
   return(result);
 80111c0:	697b      	ldr	r3, [r7, #20]
 80111c2:	f043 0310 	orr.w	r3, r3, #16
 80111c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	461a      	mov	r2, r3
 80111ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80111d2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111d4:	6a39      	ldr	r1, [r7, #32]
 80111d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80111d8:	e841 2300 	strex	r3, r2, [r1]
 80111dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80111de:	69fb      	ldr	r3, [r7, #28]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d1e6      	bne.n	80111b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80111e4:	e002      	b.n	80111ec <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80111e6:	2301      	movs	r3, #1
 80111e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80111ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80111f0:	e000      	b.n	80111f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80111f2:	2302      	movs	r3, #2
  }
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3730      	adds	r7, #48	@ 0x30
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <HAL_UARTEx_GetRxEventType>:
  *        When DMA is configured in Circular Mode, HT, TC or IDLE events don't stop Reception process;
  * @param  huart UART handle.
  * @retval Rx Event Type (return vale will be a value of @ref UART_RxEvent_Type_Values)
  */
HAL_UART_RxEventTypeTypeDef HAL_UARTEx_GetRxEventType(const UART_HandleTypeDef *huart)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
  /* Return Rx Event type value, as stored in UART handle */
  return (huart->RxEventType);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
}
 8011208:	4618      	mov	r0, r3
 801120a:	370c      	adds	r7, #12
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr

08011214 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011214:	b480      	push	{r7}
 8011216:	b085      	sub	sp, #20
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011220:	2b00      	cmp	r3, #0
 8011222:	d108      	bne.n	8011236 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2201      	movs	r2, #1
 8011228:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2201      	movs	r2, #1
 8011230:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011234:	e031      	b.n	801129a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011236:	2308      	movs	r3, #8
 8011238:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801123a:	2308      	movs	r3, #8
 801123c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	689b      	ldr	r3, [r3, #8]
 8011244:	0e5b      	lsrs	r3, r3, #25
 8011246:	b2db      	uxtb	r3, r3
 8011248:	f003 0307 	and.w	r3, r3, #7
 801124c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	689b      	ldr	r3, [r3, #8]
 8011254:	0f5b      	lsrs	r3, r3, #29
 8011256:	b2db      	uxtb	r3, r3
 8011258:	f003 0307 	and.w	r3, r3, #7
 801125c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801125e:	7bbb      	ldrb	r3, [r7, #14]
 8011260:	7b3a      	ldrb	r2, [r7, #12]
 8011262:	4911      	ldr	r1, [pc, #68]	@ (80112a8 <UARTEx_SetNbDataToProcess+0x94>)
 8011264:	5c8a      	ldrb	r2, [r1, r2]
 8011266:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801126a:	7b3a      	ldrb	r2, [r7, #12]
 801126c:	490f      	ldr	r1, [pc, #60]	@ (80112ac <UARTEx_SetNbDataToProcess+0x98>)
 801126e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011270:	fb93 f3f2 	sdiv	r3, r3, r2
 8011274:	b29a      	uxth	r2, r3
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801127c:	7bfb      	ldrb	r3, [r7, #15]
 801127e:	7b7a      	ldrb	r2, [r7, #13]
 8011280:	4909      	ldr	r1, [pc, #36]	@ (80112a8 <UARTEx_SetNbDataToProcess+0x94>)
 8011282:	5c8a      	ldrb	r2, [r1, r2]
 8011284:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011288:	7b7a      	ldrb	r2, [r7, #13]
 801128a:	4908      	ldr	r1, [pc, #32]	@ (80112ac <UARTEx_SetNbDataToProcess+0x98>)
 801128c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801128e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011292:	b29a      	uxth	r2, r3
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801129a:	bf00      	nop
 801129c:	3714      	adds	r7, #20
 801129e:	46bd      	mov	sp, r7
 80112a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a4:	4770      	bx	lr
 80112a6:	bf00      	nop
 80112a8:	08014a40 	.word	0x08014a40
 80112ac:	08014a48 	.word	0x08014a48

080112b0 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b096      	sub	sp, #88	@ 0x58
 80112b4:	af02      	add	r7, sp, #8
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	60b9      	str	r1, [r7, #8]
 80112ba:	607a      	str	r2, [r7, #4]
 80112bc:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80112be:	2234      	movs	r2, #52	@ 0x34
 80112c0:	2100      	movs	r1, #0
 80112c2:	68f8      	ldr	r0, [r7, #12]
 80112c4:	f002 fada 	bl	801387c <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	f023 0303 	bic.w	r3, r3, #3
 80112ce:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	68ba      	ldr	r2, [r7, #8]
 80112d4:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	687a      	ldr	r2, [r7, #4]
 80112da:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	683a      	ldr	r2, [r7, #0]
 80112e0:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	687a      	ldr	r2, [r7, #4]
 80112e6:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	687a      	ldr	r2, [r7, #4]
 80112ec:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	f1a3 0208 	sub.w	r2, r3, #8
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	2202      	movs	r2, #2
 80112fc:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	617b      	str	r3, [r7, #20]
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8011302:	697a      	ldr	r2, [r7, #20]
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	4413      	add	r3, r2
 8011308:	617b      	str	r3, [r7, #20]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	3b04      	subs	r3, #4
 801130e:	617b      	str	r3, [r7, #20]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	647b      	str	r3, [r7, #68]	@ 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	643b      	str	r3, [r7, #64]	@ 0x40
    *block_indirect_ptr =  temp_ptr;
 8011318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801131a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801131c:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	3b04      	subs	r3, #4
 8011322:	617b      	str	r3, [r7, #20]
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	643b      	str	r3, [r7, #64]	@ 0x40
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801132a:	687a      	ldr	r2, [r7, #4]
 801132c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	647b      	str	r3, [r7, #68]	@ 0x44
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8011332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011334:	643b      	str	r3, [r7, #64]	@ 0x40
    *block_indirect_ptr =  block_ptr;
 8011336:	697a      	ldr	r2, [r7, #20]
 8011338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801133a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	617b      	str	r3, [r7, #20]
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	3304      	adds	r3, #4
 8011344:	617b      	str	r3, [r7, #20]
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	63fb      	str	r3, [r7, #60]	@ 0x3c
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 801134a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801134c:	4a5d      	ldr	r2, [pc, #372]	@ (80114c4 <_tx_byte_pool_create+0x214>)
 801134e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	2200      	movs	r2, #0
 8011354:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011356:	f3ef 8310 	mrs	r3, PRIMASK
 801135a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif
    return(posture);
 801135c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 801135e:	623b      	str	r3, [r7, #32]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8011360:	b672      	cpsid	i
#endif
    return(int_posture);
 8011362:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8011364:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	4a57      	ldr	r2, [pc, #348]	@ (80114c8 <_tx_byte_pool_create+0x218>)
 801136a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 801136c:	4b57      	ldr	r3, [pc, #348]	@ (80114cc <_tx_byte_pool_create+0x21c>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d109      	bne.n	8011388 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8011374:	4a56      	ldr	r2, [pc, #344]	@ (80114d0 <_tx_byte_pool_create+0x220>)
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	68fa      	ldr	r2, [r7, #12]
 801137e:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	68fa      	ldr	r2, [r7, #12]
 8011384:	631a      	str	r2, [r3, #48]	@ 0x30
 8011386:	e011      	b.n	80113ac <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8011388:	4b51      	ldr	r3, [pc, #324]	@ (80114d0 <_tx_byte_pool_create+0x220>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 801138e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011392:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8011394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011396:	68fa      	ldr	r2, [r7, #12]
 8011398:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 801139a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801139c:	68fa      	ldr	r2, [r7, #12]
 801139e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113a4:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80113aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80113ac:	4b47      	ldr	r3, [pc, #284]	@ (80114cc <_tx_byte_pool_create+0x21c>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	3301      	adds	r3, #1
 80113b2:	4a46      	ldr	r2, [pc, #280]	@ (80114cc <_tx_byte_pool_create+0x21c>)
 80113b4:	6013      	str	r3, [r2, #0]

    /* Optional byte pool create extended processing.  */
    TX_BYTE_POOL_CREATE_EXTENSION(pool_ptr)

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_BYTE_POOL, pool_ptr, name_ptr, pool_size, 0)
 80113b6:	2300      	movs	r3, #0
 80113b8:	9300      	str	r3, [sp, #0]
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	68ba      	ldr	r2, [r7, #8]
 80113be:	68f9      	ldr	r1, [r7, #12]
 80113c0:	2008      	movs	r0, #8
 80113c2:	f001 ff99 	bl	80132f8 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_BYTE_POOL_CREATE, pool_ptr, TX_POINTER_TO_ULONG_CONVERT(pool_start), pool_size, TX_POINTER_TO_ULONG_CONVERT(&block_ptr), TX_TRACE_BYTE_POOL_EVENTS)
 80113c6:	4b43      	ldr	r3, [pc, #268]	@ (80114d4 <_tx_byte_pool_create+0x224>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80113cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d06c      	beq.n	80114ac <_tx_byte_pool_create+0x1fc>
 80113d2:	4b41      	ldr	r3, [pc, #260]	@ (80114d8 <_tx_byte_pool_create+0x228>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f003 0304 	and.w	r3, r3, #4
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d066      	beq.n	80114ac <_tx_byte_pool_create+0x1fc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80113de:	f3ef 8305 	mrs	r3, IPSR
 80113e2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80113e4:	69fa      	ldr	r2, [r7, #28]
 80113e6:	4b3d      	ldr	r3, [pc, #244]	@ (80114dc <_tx_byte_pool_create+0x22c>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	4313      	orrs	r3, r2
 80113ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80113ee:	4b3c      	ldr	r3, [pc, #240]	@ (80114e0 <_tx_byte_pool_create+0x230>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d10b      	bne.n	8011412 <_tx_byte_pool_create+0x162>
 80113fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011404:	041a      	lsls	r2, r3, #16
 8011406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011408:	4313      	orrs	r3, r2
 801140a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801140e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011410:	e00e      	b.n	8011430 <_tx_byte_pool_create+0x180>
 8011412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011414:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8011418:	d205      	bcs.n	8011426 <_tx_byte_pool_create+0x176>
 801141a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801141c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801141e:	f04f 33ff 	mov.w	r3, #4294967295
 8011422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011424:	e004      	b.n	8011430 <_tx_byte_pool_create+0x180>
 8011426:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 801142a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801142c:	2300      	movs	r3, #0
 801142e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011430:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011434:	601a      	str	r2, [r3, #0]
 8011436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011438:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801143a:	605a      	str	r2, [r3, #4]
 801143c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801143e:	2215      	movs	r2, #21
 8011440:	609a      	str	r2, [r3, #8]
 8011442:	4b28      	ldr	r3, [pc, #160]	@ (80114e4 <_tx_byte_pool_create+0x234>)
 8011444:	681a      	ldr	r2, [r3, #0]
 8011446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011448:	60da      	str	r2, [r3, #12]
 801144a:	68fa      	ldr	r2, [r7, #12]
 801144c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801144e:	611a      	str	r2, [r3, #16]
 8011450:	687a      	ldr	r2, [r7, #4]
 8011452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011454:	615a      	str	r2, [r3, #20]
 8011456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011458:	683a      	ldr	r2, [r7, #0]
 801145a:	619a      	str	r2, [r3, #24]
 801145c:	f107 0214 	add.w	r2, r7, #20
 8011460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011462:	61da      	str	r2, [r3, #28]
 8011464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011466:	3320      	adds	r3, #32
 8011468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801146a:	4b1f      	ldr	r3, [pc, #124]	@ (80114e8 <_tx_byte_pool_create+0x238>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011470:	429a      	cmp	r2, r3
 8011472:	d314      	bcc.n	801149e <_tx_byte_pool_create+0x1ee>
 8011474:	4b1d      	ldr	r3, [pc, #116]	@ (80114ec <_tx_byte_pool_create+0x23c>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801147a:	4a16      	ldr	r2, [pc, #88]	@ (80114d4 <_tx_byte_pool_create+0x224>)
 801147c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	4b1b      	ldr	r3, [pc, #108]	@ (80114f0 <_tx_byte_pool_create+0x240>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011486:	621a      	str	r2, [r3, #32]
 8011488:	4b1a      	ldr	r3, [pc, #104]	@ (80114f4 <_tx_byte_pool_create+0x244>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d00d      	beq.n	80114ac <_tx_byte_pool_create+0x1fc>
 8011490:	4b18      	ldr	r3, [pc, #96]	@ (80114f4 <_tx_byte_pool_create+0x244>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	4a16      	ldr	r2, [pc, #88]	@ (80114f0 <_tx_byte_pool_create+0x240>)
 8011496:	6812      	ldr	r2, [r2, #0]
 8011498:	4610      	mov	r0, r2
 801149a:	4798      	blx	r3
 801149c:	e006      	b.n	80114ac <_tx_byte_pool_create+0x1fc>
 801149e:	4a0d      	ldr	r2, [pc, #52]	@ (80114d4 <_tx_byte_pool_create+0x224>)
 80114a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114a2:	6013      	str	r3, [r2, #0]
 80114a4:	4b12      	ldr	r3, [pc, #72]	@ (80114f0 <_tx_byte_pool_create+0x240>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80114aa:	621a      	str	r2, [r3, #32]
 80114ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114ae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	f383 8810 	msr	PRIMASK, r3
}
 80114b6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80114b8:	2300      	movs	r3, #0
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3750      	adds	r7, #80	@ 0x50
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	ffffeeee 	.word	0xffffeeee
 80114c8:	42595445 	.word	0x42595445
 80114cc:	20006c60 	.word	0x20006c60
 80114d0:	20006c5c 	.word	0x20006c5c
 80114d4:	20007288 	.word	0x20007288
 80114d8:	2000728c 	.word	0x2000728c
 80114dc:	2000017c 	.word	0x2000017c
 80114e0:	20006c6c 	.word	0x20006c6c
 80114e4:	e0001004 	.word	0xe0001004
 80114e8:	20007284 	.word	0x20007284
 80114ec:	20007280 	.word	0x20007280
 80114f0:	20007274 	.word	0x20007274
 80114f4:	20007290 	.word	0x20007290

080114f8 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	af00      	add	r7, sp, #0

    /* Initialize event tracing, if enabled.  */
    TX_TRACE_INITIALIZE
 80114fc:	f001 fed6 	bl	80132ac <_tx_trace_initialize>

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8011500:	f000 f9ec 	bl	80118dc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8011504:	f001 f98a 	bl	801281c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8011508:	4b12      	ldr	r3, [pc, #72]	@ (8011554 <_tx_initialize_high_level+0x5c>)
 801150a:	2200      	movs	r2, #0
 801150c:	601a      	str	r2, [r3, #0]
 801150e:	4b12      	ldr	r3, [pc, #72]	@ (8011558 <_tx_initialize_high_level+0x60>)
 8011510:	2200      	movs	r2, #0
 8011512:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8011514:	4b11      	ldr	r3, [pc, #68]	@ (801155c <_tx_initialize_high_level+0x64>)
 8011516:	2200      	movs	r2, #0
 8011518:	601a      	str	r2, [r3, #0]
 801151a:	4b11      	ldr	r3, [pc, #68]	@ (8011560 <_tx_initialize_high_level+0x68>)
 801151c:	2200      	movs	r2, #0
 801151e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8011520:	4b10      	ldr	r3, [pc, #64]	@ (8011564 <_tx_initialize_high_level+0x6c>)
 8011522:	2200      	movs	r2, #0
 8011524:	601a      	str	r2, [r3, #0]
 8011526:	4b10      	ldr	r3, [pc, #64]	@ (8011568 <_tx_initialize_high_level+0x70>)
 8011528:	2200      	movs	r2, #0
 801152a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 801152c:	4b0f      	ldr	r3, [pc, #60]	@ (801156c <_tx_initialize_high_level+0x74>)
 801152e:	2200      	movs	r2, #0
 8011530:	601a      	str	r2, [r3, #0]
 8011532:	4b0f      	ldr	r3, [pc, #60]	@ (8011570 <_tx_initialize_high_level+0x78>)
 8011534:	2200      	movs	r2, #0
 8011536:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8011538:	4b0e      	ldr	r3, [pc, #56]	@ (8011574 <_tx_initialize_high_level+0x7c>)
 801153a:	2200      	movs	r2, #0
 801153c:	601a      	str	r2, [r3, #0]
 801153e:	4b0e      	ldr	r3, [pc, #56]	@ (8011578 <_tx_initialize_high_level+0x80>)
 8011540:	2200      	movs	r2, #0
 8011542:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8011544:	4b0d      	ldr	r3, [pc, #52]	@ (801157c <_tx_initialize_high_level+0x84>)
 8011546:	2200      	movs	r2, #0
 8011548:	601a      	str	r2, [r3, #0]
 801154a:	4b0d      	ldr	r3, [pc, #52]	@ (8011580 <_tx_initialize_high_level+0x88>)
 801154c:	2200      	movs	r2, #0
 801154e:	601a      	str	r2, [r3, #0]
#endif
}
 8011550:	bf00      	nop
 8011552:	bd80      	pop	{r7, pc}
 8011554:	20006c34 	.word	0x20006c34
 8011558:	20006c38 	.word	0x20006c38
 801155c:	20006c3c 	.word	0x20006c3c
 8011560:	20006c40 	.word	0x20006c40
 8011564:	20006c44 	.word	0x20006c44
 8011568:	20006c48 	.word	0x20006c48
 801156c:	20006c54 	.word	0x20006c54
 8011570:	20006c58 	.word	0x20006c58
 8011574:	20006c5c 	.word	0x20006c5c
 8011578:	20006c60 	.word	0x20006c60
 801157c:	20006c4c 	.word	0x20006c4c
 8011580:	20006c50 	.word	0x20006c50

08011584 <_tx_initialize_kernel_enter>:
/*                                            initialization,             */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8011588:	4b10      	ldr	r3, [pc, #64]	@ (80115cc <_tx_initialize_kernel_enter+0x48>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8011590:	d00c      	beq.n	80115ac <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8011592:	4b0e      	ldr	r3, [pc, #56]	@ (80115cc <_tx_initialize_kernel_enter+0x48>)
 8011594:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8011598:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 801159a:	f7ee fe79 	bl	8000290 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 801159e:	f7ff ffab 	bl	80114f8 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80115a2:	4b0b      	ldr	r3, [pc, #44]	@ (80115d0 <_tx_initialize_kernel_enter+0x4c>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	3301      	adds	r3, #1
 80115a8:	4a09      	ldr	r2, [pc, #36]	@ (80115d0 <_tx_initialize_kernel_enter+0x4c>)
 80115aa:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80115ac:	4b07      	ldr	r3, [pc, #28]	@ (80115cc <_tx_initialize_kernel_enter+0x48>)
 80115ae:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80115b2:	601a      	str	r2, [r3, #0]
    /* Optional random number generator initialization.  */
    TX_INITIALIZE_RANDOM_GENERATOR_INITIALIZATION

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80115b4:	4b07      	ldr	r3, [pc, #28]	@ (80115d4 <_tx_initialize_kernel_enter+0x50>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4618      	mov	r0, r3
 80115ba:	f7ef fb59 	bl	8000c70 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80115be:	4b03      	ldr	r3, [pc, #12]	@ (80115cc <_tx_initialize_kernel_enter+0x48>)
 80115c0:	2200      	movs	r2, #0
 80115c2:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80115c4:	f7ee fea0 	bl	8000308 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80115c8:	bf00      	nop
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	2000017c 	.word	0x2000017c
 80115d0:	20006d04 	.word	0x20006d04
 80115d4:	20006c64 	.word	0x20006c64

080115d8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b09a      	sub	sp, #104	@ 0x68
 80115dc:	af02      	add	r7, sp, #8
 80115de:	60f8      	str	r0, [r7, #12]
 80115e0:	60b9      	str	r1, [r7, #8]
 80115e2:	607a      	str	r2, [r7, #4]
 80115e4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80115e6:	2300      	movs	r3, #0
 80115e8:	65bb      	str	r3, [r7, #88]	@ 0x58
#endif

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80115ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80115ec:	21ef      	movs	r1, #239	@ 0xef
 80115ee:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80115f0:	f002 f944 	bl	801387c <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80115f4:	22b0      	movs	r2, #176	@ 0xb0
 80115f6:	2100      	movs	r1, #0
 80115f8:	68f8      	ldr	r0, [r7, #12]
 80115fa:	f002 f93f 	bl	801387c <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	68ba      	ldr	r2, [r7, #8]
 8011602:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	683a      	ldr	r2, [r7, #0]
 801160e:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011614:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801161a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011620:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011626:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801162e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011634:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	2220      	movs	r2, #32
 801163a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801163e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011640:	64fb      	str	r3, [r7, #76]	@ 0x4c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8011642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011644:	3b01      	subs	r3, #1
 8011646:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011648:	4413      	add	r3, r2
 801164a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011650:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8011652:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011654:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011656:	429a      	cmp	r2, r3
 8011658:	d007      	beq.n	801166a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	2200      	movs	r2, #0
 801165e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2200      	movs	r2, #0
 8011664:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8011668:	e006      	b.n	8011678 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801166e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011674:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	2203      	movs	r2, #3
 801167c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	4a86      	ldr	r2, [pc, #536]	@ (801189c <_tx_thread_create+0x2c4>)
 8011682:	655a      	str	r2, [r3, #84]	@ 0x54
 8011684:	68fa      	ldr	r2, [r7, #12]
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801168a:	4985      	ldr	r1, [pc, #532]	@ (80118a0 <_tx_thread_create+0x2c8>)
 801168c:	68f8      	ldr	r0, [r7, #12]
 801168e:	f7ee fea1 	bl	80003d4 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011692:	f3ef 8310 	mrs	r3, PRIMASK
 8011696:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8011698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 801169a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801169c:	b672      	cpsid	i
    return(int_posture);
 801169e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80116a0:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	4a7f      	ldr	r2, [pc, #508]	@ (80118a4 <_tx_thread_create+0x2cc>)
 80116a6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80116a8:	4b7f      	ldr	r3, [pc, #508]	@ (80118a8 <_tx_thread_create+0x2d0>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d10b      	bne.n	80116c8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80116b0:	4a7e      	ldr	r2, [pc, #504]	@ (80118ac <_tx_thread_create+0x2d4>)
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	68fa      	ldr	r2, [r7, #12]
 80116ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	68fa      	ldr	r2, [r7, #12]
 80116c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80116c6:	e016      	b.n	80116f6 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80116c8:	4b78      	ldr	r3, [pc, #480]	@ (80118ac <_tx_thread_create+0x2d4>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	647b      	str	r3, [r7, #68]	@ 0x44
        previous_thread =  next_thread -> tx_thread_created_previous;
 80116ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80116d4:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80116d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116d8:	68fa      	ldr	r2, [r7, #12]
 80116da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80116de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116e0:	68fa      	ldr	r2, [r7, #12]
 80116e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80116ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80116f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80116f6:	4b6c      	ldr	r3, [pc, #432]	@ (80118a8 <_tx_thread_create+0x2d0>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	3301      	adds	r3, #1
 80116fc:	4a6a      	ldr	r2, [pc, #424]	@ (80118a8 <_tx_thread_create+0x2d0>)
 80116fe:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, register this object.  */
    TX_TRACE_OBJECT_REGISTER(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, name_ptr, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size)
 8011700:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011702:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011704:	9300      	str	r3, [sp, #0]
 8011706:	4613      	mov	r3, r2
 8011708:	68ba      	ldr	r2, [r7, #8]
 801170a:	68f9      	ldr	r1, [r7, #12]
 801170c:	2001      	movs	r0, #1
 801170e:	f001 fdf3 	bl	80132f8 <_tx_trace_object_register>

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_CREATE, thread_ptr, priority, TX_POINTER_TO_ULONG_CONVERT(stack_start), stack_size, TX_TRACE_THREAD_EVENTS)
 8011712:	4b67      	ldr	r3, [pc, #412]	@ (80118b0 <_tx_thread_create+0x2d8>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801171a:	2b00      	cmp	r3, #0
 801171c:	d06b      	beq.n	80117f6 <_tx_thread_create+0x21e>
 801171e:	4b65      	ldr	r3, [pc, #404]	@ (80118b4 <_tx_thread_create+0x2dc>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011726:	2b00      	cmp	r3, #0
 8011728:	d065      	beq.n	80117f6 <_tx_thread_create+0x21e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801172a:	f3ef 8305 	mrs	r3, IPSR
 801172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 8011730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011732:	4b61      	ldr	r3, [pc, #388]	@ (80118b8 <_tx_thread_create+0x2e0>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	4313      	orrs	r3, r2
 8011738:	63bb      	str	r3, [r7, #56]	@ 0x38
 801173a:	4b60      	ldr	r3, [pc, #384]	@ (80118bc <_tx_thread_create+0x2e4>)
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011742:	2b00      	cmp	r3, #0
 8011744:	d10b      	bne.n	801175e <_tx_thread_create+0x186>
 8011746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801174a:	657b      	str	r3, [r7, #84]	@ 0x54
 801174c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801174e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011750:	041a      	lsls	r2, r3, #16
 8011752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011754:	4313      	orrs	r3, r2
 8011756:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801175a:	657b      	str	r3, [r7, #84]	@ 0x54
 801175c:	e00e      	b.n	801177c <_tx_thread_create+0x1a4>
 801175e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011760:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8011764:	d205      	bcs.n	8011772 <_tx_thread_create+0x19a>
 8011766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011768:	657b      	str	r3, [r7, #84]	@ 0x54
 801176a:	f04f 33ff 	mov.w	r3, #4294967295
 801176e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011770:	e004      	b.n	801177c <_tx_thread_create+0x1a4>
 8011772:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8011776:	653b      	str	r3, [r7, #80]	@ 0x50
 8011778:	2300      	movs	r3, #0
 801177a:	657b      	str	r3, [r7, #84]	@ 0x54
 801177c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801177e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011780:	601a      	str	r2, [r3, #0]
 8011782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011784:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011786:	605a      	str	r2, [r3, #4]
 8011788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801178a:	2264      	movs	r2, #100	@ 0x64
 801178c:	609a      	str	r2, [r3, #8]
 801178e:	4b4c      	ldr	r3, [pc, #304]	@ (80118c0 <_tx_thread_create+0x2e8>)
 8011790:	681a      	ldr	r2, [r3, #0]
 8011792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011794:	60da      	str	r2, [r3, #12]
 8011796:	68fa      	ldr	r2, [r7, #12]
 8011798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801179a:	611a      	str	r2, [r3, #16]
 801179c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801179e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80117a0:	615a      	str	r2, [r3, #20]
 80117a2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80117a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117a6:	619a      	str	r2, [r3, #24]
 80117a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80117ac:	61da      	str	r2, [r3, #28]
 80117ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117b0:	3320      	adds	r3, #32
 80117b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80117b4:	4b43      	ldr	r3, [pc, #268]	@ (80118c4 <_tx_thread_create+0x2ec>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d314      	bcc.n	80117e8 <_tx_thread_create+0x210>
 80117be:	4b42      	ldr	r3, [pc, #264]	@ (80118c8 <_tx_thread_create+0x2f0>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80117c4:	4a3a      	ldr	r2, [pc, #232]	@ (80118b0 <_tx_thread_create+0x2d8>)
 80117c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117c8:	6013      	str	r3, [r2, #0]
 80117ca:	4b40      	ldr	r3, [pc, #256]	@ (80118cc <_tx_thread_create+0x2f4>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80117d0:	621a      	str	r2, [r3, #32]
 80117d2:	4b3f      	ldr	r3, [pc, #252]	@ (80118d0 <_tx_thread_create+0x2f8>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d00d      	beq.n	80117f6 <_tx_thread_create+0x21e>
 80117da:	4b3d      	ldr	r3, [pc, #244]	@ (80118d0 <_tx_thread_create+0x2f8>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	4a3b      	ldr	r2, [pc, #236]	@ (80118cc <_tx_thread_create+0x2f4>)
 80117e0:	6812      	ldr	r2, [r2, #0]
 80117e2:	4610      	mov	r0, r2
 80117e4:	4798      	blx	r3
 80117e6:	e006      	b.n	80117f6 <_tx_thread_create+0x21e>
 80117e8:	4a31      	ldr	r2, [pc, #196]	@ (80118b0 <_tx_thread_create+0x2d8>)
 80117ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117ec:	6013      	str	r3, [r2, #0]
 80117ee:	4b37      	ldr	r3, [pc, #220]	@ (80118cc <_tx_thread_create+0x2f4>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80117f4:	621a      	str	r2, [r3, #32]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80117f6:	4b37      	ldr	r3, [pc, #220]	@ (80118d4 <_tx_thread_create+0x2fc>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	3301      	adds	r3, #1
 80117fc:	4a35      	ldr	r2, [pc, #212]	@ (80118d4 <_tx_thread_create+0x2fc>)
 80117fe:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8011800:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011802:	2b01      	cmp	r3, #1
 8011804:	d129      	bne.n	801185a <_tx_thread_create+0x282>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011806:	f3ef 8305 	mrs	r3, IPSR
 801180a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 801180c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 801180e:	4b2a      	ldr	r3, [pc, #168]	@ (80118b8 <_tx_thread_create+0x2e0>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	4313      	orrs	r3, r2
 8011814:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8011818:	d30d      	bcc.n	8011836 <_tx_thread_create+0x25e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 801181a:	4b2f      	ldr	r3, [pc, #188]	@ (80118d8 <_tx_thread_create+0x300>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8011820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011822:	2b00      	cmp	r3, #0
 8011824:	d009      	beq.n	801183a <_tx_thread_create+0x262>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8011826:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801182a:	65bb      	str	r3, [r7, #88]	@ 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801182c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801182e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011830:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011832:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011834:	e001      	b.n	801183a <_tx_thread_create+0x262>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8011836:	2300      	movs	r3, #0
 8011838:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801183a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801183c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011840:	f383 8810 	msr	PRIMASK, r3
}
 8011844:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8011846:	68f8      	ldr	r0, [r7, #12]
 8011848:	f000 fb00 	bl	8011e4c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801184c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801184e:	2b00      	cmp	r3, #0
 8011850:	d01e      	beq.n	8011890 <_tx_thread_create+0x2b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8011852:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011854:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011856:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011858:	e01a      	b.n	8011890 <_tx_thread_create+0x2b8>
 801185a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801185c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	f383 8810 	msr	PRIMASK, r3
}
 8011864:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011866:	f3ef 8310 	mrs	r3, PRIMASK
 801186a:	61fb      	str	r3, [r7, #28]
    return(posture);
 801186c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801186e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011870:	b672      	cpsid	i
    return(int_posture);
 8011872:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8011874:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8011876:	4b17      	ldr	r3, [pc, #92]	@ (80118d4 <_tx_thread_create+0x2fc>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	3b01      	subs	r3, #1
 801187c:	4a15      	ldr	r2, [pc, #84]	@ (80118d4 <_tx_thread_create+0x2fc>)
 801187e:	6013      	str	r3, [r2, #0]
 8011880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011882:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011884:	6a3b      	ldr	r3, [r7, #32]
 8011886:	f383 8810 	msr	PRIMASK, r3
}
 801188a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801188c:	f000 faa4 	bl	8011dd8 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8011890:	2300      	movs	r3, #0
}
 8011892:	4618      	mov	r0, r3
 8011894:	3760      	adds	r7, #96	@ 0x60
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
 801189a:	bf00      	nop
 801189c:	08012761 	.word	0x08012761
 80118a0:	08011959 	.word	0x08011959
 80118a4:	54485244 	.word	0x54485244
 80118a8:	20006c78 	.word	0x20006c78
 80118ac:	20006c74 	.word	0x20006c74
 80118b0:	20007288 	.word	0x20007288
 80118b4:	2000728c 	.word	0x2000728c
 80118b8:	2000017c 	.word	0x2000017c
 80118bc:	20006c6c 	.word	0x20006c6c
 80118c0:	e0001004 	.word	0xe0001004
 80118c4:	20007284 	.word	0x20007284
 80118c8:	20007280 	.word	0x20007280
 80118cc:	20007274 	.word	0x20007274
 80118d0:	20007290 	.word	0x20007290
 80118d4:	20006d04 	.word	0x20006d04
 80118d8:	20006c70 	.word	0x20006c70

080118dc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80118e0:	4b13      	ldr	r3, [pc, #76]	@ (8011930 <_tx_thread_initialize+0x54>)
 80118e2:	2200      	movs	r2, #0
 80118e4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80118e6:	4b13      	ldr	r3, [pc, #76]	@ (8011934 <_tx_thread_initialize+0x58>)
 80118e8:	2200      	movs	r2, #0
 80118ea:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 80118ec:	4b12      	ldr	r3, [pc, #72]	@ (8011938 <_tx_thread_initialize+0x5c>)
 80118ee:	2200      	movs	r2, #0
 80118f0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80118f2:	4b12      	ldr	r3, [pc, #72]	@ (801193c <_tx_thread_initialize+0x60>)
 80118f4:	2220      	movs	r2, #32
 80118f6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80118f8:	2280      	movs	r2, #128	@ 0x80
 80118fa:	2100      	movs	r1, #0
 80118fc:	4810      	ldr	r0, [pc, #64]	@ (8011940 <_tx_thread_initialize+0x64>)
 80118fe:	f001 ffbd 	bl	801387c <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8011902:	4b10      	ldr	r3, [pc, #64]	@ (8011944 <_tx_thread_initialize+0x68>)
 8011904:	2200      	movs	r2, #0
 8011906:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8011908:	4b0f      	ldr	r3, [pc, #60]	@ (8011948 <_tx_thread_initialize+0x6c>)
 801190a:	2200      	movs	r2, #0
 801190c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 801190e:	4b0f      	ldr	r3, [pc, #60]	@ (801194c <_tx_thread_initialize+0x70>)
 8011910:	2200      	movs	r2, #0
 8011912:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8011914:	4b0e      	ldr	r3, [pc, #56]	@ (8011950 <_tx_thread_initialize+0x74>)
 8011916:	2200      	movs	r2, #0
 8011918:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
                            | (((ULONG) 1) << 9)
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
 801191a:	4b0e      	ldr	r3, [pc, #56]	@ (8011954 <_tx_thread_initialize+0x78>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	f043 2301 	orr.w	r3, r3, #16777472	@ 0x1000100
 8011922:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
    _tx_build_options =  _tx_build_options 
 8011926:	4a0b      	ldr	r2, [pc, #44]	@ (8011954 <_tx_thread_initialize+0x78>)
 8011928:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801192a:	bf00      	nop
 801192c:	bd80      	pop	{r7, pc}
 801192e:	bf00      	nop
 8011930:	20006c6c 	.word	0x20006c6c
 8011934:	20006c70 	.word	0x20006c70
 8011938:	20006c7c 	.word	0x20006c7c
 801193c:	20006c80 	.word	0x20006c80
 8011940:	20006c84 	.word	0x20006c84
 8011944:	20006c74 	.word	0x20006c74
 8011948:	20006c78 	.word	0x20006c78
 801194c:	20006d04 	.word	0x20006d04
 8011950:	20006d08 	.word	0x20006d08
 8011954:	20006d0c 	.word	0x20006d0c

08011958 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b088      	sub	sp, #32
 801195c:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801195e:	4b21      	ldr	r3, [pc, #132]	@ (80119e4 <_tx_thread_shell_entry+0x8c>)
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8011964:	69fb      	ldr	r3, [r7, #28]
 8011966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011968:	69fa      	ldr	r2, [r7, #28]
 801196a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801196c:	4610      	mov	r0, r2
 801196e:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8011970:	4b1d      	ldr	r3, [pc, #116]	@ (80119e8 <_tx_thread_shell_entry+0x90>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d003      	beq.n	8011980 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8011978:	4b1b      	ldr	r3, [pc, #108]	@ (80119e8 <_tx_thread_shell_entry+0x90>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	69f8      	ldr	r0, [r7, #28]
 801197e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011980:	f3ef 8310 	mrs	r3, PRIMASK
 8011984:	607b      	str	r3, [r7, #4]
    return(posture);
 8011986:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8011988:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801198a:	b672      	cpsid	i
    return(int_posture);
 801198c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 801198e:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8011990:	69fb      	ldr	r3, [r7, #28]
 8011992:	2201      	movs	r2, #1
 8011994:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011996:	69fb      	ldr	r3, [r7, #28]
 8011998:	2201      	movs	r2, #1
 801199a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801199c:	69fb      	ldr	r3, [r7, #28]
 801199e:	2200      	movs	r2, #0
 80119a0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80119a2:	4b12      	ldr	r3, [pc, #72]	@ (80119ec <_tx_thread_shell_entry+0x94>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	3301      	adds	r3, #1
 80119a8:	4a10      	ldr	r2, [pc, #64]	@ (80119ec <_tx_thread_shell_entry+0x94>)
 80119aa:	6013      	str	r3, [r2, #0]
 80119ac:	69bb      	ldr	r3, [r7, #24]
 80119ae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	f383 8810 	msr	PRIMASK, r3
}
 80119b6:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80119b8:	f3ef 8314 	mrs	r3, CONTROL
 80119bc:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80119be:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80119c0:	617b      	str	r3, [r7, #20]
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	f023 0304 	bic.w	r3, r3, #4
 80119c8:	617b      	str	r3, [r7, #20]
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	f383 8814 	msr	CONTROL, r3
}
 80119d4:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80119d6:	69f8      	ldr	r0, [r7, #28]
 80119d8:	f000 fbf2 	bl	80121c0 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80119dc:	bf00      	nop
 80119de:	3720      	adds	r7, #32
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}
 80119e4:	20006c6c 	.word	0x20006c6c
 80119e8:	20006d08 	.word	0x20006d08
 80119ec:	20006d04 	.word	0x20006d04

080119f0 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b094      	sub	sp, #80	@ 0x50
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80119f8:	f3ef 8310 	mrs	r3, PRIMASK
 80119fc:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 80119fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8011a00:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8011a02:	b672      	cpsid	i
    return(int_posture);
 8011a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011a06:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011a08:	4b6f      	ldr	r3, [pc, #444]	@ (8011bc8 <_tx_thread_sleep+0x1d8>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8011a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d108      	bne.n	8011a26 <_tx_thread_sleep+0x36>
 8011a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a1a:	f383 8810 	msr	PRIMASK, r3
}
 8011a1e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8011a20:	2313      	movs	r3, #19
 8011a22:	60fb      	str	r3, [r7, #12]
 8011a24:	e0ca      	b.n	8011bbc <_tx_thread_sleep+0x1cc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011a26:	f3ef 8305 	mrs	r3, IPSR
 8011a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8011a2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011a2e:	4b67      	ldr	r3, [pc, #412]	@ (8011bcc <_tx_thread_sleep+0x1dc>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	4313      	orrs	r3, r2
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d008      	beq.n	8011a4a <_tx_thread_sleep+0x5a>
 8011a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a3e:	f383 8810 	msr	PRIMASK, r3
}
 8011a42:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8011a44:	2313      	movs	r3, #19
 8011a46:	60fb      	str	r3, [r7, #12]
 8011a48:	e0b8      	b.n	8011bbc <_tx_thread_sleep+0x1cc>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8011a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a4c:	4a60      	ldr	r2, [pc, #384]	@ (8011bd0 <_tx_thread_sleep+0x1e0>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d108      	bne.n	8011a64 <_tx_thread_sleep+0x74>
 8011a52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a54:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a56:	6a3b      	ldr	r3, [r7, #32]
 8011a58:	f383 8810 	msr	PRIMASK, r3
}
 8011a5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8011a5e:	2313      	movs	r3, #19
 8011a60:	60fb      	str	r3, [r7, #12]
 8011a62:	e0ab      	b.n	8011bbc <_tx_thread_sleep+0x1cc>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d108      	bne.n	8011a7c <_tx_thread_sleep+0x8c>
 8011a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a6c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a6e:	69fb      	ldr	r3, [r7, #28]
 8011a70:	f383 8810 	msr	PRIMASK, r3
}
 8011a74:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8011a76:	2300      	movs	r3, #0
 8011a78:	60fb      	str	r3, [r7, #12]
 8011a7a:	e09f      	b.n	8011bbc <_tx_thread_sleep+0x1cc>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011a7c:	4b55      	ldr	r3, [pc, #340]	@ (8011bd4 <_tx_thread_sleep+0x1e4>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d008      	beq.n	8011a96 <_tx_thread_sleep+0xa6>
 8011a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a86:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a88:	69bb      	ldr	r3, [r7, #24]
 8011a8a:	f383 8810 	msr	PRIMASK, r3
}
 8011a8e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8011a90:	2313      	movs	r3, #19
 8011a92:	60fb      	str	r3, [r7, #12]
 8011a94:	e092      	b.n	8011bbc <_tx_thread_sleep+0x1cc>
        }
        else
        {

            /* If trace is enabled, insert this event into the trace buffer.  */
            TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SLEEP, TX_ULONG_TO_POINTER_CONVERT(timer_ticks), thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 8011a96:	4b50      	ldr	r3, [pc, #320]	@ (8011bd8 <_tx_thread_sleep+0x1e8>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d06d      	beq.n	8011b7e <_tx_thread_sleep+0x18e>
 8011aa2:	4b4e      	ldr	r3, [pc, #312]	@ (8011bdc <_tx_thread_sleep+0x1ec>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d067      	beq.n	8011b7e <_tx_thread_sleep+0x18e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011aae:	f3ef 8305 	mrs	r3, IPSR
 8011ab2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011ab4:	697a      	ldr	r2, [r7, #20]
 8011ab6:	4b45      	ldr	r3, [pc, #276]	@ (8011bcc <_tx_thread_sleep+0x1dc>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	4313      	orrs	r3, r2
 8011abc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011abe:	4b42      	ldr	r3, [pc, #264]	@ (8011bc8 <_tx_thread_sleep+0x1d8>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d10b      	bne.n	8011ae2 <_tx_thread_sleep+0xf2>
 8011aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ad4:	041a      	lsls	r2, r3, #16
 8011ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ad8:	4313      	orrs	r3, r2
 8011ada:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ae0:	e00e      	b.n	8011b00 <_tx_thread_sleep+0x110>
 8011ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ae4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8011ae8:	d205      	bcs.n	8011af6 <_tx_thread_sleep+0x106>
 8011aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011aee:	f04f 33ff 	mov.w	r3, #4294967295
 8011af2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011af4:	e004      	b.n	8011b00 <_tx_thread_sleep+0x110>
 8011af6:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8011afa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011afc:	2300      	movs	r3, #0
 8011afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011b00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b04:	601a      	str	r2, [r3, #0]
 8011b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011b0a:	605a      	str	r2, [r3, #4]
 8011b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b0e:	2270      	movs	r2, #112	@ 0x70
 8011b10:	609a      	str	r2, [r3, #8]
 8011b12:	4b33      	ldr	r3, [pc, #204]	@ (8011be0 <_tx_thread_sleep+0x1f0>)
 8011b14:	681a      	ldr	r2, [r3, #0]
 8011b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b18:	60da      	str	r2, [r3, #12]
 8011b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b1c:	687a      	ldr	r2, [r7, #4]
 8011b1e:	611a      	str	r2, [r3, #16]
 8011b20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b26:	615a      	str	r2, [r3, #20]
 8011b28:	f107 020c 	add.w	r2, r7, #12
 8011b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b2e:	619a      	str	r2, [r3, #24]
 8011b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b32:	2200      	movs	r2, #0
 8011b34:	61da      	str	r2, [r3, #28]
 8011b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b38:	3320      	adds	r3, #32
 8011b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b3c:	4b29      	ldr	r3, [pc, #164]	@ (8011be4 <_tx_thread_sleep+0x1f4>)
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d314      	bcc.n	8011b70 <_tx_thread_sleep+0x180>
 8011b46:	4b28      	ldr	r3, [pc, #160]	@ (8011be8 <_tx_thread_sleep+0x1f8>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011b4c:	4a22      	ldr	r2, [pc, #136]	@ (8011bd8 <_tx_thread_sleep+0x1e8>)
 8011b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b50:	6013      	str	r3, [r2, #0]
 8011b52:	4b26      	ldr	r3, [pc, #152]	@ (8011bec <_tx_thread_sleep+0x1fc>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011b58:	621a      	str	r2, [r3, #32]
 8011b5a:	4b25      	ldr	r3, [pc, #148]	@ (8011bf0 <_tx_thread_sleep+0x200>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d00d      	beq.n	8011b7e <_tx_thread_sleep+0x18e>
 8011b62:	4b23      	ldr	r3, [pc, #140]	@ (8011bf0 <_tx_thread_sleep+0x200>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4a21      	ldr	r2, [pc, #132]	@ (8011bec <_tx_thread_sleep+0x1fc>)
 8011b68:	6812      	ldr	r2, [r2, #0]
 8011b6a:	4610      	mov	r0, r2
 8011b6c:	4798      	blx	r3
 8011b6e:	e006      	b.n	8011b7e <_tx_thread_sleep+0x18e>
 8011b70:	4a19      	ldr	r2, [pc, #100]	@ (8011bd8 <_tx_thread_sleep+0x1e8>)
 8011b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b74:	6013      	str	r3, [r2, #0]
 8011b76:	4b1d      	ldr	r3, [pc, #116]	@ (8011bec <_tx_thread_sleep+0x1fc>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011b7c:	621a      	str	r2, [r3, #32]
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8011b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b80:	2204      	movs	r2, #4
 8011b82:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b86:	2201      	movs	r2, #1
 8011b88:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8011b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011b98:	4b0e      	ldr	r3, [pc, #56]	@ (8011bd4 <_tx_thread_sleep+0x1e4>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8011bd4 <_tx_thread_sleep+0x1e4>)
 8011ba0:	6013      	str	r3, [r2, #0]
 8011ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ba4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ba6:	693b      	ldr	r3, [r7, #16]
 8011ba8:	f383 8810 	msr	PRIMASK, r3
}
 8011bac:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011bae:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011bb0:	f000 fb06 	bl	80121c0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011bba:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Return completion status.  */
    return(status);
 8011bbc:	68fb      	ldr	r3, [r7, #12]
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3750      	adds	r7, #80	@ 0x50
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	20006c6c 	.word	0x20006c6c
 8011bcc:	2000017c 	.word	0x2000017c
 8011bd0:	20006db4 	.word	0x20006db4
 8011bd4:	20006d04 	.word	0x20006d04
 8011bd8:	20007288 	.word	0x20007288
 8011bdc:	2000728c 	.word	0x2000728c
 8011be0:	e0001004 	.word	0xe0001004
 8011be4:	20007284 	.word	0x20007284
 8011be8:	20007280 	.word	0x20007280
 8011bec:	20007274 	.word	0x20007274
 8011bf0:	20007290 	.word	0x20007290

08011bf4 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b090      	sub	sp, #64	@ 0x40
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8011c00:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8011c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8011c04:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c06:	b672      	cpsid	i
    return(int_posture);
 8011c08:	6a3b      	ldr	r3, [r7, #32]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8011c0a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011c0c:	4b68      	ldr	r3, [pc, #416]	@ (8011db0 <_tx_thread_suspend+0x1bc>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	633b      	str	r3, [r7, #48]	@ 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND_API, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&status), 0, TX_TRACE_THREAD_EVENTS)
 8011c12:	4b68      	ldr	r3, [pc, #416]	@ (8011db4 <_tx_thread_suspend+0x1c0>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d06d      	beq.n	8011cfa <_tx_thread_suspend+0x106>
 8011c1e:	4b66      	ldr	r3, [pc, #408]	@ (8011db8 <_tx_thread_suspend+0x1c4>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d067      	beq.n	8011cfa <_tx_thread_suspend+0x106>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c2a:	f3ef 8305 	mrs	r3, IPSR
 8011c2e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8011c30:	69fa      	ldr	r2, [r7, #28]
 8011c32:	4b62      	ldr	r3, [pc, #392]	@ (8011dbc <_tx_thread_suspend+0x1c8>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	4313      	orrs	r3, r2
 8011c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8011db0 <_tx_thread_suspend+0x1bc>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d10b      	bne.n	8011c5e <_tx_thread_suspend+0x6a>
 8011c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011c50:	041a      	lsls	r2, r3, #16
 8011c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c54:	4313      	orrs	r3, r2
 8011c56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011c5c:	e00e      	b.n	8011c7c <_tx_thread_suspend+0x88>
 8011c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c60:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8011c64:	d205      	bcs.n	8011c72 <_tx_thread_suspend+0x7e>
 8011c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8011c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c70:	e004      	b.n	8011c7c <_tx_thread_suspend+0x88>
 8011c72:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8011c76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c78:	2300      	movs	r3, #0
 8011c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011c7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c80:	601a      	str	r2, [r3, #0]
 8011c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011c86:	605a      	str	r2, [r3, #4]
 8011c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c8a:	2272      	movs	r2, #114	@ 0x72
 8011c8c:	609a      	str	r2, [r3, #8]
 8011c8e:	4b4c      	ldr	r3, [pc, #304]	@ (8011dc0 <_tx_thread_suspend+0x1cc>)
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c94:	60da      	str	r2, [r3, #12]
 8011c96:	687a      	ldr	r2, [r7, #4]
 8011c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c9a:	611a      	str	r2, [r3, #16]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca2:	615a      	str	r2, [r3, #20]
 8011ca4:	f107 020c 	add.w	r2, r7, #12
 8011ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011caa:	619a      	str	r2, [r3, #24]
 8011cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cae:	2200      	movs	r2, #0
 8011cb0:	61da      	str	r2, [r3, #28]
 8011cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cb4:	3320      	adds	r3, #32
 8011cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011cb8:	4b42      	ldr	r3, [pc, #264]	@ (8011dc4 <_tx_thread_suspend+0x1d0>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d314      	bcc.n	8011cec <_tx_thread_suspend+0xf8>
 8011cc2:	4b41      	ldr	r3, [pc, #260]	@ (8011dc8 <_tx_thread_suspend+0x1d4>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011cc8:	4a3a      	ldr	r2, [pc, #232]	@ (8011db4 <_tx_thread_suspend+0x1c0>)
 8011cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ccc:	6013      	str	r3, [r2, #0]
 8011cce:	4b3f      	ldr	r3, [pc, #252]	@ (8011dcc <_tx_thread_suspend+0x1d8>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011cd4:	621a      	str	r2, [r3, #32]
 8011cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8011dd0 <_tx_thread_suspend+0x1dc>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d00d      	beq.n	8011cfa <_tx_thread_suspend+0x106>
 8011cde:	4b3c      	ldr	r3, [pc, #240]	@ (8011dd0 <_tx_thread_suspend+0x1dc>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	4a3a      	ldr	r2, [pc, #232]	@ (8011dcc <_tx_thread_suspend+0x1d8>)
 8011ce4:	6812      	ldr	r2, [r2, #0]
 8011ce6:	4610      	mov	r0, r2
 8011ce8:	4798      	blx	r3
 8011cea:	e006      	b.n	8011cfa <_tx_thread_suspend+0x106>
 8011cec:	4a31      	ldr	r2, [pc, #196]	@ (8011db4 <_tx_thread_suspend+0x1c0>)
 8011cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cf0:	6013      	str	r3, [r2, #0]
 8011cf2:	4b36      	ldr	r3, [pc, #216]	@ (8011dcc <_tx_thread_suspend+0x1d8>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011cf8:	621a      	str	r2, [r3, #32]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d130      	bne.n	8011d64 <_tx_thread_suspend+0x170>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 8011d02:	2300      	movs	r3, #0
 8011d04:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011d06:	f3ef 8305 	mrs	r3, IPSR
 8011d0a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011d0c:	69ba      	ldr	r2, [r7, #24]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8011d0e:	4b2b      	ldr	r3, [pc, #172]	@ (8011dbc <_tx_thread_suspend+0x1c8>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	4313      	orrs	r3, r2
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d109      	bne.n	8011d2c <_tx_thread_suspend+0x138>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8011d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d105      	bne.n	8011d2c <_tx_thread_suspend+0x138>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8011d20:	4b2c      	ldr	r3, [pc, #176]	@ (8011dd4 <_tx_thread_suspend+0x1e0>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d001      	beq.n	8011d2c <_tx_thread_suspend+0x138>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 8011d28:	2314      	movs	r3, #20
 8011d2a:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d132      	bne.n	8011d98 <_tx_thread_suspend+0x1a4>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2203      	movs	r2, #3
 8011d36:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2200      	movs	r2, #0
 8011d42:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011d44:	4b23      	ldr	r3, [pc, #140]	@ (8011dd4 <_tx_thread_suspend+0x1e0>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	3301      	adds	r3, #1
 8011d4a:	4a22      	ldr	r2, [pc, #136]	@ (8011dd4 <_tx_thread_suspend+0x1e0>)
 8011d4c:	6013      	str	r3, [r2, #0]
 8011d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d50:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d52:	697b      	ldr	r3, [r7, #20]
 8011d54:	f383 8810 	msr	PRIMASK, r3
}
 8011d58:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f000 fa30 	bl	80121c0 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8011d60:	2300      	movs	r3, #0
 8011d62:	e020      	b.n	8011da6 <_tx_thread_suspend+0x1b2>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d68:	2b02      	cmp	r3, #2
 8011d6a:	d102      	bne.n	8011d72 <_tx_thread_suspend+0x17e>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8011d6c:	2314      	movs	r3, #20
 8011d6e:	60fb      	str	r3, [r7, #12]
 8011d70:	e012      	b.n	8011d98 <_tx_thread_suspend+0x1a4>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d76:	2b01      	cmp	r3, #1
 8011d78:	d102      	bne.n	8011d80 <_tx_thread_suspend+0x18c>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8011d7a:	2314      	movs	r3, #20
 8011d7c:	60fb      	str	r3, [r7, #12]
 8011d7e:	e00b      	b.n	8011d98 <_tx_thread_suspend+0x1a4>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d84:	2b03      	cmp	r3, #3
 8011d86:	d102      	bne.n	8011d8e <_tx_thread_suspend+0x19a>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8011d88:	2300      	movs	r3, #0
 8011d8a:	60fb      	str	r3, [r7, #12]
 8011d8c:	e004      	b.n	8011d98 <_tx_thread_suspend+0x1a4>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2201      	movs	r2, #1
 8011d92:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8011d94:	2300      	movs	r3, #0
 8011d96:	60fb      	str	r3, [r7, #12]
 8011d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d9a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d9c:	693b      	ldr	r3, [r7, #16]
 8011d9e:	f383 8810 	msr	PRIMASK, r3
}
 8011da2:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8011da4:	68fb      	ldr	r3, [r7, #12]
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3740      	adds	r7, #64	@ 0x40
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
 8011dae:	bf00      	nop
 8011db0:	20006c6c 	.word	0x20006c6c
 8011db4:	20007288 	.word	0x20007288
 8011db8:	2000728c 	.word	0x2000728c
 8011dbc:	2000017c 	.word	0x2000017c
 8011dc0:	e0001004 	.word	0xe0001004
 8011dc4:	20007284 	.word	0x20007284
 8011dc8:	20007280 	.word	0x20007280
 8011dcc:	20007274 	.word	0x20007274
 8011dd0:	20007290 	.word	0x20007290
 8011dd4:	20006d04 	.word	0x20006d04

08011dd8 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b089      	sub	sp, #36	@ 0x24
 8011ddc:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011dde:	4b17      	ldr	r3, [pc, #92]	@ (8011e3c <_tx_thread_system_preempt_check+0x64>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8011de4:	69fb      	ldr	r3, [r7, #28]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d121      	bne.n	8011e2e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8011dea:	4b15      	ldr	r3, [pc, #84]	@ (8011e40 <_tx_thread_system_preempt_check+0x68>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8011df0:	4b14      	ldr	r3, [pc, #80]	@ (8011e44 <_tx_thread_system_preempt_check+0x6c>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8011df6:	69ba      	ldr	r2, [r7, #24]
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d017      	beq.n	8011e2e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011dfe:	4b12      	ldr	r3, [pc, #72]	@ (8011e48 <_tx_thread_system_preempt_check+0x70>)
 8011e00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e04:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011e06:	f3ef 8305 	mrs	r3, IPSR
 8011e0a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011e0c:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d10c      	bne.n	8011e2c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e12:	f3ef 8310 	mrs	r3, PRIMASK
 8011e16:	60fb      	str	r3, [r7, #12]
    return(posture);
 8011e18:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8011e1a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011e1c:	b662      	cpsie	i
}
 8011e1e:	bf00      	nop
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f383 8810 	msr	PRIMASK, r3
}
 8011e2a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8011e2c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8011e2e:	bf00      	nop
 8011e30:	3724      	adds	r7, #36	@ 0x24
 8011e32:	46bd      	mov	sp, r7
 8011e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e38:	4770      	bx	lr
 8011e3a:	bf00      	nop
 8011e3c:	20006d04 	.word	0x20006d04
 8011e40:	20006c6c 	.word	0x20006c6c
 8011e44:	20006c70 	.word	0x20006c70
 8011e48:	e000ed04 	.word	0xe000ed04

08011e4c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b09e      	sub	sp, #120	@ 0x78
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
TX_THREAD       *current_thread;
ULONG           combined_flags;

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 8011e54:	2300      	movs	r3, #0
 8011e56:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e58:	f3ef 8310 	mrs	r3, PRIMASK
 8011e5c:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8011e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8011e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e62:	b672      	cpsid	i
    return(int_posture);
 8011e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011e66:	66bb      	str	r3, [r7, #104]	@ 0x68

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d005      	beq.n	8011e7c <_tx_thread_system_resume+0x30>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	334c      	adds	r3, #76	@ 0x4c
 8011e74:	4618      	mov	r0, r3
 8011e76:	f000 fdaf 	bl	80129d8 <_tx_timer_system_deactivate>
 8011e7a:	e002      	b.n	8011e82 <_tx_thread_system_resume+0x36>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

#ifdef TX_ENABLE_EVENT_TRACE

    /* If trace is enabled, save the current event pointer.  */
    entry_ptr =  _tx_trace_buffer_current_ptr;
 8011e82:	4b8b      	ldr	r3, [pc, #556]	@ (80120b0 <_tx_thread_system_resume+0x264>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	667b      	str	r3, [r7, #100]	@ 0x64
#endif

    /* Log the thread status change.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_RESUME, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&execute_ptr), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8011e88:	4b89      	ldr	r3, [pc, #548]	@ (80120b0 <_tx_thread_system_resume+0x264>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8011e8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d06f      	beq.n	8011f74 <_tx_thread_system_resume+0x128>
 8011e94:	4b87      	ldr	r3, [pc, #540]	@ (80120b4 <_tx_thread_system_resume+0x268>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	f003 0301 	and.w	r3, r3, #1
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d069      	beq.n	8011f74 <_tx_thread_system_resume+0x128>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011ea0:	f3ef 8305 	mrs	r3, IPSR
 8011ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(ipsr_value);
 8011ea6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011ea8:	4b83      	ldr	r3, [pc, #524]	@ (80120b8 <_tx_thread_system_resume+0x26c>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	4313      	orrs	r3, r2
 8011eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011eb0:	4b82      	ldr	r3, [pc, #520]	@ (80120bc <_tx_thread_system_resume+0x270>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d10b      	bne.n	8011ed4 <_tx_thread_system_resume+0x88>
 8011ebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ec0:	673b      	str	r3, [r7, #112]	@ 0x70
 8011ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ec6:	041a      	lsls	r2, r3, #16
 8011ec8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011eca:	4313      	orrs	r3, r2
 8011ecc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011ed0:	673b      	str	r3, [r7, #112]	@ 0x70
 8011ed2:	e00e      	b.n	8011ef2 <_tx_thread_system_resume+0xa6>
 8011ed4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ed6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8011eda:	d205      	bcs.n	8011ee8 <_tx_thread_system_resume+0x9c>
 8011edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ede:	673b      	str	r3, [r7, #112]	@ 0x70
 8011ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011ee6:	e004      	b.n	8011ef2 <_tx_thread_system_resume+0xa6>
 8011ee8:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 8011eec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011eee:	2300      	movs	r3, #0
 8011ef0:	673b      	str	r3, [r7, #112]	@ 0x70
 8011ef2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011ef4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011ef6:	601a      	str	r2, [r3, #0]
 8011ef8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011efa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011efc:	605a      	str	r2, [r3, #4]
 8011efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f00:	2201      	movs	r2, #1
 8011f02:	609a      	str	r2, [r3, #8]
 8011f04:	4b6e      	ldr	r3, [pc, #440]	@ (80120c0 <_tx_thread_system_resume+0x274>)
 8011f06:	681a      	ldr	r2, [r3, #0]
 8011f08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f0a:	60da      	str	r2, [r3, #12]
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f10:	611a      	str	r2, [r3, #16]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f18:	615a      	str	r2, [r3, #20]
 8011f1a:	f107 020c 	add.w	r2, r7, #12
 8011f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f20:	619a      	str	r2, [r3, #24]
 8011f22:	4b68      	ldr	r3, [pc, #416]	@ (80120c4 <_tx_thread_system_resume+0x278>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	461a      	mov	r2, r3
 8011f28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f2a:	61da      	str	r2, [r3, #28]
 8011f2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f2e:	3320      	adds	r3, #32
 8011f30:	663b      	str	r3, [r7, #96]	@ 0x60
 8011f32:	4b65      	ldr	r3, [pc, #404]	@ (80120c8 <_tx_thread_system_resume+0x27c>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011f38:	429a      	cmp	r2, r3
 8011f3a:	d314      	bcc.n	8011f66 <_tx_thread_system_resume+0x11a>
 8011f3c:	4b63      	ldr	r3, [pc, #396]	@ (80120cc <_tx_thread_system_resume+0x280>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	663b      	str	r3, [r7, #96]	@ 0x60
 8011f42:	4a5b      	ldr	r2, [pc, #364]	@ (80120b0 <_tx_thread_system_resume+0x264>)
 8011f44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f46:	6013      	str	r3, [r2, #0]
 8011f48:	4b61      	ldr	r3, [pc, #388]	@ (80120d0 <_tx_thread_system_resume+0x284>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011f4e:	621a      	str	r2, [r3, #32]
 8011f50:	4b60      	ldr	r3, [pc, #384]	@ (80120d4 <_tx_thread_system_resume+0x288>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d00d      	beq.n	8011f74 <_tx_thread_system_resume+0x128>
 8011f58:	4b5e      	ldr	r3, [pc, #376]	@ (80120d4 <_tx_thread_system_resume+0x288>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	4a5c      	ldr	r2, [pc, #368]	@ (80120d0 <_tx_thread_system_resume+0x284>)
 8011f5e:	6812      	ldr	r2, [r2, #0]
 8011f60:	4610      	mov	r0, r2
 8011f62:	4798      	blx	r3
 8011f64:	e006      	b.n	8011f74 <_tx_thread_system_resume+0x128>
 8011f66:	4a52      	ldr	r2, [pc, #328]	@ (80120b0 <_tx_thread_system_resume+0x264>)
 8011f68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011f6a:	6013      	str	r3, [r2, #0]
 8011f6c:	4b58      	ldr	r3, [pc, #352]	@ (80120d0 <_tx_thread_system_resume+0x284>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011f72:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

    /* Save the time stamp for later comparison to verify that
       the event hasn't been overwritten by the time we have
       computed the next thread to execute.  */
    if (entry_ptr != TX_NULL)
 8011f74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d002      	beq.n	8011f80 <_tx_thread_system_resume+0x134>
    {

        /* Save time stamp.  */
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 8011f7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	677b      	str	r3, [r7, #116]	@ 0x74
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8011f80:	4b55      	ldr	r3, [pc, #340]	@ (80120d8 <_tx_thread_system_resume+0x28c>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	3b01      	subs	r3, #1
 8011f86:	4a54      	ldr	r2, [pc, #336]	@ (80120d8 <_tx_thread_system_resume+0x28c>)
 8011f88:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	f040 80b3 	bne.w	80120fa <_tx_thread_system_resume+0x2ae>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	f000 80c7 	beq.w	801212c <_tx_thread_system_resume+0x2e0>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f040 80a2 	bne.w	80120ec <_tx_thread_system_resume+0x2a0>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2200      	movs	r2, #0
 8011fac:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fb2:	65bb      	str	r3, [r7, #88]	@ 0x58
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8011fb4:	4a49      	ldr	r2, [pc, #292]	@ (80120dc <_tx_thread_system_resume+0x290>)
 8011fb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fbc:	657b      	str	r3, [r7, #84]	@ 0x54
                if (head_ptr == TX_NULL)
 8011fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d164      	bne.n	801208e <_tx_thread_system_resume+0x242>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8011fc4:	4945      	ldr	r1, [pc, #276]	@ (80120dc <_tx_thread_system_resume+0x290>)
 8011fc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011fc8:	687a      	ldr	r2, [r7, #4]
 8011fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	687a      	ldr	r2, [r7, #4]
 8011fd8:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8011fda:	2201      	movs	r2, #1
 8011fdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011fde:	fa02 f303 	lsl.w	r3, r2, r3
 8011fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8011fe4:	4b3e      	ldr	r3, [pc, #248]	@ (80120e0 <_tx_thread_system_resume+0x294>)
 8011fe6:	681a      	ldr	r2, [r3, #0]
 8011fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fea:	4313      	orrs	r3, r2
 8011fec:	4a3c      	ldr	r2, [pc, #240]	@ (80120e0 <_tx_thread_system_resume+0x294>)
 8011fee:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8011ff0:	4b3c      	ldr	r3, [pc, #240]	@ (80120e4 <_tx_thread_system_resume+0x298>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	f080 8098 	bcs.w	801212c <_tx_thread_system_resume+0x2e0>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8011ffc:	4a39      	ldr	r2, [pc, #228]	@ (80120e4 <_tx_thread_system_resume+0x298>)
 8011ffe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012000:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8012002:	4b30      	ldr	r3, [pc, #192]	@ (80120c4 <_tx_thread_system_resume+0x278>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	60fb      	str	r3, [r7, #12]

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d103      	bne.n	8012016 <_tx_thread_system_resume+0x1ca>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 801200e:	4a2d      	ldr	r2, [pc, #180]	@ (80120c4 <_tx_thread_system_resume+0x278>)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6013      	str	r3, [r2, #0]
 8012014:	e08a      	b.n	801212c <_tx_thread_system_resume+0x2e0>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801201a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801201c:	429a      	cmp	r2, r3
 801201e:	f080 8085 	bcs.w	801212c <_tx_thread_system_resume+0x2e0>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8012022:	4a28      	ldr	r2, [pc, #160]	@ (80120c4 <_tx_thread_system_resume+0x278>)
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                                /* Check that the event time stamp is unchanged.  A different
                                   timestamp means that a later event wrote over the thread
                                   resume event. In that case, do nothing here.  */
                                if (entry_ptr != TX_NULL)
 8012028:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801202a:	2b00      	cmp	r3, #0
 801202c:	d009      	beq.n	8012042 <_tx_thread_system_resume+0x1f6>
                                {

                                    /* Is the timestamp the same?  */
                                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 801202e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012030:	68db      	ldr	r3, [r3, #12]
 8012032:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8012034:	429a      	cmp	r2, r3
 8012036:	d104      	bne.n	8012042 <_tx_thread_system_resume+0x1f6>
                                    {

                                        /* Timestamp is the same, set the "next thread pointer" to NULL. This can
                                           be used by the trace analysis tool to show idle system conditions.  */
                                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 8012038:	4b22      	ldr	r3, [pc, #136]	@ (80120c4 <_tx_thread_system_resume+0x278>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	461a      	mov	r2, r3
 801203e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012040:	61da      	str	r2, [r3, #28]
 8012042:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012044:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012048:	f383 8810 	msr	PRIMASK, r3
}
 801204c:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801204e:	4b22      	ldr	r3, [pc, #136]	@ (80120d8 <_tx_thread_system_resume+0x28c>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	64bb      	str	r3, [r7, #72]	@ 0x48
                                if (combined_flags == ((ULONG) 0))
 8012054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012056:	2b00      	cmp	r3, #0
 8012058:	f040 80a1 	bne.w	801219e <_tx_thread_system_resume+0x352>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801205c:	4b22      	ldr	r3, [pc, #136]	@ (80120e8 <_tx_thread_system_resume+0x29c>)
 801205e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012062:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012064:	f3ef 8305 	mrs	r3, IPSR
 8012068:	633b      	str	r3, [r7, #48]	@ 0x30
    return(ipsr_value);
 801206a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    if (_tx_ipsr_get() == 0)
 801206c:	2b00      	cmp	r3, #0
 801206e:	f040 8098 	bne.w	80121a2 <_tx_thread_system_resume+0x356>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012072:	f3ef 8310 	mrs	r3, PRIMASK
 8012076:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8012078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        interrupt_save = __get_interrupt_posture();
 801207a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSIE  i": : : "memory");
 801207c:	b662      	cpsie	i
}
 801207e:	bf00      	nop
 8012080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012082:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012086:	f383 8810 	msr	PRIMASK, r3
}
 801208a:	bf00      	nop
}
 801208c:	e089      	b.n	80121a2 <_tx_thread_system_resume+0x356>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 801208e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012092:	653b      	str	r3, [r7, #80]	@ 0x50
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8012094:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801209a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801209c:	687a      	ldr	r2, [r7, #4]
 801209e:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80120a4:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80120aa:	621a      	str	r2, [r3, #32]
 80120ac:	e03e      	b.n	801212c <_tx_thread_system_resume+0x2e0>
 80120ae:	bf00      	nop
 80120b0:	20007288 	.word	0x20007288
 80120b4:	2000728c 	.word	0x2000728c
 80120b8:	2000017c 	.word	0x2000017c
 80120bc:	20006c6c 	.word	0x20006c6c
 80120c0:	e0001004 	.word	0xe0001004
 80120c4:	20006c70 	.word	0x20006c70
 80120c8:	20007284 	.word	0x20007284
 80120cc:	20007280 	.word	0x20007280
 80120d0:	20007274 	.word	0x20007274
 80120d4:	20007290 	.word	0x20007290
 80120d8:	20006d04 	.word	0x20006d04
 80120dc:	20006c84 	.word	0x20006c84
 80120e0:	20006c7c 	.word	0x20006c7c
 80120e4:	20006c80 	.word	0x20006c80
 80120e8:	e000ed04 	.word	0xe000ed04
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2200      	movs	r2, #0
 80120f0:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2203      	movs	r2, #3
 80120f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80120f8:	e018      	b.n	801212c <_tx_thread_system_resume+0x2e0>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80120fe:	2b01      	cmp	r3, #1
 8012100:	d014      	beq.n	801212c <_tx_thread_system_resume+0x2e0>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012106:	2b02      	cmp	r3, #2
 8012108:	d010      	beq.n	801212c <_tx_thread_system_resume+0x2e0>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801210e:	2b00      	cmp	r3, #0
 8012110:	d106      	bne.n	8012120 <_tx_thread_system_resume+0x2d4>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2200      	movs	r2, #0
 8012116:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	631a      	str	r2, [r3, #48]	@ 0x30
 801211e:	e005      	b.n	801212c <_tx_thread_system_resume+0x2e0>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2203      	movs	r2, #3
 801212a:	631a      	str	r2, [r3, #48]	@ 0x30
#ifdef TX_ENABLE_EVENT_TRACE

    /* Check that the event time stamp is unchanged.  A different
       timestamp means that a later event wrote over the thread
       resume event. In that case, do nothing here.  */
    if (entry_ptr != TX_NULL)
 801212c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801212e:	2b00      	cmp	r3, #0
 8012130:	d009      	beq.n	8012146 <_tx_thread_system_resume+0x2fa>
    {

        /* Is the timestamp the same?  */
        if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 8012132:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012134:	68db      	ldr	r3, [r3, #12]
 8012136:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8012138:	429a      	cmp	r2, r3
 801213a:	d104      	bne.n	8012146 <_tx_thread_system_resume+0x2fa>
            /* Timestamp is the same, set the "next thread pointer" to NULL. This can
               be used by the trace analysis tool to show idle system conditions.  */
#ifdef TX_MISRA_ENABLE
            entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
            entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 801213c:	4b1c      	ldr	r3, [pc, #112]	@ (80121b0 <_tx_thread_system_resume+0x364>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	461a      	mov	r2, r3
 8012142:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012144:	61da      	str	r2, [r3, #28]
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012146:	4b1b      	ldr	r3, [pc, #108]	@ (80121b4 <_tx_thread_system_resume+0x368>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	647b      	str	r3, [r7, #68]	@ 0x44
 801214c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801214e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012150:	6a3b      	ldr	r3, [r7, #32]
 8012152:	f383 8810 	msr	PRIMASK, r3
}
 8012156:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8012158:	4b15      	ldr	r3, [pc, #84]	@ (80121b0 <_tx_thread_system_resume+0x364>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801215e:	429a      	cmp	r2, r3
 8012160:	d022      	beq.n	80121a8 <_tx_thread_system_resume+0x35c>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012162:	4b15      	ldr	r3, [pc, #84]	@ (80121b8 <_tx_thread_system_resume+0x36c>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (combined_flags == ((ULONG) 0))
 8012168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801216a:	2b00      	cmp	r3, #0
 801216c:	d11c      	bne.n	80121a8 <_tx_thread_system_resume+0x35c>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801216e:	4b13      	ldr	r3, [pc, #76]	@ (80121bc <_tx_thread_system_resume+0x370>)
 8012170:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012174:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012176:	f3ef 8305 	mrs	r3, IPSR
 801217a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801217c:	69fb      	ldr	r3, [r7, #28]
    if (_tx_ipsr_get() == 0)
 801217e:	2b00      	cmp	r3, #0
 8012180:	d111      	bne.n	80121a6 <_tx_thread_system_resume+0x35a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012182:	f3ef 8310 	mrs	r3, PRIMASK
 8012186:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012188:	69bb      	ldr	r3, [r7, #24]
        interrupt_save = __get_interrupt_posture();
 801218a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801218c:	b662      	cpsie	i
}
 801218e:	bf00      	nop
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	f383 8810 	msr	PRIMASK, r3
}
 801219a:	bf00      	nop
}
 801219c:	e003      	b.n	80121a6 <_tx_thread_system_resume+0x35a>
                                return;
 801219e:	bf00      	nop
 80121a0:	e002      	b.n	80121a8 <_tx_thread_system_resume+0x35c>
 80121a2:	bf00      	nop
 80121a4:	e000      	b.n	80121a8 <_tx_thread_system_resume+0x35c>
 80121a6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80121a8:	3778      	adds	r7, #120	@ 0x78
 80121aa:	46bd      	mov	sp, r7
 80121ac:	bd80      	pop	{r7, pc}
 80121ae:	bf00      	nop
 80121b0:	20006c70 	.word	0x20006c70
 80121b4:	20006c6c 	.word	0x20006c6c
 80121b8:	20006d04 	.word	0x20006d04
 80121bc:	e000ed04 	.word	0xe000ed04

080121c0 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b0a4      	sub	sp, #144	@ 0x90
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
ULONG           timeout;
#endif

#ifdef TX_ENABLE_EVENT_TRACE
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
 80121c8:	2300      	movs	r3, #0
 80121ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80121ce:	4b98      	ldr	r3, [pc, #608]	@ (8012430 <_tx_thread_system_suspend+0x270>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80121d6:	f3ef 8310 	mrs	r3, PRIMASK
 80121da:	653b      	str	r3, [r7, #80]	@ 0x50
    return(posture);
 80121dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    int_posture = __get_interrupt_posture();
 80121de:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 80121e0:	b672      	cpsid	i
    return(int_posture);
 80121e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80121e4:	67fb      	str	r3, [r7, #124]	@ 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d112      	bne.n	8012216 <_tx_thread_system_suspend+0x56>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80121f4:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80121f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d008      	beq.n	801220e <_tx_thread_system_suspend+0x4e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80121fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80121fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012202:	d004      	beq.n	801220e <_tx_thread_system_suspend+0x4e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	334c      	adds	r3, #76	@ 0x4c
 8012208:	4618      	mov	r0, r3
 801220a:	f000 fb83 	bl	8012914 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	69db      	ldr	r3, [r3, #28]
 8012212:	4a88      	ldr	r2, [pc, #544]	@ (8012434 <_tx_thread_system_suspend+0x274>)
 8012214:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8012216:	4b88      	ldr	r3, [pc, #544]	@ (8012438 <_tx_thread_system_suspend+0x278>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	3b01      	subs	r3, #1
 801221c:	4a86      	ldr	r2, [pc, #536]	@ (8012438 <_tx_thread_system_suspend+0x278>)
 801221e:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012224:	2b01      	cmp	r3, #1
 8012226:	f040 817d 	bne.w	8012524 <_tx_thread_system_suspend+0x364>
        TX_EL_THREAD_STATUS_CHANGE_INSERT(thread_ptr, thread_ptr -> tx_thread_state)

#ifdef TX_ENABLE_EVENT_TRACE

        /* If trace is enabled, save the current event pointer.  */
        entry_ptr =  _tx_trace_buffer_current_ptr;
 801222a:	4b84      	ldr	r3, [pc, #528]	@ (801243c <_tx_thread_system_suspend+0x27c>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	677b      	str	r3, [r7, #116]	@ 0x74
#endif

        /* Log the thread status change.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_THREAD_SUSPEND, thread_ptr, thread_ptr -> tx_thread_state, TX_POINTER_TO_ULONG_CONVERT(&priority), TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr), TX_TRACE_INTERNAL_EVENTS)
 8012230:	4b82      	ldr	r3, [pc, #520]	@ (801243c <_tx_thread_system_suspend+0x27c>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	673b      	str	r3, [r7, #112]	@ 0x70
 8012236:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012238:	2b00      	cmp	r3, #0
 801223a:	d07c      	beq.n	8012336 <_tx_thread_system_suspend+0x176>
 801223c:	4b80      	ldr	r3, [pc, #512]	@ (8012440 <_tx_thread_system_suspend+0x280>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	f003 0301 	and.w	r3, r3, #1
 8012244:	2b00      	cmp	r3, #0
 8012246:	d076      	beq.n	8012336 <_tx_thread_system_suspend+0x176>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012248:	f3ef 8305 	mrs	r3, IPSR
 801224c:	64bb      	str	r3, [r7, #72]	@ 0x48
    return(ipsr_value);
 801224e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012250:	4b7c      	ldr	r3, [pc, #496]	@ (8012444 <_tx_thread_system_suspend+0x284>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4313      	orrs	r3, r2
 8012256:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012258:	4b75      	ldr	r3, [pc, #468]	@ (8012430 <_tx_thread_system_suspend+0x270>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012262:	2b00      	cmp	r3, #0
 8012264:	d110      	bne.n	8012288 <_tx_thread_system_suspend+0xc8>
 8012266:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801226a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801226c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012270:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012276:	041a      	lsls	r2, r3, #16
 8012278:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801227c:	4313      	orrs	r3, r2
 801227e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012282:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012286:	e013      	b.n	80122b0 <_tx_thread_system_suspend+0xf0>
 8012288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801228a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 801228e:	d208      	bcs.n	80122a2 <_tx_thread_system_suspend+0xe2>
 8012290:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012298:	f04f 33ff 	mov.w	r3, #4294967295
 801229c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80122a0:	e006      	b.n	80122b0 <_tx_thread_system_suspend+0xf0>
 80122a2:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 80122a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80122aa:	2300      	movs	r3, #0
 80122ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80122b0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80122b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122b6:	601a      	str	r2, [r3, #0]
 80122b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80122be:	605a      	str	r2, [r3, #4]
 80122c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122c2:	2202      	movs	r2, #2
 80122c4:	609a      	str	r2, [r3, #8]
 80122c6:	4b60      	ldr	r3, [pc, #384]	@ (8012448 <_tx_thread_system_suspend+0x288>)
 80122c8:	681a      	ldr	r2, [r3, #0]
 80122ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122cc:	60da      	str	r2, [r3, #12]
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122d2:	611a      	str	r2, [r3, #16]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80122d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122da:	615a      	str	r2, [r3, #20]
 80122dc:	f107 0208 	add.w	r2, r7, #8
 80122e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122e2:	619a      	str	r2, [r3, #24]
 80122e4:	4b59      	ldr	r3, [pc, #356]	@ (801244c <_tx_thread_system_suspend+0x28c>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	461a      	mov	r2, r3
 80122ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122ec:	61da      	str	r2, [r3, #28]
 80122ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80122f0:	3320      	adds	r3, #32
 80122f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80122f4:	4b56      	ldr	r3, [pc, #344]	@ (8012450 <_tx_thread_system_suspend+0x290>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d314      	bcc.n	8012328 <_tx_thread_system_suspend+0x168>
 80122fe:	4b55      	ldr	r3, [pc, #340]	@ (8012454 <_tx_thread_system_suspend+0x294>)
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	673b      	str	r3, [r7, #112]	@ 0x70
 8012304:	4a4d      	ldr	r2, [pc, #308]	@ (801243c <_tx_thread_system_suspend+0x27c>)
 8012306:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012308:	6013      	str	r3, [r2, #0]
 801230a:	4b53      	ldr	r3, [pc, #332]	@ (8012458 <_tx_thread_system_suspend+0x298>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8012310:	621a      	str	r2, [r3, #32]
 8012312:	4b52      	ldr	r3, [pc, #328]	@ (801245c <_tx_thread_system_suspend+0x29c>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d00d      	beq.n	8012336 <_tx_thread_system_suspend+0x176>
 801231a:	4b50      	ldr	r3, [pc, #320]	@ (801245c <_tx_thread_system_suspend+0x29c>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	4a4e      	ldr	r2, [pc, #312]	@ (8012458 <_tx_thread_system_suspend+0x298>)
 8012320:	6812      	ldr	r2, [r2, #0]
 8012322:	4610      	mov	r0, r2
 8012324:	4798      	blx	r3
 8012326:	e006      	b.n	8012336 <_tx_thread_system_suspend+0x176>
 8012328:	4a44      	ldr	r2, [pc, #272]	@ (801243c <_tx_thread_system_suspend+0x27c>)
 801232a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801232c:	6013      	str	r3, [r2, #0]
 801232e:	4b4a      	ldr	r3, [pc, #296]	@ (8012458 <_tx_thread_system_suspend+0x298>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8012334:	621a      	str	r2, [r3, #32]
#ifdef TX_ENABLE_EVENT_TRACE

        /* Save the time stamp for later comparison to verify that
           the event hasn't been overwritten by the time we have
           computed the next thread to execute.  */
        if (entry_ptr != TX_NULL)
 8012336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012338:	2b00      	cmp	r3, #0
 801233a:	d003      	beq.n	8012344 <_tx_thread_system_suspend+0x184>
        {

            /* Save time stamp.  */
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
 801233c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801233e:	68db      	ldr	r3, [r3, #12]
 8012340:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2200      	movs	r2, #0
 8012348:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801234e:	60bb      	str	r3, [r7, #8]

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6a1b      	ldr	r3, [r3, #32]
 8012354:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8012356:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	429a      	cmp	r2, r3
 801235c:	d016      	beq.n	801238c <_tx_thread_system_suspend+0x1cc>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012362:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8012364:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012366:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012368:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 801236a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801236c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801236e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	4a3b      	ldr	r2, [pc, #236]	@ (8012460 <_tx_thread_system_suspend+0x2a0>)
 8012374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012378:	687a      	ldr	r2, [r7, #4]
 801237a:	429a      	cmp	r2, r3
 801237c:	f040 8085 	bne.w	801248a <_tx_thread_system_suspend+0x2ca>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	4937      	ldr	r1, [pc, #220]	@ (8012460 <_tx_thread_system_suspend+0x2a0>)
 8012384:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801238a:	e07e      	b.n	801248a <_tx_thread_system_suspend+0x2ca>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	4a34      	ldr	r2, [pc, #208]	@ (8012460 <_tx_thread_system_suspend+0x2a0>)
 8012390:	2100      	movs	r1, #0
 8012392:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	2201      	movs	r2, #1
 801239a:	fa02 f303 	lsl.w	r3, r2, r3
 801239e:	667b      	str	r3, [r7, #100]	@ 0x64
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80123a0:	4b30      	ldr	r3, [pc, #192]	@ (8012464 <_tx_thread_system_suspend+0x2a4>)
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80123a6:	43db      	mvns	r3, r3
 80123a8:	4013      	ands	r3, r2
 80123aa:	4a2e      	ldr	r2, [pc, #184]	@ (8012464 <_tx_thread_system_suspend+0x2a4>)
 80123ac:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80123ae:	2300      	movs	r3, #0
 80123b0:	663b      	str	r3, [r7, #96]	@ 0x60
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80123b2:	4b2c      	ldr	r3, [pc, #176]	@ (8012464 <_tx_thread_system_suspend+0x2a4>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80123b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d158      	bne.n	8012470 <_tx_thread_system_suspend+0x2b0>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80123be:	4b2a      	ldr	r3, [pc, #168]	@ (8012468 <_tx_thread_system_suspend+0x2a8>)
 80123c0:	2220      	movs	r2, #32
 80123c2:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80123c4:	4b21      	ldr	r3, [pc, #132]	@ (801244c <_tx_thread_system_suspend+0x28c>)
 80123c6:	2200      	movs	r2, #0
 80123c8:	601a      	str	r2, [r3, #0]
#ifdef TX_ENABLE_EVENT_TRACE

                /* Check that the event time stamp is unchanged.  A different
                   timestamp means that a later event wrote over the thread
                   suspend event. In that case, do nothing here.  */
                if (entry_ptr != TX_NULL)
 80123ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d008      	beq.n	80123e2 <_tx_thread_system_suspend+0x222>
                {

                    /* Is the timestamp the same?  */
                    if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80123d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80123d8:	429a      	cmp	r2, r3
 80123da:	d102      	bne.n	80123e2 <_tx_thread_system_suspend+0x222>
                    {

                        /* Timestamp is the same, set the "next thread pointer" to the new value of the
                           next thread to execute. This can be used by the trace analysis tool to keep
                           track of next thread execution.  */
                        entry_ptr -> tx_trace_buffer_entry_information_field_4 =  0;
 80123dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80123de:	2200      	movs	r2, #0
 80123e0:	61da      	str	r2, [r3, #28]
 80123e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80123e4:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80123e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123e8:	f383 8810 	msr	PRIMASK, r3
}
 80123ec:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80123ee:	4b12      	ldr	r3, [pc, #72]	@ (8012438 <_tx_thread_system_suspend+0x278>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	65bb      	str	r3, [r7, #88]	@ 0x58
                if (combined_flags == ((ULONG) 0))
 80123f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	f040 80bf 	bne.w	801257a <_tx_thread_system_suspend+0x3ba>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80123fc:	4b1b      	ldr	r3, [pc, #108]	@ (801246c <_tx_thread_system_suspend+0x2ac>)
 80123fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012402:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012404:	f3ef 8305 	mrs	r3, IPSR
 8012408:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 801240a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (_tx_ipsr_get() == 0)
 801240c:	2b00      	cmp	r3, #0
 801240e:	d10c      	bne.n	801242a <_tx_thread_system_suspend+0x26a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012410:	f3ef 8310 	mrs	r3, PRIMASK
 8012414:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 8012416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 8012418:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 801241a:	b662      	cpsie	i
}
 801241c:	bf00      	nop
 801241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012420:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012424:	f383 8810 	msr	PRIMASK, r3
}
 8012428:	bf00      	nop
}
 801242a:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 801242c:	e0a5      	b.n	801257a <_tx_thread_system_suspend+0x3ba>
 801242e:	bf00      	nop
 8012430:	20006c6c 	.word	0x20006c6c
 8012434:	20007270 	.word	0x20007270
 8012438:	20006d04 	.word	0x20006d04
 801243c:	20007288 	.word	0x20007288
 8012440:	2000728c 	.word	0x2000728c
 8012444:	2000017c 	.word	0x2000017c
 8012448:	e0001004 	.word	0xe0001004
 801244c:	20006c70 	.word	0x20006c70
 8012450:	20007284 	.word	0x20007284
 8012454:	20007280 	.word	0x20007280
 8012458:	20007274 	.word	0x20007274
 801245c:	20007290 	.word	0x20007290
 8012460:	20006c84 	.word	0x20006c84
 8012464:	20006c7c 	.word	0x20006c7c
 8012468:	20006c80 	.word	0x20006c80
 801246c:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8012470:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012472:	fa93 f3a3 	rbit	r3, r3
 8012476:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012478:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801247a:	fab3 f383 	clz	r3, r3
 801247e:	667b      	str	r3, [r7, #100]	@ 0x64

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8012480:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012482:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012484:	4413      	add	r3, r2
 8012486:	4a41      	ldr	r2, [pc, #260]	@ (801258c <_tx_thread_system_suspend+0x3cc>)
 8012488:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 801248a:	4b41      	ldr	r3, [pc, #260]	@ (8012590 <_tx_thread_system_suspend+0x3d0>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	429a      	cmp	r2, r3
 8012492:	d139      	bne.n	8012508 <_tx_thread_system_suspend+0x348>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012494:	4b3d      	ldr	r3, [pc, #244]	@ (801258c <_tx_thread_system_suspend+0x3cc>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	4a3e      	ldr	r2, [pc, #248]	@ (8012594 <_tx_thread_system_suspend+0x3d4>)
 801249a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801249e:	4a3c      	ldr	r2, [pc, #240]	@ (8012590 <_tx_thread_system_suspend+0x3d0>)
 80124a0:	6013      	str	r3, [r2, #0]
#ifdef TX_ENABLE_EVENT_TRACE

            /* Check that the event time stamp is unchanged.  A different
               timestamp means that a later event wrote over the thread
               suspend event. In that case, do nothing here.  */
            if (entry_ptr != TX_NULL)
 80124a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d00a      	beq.n	80124be <_tx_thread_system_suspend+0x2fe>
            {

                /* Is the timestamp the same?  */
                if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 80124a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80124aa:	68db      	ldr	r3, [r3, #12]
 80124ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d104      	bne.n	80124be <_tx_thread_system_suspend+0x2fe>
                {

                    /* Timestamp is the same, set the "next thread pointer" to the new value of the
                       next thread to execute. This can be used by the trace analysis tool to keep
                       track of next thread execution.  */
                    entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 80124b4:	4b36      	ldr	r3, [pc, #216]	@ (8012590 <_tx_thread_system_suspend+0x3d0>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	461a      	mov	r2, r3
 80124ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80124bc:	61da      	str	r2, [r3, #28]
 80124be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80124c0:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80124c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124c4:	f383 8810 	msr	PRIMASK, r3
}
 80124c8:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80124ca:	4b33      	ldr	r3, [pc, #204]	@ (8012598 <_tx_thread_system_suspend+0x3d8>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	65bb      	str	r3, [r7, #88]	@ 0x58
            if (combined_flags == ((ULONG) 0))
 80124d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d153      	bne.n	801257e <_tx_thread_system_suspend+0x3be>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80124d6:	4b31      	ldr	r3, [pc, #196]	@ (801259c <_tx_thread_system_suspend+0x3dc>)
 80124d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124dc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80124de:	f3ef 8305 	mrs	r3, IPSR
 80124e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 80124e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (_tx_ipsr_get() == 0)
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d10c      	bne.n	8012504 <_tx_thread_system_suspend+0x344>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80124ea:	f3ef 8310 	mrs	r3, PRIMASK
 80124ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 80124f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 80124f2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80124f4:	b662      	cpsie	i
}
 80124f6:	bf00      	nop
 80124f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124fa:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80124fc:	6a3b      	ldr	r3, [r7, #32]
 80124fe:	f383 8810 	msr	PRIMASK, r3
}
 8012502:	bf00      	nop
}
 8012504:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8012506:	e03a      	b.n	801257e <_tx_thread_system_suspend+0x3be>
#ifdef TX_ENABLE_EVENT_TRACE

         /* Check that the event time stamp is unchanged.  A different
            timestamp means that a later event wrote over the thread
            suspend event. In that case, do nothing here.  */
         if (entry_ptr != TX_NULL)
 8012508:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801250a:	2b00      	cmp	r3, #0
 801250c:	d00a      	beq.n	8012524 <_tx_thread_system_suspend+0x364>
         {

            /* Is the timestamp the same?  */
            if (time_stamp == entry_ptr -> tx_trace_buffer_entry_time_stamp)
 801250e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012510:	68db      	ldr	r3, [r3, #12]
 8012512:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8012516:	429a      	cmp	r2, r3
 8012518:	d104      	bne.n	8012524 <_tx_thread_system_suspend+0x364>
                   next thread to execute. This can be used by the trace analysis tool to keep
                   track of next thread execution.  */
#ifdef TX_MISRA_ENABLE
                entry_ptr -> tx_trace_buffer_entry_info_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
#else
                entry_ptr -> tx_trace_buffer_entry_information_field_4 =  TX_POINTER_TO_ULONG_CONVERT(_tx_thread_execute_ptr);
 801251a:	4b1d      	ldr	r3, [pc, #116]	@ (8012590 <_tx_thread_system_suspend+0x3d0>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	461a      	mov	r2, r3
 8012520:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012522:	61da      	str	r2, [r3, #28]
 8012524:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012526:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012528:	69fb      	ldr	r3, [r7, #28]
 801252a:	f383 8810 	msr	PRIMASK, r3
}
 801252e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8012530:	4b17      	ldr	r3, [pc, #92]	@ (8012590 <_tx_thread_system_suspend+0x3d0>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012538:	429a      	cmp	r2, r3
 801253a:	d022      	beq.n	8012582 <_tx_thread_system_suspend+0x3c2>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801253c:	4b16      	ldr	r3, [pc, #88]	@ (8012598 <_tx_thread_system_suspend+0x3d8>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (combined_flags == ((ULONG) 0))
 8012542:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012544:	2b00      	cmp	r3, #0
 8012546:	d11c      	bne.n	8012582 <_tx_thread_system_suspend+0x3c2>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012548:	4b14      	ldr	r3, [pc, #80]	@ (801259c <_tx_thread_system_suspend+0x3dc>)
 801254a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801254e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012550:	f3ef 8305 	mrs	r3, IPSR
 8012554:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012556:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8012558:	2b00      	cmp	r3, #0
 801255a:	d10c      	bne.n	8012576 <_tx_thread_system_suspend+0x3b6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801255c:	f3ef 8310 	mrs	r3, PRIMASK
 8012560:	617b      	str	r3, [r7, #20]
    return(posture);
 8012562:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8012564:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012566:	b662      	cpsie	i
}
 8012568:	bf00      	nop
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	f383 8810 	msr	PRIMASK, r3
}
 8012574:	bf00      	nop
}
 8012576:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8012578:	e003      	b.n	8012582 <_tx_thread_system_suspend+0x3c2>
                return;
 801257a:	bf00      	nop
 801257c:	e002      	b.n	8012584 <_tx_thread_system_suspend+0x3c4>
            return;
 801257e:	bf00      	nop
 8012580:	e000      	b.n	8012584 <_tx_thread_system_suspend+0x3c4>
    return;
 8012582:	bf00      	nop
}
 8012584:	3790      	adds	r7, #144	@ 0x90
 8012586:	46bd      	mov	sp, r7
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop
 801258c:	20006c80 	.word	0x20006c80
 8012590:	20006c70 	.word	0x20006c70
 8012594:	20006c84 	.word	0x20006c84
 8012598:	20006d04 	.word	0x20006d04
 801259c:	e000ed04 	.word	0xe000ed04

080125a0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b08e      	sub	sp, #56	@ 0x38
 80125a4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80125a6:	4b5f      	ldr	r3, [pc, #380]	@ (8012724 <_tx_thread_time_slice+0x184>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80125ac:	f3ef 8310 	mrs	r3, PRIMASK
 80125b0:	61bb      	str	r3, [r7, #24]
    return(posture);
 80125b2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80125b4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80125b6:	b672      	cpsid	i
    return(int_posture);
 80125b8:	697b      	ldr	r3, [r7, #20]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80125ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80125bc:	4b5a      	ldr	r3, [pc, #360]	@ (8012728 <_tx_thread_time_slice+0x188>)
 80125be:	2200      	movs	r2, #0
 80125c0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d024      	beq.n	8012612 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d120      	bne.n	8012612 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	69d2      	ldr	r2, [r2, #28]
 80125d6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	699b      	ldr	r3, [r3, #24]
 80125dc:	4a53      	ldr	r2, [pc, #332]	@ (801272c <_tx_thread_time_slice+0x18c>)
 80125de:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	6a1a      	ldr	r2, [r3, #32]
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d013      	beq.n	8012612 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d10d      	bne.n	8012612 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125fc:	6a12      	ldr	r2, [r2, #32]
 80125fe:	494c      	ldr	r1, [pc, #304]	@ (8012730 <_tx_thread_time_slice+0x190>)
 8012600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012604:	4b4b      	ldr	r3, [pc, #300]	@ (8012734 <_tx_thread_time_slice+0x194>)
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	4a49      	ldr	r2, [pc, #292]	@ (8012730 <_tx_thread_time_slice+0x190>)
 801260a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801260e:	4a4a      	ldr	r2, [pc, #296]	@ (8012738 <_tx_thread_time_slice+0x198>)
 8012610:	6013      	str	r3, [r2, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012612:	f3ef 8305 	mrs	r3, IPSR
 8012616:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012618:	693a      	ldr	r2, [r7, #16]
    }

#ifdef TX_ENABLE_EVENT_TRACE

    /* Pickup the volatile information.  */
    system_state =  TX_THREAD_GET_SYSTEM_STATE();
 801261a:	4b48      	ldr	r3, [pc, #288]	@ (801273c <_tx_thread_time_slice+0x19c>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	4313      	orrs	r3, r2
 8012620:	62bb      	str	r3, [r7, #40]	@ 0x28
    preempt_disable =  _tx_thread_preempt_disable;
 8012622:	4b47      	ldr	r3, [pc, #284]	@ (8012740 <_tx_thread_time_slice+0x1a0>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Insert this event into the trace buffer.  */
    TX_TRACE_IN_LINE_INSERT(TX_TRACE_TIME_SLICE, _tx_thread_execute_ptr, system_state, preempt_disable, TX_POINTER_TO_ULONG_CONVERT(&thread_ptr), TX_TRACE_INTERNAL_EVENTS)
 8012628:	4b46      	ldr	r3, [pc, #280]	@ (8012744 <_tx_thread_time_slice+0x1a4>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	623b      	str	r3, [r7, #32]
 801262e:	6a3b      	ldr	r3, [r7, #32]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d06d      	beq.n	8012710 <_tx_thread_time_slice+0x170>
 8012634:	4b44      	ldr	r3, [pc, #272]	@ (8012748 <_tx_thread_time_slice+0x1a8>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	f003 0301 	and.w	r3, r3, #1
 801263c:	2b00      	cmp	r3, #0
 801263e:	d067      	beq.n	8012710 <_tx_thread_time_slice+0x170>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012640:	f3ef 8305 	mrs	r3, IPSR
 8012644:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8012646:	68fa      	ldr	r2, [r7, #12]
 8012648:	4b3c      	ldr	r3, [pc, #240]	@ (801273c <_tx_thread_time_slice+0x19c>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	4313      	orrs	r3, r2
 801264e:	61fb      	str	r3, [r7, #28]
 8012650:	4b34      	ldr	r3, [pc, #208]	@ (8012724 <_tx_thread_time_slice+0x184>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	633b      	str	r3, [r7, #48]	@ 0x30
 8012656:	69fb      	ldr	r3, [r7, #28]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d10b      	bne.n	8012674 <_tx_thread_time_slice+0xd4>
 801265c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012660:	637b      	str	r3, [r7, #52]	@ 0x34
 8012662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012666:	041a      	lsls	r2, r3, #16
 8012668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801266a:	4313      	orrs	r3, r2
 801266c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012670:	637b      	str	r3, [r7, #52]	@ 0x34
 8012672:	e00e      	b.n	8012692 <_tx_thread_time_slice+0xf2>
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 801267a:	d205      	bcs.n	8012688 <_tx_thread_time_slice+0xe8>
 801267c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801267e:	637b      	str	r3, [r7, #52]	@ 0x34
 8012680:	f04f 33ff 	mov.w	r3, #4294967295
 8012684:	633b      	str	r3, [r7, #48]	@ 0x30
 8012686:	e004      	b.n	8012692 <_tx_thread_time_slice+0xf2>
 8012688:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 801268c:	633b      	str	r3, [r7, #48]	@ 0x30
 801268e:	2300      	movs	r3, #0
 8012690:	637b      	str	r3, [r7, #52]	@ 0x34
 8012692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012694:	6a3b      	ldr	r3, [r7, #32]
 8012696:	601a      	str	r2, [r3, #0]
 8012698:	6a3b      	ldr	r3, [r7, #32]
 801269a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801269c:	605a      	str	r2, [r3, #4]
 801269e:	6a3b      	ldr	r3, [r7, #32]
 80126a0:	2205      	movs	r2, #5
 80126a2:	609a      	str	r2, [r3, #8]
 80126a4:	4b29      	ldr	r3, [pc, #164]	@ (801274c <_tx_thread_time_slice+0x1ac>)
 80126a6:	681a      	ldr	r2, [r3, #0]
 80126a8:	6a3b      	ldr	r3, [r7, #32]
 80126aa:	60da      	str	r2, [r3, #12]
 80126ac:	4b22      	ldr	r3, [pc, #136]	@ (8012738 <_tx_thread_time_slice+0x198>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	461a      	mov	r2, r3
 80126b2:	6a3b      	ldr	r3, [r7, #32]
 80126b4:	611a      	str	r2, [r3, #16]
 80126b6:	6a3b      	ldr	r3, [r7, #32]
 80126b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80126ba:	615a      	str	r2, [r3, #20]
 80126bc:	6a3b      	ldr	r3, [r7, #32]
 80126be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126c0:	619a      	str	r2, [r3, #24]
 80126c2:	1d3a      	adds	r2, r7, #4
 80126c4:	6a3b      	ldr	r3, [r7, #32]
 80126c6:	61da      	str	r2, [r3, #28]
 80126c8:	6a3b      	ldr	r3, [r7, #32]
 80126ca:	3320      	adds	r3, #32
 80126cc:	623b      	str	r3, [r7, #32]
 80126ce:	4b20      	ldr	r3, [pc, #128]	@ (8012750 <_tx_thread_time_slice+0x1b0>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	6a3a      	ldr	r2, [r7, #32]
 80126d4:	429a      	cmp	r2, r3
 80126d6:	d314      	bcc.n	8012702 <_tx_thread_time_slice+0x162>
 80126d8:	4b1e      	ldr	r3, [pc, #120]	@ (8012754 <_tx_thread_time_slice+0x1b4>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	623b      	str	r3, [r7, #32]
 80126de:	4a19      	ldr	r2, [pc, #100]	@ (8012744 <_tx_thread_time_slice+0x1a4>)
 80126e0:	6a3b      	ldr	r3, [r7, #32]
 80126e2:	6013      	str	r3, [r2, #0]
 80126e4:	4b1c      	ldr	r3, [pc, #112]	@ (8012758 <_tx_thread_time_slice+0x1b8>)
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	6a3a      	ldr	r2, [r7, #32]
 80126ea:	621a      	str	r2, [r3, #32]
 80126ec:	4b1b      	ldr	r3, [pc, #108]	@ (801275c <_tx_thread_time_slice+0x1bc>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d00d      	beq.n	8012710 <_tx_thread_time_slice+0x170>
 80126f4:	4b19      	ldr	r3, [pc, #100]	@ (801275c <_tx_thread_time_slice+0x1bc>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	4a17      	ldr	r2, [pc, #92]	@ (8012758 <_tx_thread_time_slice+0x1b8>)
 80126fa:	6812      	ldr	r2, [r2, #0]
 80126fc:	4610      	mov	r0, r2
 80126fe:	4798      	blx	r3
 8012700:	e006      	b.n	8012710 <_tx_thread_time_slice+0x170>
 8012702:	4a10      	ldr	r2, [pc, #64]	@ (8012744 <_tx_thread_time_slice+0x1a4>)
 8012704:	6a3b      	ldr	r3, [r7, #32]
 8012706:	6013      	str	r3, [r2, #0]
 8012708:	4b13      	ldr	r3, [pc, #76]	@ (8012758 <_tx_thread_time_slice+0x1b8>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	6a3a      	ldr	r2, [r7, #32]
 801270e:	621a      	str	r2, [r3, #32]
 8012710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012712:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	f383 8810 	msr	PRIMASK, r3
}
 801271a:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 801271c:	bf00      	nop
 801271e:	3738      	adds	r7, #56	@ 0x38
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}
 8012724:	20006c6c 	.word	0x20006c6c
 8012728:	20006d14 	.word	0x20006d14
 801272c:	20007270 	.word	0x20007270
 8012730:	20006c84 	.word	0x20006c84
 8012734:	20006c80 	.word	0x20006c80
 8012738:	20006c70 	.word	0x20006c70
 801273c:	2000017c 	.word	0x2000017c
 8012740:	20006d04 	.word	0x20006d04
 8012744:	20007288 	.word	0x20007288
 8012748:	2000728c 	.word	0x2000728c
 801274c:	e0001004 	.word	0xe0001004
 8012750:	20007284 	.word	0x20007284
 8012754:	20007280 	.word	0x20007280
 8012758:	20007274 	.word	0x20007274
 801275c:	20007290 	.word	0x20007290

08012760 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b08a      	sub	sp, #40	@ 0x28
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801276c:	f3ef 8310 	mrs	r3, PRIMASK
 8012770:	617b      	str	r3, [r7, #20]
    return(posture);
 8012772:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012774:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012776:	b672      	cpsid	i
    return(int_posture);
 8012778:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 801277a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 801277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801277e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012780:	2b04      	cmp	r3, #4
 8012782:	d10e      	bne.n	80127a2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8012784:	4b13      	ldr	r3, [pc, #76]	@ (80127d4 <_tx_thread_timeout+0x74>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	3301      	adds	r3, #1
 801278a:	4a12      	ldr	r2, [pc, #72]	@ (80127d4 <_tx_thread_timeout+0x74>)
 801278c:	6013      	str	r3, [r2, #0]
 801278e:	6a3b      	ldr	r3, [r7, #32]
 8012790:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	f383 8810 	msr	PRIMASK, r3
}
 8012798:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 801279a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801279c:	f7ff fb56 	bl	8011e4c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80127a0:	e013      	b.n	80127ca <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80127a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80127a6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80127a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80127ae:	61bb      	str	r3, [r7, #24]
 80127b0:	6a3b      	ldr	r3, [r7, #32]
 80127b2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	f383 8810 	msr	PRIMASK, r3
}
 80127ba:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d003      	beq.n	80127ca <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80127c2:	69fb      	ldr	r3, [r7, #28]
 80127c4:	69b9      	ldr	r1, [r7, #24]
 80127c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80127c8:	4798      	blx	r3
}
 80127ca:	bf00      	nop
 80127cc:	3728      	adds	r7, #40	@ 0x28
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	20006d04 	.word	0x20006d04

080127d8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80127de:	f3ef 8310 	mrs	r3, PRIMASK
 80127e2:	607b      	str	r3, [r7, #4]
    return(posture);
 80127e4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80127e6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80127e8:	b672      	cpsid	i
    return(int_posture);
 80127ea:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80127ec:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80127ee:	4b09      	ldr	r3, [pc, #36]	@ (8012814 <_tx_timer_expiration_process+0x3c>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	3301      	adds	r3, #1
 80127f4:	4a07      	ldr	r2, [pc, #28]	@ (8012814 <_tx_timer_expiration_process+0x3c>)
 80127f6:	6013      	str	r3, [r2, #0]
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	f383 8810 	msr	PRIMASK, r3
}
 8012802:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8012804:	4804      	ldr	r0, [pc, #16]	@ (8012818 <_tx_timer_expiration_process+0x40>)
 8012806:	f7ff fb21 	bl	8011e4c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801280a:	bf00      	nop
 801280c:	3710      	adds	r7, #16
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	20006d04 	.word	0x20006d04
 8012818:	20006db4 	.word	0x20006db4

0801281c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 801281c:	b590      	push	{r4, r7, lr}
 801281e:	b089      	sub	sp, #36	@ 0x24
 8012820:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8012822:	4b28      	ldr	r3, [pc, #160]	@ (80128c4 <_tx_timer_initialize+0xa8>)
 8012824:	2200      	movs	r2, #0
 8012826:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8012828:	4b27      	ldr	r3, [pc, #156]	@ (80128c8 <_tx_timer_initialize+0xac>)
 801282a:	2200      	movs	r2, #0
 801282c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801282e:	4b27      	ldr	r3, [pc, #156]	@ (80128cc <_tx_timer_initialize+0xb0>)
 8012830:	2200      	movs	r2, #0
 8012832:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8012834:	4b26      	ldr	r3, [pc, #152]	@ (80128d0 <_tx_timer_initialize+0xb4>)
 8012836:	2200      	movs	r2, #0
 8012838:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801283a:	4b26      	ldr	r3, [pc, #152]	@ (80128d4 <_tx_timer_initialize+0xb8>)
 801283c:	2200      	movs	r2, #0
 801283e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8012840:	2280      	movs	r2, #128	@ 0x80
 8012842:	2100      	movs	r1, #0
 8012844:	4824      	ldr	r0, [pc, #144]	@ (80128d8 <_tx_timer_initialize+0xbc>)
 8012846:	f001 f819 	bl	801387c <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 801284a:	4b24      	ldr	r3, [pc, #144]	@ (80128dc <_tx_timer_initialize+0xc0>)
 801284c:	4a22      	ldr	r2, [pc, #136]	@ (80128d8 <_tx_timer_initialize+0xbc>)
 801284e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8012850:	4b23      	ldr	r3, [pc, #140]	@ (80128e0 <_tx_timer_initialize+0xc4>)
 8012852:	4a21      	ldr	r2, [pc, #132]	@ (80128d8 <_tx_timer_initialize+0xbc>)
 8012854:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8012856:	4b23      	ldr	r3, [pc, #140]	@ (80128e4 <_tx_timer_initialize+0xc8>)
 8012858:	4a23      	ldr	r2, [pc, #140]	@ (80128e8 <_tx_timer_initialize+0xcc>)
 801285a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 801285c:	4b21      	ldr	r3, [pc, #132]	@ (80128e4 <_tx_timer_initialize+0xc8>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	3304      	adds	r3, #4
 8012862:	4a20      	ldr	r2, [pc, #128]	@ (80128e4 <_tx_timer_initialize+0xc8>)
 8012864:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8012866:	4b21      	ldr	r3, [pc, #132]	@ (80128ec <_tx_timer_initialize+0xd0>)
 8012868:	4a21      	ldr	r2, [pc, #132]	@ (80128f0 <_tx_timer_initialize+0xd4>)
 801286a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 801286c:	4b21      	ldr	r3, [pc, #132]	@ (80128f4 <_tx_timer_initialize+0xd8>)
 801286e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012872:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8012874:	4b20      	ldr	r3, [pc, #128]	@ (80128f8 <_tx_timer_initialize+0xdc>)
 8012876:	2200      	movs	r2, #0
 8012878:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 801287a:	4b1c      	ldr	r3, [pc, #112]	@ (80128ec <_tx_timer_initialize+0xd0>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	4a1d      	ldr	r2, [pc, #116]	@ (80128f4 <_tx_timer_initialize+0xd8>)
 8012880:	6812      	ldr	r2, [r2, #0]
 8012882:	491d      	ldr	r1, [pc, #116]	@ (80128f8 <_tx_timer_initialize+0xdc>)
 8012884:	6809      	ldr	r1, [r1, #0]
 8012886:	481c      	ldr	r0, [pc, #112]	@ (80128f8 <_tx_timer_initialize+0xdc>)
 8012888:	6800      	ldr	r0, [r0, #0]
 801288a:	2400      	movs	r4, #0
 801288c:	9405      	str	r4, [sp, #20]
 801288e:	2400      	movs	r4, #0
 8012890:	9404      	str	r4, [sp, #16]
 8012892:	9003      	str	r0, [sp, #12]
 8012894:	9102      	str	r1, [sp, #8]
 8012896:	9201      	str	r2, [sp, #4]
 8012898:	9300      	str	r3, [sp, #0]
 801289a:	4b18      	ldr	r3, [pc, #96]	@ (80128fc <_tx_timer_initialize+0xe0>)
 801289c:	4a18      	ldr	r2, [pc, #96]	@ (8012900 <_tx_timer_initialize+0xe4>)
 801289e:	4919      	ldr	r1, [pc, #100]	@ (8012904 <_tx_timer_initialize+0xe8>)
 80128a0:	4819      	ldr	r0, [pc, #100]	@ (8012908 <_tx_timer_initialize+0xec>)
 80128a2:	f7fe fe99 	bl	80115d8 <_tx_thread_create>
 80128a6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d1e5      	bne.n	801287a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80128ae:	4b17      	ldr	r3, [pc, #92]	@ (801290c <_tx_timer_initialize+0xf0>)
 80128b0:	2200      	movs	r2, #0
 80128b2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80128b4:	4b16      	ldr	r3, [pc, #88]	@ (8012910 <_tx_timer_initialize+0xf4>)
 80128b6:	2200      	movs	r2, #0
 80128b8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80128ba:	bf00      	nop
 80128bc:	370c      	adds	r7, #12
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd90      	pop	{r4, r7, pc}
 80128c2:	bf00      	nop
 80128c4:	20006d10 	.word	0x20006d10
 80128c8:	20007270 	.word	0x20007270
 80128cc:	20006d14 	.word	0x20006d14
 80128d0:	20006da4 	.word	0x20006da4
 80128d4:	20006db0 	.word	0x20006db0
 80128d8:	20006d18 	.word	0x20006d18
 80128dc:	20006d98 	.word	0x20006d98
 80128e0:	20006da0 	.word	0x20006da0
 80128e4:	20006d9c 	.word	0x20006d9c
 80128e8:	20006d94 	.word	0x20006d94
 80128ec:	20006e64 	.word	0x20006e64
 80128f0:	20006e70 	.word	0x20006e70
 80128f4:	20006e68 	.word	0x20006e68
 80128f8:	20006e6c 	.word	0x20006e6c
 80128fc:	4154494d 	.word	0x4154494d
 8012900:	08012a49 	.word	0x08012a49
 8012904:	080149fc 	.word	0x080149fc
 8012908:	20006db4 	.word	0x20006db4
 801290c:	20006da8 	.word	0x20006da8
 8012910:	20006dac 	.word	0x20006dac

08012914 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012914:	b480      	push	{r7}
 8012916:	b089      	sub	sp, #36	@ 0x24
 8012918:	af00      	add	r7, sp, #0
 801291a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8012922:	697b      	ldr	r3, [r7, #20]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d04a      	beq.n	80129be <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801292e:	d046      	beq.n	80129be <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	699b      	ldr	r3, [r3, #24]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d142      	bne.n	80129be <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	2b20      	cmp	r3, #32
 801293c:	d902      	bls.n	8012944 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801293e:	231f      	movs	r3, #31
 8012940:	61bb      	str	r3, [r7, #24]
 8012942:	e002      	b.n	801294a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	3b01      	subs	r3, #1
 8012948:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 801294a:	4b20      	ldr	r3, [pc, #128]	@ (80129cc <_tx_timer_system_activate+0xb8>)
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	009b      	lsls	r3, r3, #2
 8012952:	4413      	add	r3, r2
 8012954:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8012956:	4b1e      	ldr	r3, [pc, #120]	@ (80129d0 <_tx_timer_system_activate+0xbc>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	69fa      	ldr	r2, [r7, #28]
 801295c:	429a      	cmp	r2, r3
 801295e:	d30b      	bcc.n	8012978 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8012960:	4b1b      	ldr	r3, [pc, #108]	@ (80129d0 <_tx_timer_system_activate+0xbc>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	69fa      	ldr	r2, [r7, #28]
 8012966:	1ad3      	subs	r3, r2, r3
 8012968:	109b      	asrs	r3, r3, #2
 801296a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 801296c:	4b19      	ldr	r3, [pc, #100]	@ (80129d4 <_tx_timer_system_activate+0xc0>)
 801296e:	681a      	ldr	r2, [r3, #0]
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	009b      	lsls	r3, r3, #2
 8012974:	4413      	add	r3, r2
 8012976:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d109      	bne.n	8012994 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	687a      	ldr	r2, [r7, #4]
 801298a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 801298c:	69fb      	ldr	r3, [r7, #28]
 801298e:	687a      	ldr	r2, [r7, #4]
 8012990:	601a      	str	r2, [r3, #0]
 8012992:	e011      	b.n	80129b8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	695b      	ldr	r3, [r3, #20]
 801299e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	687a      	ldr	r2, [r7, #4]
 80129a4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	687a      	ldr	r2, [r7, #4]
 80129aa:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	68fa      	ldr	r2, [r7, #12]
 80129b0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	68ba      	ldr	r2, [r7, #8]
 80129b6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	69fa      	ldr	r2, [r7, #28]
 80129bc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80129be:	bf00      	nop
 80129c0:	3724      	adds	r7, #36	@ 0x24
 80129c2:	46bd      	mov	sp, r7
 80129c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c8:	4770      	bx	lr
 80129ca:	bf00      	nop
 80129cc:	20006da0 	.word	0x20006da0
 80129d0:	20006d9c 	.word	0x20006d9c
 80129d4:	20006d98 	.word	0x20006d98

080129d8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80129d8:	b480      	push	{r7}
 80129da:	b087      	sub	sp, #28
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	699b      	ldr	r3, [r3, #24]
 80129e4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d026      	beq.n	8012a3a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	691b      	ldr	r3, [r3, #16]
 80129f0:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80129f2:	687a      	ldr	r2, [r7, #4]
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d108      	bne.n	8012a0c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d117      	bne.n	8012a34 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	2200      	movs	r2, #0
 8012a08:	601a      	str	r2, [r3, #0]
 8012a0a:	e013      	b.n	8012a34 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	695b      	ldr	r3, [r3, #20]
 8012a10:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	68fa      	ldr	r2, [r7, #12]
 8012a16:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	693a      	ldr	r2, [r7, #16]
 8012a1c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	687a      	ldr	r2, [r7, #4]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d105      	bne.n	8012a34 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	697a      	ldr	r2, [r7, #20]
 8012a2c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	693a      	ldr	r2, [r7, #16]
 8012a32:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2200      	movs	r2, #0
 8012a38:	619a      	str	r2, [r3, #24]
    }
}
 8012a3a:	bf00      	nop
 8012a3c:	371c      	adds	r7, #28
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a44:	4770      	bx	lr
	...

08012a48 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b098      	sub	sp, #96	@ 0x60
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8012a50:	2300      	movs	r3, #0
 8012a52:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	4a73      	ldr	r2, [pc, #460]	@ (8012c24 <_tx_timer_thread_entry+0x1dc>)
 8012a58:	4293      	cmp	r3, r2
 8012a5a:	f040 80de 	bne.w	8012c1a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8012a62:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8012a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8012a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8012a68:	b672      	cpsid	i
    return(int_posture);
 8012a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8012a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8012a6e:	4b6e      	ldr	r3, [pc, #440]	@ (8012c28 <_tx_timer_thread_entry+0x1e0>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d003      	beq.n	8012a84 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	f107 020c 	add.w	r2, r7, #12
 8012a82:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8012a84:	4b68      	ldr	r3, [pc, #416]	@ (8012c28 <_tx_timer_thread_entry+0x1e0>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8012a8c:	4b66      	ldr	r3, [pc, #408]	@ (8012c28 <_tx_timer_thread_entry+0x1e0>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	3304      	adds	r3, #4
 8012a92:	4a65      	ldr	r2, [pc, #404]	@ (8012c28 <_tx_timer_thread_entry+0x1e0>)
 8012a94:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8012a96:	4b64      	ldr	r3, [pc, #400]	@ (8012c28 <_tx_timer_thread_entry+0x1e0>)
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	4b64      	ldr	r3, [pc, #400]	@ (8012c2c <_tx_timer_thread_entry+0x1e4>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d103      	bne.n	8012aaa <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8012aa2:	4b63      	ldr	r3, [pc, #396]	@ (8012c30 <_tx_timer_thread_entry+0x1e8>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	4a60      	ldr	r2, [pc, #384]	@ (8012c28 <_tx_timer_thread_entry+0x1e0>)
 8012aa8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8012aaa:	4b62      	ldr	r3, [pc, #392]	@ (8012c34 <_tx_timer_thread_entry+0x1ec>)
 8012aac:	2200      	movs	r2, #0
 8012aae:	601a      	str	r2, [r3, #0]
 8012ab0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ab2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ab6:	f383 8810 	msr	PRIMASK, r3
}
 8012aba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012abc:	f3ef 8310 	mrs	r3, PRIMASK
 8012ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8012ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8012ac4:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ac6:	b672      	cpsid	i
    return(int_posture);
 8012ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8012aca:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8012acc:	e07f      	b.n	8012bce <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	691b      	ldr	r3, [r3, #16]
 8012ad6:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8012adc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d102      	bne.n	8012aea <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	60fb      	str	r3, [r7, #12]
 8012ae8:	e00e      	b.n	8012b08 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8012aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012aec:	695b      	ldr	r3, [r3, #20]
 8012aee:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012af2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012af4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012af8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012afa:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8012afc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012afe:	f107 020c 	add.w	r2, r7, #12
 8012b02:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8012b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012b06:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8012b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	2b20      	cmp	r3, #32
 8012b0e:	d911      	bls.n	8012b34 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8012b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8012b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b1a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b22:	f107 0208 	add.w	r2, r7, #8
 8012b26:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8012b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012b2c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8012b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b30:	60bb      	str	r3, [r7, #8]
 8012b32:	e01a      	b.n	8012b6a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8012b34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b36:	689b      	ldr	r3, [r3, #8]
 8012b38:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8012b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b3c:	68db      	ldr	r3, [r3, #12]
 8012b3e:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8012b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b42:	685a      	ldr	r2, [r3, #4]
 8012b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b46:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8012b48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d009      	beq.n	8012b64 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b52:	f107 0208 	add.w	r2, r7, #8
 8012b56:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8012b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012b5c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8012b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b60:	60bb      	str	r3, [r7, #8]
 8012b62:	e002      	b.n	8012b6a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8012b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b66:	2200      	movs	r2, #0
 8012b68:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8012b6a:	4a33      	ldr	r2, [pc, #204]	@ (8012c38 <_tx_timer_thread_entry+0x1f0>)
 8012b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012b6e:	6013      	str	r3, [r2, #0]
 8012b70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b76:	f383 8810 	msr	PRIMASK, r3
}
 8012b7a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8012b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d002      	beq.n	8012b88 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8012b82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b84:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012b86:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012b88:	f3ef 8310 	mrs	r3, PRIMASK
 8012b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8012b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8012b90:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8012b92:	b672      	cpsid	i
    return(int_posture);
 8012b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012b96:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8012b98:	4b27      	ldr	r3, [pc, #156]	@ (8012c38 <_tx_timer_thread_entry+0x1f0>)
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d105      	bne.n	8012bb2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8012ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ba8:	2200      	movs	r2, #0
 8012baa:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8012bac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8012bae:	f7ff feb1 	bl	8012914 <_tx_timer_system_activate>
 8012bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012bb4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bb6:	69bb      	ldr	r3, [r7, #24]
 8012bb8:	f383 8810 	msr	PRIMASK, r3
}
 8012bbc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8012bc2:	623b      	str	r3, [r7, #32]
    return(posture);
 8012bc4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012bc6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012bc8:	b672      	cpsid	i
    return(int_posture);
 8012bca:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	f47f af7c 	bne.w	8012ace <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8012bd6:	4b17      	ldr	r3, [pc, #92]	@ (8012c34 <_tx_timer_thread_entry+0x1ec>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d116      	bne.n	8012c0c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8012bde:	4b17      	ldr	r3, [pc, #92]	@ (8012c3c <_tx_timer_thread_entry+0x1f4>)
 8012be0:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8012be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012be4:	2203      	movs	r2, #3
 8012be6:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bea:	2201      	movs	r2, #1
 8012bec:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8012bee:	4b14      	ldr	r3, [pc, #80]	@ (8012c40 <_tx_timer_thread_entry+0x1f8>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	4a12      	ldr	r2, [pc, #72]	@ (8012c40 <_tx_timer_thread_entry+0x1f8>)
 8012bf6:	6013      	str	r3, [r2, #0]
 8012bf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012bfa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	f383 8810 	msr	PRIMASK, r3
}
 8012c02:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012c04:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8012c06:	f7ff fadb 	bl	80121c0 <_tx_thread_system_suspend>
 8012c0a:	e728      	b.n	8012a5e <_tx_timer_thread_entry+0x16>
 8012c0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c0e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012c10:	693b      	ldr	r3, [r7, #16]
 8012c12:	f383 8810 	msr	PRIMASK, r3
}
 8012c16:	bf00      	nop
            TX_DISABLE
 8012c18:	e721      	b.n	8012a5e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8012c1a:	bf00      	nop
 8012c1c:	3760      	adds	r7, #96	@ 0x60
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	4154494d 	.word	0x4154494d
 8012c28:	20006da0 	.word	0x20006da0
 8012c2c:	20006d9c 	.word	0x20006d9c
 8012c30:	20006d98 	.word	0x20006d98
 8012c34:	20006da4 	.word	0x20006da4
 8012c38:	20006db0 	.word	0x20006db0
 8012c3c:	20006db4 	.word	0x20006db4
 8012c40:	20006d04 	.word	0x20006d04

08012c44 <_tx_trace_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_trace_enable(VOID *trace_buffer_start, ULONG trace_buffer_size, ULONG registry_entries)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b0a6      	sub	sp, #152	@ 0x98
 8012c48:	af02      	add	r7, sp, #8
 8012c4a:	60f8      	str	r0, [r7, #12]
 8012c4c:	60b9      	str	r1, [r7, #8]
 8012c4e:	607a      	str	r2, [r7, #4]
UINT                            status;


    /* First, see if there is enough room for the control header, the registry entries, and at least one event in
       memory supplied to this call.  */
    if (trace_buffer_size < ((sizeof(TX_TRACE_HEADER)) + ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entries) + (sizeof(TX_TRACE_BUFFER_ENTRY))))
 8012c50:	687a      	ldr	r2, [r7, #4]
 8012c52:	4613      	mov	r3, r2
 8012c54:	005b      	lsls	r3, r3, #1
 8012c56:	4413      	add	r3, r2
 8012c58:	011b      	lsls	r3, r3, #4
 8012c5a:	3350      	adds	r3, #80	@ 0x50
 8012c5c:	68ba      	ldr	r2, [r7, #8]
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d202      	bcs.n	8012c68 <_tx_trace_enable+0x24>
    {

        /* No, the memory isn't big enough to hold one trace buffer entry.  Return an error.  */
        status =  TX_SIZE_ERROR;
 8012c62:	2305      	movs	r3, #5
 8012c64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012c66:	e30a      	b.n	801327e <_tx_trace_enable+0x63a>
    }

    /* Determine if trace is already enabled.  */
    else if (_tx_trace_buffer_current_ptr != TX_NULL)
 8012c68:	4b8f      	ldr	r3, [pc, #572]	@ (8012ea8 <_tx_trace_enable+0x264>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d002      	beq.n	8012c76 <_tx_trace_enable+0x32>
    {

        /* Yes, trace is already enabled.  */
        status =  TX_NOT_DONE;
 8012c70:	2320      	movs	r3, #32
 8012c72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012c74:	e303      	b.n	801327e <_tx_trace_enable+0x63a>
    }
    else
    {

        /* Set the enable bits for all events enabled.  */
        _tx_trace_event_enable_bits =  0xFFFFFFFFUL;
 8012c76:	4b8d      	ldr	r3, [pc, #564]	@ (8012eac <_tx_trace_enable+0x268>)
 8012c78:	f04f 32ff 	mov.w	r2, #4294967295
 8012c7c:	601a      	str	r2, [r3, #0]

        /* Setup working pointer to the supplied memory.  */
        work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(trace_buffer_start);
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Setup pointer to the trace control area.  */
        _tx_trace_header_ptr =  TX_UCHAR_TO_HEADER_POINTER_CONVERT(work_ptr);
 8012c82:	4a8b      	ldr	r2, [pc, #556]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c86:	6013      	str	r3, [r2, #0]

        /* Move the working pointer past the control area.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_HEADER)));
 8012c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c8a:	3330      	adds	r3, #48	@ 0x30
 8012c8c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Save the start of the trace object registry.  */
        _tx_trace_registry_start_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8012c8e:	4a89      	ldr	r2, [pc, #548]	@ (8012eb4 <_tx_trace_enable+0x270>)
 8012c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c92:	6013      	str	r3, [r2, #0]

        /* Setup the end of the trace object registry.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*registry_entries);
 8012c94:	687a      	ldr	r2, [r7, #4]
 8012c96:	4613      	mov	r3, r2
 8012c98:	005b      	lsls	r3, r3, #1
 8012c9a:	4413      	add	r3, r2
 8012c9c:	011b      	lsls	r3, r3, #4
 8012c9e:	461a      	mov	r2, r3
 8012ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ca2:	4413      	add	r3, r2
 8012ca4:	657b      	str	r3, [r7, #84]	@ 0x54
        _tx_trace_registry_end_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8012ca6:	4a84      	ldr	r2, [pc, #528]	@ (8012eb8 <_tx_trace_enable+0x274>)
 8012ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012caa:	6013      	str	r3, [r2, #0]

        /* Loop to make all trace object registry entries empty and valid.  */
        for (i = ((ULONG) 0); i < registry_entries; i++)
 8012cac:	2300      	movs	r3, #0
 8012cae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012cb0:	e01f      	b.n	8012cf2 <_tx_trace_enable+0xae>
        {

            /* Setup the work pointer.  */
            work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8012cb2:	4b80      	ldr	r3, [pc, #512]	@ (8012eb4 <_tx_trace_enable+0x270>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	657b      	str	r3, [r7, #84]	@ 0x54
            work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(TX_TRACE_OBJECT_ENTRY))*i);
 8012cb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012cba:	4613      	mov	r3, r2
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	4413      	add	r3, r2
 8012cc0:	011b      	lsls	r3, r3, #4
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012cc6:	4413      	add	r3, r2
 8012cc8:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Convert to a registry entry pointer.  */
            entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8012cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ccc:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Initialize object registry entry.  */
            entry_ptr -> tx_trace_object_entry_available =         (UCHAR) TX_TRUE;
 8012cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	701a      	strb	r2, [r3, #0]
            entry_ptr -> tx_trace_object_entry_type =              (UCHAR) TX_TRACE_OBJECT_TYPE_NOT_VALID;
 8012cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	705a      	strb	r2, [r3, #1]
            entry_ptr -> tx_trace_object_entry_reserved1 =         (UCHAR) 0;
 8012cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cdc:	2200      	movs	r2, #0
 8012cde:	709a      	strb	r2, [r3, #2]
            entry_ptr -> tx_trace_object_entry_reserved2 =         (UCHAR) 0;
 8012ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	70da      	strb	r2, [r3, #3]
            entry_ptr -> tx_trace_object_entry_thread_pointer =    (ULONG) 0;
 8012ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ce8:	2200      	movs	r2, #0
 8012cea:	605a      	str	r2, [r3, #4]
        for (i = ((ULONG) 0); i < registry_entries; i++)
 8012cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012cee:	3301      	adds	r3, #1
 8012cf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012cf2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d3db      	bcc.n	8012cb2 <_tx_trace_enable+0x6e>
        }

        /* Setup the total number of registry entries.  */
        _tx_trace_total_registry_entries =  registry_entries;
 8012cfa:	4a70      	ldr	r2, [pc, #448]	@ (8012ebc <_tx_trace_enable+0x278>)
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6013      	str	r3, [r2, #0]

        /* Setup the object registry available count to the total number of registry entries.  */
        _tx_trace_available_registry_entries =  registry_entries;
 8012d00:	4a6f      	ldr	r2, [pc, #444]	@ (8012ec0 <_tx_trace_enable+0x27c>)
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6013      	str	r3, [r2, #0]

        /* Setup the search starting index to the first entry.  */
        _tx_trace_registry_search_start =  ((ULONG) 0);
 8012d06:	4b6f      	ldr	r3, [pc, #444]	@ (8012ec4 <_tx_trace_enable+0x280>)
 8012d08:	2200      	movs	r2, #0
 8012d0a:	601a      	str	r2, [r3, #0]

        /* Setup the work pointer to after the trace object registry.  */
        work_ptr =  TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_end_ptr);
 8012d0c:	4b6a      	ldr	r3, [pc, #424]	@ (8012eb8 <_tx_trace_enable+0x274>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Adjust the remaining trace buffer size.  */
        trace_buffer_size =  trace_buffer_size - ((sizeof(TX_TRACE_OBJECT_ENTRY)) * registry_entries) - (sizeof(TX_TRACE_HEADER));
 8012d12:	687a      	ldr	r2, [r7, #4]
 8012d14:	4613      	mov	r3, r2
 8012d16:	005b      	lsls	r3, r3, #1
 8012d18:	4413      	add	r3, r2
 8012d1a:	011b      	lsls	r3, r3, #4
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	1a9b      	subs	r3, r3, r2
 8012d22:	3b30      	subs	r3, #48	@ 0x30
 8012d24:	60bb      	str	r3, [r7, #8]

        /* Setup pointer to the start of the actual event trace log.  */
        _tx_trace_buffer_start_ptr =      TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8012d26:	4a68      	ldr	r2, [pc, #416]	@ (8012ec8 <_tx_trace_enable+0x284>)
 8012d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d2a:	6013      	str	r3, [r2, #0]

        /* Save the event trace log start address.  */
        event_start_ptr =  work_ptr;
 8012d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d2e:	653b      	str	r3, [r7, #80]	@ 0x50

        /* Calculate the end of the trace buffer.  */
        work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, ((trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY)))*(sizeof(TX_TRACE_BUFFER_ENTRY))));
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	f023 031f 	bic.w	r3, r3, #31
 8012d36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012d38:	4413      	add	r3, r2
 8012d3a:	657b      	str	r3, [r7, #84]	@ 0x54
        _tx_trace_buffer_end_ptr =        TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8012d3c:	4a63      	ldr	r2, [pc, #396]	@ (8012ecc <_tx_trace_enable+0x288>)
 8012d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d40:	6013      	str	r3, [r2, #0]

        /* Loop to mark all entries in the trace buffer as invalid.  */
        for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
 8012d42:	2300      	movs	r3, #0
 8012d44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012d46:	e00c      	b.n	8012d62 <_tx_trace_enable+0x11e>
        {

            /* Setup the work pointer.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(event_start_ptr, (sizeof(TX_TRACE_BUFFER_ENTRY))*i);
 8012d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012d4a:	015b      	lsls	r3, r3, #5
 8012d4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012d4e:	4413      	add	r3, r2
 8012d50:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Convert to a trace event pointer.  */
            event_ptr =  TX_UCHAR_TO_ENTRY_POINTER_CONVERT(work_ptr);
 8012d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d54:	63bb      	str	r3, [r7, #56]	@ 0x38

            /* Mark this trace event as invalid.  */
            event_ptr -> tx_trace_buffer_entry_thread_pointer =  ((ULONG) 0);
 8012d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d58:	2200      	movs	r2, #0
 8012d5a:	601a      	str	r2, [r3, #0]
        for (i = ((ULONG) 0); i < (trace_buffer_size/(sizeof(TX_TRACE_BUFFER_ENTRY))); i++)
 8012d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012d5e:	3301      	adds	r3, #1
 8012d60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	095b      	lsrs	r3, r3, #5
 8012d66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d3ed      	bcc.n	8012d48 <_tx_trace_enable+0x104>
        }

        /* Now, fill in the event trace control header.  */
        _tx_trace_header_ptr -> tx_trace_header_id =                             TX_TRACE_VALID;
 8012d6c:	4b50      	ldr	r3, [pc, #320]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	4a57      	ldr	r2, [pc, #348]	@ (8012ed0 <_tx_trace_enable+0x28c>)
 8012d72:	601a      	str	r2, [r3, #0]
        _tx_trace_header_ptr -> tx_trace_header_timer_valid_mask =               TX_TRACE_TIME_MASK;
 8012d74:	4b4e      	ldr	r3, [pc, #312]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	f04f 32ff 	mov.w	r2, #4294967295
 8012d7c:	605a      	str	r2, [r3, #4]
        _tx_trace_header_ptr -> tx_trace_header_trace_base_address =             TX_POINTER_TO_ULONG_CONVERT(trace_buffer_start);
 8012d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	68fa      	ldr	r2, [r7, #12]
 8012d84:	609a      	str	r2, [r3, #8]
        _tx_trace_header_ptr -> tx_trace_header_registry_start_pointer =         TX_POINTER_TO_ULONG_CONVERT(_tx_trace_registry_start_ptr);
 8012d86:	4b4b      	ldr	r3, [pc, #300]	@ (8012eb4 <_tx_trace_enable+0x270>)
 8012d88:	681a      	ldr	r2, [r3, #0]
 8012d8a:	4b49      	ldr	r3, [pc, #292]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	60da      	str	r2, [r3, #12]
        _tx_trace_header_ptr -> tx_trace_header_reserved1 =                      ((USHORT) 0);
 8012d90:	4b47      	ldr	r3, [pc, #284]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2200      	movs	r2, #0
 8012d96:	821a      	strh	r2, [r3, #16]
        _tx_trace_header_ptr -> tx_trace_header_object_name_size =               ((USHORT) TX_TRACE_OBJECT_REGISTRY_NAME);
 8012d98:	4b45      	ldr	r3, [pc, #276]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	2220      	movs	r2, #32
 8012d9e:	825a      	strh	r2, [r3, #18]
        _tx_trace_header_ptr -> tx_trace_header_registry_end_pointer =           TX_POINTER_TO_ULONG_CONVERT(_tx_trace_registry_end_ptr);
 8012da0:	4b45      	ldr	r3, [pc, #276]	@ (8012eb8 <_tx_trace_enable+0x274>)
 8012da2:	681a      	ldr	r2, [r3, #0]
 8012da4:	4b42      	ldr	r3, [pc, #264]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	615a      	str	r2, [r3, #20]
        _tx_trace_header_ptr -> tx_trace_header_buffer_start_pointer =           TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_start_ptr);
 8012daa:	4b47      	ldr	r3, [pc, #284]	@ (8012ec8 <_tx_trace_enable+0x284>)
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	4b40      	ldr	r3, [pc, #256]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	619a      	str	r2, [r3, #24]
        _tx_trace_header_ptr -> tx_trace_header_buffer_end_pointer =             TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_end_ptr);
 8012db4:	4b45      	ldr	r3, [pc, #276]	@ (8012ecc <_tx_trace_enable+0x288>)
 8012db6:	681a      	ldr	r2, [r3, #0]
 8012db8:	4b3d      	ldr	r3, [pc, #244]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	61da      	str	r2, [r3, #28]
        _tx_trace_header_ptr -> tx_trace_header_buffer_current_pointer =         TX_POINTER_TO_ULONG_CONVERT(_tx_trace_buffer_start_ptr);
 8012dbe:	4b42      	ldr	r3, [pc, #264]	@ (8012ec8 <_tx_trace_enable+0x284>)
 8012dc0:	681a      	ldr	r2, [r3, #0]
 8012dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	621a      	str	r2, [r3, #32]
        _tx_trace_header_ptr -> tx_trace_header_reserved2 =                      0xAAAAAAAAUL;
 8012dc8:	4b39      	ldr	r3, [pc, #228]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8012dd0:	625a      	str	r2, [r3, #36]	@ 0x24
        _tx_trace_header_ptr -> tx_trace_header_reserved3 =                      0xBBBBBBBBUL;
 8012dd2:	4b37      	ldr	r3, [pc, #220]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	f04f 32bb 	mov.w	r2, #3149642683	@ 0xbbbbbbbb
 8012dda:	629a      	str	r2, [r3, #40]	@ 0x28
        _tx_trace_header_ptr -> tx_trace_header_reserved4 =                      0xCCCCCCCCUL;
 8012ddc:	4b34      	ldr	r3, [pc, #208]	@ (8012eb0 <_tx_trace_enable+0x26c>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	f04f 32cc 	mov.w	r2, #3435973836	@ 0xcccccccc
 8012de4:	62da      	str	r2, [r3, #44]	@ 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012de6:	f3ef 8310 	mrs	r3, PRIMASK
 8012dea:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 8012dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 8012dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8012df0:	b672      	cpsid	i
    return(int_posture);
 8012df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Now, loop through all existing ThreadX objects and register them in the newly setup trace buffer.  */

        /* Disable interrupts.  */
        TX_DISABLE
 8012df4:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* First, disable preemption.  */
        _tx_thread_preempt_disable++;
 8012df6:	4b37      	ldr	r3, [pc, #220]	@ (8012ed4 <_tx_trace_enable+0x290>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	4a35      	ldr	r2, [pc, #212]	@ (8012ed4 <_tx_trace_enable+0x290>)
 8012dfe:	6013      	str	r3, [r2, #0]
 8012e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e06:	f383 8810 	msr	PRIMASK, r3
}
 8012e0a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Pickup the first thread and the number of created threads.  */
        thread_ptr =  _tx_thread_created_ptr;
 8012e0c:	4b32      	ldr	r3, [pc, #200]	@ (8012ed8 <_tx_trace_enable+0x294>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        i =           _tx_thread_created_count;
 8012e14:	4b31      	ldr	r3, [pc, #196]	@ (8012edc <_tx_trace_enable+0x298>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all threads.  */
        while (i != ((ULONG) 0))
 8012e1a:	e019      	b.n	8012e50 <_tx_trace_enable+0x20c>
        {

            /* Decrement the counter.  */
            i--;
 8012e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012e1e:	3b01      	subs	r3, #1
 8012e20:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this thread.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name,
 8012e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012e26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                        TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_start), (ULONG) thread_ptr -> tx_thread_stack_size);
 8012e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012e2c:	68db      	ldr	r3, [r3, #12]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name,
 8012e2e:	4619      	mov	r1, r3
                                        TX_POINTER_TO_ULONG_CONVERT(thread_ptr -> tx_thread_stack_start), (ULONG) thread_ptr -> tx_thread_stack_size);
 8012e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012e34:	695b      	ldr	r3, [r3, #20]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_THREAD, thread_ptr, thread_ptr -> tx_thread_name,
 8012e36:	9300      	str	r3, [sp, #0]
 8012e38:	460b      	mov	r3, r1
 8012e3a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8012e3e:	2001      	movs	r0, #1
 8012e40:	f000 fa5a 	bl	80132f8 <_tx_trace_object_register>

            /* Move to the next thread.  */
            thread_ptr =  thread_ptr -> tx_thread_created_next;
 8012e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        while (i != ((ULONG) 0))
 8012e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d1e2      	bne.n	8012e1c <_tx_trace_enable+0x1d8>
        }

        /* Pickup the first timer and the number of created timers.  */
        timer_ptr =  _tx_timer_created_ptr;
 8012e56:	4b22      	ldr	r3, [pc, #136]	@ (8012ee0 <_tx_trace_enable+0x29c>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        i =          _tx_timer_created_count;
 8012e5e:	4b21      	ldr	r3, [pc, #132]	@ (8012ee4 <_tx_trace_enable+0x2a0>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all timers.  */
        while (i != ((ULONG) 0))
 8012e64:	e014      	b.n	8012e90 <_tx_trace_enable+0x24c>
        {

            /* Decrement the counter.  */
            i--;
 8012e66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012e68:	3b01      	subs	r3, #1
 8012e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this timer.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_TIMER, timer_ptr, timer_ptr -> tx_timer_name,
 8012e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012e70:	685a      	ldr	r2, [r3, #4]
 8012e72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012e76:	68db      	ldr	r3, [r3, #12]
 8012e78:	9300      	str	r3, [sp, #0]
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8012e80:	2002      	movs	r0, #2
 8012e82:	f000 fa39 	bl	80132f8 <_tx_trace_object_register>
                                                       ((ULONG) 0), timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks);

            /* Move to the next timer.  */
            timer_ptr =  timer_ptr -> tx_timer_created_next;
 8012e86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (i != ((ULONG) 0))
 8012e90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d1e7      	bne.n	8012e66 <_tx_trace_enable+0x222>
        }


        /* Pickup the first event flag group and the number of created groups.  */
        event_flags_ptr =  _tx_event_flags_created_ptr;
 8012e96:	4b14      	ldr	r3, [pc, #80]	@ (8012ee8 <_tx_trace_enable+0x2a4>)
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        i =                _tx_event_flags_created_count;
 8012e9e:	4b13      	ldr	r3, [pc, #76]	@ (8012eec <_tx_trace_enable+0x2a8>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all event flags groups.  */
        while (i != ((ULONG) 0))
 8012ea4:	e037      	b.n	8012f16 <_tx_trace_enable+0x2d2>
 8012ea6:	bf00      	nop
 8012ea8:	20007288 	.word	0x20007288
 8012eac:	2000728c 	.word	0x2000728c
 8012eb0:	20007274 	.word	0x20007274
 8012eb4:	20007278 	.word	0x20007278
 8012eb8:	2000727c 	.word	0x2000727c
 8012ebc:	20007294 	.word	0x20007294
 8012ec0:	20007298 	.word	0x20007298
 8012ec4:	2000729c 	.word	0x2000729c
 8012ec8:	20007280 	.word	0x20007280
 8012ecc:	20007284 	.word	0x20007284
 8012ed0:	54585442 	.word	0x54585442
 8012ed4:	20006d04 	.word	0x20006d04
 8012ed8:	20006c74 	.word	0x20006c74
 8012edc:	20006c78 	.word	0x20006c78
 8012ee0:	20006da8 	.word	0x20006da8
 8012ee4:	20006dac 	.word	0x20006dac
 8012ee8:	20006c44 	.word	0x20006c44
 8012eec:	20006c48 	.word	0x20006c48
        {

            /* Decrement the counter.  */
            i--;
 8012ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012ef2:	3b01      	subs	r3, #1
 8012ef4:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this event flags group.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_EVENT_FLAGS, event_flags_ptr, event_flags_ptr -> tx_event_flags_group_name, ((ULONG) 0), ((ULONG) 0));
 8012ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012efa:	685a      	ldr	r2, [r3, #4]
 8012efc:	2300      	movs	r3, #0
 8012efe:	9300      	str	r3, [sp, #0]
 8012f00:	2300      	movs	r3, #0
 8012f02:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8012f06:	2006      	movs	r0, #6
 8012f08:	f000 f9f6 	bl	80132f8 <_tx_trace_object_register>

            /* Move to the next event flags group.  */
            event_flags_ptr =  event_flags_ptr -> tx_event_flags_group_created_next;
 8012f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012f10:	699b      	ldr	r3, [r3, #24]
 8012f12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        while (i != ((ULONG) 0))
 8012f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d1e9      	bne.n	8012ef0 <_tx_trace_enable+0x2ac>
        }

        /* Pickup the first queue and the number of created queues.  */
        queue_ptr =  _tx_queue_created_ptr;
 8012f1c:	4b82      	ldr	r3, [pc, #520]	@ (8013128 <_tx_trace_enable+0x4e4>)
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        i =          _tx_queue_created_count;
 8012f24:	4b81      	ldr	r3, [pc, #516]	@ (801312c <_tx_trace_enable+0x4e8>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all queues.  */
        while (i != ((ULONG) 0))
 8012f2a:	e015      	b.n	8012f58 <_tx_trace_enable+0x314>
        {

            /* Decrement the counter.  */
            i--;
 8012f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012f2e:	3b01      	subs	r3, #1
 8012f30:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this queue.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_name,
 8012f32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012f36:	685a      	ldr	r2, [r3, #4]
                                                                    (queue_ptr -> tx_queue_capacity * (sizeof(ULONG))), ((ULONG) 0));
 8012f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012f3c:	68db      	ldr	r3, [r3, #12]
 8012f3e:	009b      	lsls	r3, r3, #2
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_QUEUE, queue_ptr, queue_ptr -> tx_queue_name,
 8012f40:	2100      	movs	r1, #0
 8012f42:	9100      	str	r1, [sp, #0]
 8012f44:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8012f48:	2003      	movs	r0, #3
 8012f4a:	f000 f9d5 	bl	80132f8 <_tx_trace_object_register>

            /* Move to the next queue.  */
            queue_ptr =  queue_ptr -> tx_queue_created_next;
 8012f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        while (i != ((ULONG) 0))
 8012f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d1e6      	bne.n	8012f2c <_tx_trace_enable+0x2e8>
        }

        /* Pickup the first semaphore and the number of created semaphores.  */
        semaphore_ptr =  _tx_semaphore_created_ptr;
 8012f5e:	4b74      	ldr	r3, [pc, #464]	@ (8013130 <_tx_trace_enable+0x4ec>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	67fb      	str	r3, [r7, #124]	@ 0x7c
        i =              _tx_semaphore_created_count;
 8012f64:	4b73      	ldr	r3, [pc, #460]	@ (8013134 <_tx_trace_enable+0x4f0>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all semaphores.  */
        while (i != ((ULONG) 0))
 8012f6a:	e00e      	b.n	8012f8a <_tx_trace_enable+0x346>
        {

            /* Decrement the counter.  */
            i--;
 8012f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012f6e:	3b01      	subs	r3, #1
 8012f70:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this semaphore.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_SEMAPHORE, semaphore_ptr, semaphore_ptr -> tx_semaphore_name, ((ULONG) 0), ((ULONG) 0));
 8012f72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012f74:	685a      	ldr	r2, [r3, #4]
 8012f76:	2300      	movs	r3, #0
 8012f78:	9300      	str	r3, [sp, #0]
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012f7e:	2004      	movs	r0, #4
 8012f80:	f000 f9ba 	bl	80132f8 <_tx_trace_object_register>

            /* Move to the next semaphore.  */
            semaphore_ptr =  semaphore_ptr -> tx_semaphore_created_next;
 8012f84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012f86:	695b      	ldr	r3, [r3, #20]
 8012f88:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (i != ((ULONG) 0))
 8012f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d1ed      	bne.n	8012f6c <_tx_trace_enable+0x328>
        }

        /* Pickup the first mutex and the number of created mutexes.  */
        mutex_ptr =  _tx_mutex_created_ptr;
 8012f90:	4b69      	ldr	r3, [pc, #420]	@ (8013138 <_tx_trace_enable+0x4f4>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	67bb      	str	r3, [r7, #120]	@ 0x78
        i =          _tx_mutex_created_count;
 8012f96:	4b69      	ldr	r3, [pc, #420]	@ (801313c <_tx_trace_enable+0x4f8>)
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all mutexes.  */
        while (i != ((ULONG) 0))
 8012f9c:	e00f      	b.n	8012fbe <_tx_trace_enable+0x37a>
        {

            /* Decrement the counter.  */
            i--;
 8012f9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012fa0:	3b01      	subs	r3, #1
 8012fa2:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this mutex.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_name,
 8012fa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012fa6:	685a      	ldr	r2, [r3, #4]
                                                                        (ULONG) mutex_ptr -> tx_mutex_inherit, ((ULONG) 0));
 8012fa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012faa:	691b      	ldr	r3, [r3, #16]
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_MUTEX, mutex_ptr, mutex_ptr -> tx_mutex_name,
 8012fac:	2100      	movs	r1, #0
 8012fae:	9100      	str	r1, [sp, #0]
 8012fb0:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8012fb2:	2005      	movs	r0, #5
 8012fb4:	f000 f9a0 	bl	80132f8 <_tx_trace_object_register>

            /* Move to the next mutex.  */
            mutex_ptr =  mutex_ptr -> tx_mutex_created_next;
 8012fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012fba:	6a1b      	ldr	r3, [r3, #32]
 8012fbc:	67bb      	str	r3, [r7, #120]	@ 0x78
        while (i != ((ULONG) 0))
 8012fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d1ec      	bne.n	8012f9e <_tx_trace_enable+0x35a>
        }

        /* Pickup the first block pool and the number of created block pools.  */
        block_pool_ptr =  _tx_block_pool_created_ptr;
 8012fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8013140 <_tx_trace_enable+0x4fc>)
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	677b      	str	r3, [r7, #116]	@ 0x74
        i =               _tx_block_pool_created_count;
 8012fca:	4b5e      	ldr	r3, [pc, #376]	@ (8013144 <_tx_trace_enable+0x500>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all block pools.  */
        while (i != ((ULONG) 0))
 8012fd0:	e00f      	b.n	8012ff2 <_tx_trace_enable+0x3ae>
        {

             /* Decrement the counter.  */
            i--;
 8012fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012fd4:	3b01      	subs	r3, #1
 8012fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this block pool.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BLOCK_POOL, block_pool_ptr, block_pool_ptr -> tx_block_pool_name,
 8012fd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012fda:	685a      	ldr	r2, [r3, #4]
 8012fdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012fde:	699b      	ldr	r3, [r3, #24]
 8012fe0:	2100      	movs	r1, #0
 8012fe2:	9100      	str	r1, [sp, #0]
 8012fe4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8012fe6:	2007      	movs	r0, #7
 8012fe8:	f000 f986 	bl	80132f8 <_tx_trace_object_register>
                                                                            block_pool_ptr -> tx_block_pool_size, ((ULONG) 0));

            /* Move to the next block pool.  */
            block_pool_ptr =  block_pool_ptr -> tx_block_pool_created_next;
 8012fec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ff0:	677b      	str	r3, [r7, #116]	@ 0x74
        while (i != ((ULONG) 0))
 8012ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d1ec      	bne.n	8012fd2 <_tx_trace_enable+0x38e>
        }

        /* Pickup the first byte pool and the number of created byte pools.  */
        byte_pool_ptr =  _tx_byte_pool_created_ptr;
 8012ff8:	4b53      	ldr	r3, [pc, #332]	@ (8013148 <_tx_trace_enable+0x504>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	673b      	str	r3, [r7, #112]	@ 0x70
        i =              _tx_byte_pool_created_count;
 8012ffe:	4b53      	ldr	r3, [pc, #332]	@ (801314c <_tx_trace_enable+0x508>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Loop to register all byte pools.  */
        while (i != ((ULONG) 0))
 8013004:	e00f      	b.n	8013026 <_tx_trace_enable+0x3e2>
        {

            /* Decrement the counter.  */
            i--;
 8013006:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013008:	3b01      	subs	r3, #1
 801300a:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Register this byte pool.  */
            _tx_trace_object_register(TX_TRACE_OBJECT_TYPE_BYTE_POOL, byte_pool_ptr, byte_pool_ptr -> tx_byte_pool_name,
 801300c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801300e:	685a      	ldr	r2, [r3, #4]
 8013010:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013012:	69db      	ldr	r3, [r3, #28]
 8013014:	2100      	movs	r1, #0
 8013016:	9100      	str	r1, [sp, #0]
 8013018:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801301a:	2008      	movs	r0, #8
 801301c:	f000 f96c 	bl	80132f8 <_tx_trace_object_register>
                                                                            byte_pool_ptr -> tx_byte_pool_size, ((ULONG) 0));

            /* Move to the next byte pool.  */
            byte_pool_ptr =  byte_pool_ptr -> tx_byte_pool_created_next;
 8013020:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013024:	673b      	str	r3, [r7, #112]	@ 0x70
        while (i != ((ULONG) 0))
 8013026:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013028:	2b00      	cmp	r3, #0
 801302a:	d1ec      	bne.n	8013006 <_tx_trace_enable+0x3c2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801302c:	f3ef 8310 	mrs	r3, PRIMASK
 8013030:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8013032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8013034:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013036:	b672      	cpsid	i
    return(int_posture);
 8013038:	6a3b      	ldr	r3, [r7, #32]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801303a:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Release the preeemption.  */
        _tx_thread_preempt_disable--;
 801303c:	4b44      	ldr	r3, [pc, #272]	@ (8013150 <_tx_trace_enable+0x50c>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	3b01      	subs	r3, #1
 8013042:	4a43      	ldr	r2, [pc, #268]	@ (8013150 <_tx_trace_enable+0x50c>)
 8013044:	6013      	str	r3, [r2, #0]

        /* Finally, setup the current buffer pointer, which effectively enables the trace!  */
        _tx_trace_buffer_current_ptr =    (TX_TRACE_BUFFER_ENTRY *) _tx_trace_buffer_start_ptr;
 8013046:	4b43      	ldr	r3, [pc, #268]	@ (8013154 <_tx_trace_enable+0x510>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	4a43      	ldr	r2, [pc, #268]	@ (8013158 <_tx_trace_enable+0x514>)
 801304c:	6013      	str	r3, [r2, #0]

        /* Insert two RUNNING events so the buffer is not empty.  */
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
 801304e:	4b42      	ldr	r3, [pc, #264]	@ (8013158 <_tx_trace_enable+0x514>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013056:	2b00      	cmp	r3, #0
 8013058:	f000 8095 	beq.w	8013186 <_tx_trace_enable+0x542>
 801305c:	4b3f      	ldr	r3, [pc, #252]	@ (801315c <_tx_trace_enable+0x518>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	f003 0301 	and.w	r3, r3, #1
 8013064:	2b00      	cmp	r3, #0
 8013066:	f000 808e 	beq.w	8013186 <_tx_trace_enable+0x542>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801306a:	f3ef 8305 	mrs	r3, IPSR
 801306e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8013070:	69fa      	ldr	r2, [r7, #28]
 8013072:	4b3b      	ldr	r3, [pc, #236]	@ (8013160 <_tx_trace_enable+0x51c>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4313      	orrs	r3, r2
 8013078:	647b      	str	r3, [r7, #68]	@ 0x44
 801307a:	4b3a      	ldr	r3, [pc, #232]	@ (8013164 <_tx_trace_enable+0x520>)
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	663b      	str	r3, [r7, #96]	@ 0x60
 8013080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013082:	2b00      	cmp	r3, #0
 8013084:	d10b      	bne.n	801309e <_tx_trace_enable+0x45a>
 8013086:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801308a:	667b      	str	r3, [r7, #100]	@ 0x64
 801308c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801308e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013090:	041a      	lsls	r2, r3, #16
 8013092:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013094:	4313      	orrs	r3, r2
 8013096:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801309a:	667b      	str	r3, [r7, #100]	@ 0x64
 801309c:	e00e      	b.n	80130bc <_tx_trace_enable+0x478>
 801309e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80130a0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80130a4:	d205      	bcs.n	80130b2 <_tx_trace_enable+0x46e>
 80130a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80130a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80130aa:	f04f 33ff 	mov.w	r3, #4294967295
 80130ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80130b0:	e004      	b.n	80130bc <_tx_trace_enable+0x478>
 80130b2:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 80130b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80130b8:	2300      	movs	r3, #0
 80130ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80130bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80130be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130c0:	601a      	str	r2, [r3, #0]
 80130c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80130c6:	605a      	str	r2, [r3, #4]
 80130c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130ca:	2206      	movs	r2, #6
 80130cc:	609a      	str	r2, [r3, #8]
 80130ce:	4b26      	ldr	r3, [pc, #152]	@ (8013168 <_tx_trace_enable+0x524>)
 80130d0:	681a      	ldr	r2, [r3, #0]
 80130d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130d4:	60da      	str	r2, [r3, #12]
 80130d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130d8:	2200      	movs	r2, #0
 80130da:	611a      	str	r2, [r3, #16]
 80130dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130de:	2200      	movs	r2, #0
 80130e0:	615a      	str	r2, [r3, #20]
 80130e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130e4:	2200      	movs	r2, #0
 80130e6:	619a      	str	r2, [r3, #24]
 80130e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130ea:	2200      	movs	r2, #0
 80130ec:	61da      	str	r2, [r3, #28]
 80130ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130f0:	3320      	adds	r3, #32
 80130f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80130f4:	4b1d      	ldr	r3, [pc, #116]	@ (801316c <_tx_trace_enable+0x528>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d33c      	bcc.n	8013178 <_tx_trace_enable+0x534>
 80130fe:	4b15      	ldr	r3, [pc, #84]	@ (8013154 <_tx_trace_enable+0x510>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013104:	4a14      	ldr	r2, [pc, #80]	@ (8013158 <_tx_trace_enable+0x514>)
 8013106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013108:	6013      	str	r3, [r2, #0]
 801310a:	4b19      	ldr	r3, [pc, #100]	@ (8013170 <_tx_trace_enable+0x52c>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013110:	621a      	str	r2, [r3, #32]
 8013112:	4b18      	ldr	r3, [pc, #96]	@ (8013174 <_tx_trace_enable+0x530>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d035      	beq.n	8013186 <_tx_trace_enable+0x542>
 801311a:	4b16      	ldr	r3, [pc, #88]	@ (8013174 <_tx_trace_enable+0x530>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	4a14      	ldr	r2, [pc, #80]	@ (8013170 <_tx_trace_enable+0x52c>)
 8013120:	6812      	ldr	r2, [r2, #0]
 8013122:	4610      	mov	r0, r2
 8013124:	4798      	blx	r3
 8013126:	e02e      	b.n	8013186 <_tx_trace_enable+0x542>
 8013128:	20006c3c 	.word	0x20006c3c
 801312c:	20006c40 	.word	0x20006c40
 8013130:	20006c34 	.word	0x20006c34
 8013134:	20006c38 	.word	0x20006c38
 8013138:	20006c4c 	.word	0x20006c4c
 801313c:	20006c50 	.word	0x20006c50
 8013140:	20006c54 	.word	0x20006c54
 8013144:	20006c58 	.word	0x20006c58
 8013148:	20006c5c 	.word	0x20006c5c
 801314c:	20006c60 	.word	0x20006c60
 8013150:	20006d04 	.word	0x20006d04
 8013154:	20007280 	.word	0x20007280
 8013158:	20007288 	.word	0x20007288
 801315c:	2000728c 	.word	0x2000728c
 8013160:	2000017c 	.word	0x2000017c
 8013164:	20006c6c 	.word	0x20006c6c
 8013168:	e0001004 	.word	0xe0001004
 801316c:	20007284 	.word	0x20007284
 8013170:	20007274 	.word	0x20007274
 8013174:	20007290 	.word	0x20007290
 8013178:	4a43      	ldr	r2, [pc, #268]	@ (8013288 <_tx_trace_enable+0x644>)
 801317a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801317c:	6013      	str	r3, [r2, #0]
 801317e:	4b43      	ldr	r3, [pc, #268]	@ (801328c <_tx_trace_enable+0x648>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013184:	621a      	str	r2, [r3, #32]
        TX_TRACE_IN_LINE_INSERT(TX_TRACE_RUNNING, 0, 0, 0, 0, TX_TRACE_INTERNAL_EVENTS)
 8013186:	4b40      	ldr	r3, [pc, #256]	@ (8013288 <_tx_trace_enable+0x644>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	643b      	str	r3, [r7, #64]	@ 0x40
 801318c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801318e:	2b00      	cmp	r3, #0
 8013190:	d06b      	beq.n	801326a <_tx_trace_enable+0x626>
 8013192:	4b3f      	ldr	r3, [pc, #252]	@ (8013290 <_tx_trace_enable+0x64c>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	f003 0301 	and.w	r3, r3, #1
 801319a:	2b00      	cmp	r3, #0
 801319c:	d065      	beq.n	801326a <_tx_trace_enable+0x626>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801319e:	f3ef 8305 	mrs	r3, IPSR
 80131a2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80131a4:	69ba      	ldr	r2, [r7, #24]
 80131a6:	4b3b      	ldr	r3, [pc, #236]	@ (8013294 <_tx_trace_enable+0x650>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	4313      	orrs	r3, r2
 80131ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131ae:	4b3a      	ldr	r3, [pc, #232]	@ (8013298 <_tx_trace_enable+0x654>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80131b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d10b      	bne.n	80131d2 <_tx_trace_enable+0x58e>
 80131ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80131bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80131c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80131c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80131c4:	041a      	lsls	r2, r3, #16
 80131c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80131c8:	4313      	orrs	r3, r2
 80131ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80131ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80131d0:	e00e      	b.n	80131f0 <_tx_trace_enable+0x5ac>
 80131d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131d4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80131d8:	d205      	bcs.n	80131e6 <_tx_trace_enable+0x5a2>
 80131da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80131dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80131de:	f04f 33ff 	mov.w	r3, #4294967295
 80131e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80131e4:	e004      	b.n	80131f0 <_tx_trace_enable+0x5ac>
 80131e6:	f04f 33f0 	mov.w	r3, #4042322160	@ 0xf0f0f0f0
 80131ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80131ec:	2300      	movs	r3, #0
 80131ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80131f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80131f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80131f4:	601a      	str	r2, [r3, #0]
 80131f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80131f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80131fa:	605a      	str	r2, [r3, #4]
 80131fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80131fe:	2206      	movs	r2, #6
 8013200:	609a      	str	r2, [r3, #8]
 8013202:	4b26      	ldr	r3, [pc, #152]	@ (801329c <_tx_trace_enable+0x658>)
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013208:	60da      	str	r2, [r3, #12]
 801320a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801320c:	2200      	movs	r2, #0
 801320e:	611a      	str	r2, [r3, #16]
 8013210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013212:	2200      	movs	r2, #0
 8013214:	615a      	str	r2, [r3, #20]
 8013216:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013218:	2200      	movs	r2, #0
 801321a:	619a      	str	r2, [r3, #24]
 801321c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801321e:	2200      	movs	r2, #0
 8013220:	61da      	str	r2, [r3, #28]
 8013222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013224:	3320      	adds	r3, #32
 8013226:	643b      	str	r3, [r7, #64]	@ 0x40
 8013228:	4b1d      	ldr	r3, [pc, #116]	@ (80132a0 <_tx_trace_enable+0x65c>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801322e:	429a      	cmp	r2, r3
 8013230:	d314      	bcc.n	801325c <_tx_trace_enable+0x618>
 8013232:	4b1c      	ldr	r3, [pc, #112]	@ (80132a4 <_tx_trace_enable+0x660>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	643b      	str	r3, [r7, #64]	@ 0x40
 8013238:	4a13      	ldr	r2, [pc, #76]	@ (8013288 <_tx_trace_enable+0x644>)
 801323a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801323c:	6013      	str	r3, [r2, #0]
 801323e:	4b13      	ldr	r3, [pc, #76]	@ (801328c <_tx_trace_enable+0x648>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013244:	621a      	str	r2, [r3, #32]
 8013246:	4b18      	ldr	r3, [pc, #96]	@ (80132a8 <_tx_trace_enable+0x664>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d00d      	beq.n	801326a <_tx_trace_enable+0x626>
 801324e:	4b16      	ldr	r3, [pc, #88]	@ (80132a8 <_tx_trace_enable+0x664>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	4a0e      	ldr	r2, [pc, #56]	@ (801328c <_tx_trace_enable+0x648>)
 8013254:	6812      	ldr	r2, [r2, #0]
 8013256:	4610      	mov	r0, r2
 8013258:	4798      	blx	r3
 801325a:	e006      	b.n	801326a <_tx_trace_enable+0x626>
 801325c:	4a0a      	ldr	r2, [pc, #40]	@ (8013288 <_tx_trace_enable+0x644>)
 801325e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013260:	6013      	str	r3, [r2, #0]
 8013262:	4b0a      	ldr	r3, [pc, #40]	@ (801328c <_tx_trace_enable+0x648>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013268:	621a      	str	r2, [r3, #32]
 801326a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801326c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	f383 8810 	msr	PRIMASK, r3
}
 8013274:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013276:	f7fe fdaf 	bl	8011dd8 <_tx_thread_system_preempt_check>

        /* Return successful completion.  */
        status =  TX_SUCCESS;
 801327a:	2300      	movs	r3, #0
 801327c:	66bb      	str	r3, [r7, #104]	@ 0x68
    }

    /* Return completion status.  */
    return(status);
 801327e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
    }

    /* Return completion status.  */
    return(status);
#endif
}
 8013280:	4618      	mov	r0, r3
 8013282:	3790      	adds	r7, #144	@ 0x90
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}
 8013288:	20007288 	.word	0x20007288
 801328c:	20007274 	.word	0x20007274
 8013290:	2000728c 	.word	0x2000728c
 8013294:	2000017c 	.word	0x2000017c
 8013298:	20006c6c 	.word	0x20006c6c
 801329c:	e0001004 	.word	0xe0001004
 80132a0:	20007284 	.word	0x20007284
 80132a4:	20007280 	.word	0x20007280
 80132a8:	20007290 	.word	0x20007290

080132ac <_tx_trace_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_initialize(VOID)
{
 80132ac:	b480      	push	{r7}
 80132ae:	af00      	add	r7, sp, #0

#ifdef TX_ENABLE_EVENT_TRACE
#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize all the pointers to the trace buffer to NULL.  */
    _tx_trace_header_ptr =          TX_NULL;
 80132b0:	4b0b      	ldr	r3, [pc, #44]	@ (80132e0 <_tx_trace_initialize+0x34>)
 80132b2:	2200      	movs	r2, #0
 80132b4:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_start_ptr =  TX_NULL;
 80132b6:	4b0b      	ldr	r3, [pc, #44]	@ (80132e4 <_tx_trace_initialize+0x38>)
 80132b8:	2200      	movs	r2, #0
 80132ba:	601a      	str	r2, [r3, #0]
    _tx_trace_registry_end_ptr =    TX_NULL;
 80132bc:	4b0a      	ldr	r3, [pc, #40]	@ (80132e8 <_tx_trace_initialize+0x3c>)
 80132be:	2200      	movs	r2, #0
 80132c0:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_start_ptr =    TX_NULL;
 80132c2:	4b0a      	ldr	r3, [pc, #40]	@ (80132ec <_tx_trace_initialize+0x40>)
 80132c4:	2200      	movs	r2, #0
 80132c6:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_end_ptr =      TX_NULL;
 80132c8:	4b09      	ldr	r3, [pc, #36]	@ (80132f0 <_tx_trace_initialize+0x44>)
 80132ca:	2200      	movs	r2, #0
 80132cc:	601a      	str	r2, [r3, #0]
    _tx_trace_buffer_current_ptr =  TX_NULL;
 80132ce:	4b09      	ldr	r3, [pc, #36]	@ (80132f4 <_tx_trace_initialize+0x48>)
 80132d0:	2200      	movs	r2, #0
 80132d2:	601a      	str	r2, [r3, #0]
#endif
#endif
}
 80132d4:	bf00      	nop
 80132d6:	46bd      	mov	sp, r7
 80132d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop
 80132e0:	20007274 	.word	0x20007274
 80132e4:	20007278 	.word	0x20007278
 80132e8:	2000727c 	.word	0x2000727c
 80132ec:	20007280 	.word	0x20007280
 80132f0:	20007284 	.word	0x20007284
 80132f4:	20007288 	.word	0x20007288

080132f8 <_tx_trace_object_register>:
/*                                            check for null name,        */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_trace_object_register(UCHAR object_type, VOID *object_ptr, CHAR *object_name, ULONG parameter_1, ULONG parameter_2)
{
 80132f8:	b480      	push	{r7}
 80132fa:	b08d      	sub	sp, #52	@ 0x34
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	60b9      	str	r1, [r7, #8]
 8013300:	607a      	str	r2, [r7, #4]
 8013302:	603b      	str	r3, [r7, #0]
 8013304:	4603      	mov	r3, r0
 8013306:	73fb      	strb	r3, [r7, #15]
UCHAR                           *work_ptr;
TX_TRACE_OBJECT_ENTRY           *entry_ptr;


    /* Determine if the registry area is setup.  */
    if (_tx_trace_registry_start_ptr != TX_NULL)
 8013308:	4b6f      	ldr	r3, [pc, #444]	@ (80134c8 <_tx_trace_object_register+0x1d0>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	2b00      	cmp	r3, #0
 801330e:	f000 80d5 	beq.w	80134bc <_tx_trace_object_register+0x1c4>
    {

        /* Trace buffer is enabled, proceed.  */

        /* Pickup the total entries.  */
        entries =  _tx_trace_total_registry_entries;
 8013312:	4b6e      	ldr	r3, [pc, #440]	@ (80134cc <_tx_trace_object_register+0x1d4>)
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	623b      	str	r3, [r7, #32]

        /* Determine if there are available entries in the registry.  */
        if (_tx_trace_available_registry_entries != ((ULONG) 0))
 8013318:	4b6d      	ldr	r3, [pc, #436]	@ (80134d0 <_tx_trace_object_register+0x1d8>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	2b00      	cmp	r3, #0
 801331e:	f000 80cd 	beq.w	80134bc <_tx_trace_object_register+0x1c4>
        {

            /* There are more available entries, proceed.  */

            /* Initialize found to the max entries... indicating no space was found.  */
            found =       entries;
 8013322:	6a3b      	ldr	r3, [r7, #32]
 8013324:	62bb      	str	r3, [r7, #40]	@ 0x28
            loop_break =  TX_FALSE;
 8013326:	2300      	movs	r3, #0
 8013328:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Loop to find available entry.  */
            i =  _tx_trace_registry_search_start;
 801332a:	4b6a      	ldr	r3, [pc, #424]	@ (80134d4 <_tx_trace_object_register+0x1dc>)
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            do
            {

                /* Setup the registry entry pointer.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 8013330:	4b65      	ldr	r3, [pc, #404]	@ (80134c8 <_tx_trace_object_register+0x1d0>)
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*i));
 8013336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013338:	4613      	mov	r3, r2
 801333a:	005b      	lsls	r3, r3, #1
 801333c:	4413      	add	r3, r2
 801333e:	011b      	lsls	r3, r3, #4
 8013340:	461a      	mov	r2, r3
 8013342:	69fb      	ldr	r3, [r7, #28]
 8013344:	4413      	add	r3, r2
 8013346:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8013348:	69fb      	ldr	r3, [r7, #28]
 801334a:	61bb      	str	r3, [r7, #24]

                /* Determine if this is the first pass building the registry. A NULL object value indicates this part
                   of the registry has never been used.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == (ULONG) 0)
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d103      	bne.n	801335c <_tx_trace_object_register+0x64>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8013354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013356:	62bb      	str	r3, [r7, #40]	@ 0x28
                    loop_break =  TX_TRUE;
 8013358:	2301      	movs	r3, #1
 801335a:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Determine if this entry matches the object pointer... we must reuse old entries left in the
                   registry.  */
                if (entry_ptr -> tx_trace_object_entry_thread_pointer == TX_POINTER_TO_ULONG_CONVERT(object_ptr))
 801335c:	69bb      	ldr	r3, [r7, #24]
 801335e:	685a      	ldr	r2, [r3, #4]
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	429a      	cmp	r2, r3
 8013364:	d103      	bne.n	801336e <_tx_trace_object_register+0x76>
                {

                    /* Set found to this index and break out of the loop.  */
                    found =  i;
 8013366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013368:	62bb      	str	r3, [r7, #40]	@ 0x28
                    loop_break =  TX_TRUE;
 801336a:	2301      	movs	r3, #1
 801336c:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Determine if we should break out of the loop.  */
                if (loop_break == TX_TRUE)
 801336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013370:	2b01      	cmp	r3, #1
 8013372:	d02d      	beq.n	80133d0 <_tx_trace_object_register+0xd8>
                    /* Yes, break out of the loop.  */
                    break;
                }

                /* Is this entry available?  */
                if (entry_ptr -> tx_trace_object_entry_available == TX_TRUE)
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	2b01      	cmp	r3, #1
 801337a:	d11a      	bne.n	80133b2 <_tx_trace_object_register+0xba>
                {

                    /* Yes, determine if we have not already found an empty slot.  */
                    if (found == entries)
 801337c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801337e:	6a3b      	ldr	r3, [r7, #32]
 8013380:	429a      	cmp	r2, r3
 8013382:	d102      	bne.n	801338a <_tx_trace_object_register+0x92>
                    {
                        found =  i;
 8013384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013388:	e013      	b.n	80133b2 <_tx_trace_object_register+0xba>
                    }
                    else
                    {

                        /* Setup a pointer to the found entry.  */
                        work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 801338a:	4b4f      	ldr	r3, [pc, #316]	@ (80134c8 <_tx_trace_object_register+0x1d0>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	61fb      	str	r3, [r7, #28]
                        work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 8013390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013392:	4613      	mov	r3, r2
 8013394:	005b      	lsls	r3, r3, #1
 8013396:	4413      	add	r3, r2
 8013398:	011b      	lsls	r3, r3, #4
 801339a:	461a      	mov	r2, r3
 801339c:	69fb      	ldr	r3, [r7, #28]
 801339e:	4413      	add	r3, r2
 80133a0:	61fb      	str	r3, [r7, #28]
                        entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	61bb      	str	r3, [r7, #24]

                         if (entry_ptr -> tx_trace_object_entry_type != ((UCHAR) 0))
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	785b      	ldrb	r3, [r3, #1]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d001      	beq.n	80133b2 <_tx_trace_object_register+0xba>
                         {
                            found =  i;
 80133ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b0:	62bb      	str	r3, [r7, #40]	@ 0x28
                         }
                    }
                }

                /* Move to the next entry.  */
                i++;
 80133b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b4:	3301      	adds	r3, #1
 80133b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Determine if we have wrapped the list.  */
                if (i >= entries)
 80133b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80133ba:	6a3b      	ldr	r3, [r7, #32]
 80133bc:	429a      	cmp	r2, r3
 80133be:	d301      	bcc.n	80133c4 <_tx_trace_object_register+0xcc>
                {

                    /* Yes, wrap to the beginning of the list.  */
                    i =  ((ULONG) 0);
 80133c0:	2300      	movs	r3, #0
 80133c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

            } while (i != _tx_trace_registry_search_start);
 80133c4:	4b43      	ldr	r3, [pc, #268]	@ (80134d4 <_tx_trace_object_register+0x1dc>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d1b0      	bne.n	8013330 <_tx_trace_object_register+0x38>
 80133ce:	e000      	b.n	80133d2 <_tx_trace_object_register+0xda>
                    break;
 80133d0:	bf00      	nop

            /* Now determine if an empty or reuse entry has been found.  */
            if (found < entries)
 80133d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80133d4:	6a3b      	ldr	r3, [r7, #32]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d270      	bcs.n	80134bc <_tx_trace_object_register+0x1c4>
            {

                /* Decrement the number of available entries.  */
                _tx_trace_available_registry_entries--;
 80133da:	4b3d      	ldr	r3, [pc, #244]	@ (80134d0 <_tx_trace_object_register+0x1d8>)
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	3b01      	subs	r3, #1
 80133e0:	4a3b      	ldr	r2, [pc, #236]	@ (80134d0 <_tx_trace_object_register+0x1d8>)
 80133e2:	6013      	str	r3, [r2, #0]

                /* Adjust the search index to the next entry.  */
                if ((found + ((ULONG) 1)) < entries)
 80133e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e6:	3301      	adds	r3, #1
 80133e8:	6a3a      	ldr	r2, [r7, #32]
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d904      	bls.n	80133f8 <_tx_trace_object_register+0x100>
                {

                    /* Start searching from the next index.  */
                    _tx_trace_registry_search_start =  found + ((ULONG) 1);
 80133ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133f0:	3301      	adds	r3, #1
 80133f2:	4a38      	ldr	r2, [pc, #224]	@ (80134d4 <_tx_trace_object_register+0x1dc>)
 80133f4:	6013      	str	r3, [r2, #0]
 80133f6:	e002      	b.n	80133fe <_tx_trace_object_register+0x106>
                }
                else
                {

                    /* Reset the search to the beginning of the list. */
                    _tx_trace_registry_search_start =  ((ULONG) 0);
 80133f8:	4b36      	ldr	r3, [pc, #216]	@ (80134d4 <_tx_trace_object_register+0x1dc>)
 80133fa:	2200      	movs	r2, #0
 80133fc:	601a      	str	r2, [r3, #0]
                }

                /* Yes, an entry has been found...  */

                /* Build a pointer to the found entry.  */
                work_ptr =   TX_OBJECT_TO_UCHAR_POINTER_CONVERT(_tx_trace_registry_start_ptr);
 80133fe:	4b32      	ldr	r3, [pc, #200]	@ (80134c8 <_tx_trace_object_register+0x1d0>)
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	61fb      	str	r3, [r7, #28]
                work_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, ((sizeof(TX_TRACE_OBJECT_ENTRY))*found));
 8013404:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013406:	4613      	mov	r3, r2
 8013408:	005b      	lsls	r3, r3, #1
 801340a:	4413      	add	r3, r2
 801340c:	011b      	lsls	r3, r3, #4
 801340e:	461a      	mov	r2, r3
 8013410:	69fb      	ldr	r3, [r7, #28]
 8013412:	4413      	add	r3, r2
 8013414:	61fb      	str	r3, [r7, #28]
                entry_ptr =  TX_UCHAR_TO_OBJECT_POINTER_CONVERT(work_ptr);
 8013416:	69fb      	ldr	r3, [r7, #28]
 8013418:	61bb      	str	r3, [r7, #24]

                /* Populate the found entry!  */
                entry_ptr -> tx_trace_object_entry_available =       ((UCHAR) TX_FALSE);
 801341a:	69bb      	ldr	r3, [r7, #24]
 801341c:	2200      	movs	r2, #0
 801341e:	701a      	strb	r2, [r3, #0]
                entry_ptr -> tx_trace_object_entry_type =            object_type;
 8013420:	69bb      	ldr	r3, [r7, #24]
 8013422:	7bfa      	ldrb	r2, [r7, #15]
 8013424:	705a      	strb	r2, [r3, #1]
                entry_ptr -> tx_trace_object_entry_thread_pointer =  TX_POINTER_TO_ULONG_CONVERT(object_ptr);
 8013426:	68ba      	ldr	r2, [r7, #8]
 8013428:	69bb      	ldr	r3, [r7, #24]
 801342a:	605a      	str	r2, [r3, #4]
                entry_ptr -> tx_trace_object_entry_param_1 =         parameter_1;
 801342c:	69bb      	ldr	r3, [r7, #24]
 801342e:	683a      	ldr	r2, [r7, #0]
 8013430:	609a      	str	r2, [r3, #8]
                entry_ptr -> tx_trace_object_entry_param_2 =         parameter_2;
 8013432:	69bb      	ldr	r3, [r7, #24]
 8013434:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013436:	60da      	str	r2, [r3, #12]

                /* Loop to copy the object name string...  */
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8013438:	2300      	movs	r3, #0
 801343a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801343c:	e017      	b.n	801346e <_tx_trace_object_register+0x176>
                {

                    /* Setup work pointer to the object name character.  */
                    work_ptr =  TX_CHAR_TO_UCHAR_POINTER_CONVERT(object_name);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	61fb      	str	r3, [r7, #28]
                    work_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, i);
 8013442:	69fa      	ldr	r2, [r7, #28]
 8013444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013446:	4413      	add	r3, r2
 8013448:	61fb      	str	r3, [r7, #28]

                    /* Determine if object_name (work_ptr) is null.  */
                    if (work_ptr == TX_NULL)
 801344a:	69fb      	ldr	r3, [r7, #28]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d012      	beq.n	8013476 <_tx_trace_object_register+0x17e>
                    {
                        break;
                    }

                    /* Copy a character of the name.  */
                    entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) *work_ptr;
 8013450:	69fb      	ldr	r3, [r7, #28]
 8013452:	7819      	ldrb	r1, [r3, #0]
 8013454:	69ba      	ldr	r2, [r7, #24]
 8013456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013458:	4413      	add	r3, r2
 801345a:	3310      	adds	r3, #16
 801345c:	460a      	mov	r2, r1
 801345e:	701a      	strb	r2, [r3, #0]

                    /* Determine if we are at the end.  */
                    if (*work_ptr == ((UCHAR) 0))
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	781b      	ldrb	r3, [r3, #0]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d008      	beq.n	801347a <_tx_trace_object_register+0x182>
                for (i = ((ULONG) 0); i < (((ULONG) TX_TRACE_OBJECT_REGISTRY_NAME)-((ULONG) 1)); i++)
 8013468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801346a:	3301      	adds	r3, #1
 801346c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801346e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013470:	2b1e      	cmp	r3, #30
 8013472:	d9e4      	bls.n	801343e <_tx_trace_object_register+0x146>
 8013474:	e002      	b.n	801347c <_tx_trace_object_register+0x184>
                        break;
 8013476:	bf00      	nop
 8013478:	e000      	b.n	801347c <_tx_trace_object_register+0x184>
                    {
                        break;
 801347a:	bf00      	nop
                    }
                }

                /* Null terminate the object string.  */
                entry_ptr -> tx_trace_object_entry_name[i] =  (UCHAR) 0;
 801347c:	69ba      	ldr	r2, [r7, #24]
 801347e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013480:	4413      	add	r3, r2
 8013482:	3310      	adds	r3, #16
 8013484:	2200      	movs	r2, #0
 8013486:	701a      	strb	r2, [r3, #0]

                /* Determine if a thread object type is present.  */
                if (object_type == TX_TRACE_OBJECT_TYPE_THREAD)
 8013488:	7bfb      	ldrb	r3, [r7, #15]
 801348a:	2b01      	cmp	r3, #1
 801348c:	d110      	bne.n	80134b0 <_tx_trace_object_register+0x1b8>
                {

                    /* Yes, a thread object is present.  */

                    /* Setup a pointer to the thread.  */
                    thread_ptr =  TX_VOID_TO_THREAD_POINTER_CONVERT(object_ptr);
 801348e:	68bb      	ldr	r3, [r7, #8]
 8013490:	617b      	str	r3, [r7, #20]

                    /* Store the thread's priority in the reserved bits.  */
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0x80) | ((UCHAR) (thread_ptr -> tx_thread_priority >> ((UCHAR) 8)));
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013496:	0a1b      	lsrs	r3, r3, #8
 8013498:	b2db      	uxtb	r3, r3
 801349a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801349e:	b2da      	uxtb	r2, r3
 80134a0:	69bb      	ldr	r3, [r7, #24]
 80134a2:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  (UCHAR) (thread_ptr -> tx_thread_priority & ((UCHAR) 0xFF));
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134a8:	b2da      	uxtb	r2, r3
 80134aa:	69bb      	ldr	r3, [r7, #24]
 80134ac:	70da      	strb	r2, [r3, #3]
                }
            }
        }
    }
#endif
}
 80134ae:	e005      	b.n	80134bc <_tx_trace_object_register+0x1c4>
                    entry_ptr -> tx_trace_object_entry_reserved1 =  ((UCHAR) 0);
 80134b0:	69bb      	ldr	r3, [r7, #24]
 80134b2:	2200      	movs	r2, #0
 80134b4:	709a      	strb	r2, [r3, #2]
                    entry_ptr -> tx_trace_object_entry_reserved2 =  ((UCHAR) 0);
 80134b6:	69bb      	ldr	r3, [r7, #24]
 80134b8:	2200      	movs	r2, #0
 80134ba:	70da      	strb	r2, [r3, #3]
}
 80134bc:	bf00      	nop
 80134be:	3734      	adds	r7, #52	@ 0x34
 80134c0:	46bd      	mov	sp, r7
 80134c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c6:	4770      	bx	lr
 80134c8:	20007278 	.word	0x20007278
 80134cc:	20007294 	.word	0x20007294
 80134d0:	20007298 	.word	0x20007298
 80134d4:	2000729c 	.word	0x2000729c

080134d8 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b092      	sub	sp, #72	@ 0x48
 80134dc:	af00      	add	r7, sp, #0
 80134de:	60f8      	str	r0, [r7, #12]
 80134e0:	60b9      	str	r1, [r7, #8]
 80134e2:	607a      	str	r2, [r7, #4]
 80134e4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80134e6:	2300      	movs	r3, #0
 80134e8:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d102      	bne.n	80134f6 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80134f0:	2302      	movs	r3, #2
 80134f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80134f4:	e075      	b.n	80135e2 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80134f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80134f8:	2b34      	cmp	r3, #52	@ 0x34
 80134fa:	d002      	beq.n	8013502 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80134fc:	2302      	movs	r3, #2
 80134fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8013500:	e06f      	b.n	80135e2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013502:	f3ef 8310 	mrs	r3, PRIMASK
 8013506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8013508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 801350a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801350c:	b672      	cpsid	i
    return(int_posture);
 801350e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013510:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013512:	4b3b      	ldr	r3, [pc, #236]	@ (8013600 <_txe_byte_pool_create+0x128>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	3301      	adds	r3, #1
 8013518:	4a39      	ldr	r2, [pc, #228]	@ (8013600 <_txe_byte_pool_create+0x128>)
 801351a:	6013      	str	r3, [r2, #0]
 801351c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801351e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013522:	f383 8810 	msr	PRIMASK, r3
}
 8013526:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8013528:	4b36      	ldr	r3, [pc, #216]	@ (8013604 <_txe_byte_pool_create+0x12c>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801352e:	2300      	movs	r3, #0
 8013530:	643b      	str	r3, [r7, #64]	@ 0x40
 8013532:	e009      	b.n	8013548 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8013534:	68fa      	ldr	r2, [r7, #12]
 8013536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013538:	429a      	cmp	r2, r3
 801353a:	d00b      	beq.n	8013554 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 801353c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8013542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013544:	3301      	adds	r3, #1
 8013546:	643b      	str	r3, [r7, #64]	@ 0x40
 8013548:	4b2f      	ldr	r3, [pc, #188]	@ (8013608 <_txe_byte_pool_create+0x130>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801354e:	429a      	cmp	r2, r3
 8013550:	d3f0      	bcc.n	8013534 <_txe_byte_pool_create+0x5c>
 8013552:	e000      	b.n	8013556 <_txe_byte_pool_create+0x7e>
                break;
 8013554:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013556:	f3ef 8310 	mrs	r3, PRIMASK
 801355a:	623b      	str	r3, [r7, #32]
    return(posture);
 801355c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801355e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013560:	b672      	cpsid	i
    return(int_posture);
 8013562:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013564:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013566:	4b26      	ldr	r3, [pc, #152]	@ (8013600 <_txe_byte_pool_create+0x128>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	3b01      	subs	r3, #1
 801356c:	4a24      	ldr	r2, [pc, #144]	@ (8013600 <_txe_byte_pool_create+0x128>)
 801356e:	6013      	str	r3, [r2, #0]
 8013570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013572:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013576:	f383 8810 	msr	PRIMASK, r3
}
 801357a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801357c:	f7fe fc2c 	bl	8011dd8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8013580:	68fa      	ldr	r2, [r7, #12]
 8013582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013584:	429a      	cmp	r2, r3
 8013586:	d102      	bne.n	801358e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8013588:	2302      	movs	r3, #2
 801358a:	647b      	str	r3, [r7, #68]	@ 0x44
 801358c:	e029      	b.n	80135e2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d102      	bne.n	801359a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8013594:	2303      	movs	r3, #3
 8013596:	647b      	str	r3, [r7, #68]	@ 0x44
 8013598:	e023      	b.n	80135e2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	2b63      	cmp	r3, #99	@ 0x63
 801359e:	d802      	bhi.n	80135a6 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80135a0:	2305      	movs	r3, #5
 80135a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80135a4:	e01d      	b.n	80135e2 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80135a6:	4b19      	ldr	r3, [pc, #100]	@ (801360c <_txe_byte_pool_create+0x134>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80135ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135ae:	4a18      	ldr	r2, [pc, #96]	@ (8013610 <_txe_byte_pool_create+0x138>)
 80135b0:	4293      	cmp	r3, r2
 80135b2:	d101      	bne.n	80135b8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80135b4:	2313      	movs	r3, #19
 80135b6:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80135b8:	f3ef 8305 	mrs	r3, IPSR
 80135bc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80135be:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80135c0:	4b14      	ldr	r3, [pc, #80]	@ (8013614 <_txe_byte_pool_create+0x13c>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	4313      	orrs	r3, r2
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d00b      	beq.n	80135e2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80135ca:	f3ef 8305 	mrs	r3, IPSR
 80135ce:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80135d0:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80135d2:	4b10      	ldr	r3, [pc, #64]	@ (8013614 <_txe_byte_pool_create+0x13c>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	4313      	orrs	r3, r2
 80135d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80135dc:	d201      	bcs.n	80135e2 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80135de:	2313      	movs	r3, #19
 80135e0:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80135e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d106      	bne.n	80135f6 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	687a      	ldr	r2, [r7, #4]
 80135ec:	68b9      	ldr	r1, [r7, #8]
 80135ee:	68f8      	ldr	r0, [r7, #12]
 80135f0:	f7fd fe5e 	bl	80112b0 <_tx_byte_pool_create>
 80135f4:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 80135f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	3748      	adds	r7, #72	@ 0x48
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}
 8013600:	20006d04 	.word	0x20006d04
 8013604:	20006c5c 	.word	0x20006c5c
 8013608:	20006c60 	.word	0x20006c60
 801360c:	20006c6c 	.word	0x20006c6c
 8013610:	20006db4 	.word	0x20006db4
 8013614:	2000017c 	.word	0x2000017c

08013618 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b09a      	sub	sp, #104	@ 0x68
 801361c:	af06      	add	r7, sp, #24
 801361e:	60f8      	str	r0, [r7, #12]
 8013620:	60b9      	str	r1, [r7, #8]
 8013622:	607a      	str	r2, [r7, #4]
 8013624:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013626:	2300      	movs	r3, #0
 8013628:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d102      	bne.n	8013636 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013630:	230e      	movs	r3, #14
 8013632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013634:	e0bb      	b.n	80137ae <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8013636:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013638:	2bb0      	cmp	r3, #176	@ 0xb0
 801363a:	d002      	beq.n	8013642 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801363c:	230e      	movs	r3, #14
 801363e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013640:	e0b5      	b.n	80137ae <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013642:	f3ef 8310 	mrs	r3, PRIMASK
 8013646:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8013648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 801364a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801364c:	b672      	cpsid	i
    return(int_posture);
 801364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013650:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013652:	4b64      	ldr	r3, [pc, #400]	@ (80137e4 <_txe_thread_create+0x1cc>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	3301      	adds	r3, #1
 8013658:	4a62      	ldr	r2, [pc, #392]	@ (80137e4 <_txe_thread_create+0x1cc>)
 801365a:	6013      	str	r3, [r2, #0]
 801365c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801365e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013662:	f383 8810 	msr	PRIMASK, r3
}
 8013666:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8013668:	2300      	movs	r3, #0
 801366a:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 801366c:	4b5e      	ldr	r3, [pc, #376]	@ (80137e8 <_txe_thread_create+0x1d0>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8013672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013674:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8013676:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013678:	3b01      	subs	r3, #1
 801367a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801367c:	4413      	add	r3, r2
 801367e:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8013680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013682:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8013684:	2300      	movs	r3, #0
 8013686:	647b      	str	r3, [r7, #68]	@ 0x44
 8013688:	e02b      	b.n	80136e2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 801368a:	68fa      	ldr	r2, [r7, #12]
 801368c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801368e:	429a      	cmp	r2, r3
 8013690:	d101      	bne.n	8013696 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8013692:	2301      	movs	r3, #1
 8013694:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8013696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013698:	2b01      	cmp	r3, #1
 801369a:	d028      	beq.n	80136ee <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 801369c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801369e:	68db      	ldr	r3, [r3, #12]
 80136a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80136a2:	429a      	cmp	r2, r3
 80136a4:	d308      	bcc.n	80136b8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80136a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136a8:	691b      	ldr	r3, [r3, #16]
 80136aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80136ac:	429a      	cmp	r2, r3
 80136ae:	d203      	bcs.n	80136b8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80136b0:	2300      	movs	r3, #0
 80136b2:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80136b4:	2301      	movs	r3, #1
 80136b6:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80136b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136ba:	68db      	ldr	r3, [r3, #12]
 80136bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80136be:	429a      	cmp	r2, r3
 80136c0:	d308      	bcc.n	80136d4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80136c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136c4:	691b      	ldr	r3, [r3, #16]
 80136c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d203      	bcs.n	80136d4 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80136cc:	2300      	movs	r3, #0
 80136ce:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80136d0:	2301      	movs	r3, #1
 80136d2:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80136d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80136da:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80136dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136de:	3301      	adds	r3, #1
 80136e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80136e2:	4b42      	ldr	r3, [pc, #264]	@ (80137ec <_txe_thread_create+0x1d4>)
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d3ce      	bcc.n	801368a <_txe_thread_create+0x72>
 80136ec:	e000      	b.n	80136f0 <_txe_thread_create+0xd8>
                break;
 80136ee:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80136f0:	f3ef 8310 	mrs	r3, PRIMASK
 80136f4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80136f6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80136f8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80136fa:	b672      	cpsid	i
    return(int_posture);
 80136fc:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80136fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013700:	4b38      	ldr	r3, [pc, #224]	@ (80137e4 <_txe_thread_create+0x1cc>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	3b01      	subs	r3, #1
 8013706:	4a37      	ldr	r2, [pc, #220]	@ (80137e4 <_txe_thread_create+0x1cc>)
 8013708:	6013      	str	r3, [r2, #0]
 801370a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801370c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801370e:	6a3b      	ldr	r3, [r7, #32]
 8013710:	f383 8810 	msr	PRIMASK, r3
}
 8013714:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013716:	f7fe fb5f 	bl	8011dd8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 801371a:	68fa      	ldr	r2, [r7, #12]
 801371c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801371e:	429a      	cmp	r2, r3
 8013720:	d102      	bne.n	8013728 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8013722:	230e      	movs	r3, #14
 8013724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013726:	e042      	b.n	80137ae <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8013728:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801372a:	2b00      	cmp	r3, #0
 801372c:	d102      	bne.n	8013734 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801372e:	2303      	movs	r3, #3
 8013730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013732:	e03c      	b.n	80137ae <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d102      	bne.n	8013740 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801373a:	2303      	movs	r3, #3
 801373c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801373e:	e036      	b.n	80137ae <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8013740:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013742:	2bc7      	cmp	r3, #199	@ 0xc7
 8013744:	d802      	bhi.n	801374c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8013746:	2305      	movs	r3, #5
 8013748:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801374a:	e030      	b.n	80137ae <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 801374c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801374e:	2b1f      	cmp	r3, #31
 8013750:	d902      	bls.n	8013758 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8013752:	230f      	movs	r3, #15
 8013754:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013756:	e02a      	b.n	80137ae <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8013758:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801375a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801375c:	429a      	cmp	r2, r3
 801375e:	d902      	bls.n	8013766 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8013760:	2318      	movs	r3, #24
 8013762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013764:	e023      	b.n	80137ae <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8013766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013768:	2b01      	cmp	r3, #1
 801376a:	d902      	bls.n	8013772 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 801376c:	2310      	movs	r3, #16
 801376e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013770:	e01d      	b.n	80137ae <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8013772:	4b1f      	ldr	r3, [pc, #124]	@ (80137f0 <_txe_thread_create+0x1d8>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8013778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801377a:	4a1e      	ldr	r2, [pc, #120]	@ (80137f4 <_txe_thread_create+0x1dc>)
 801377c:	4293      	cmp	r3, r2
 801377e:	d101      	bne.n	8013784 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013780:	2313      	movs	r3, #19
 8013782:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013784:	f3ef 8305 	mrs	r3, IPSR
 8013788:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801378a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801378c:	4b1a      	ldr	r3, [pc, #104]	@ (80137f8 <_txe_thread_create+0x1e0>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	4313      	orrs	r3, r2
 8013792:	2b00      	cmp	r3, #0
 8013794:	d00b      	beq.n	80137ae <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013796:	f3ef 8305 	mrs	r3, IPSR
 801379a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801379c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801379e:	4b16      	ldr	r3, [pc, #88]	@ (80137f8 <_txe_thread_create+0x1e0>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	4313      	orrs	r3, r2
 80137a4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80137a8:	d201      	bcs.n	80137ae <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80137aa:	2313      	movs	r3, #19
 80137ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80137ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d112      	bne.n	80137da <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80137b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80137b6:	9305      	str	r3, [sp, #20]
 80137b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80137ba:	9304      	str	r3, [sp, #16]
 80137bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80137be:	9303      	str	r3, [sp, #12]
 80137c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80137c2:	9302      	str	r3, [sp, #8]
 80137c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80137c6:	9301      	str	r3, [sp, #4]
 80137c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80137ca:	9300      	str	r3, [sp, #0]
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	687a      	ldr	r2, [r7, #4]
 80137d0:	68b9      	ldr	r1, [r7, #8]
 80137d2:	68f8      	ldr	r0, [r7, #12]
 80137d4:	f7fd ff00 	bl	80115d8 <_tx_thread_create>
 80137d8:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80137da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80137dc:	4618      	mov	r0, r3
 80137de:	3750      	adds	r7, #80	@ 0x50
 80137e0:	46bd      	mov	sp, r7
 80137e2:	bd80      	pop	{r7, pc}
 80137e4:	20006d04 	.word	0x20006d04
 80137e8:	20006c74 	.word	0x20006c74
 80137ec:	20006c78 	.word	0x20006c78
 80137f0:	20006c6c 	.word	0x20006c6c
 80137f4:	20006db4 	.word	0x20006db4
 80137f8:	2000017c 	.word	0x2000017c

080137fc <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b084      	sub	sp, #16
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d102      	bne.n	8013810 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801380a:	230e      	movs	r3, #14
 801380c:	60fb      	str	r3, [r7, #12]
 801380e:	e00b      	b.n	8013828 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	4a07      	ldr	r2, [pc, #28]	@ (8013834 <_txe_thread_suspend+0x38>)
 8013816:	4293      	cmp	r3, r2
 8013818:	d002      	beq.n	8013820 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801381a:	230e      	movs	r3, #14
 801381c:	60fb      	str	r3, [r7, #12]
 801381e:	e003      	b.n	8013828 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f7fe f9e7 	bl	8011bf4 <_tx_thread_suspend>
 8013826:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013828:	68fb      	ldr	r3, [r7, #12]
}
 801382a:	4618      	mov	r0, r3
 801382c:	3710      	adds	r7, #16
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}
 8013832:	bf00      	nop
 8013834:	54485244 	.word	0x54485244

08013838 <siprintf>:
 8013838:	b40e      	push	{r1, r2, r3}
 801383a:	b510      	push	{r4, lr}
 801383c:	b09d      	sub	sp, #116	@ 0x74
 801383e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013842:	2400      	movs	r4, #0
 8013844:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013846:	9002      	str	r0, [sp, #8]
 8013848:	9006      	str	r0, [sp, #24]
 801384a:	9107      	str	r1, [sp, #28]
 801384c:	9104      	str	r1, [sp, #16]
 801384e:	4809      	ldr	r0, [pc, #36]	@ (8013874 <siprintf+0x3c>)
 8013850:	4909      	ldr	r1, [pc, #36]	@ (8013878 <siprintf+0x40>)
 8013852:	f853 2b04 	ldr.w	r2, [r3], #4
 8013856:	9105      	str	r1, [sp, #20]
 8013858:	a902      	add	r1, sp, #8
 801385a:	6800      	ldr	r0, [r0, #0]
 801385c:	9301      	str	r3, [sp, #4]
 801385e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013860:	f000 f99c 	bl	8013b9c <_svfiprintf_r>
 8013864:	9b02      	ldr	r3, [sp, #8]
 8013866:	701c      	strb	r4, [r3, #0]
 8013868:	b01d      	add	sp, #116	@ 0x74
 801386a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801386e:	b003      	add	sp, #12
 8013870:	4770      	bx	lr
 8013872:	bf00      	nop
 8013874:	20000180 	.word	0x20000180
 8013878:	ffff0208 	.word	0xffff0208

0801387c <memset>:
 801387c:	4402      	add	r2, r0
 801387e:	4603      	mov	r3, r0
 8013880:	4293      	cmp	r3, r2
 8013882:	d100      	bne.n	8013886 <memset+0xa>
 8013884:	4770      	bx	lr
 8013886:	f803 1b01 	strb.w	r1, [r3], #1
 801388a:	e7f9      	b.n	8013880 <memset+0x4>

0801388c <__errno>:
 801388c:	4b01      	ldr	r3, [pc, #4]	@ (8013894 <__errno+0x8>)
 801388e:	6818      	ldr	r0, [r3, #0]
 8013890:	4770      	bx	lr
 8013892:	bf00      	nop
 8013894:	20000180 	.word	0x20000180

08013898 <__libc_init_array>:
 8013898:	b570      	push	{r4, r5, r6, lr}
 801389a:	4d0d      	ldr	r5, [pc, #52]	@ (80138d0 <__libc_init_array+0x38>)
 801389c:	2600      	movs	r6, #0
 801389e:	4c0d      	ldr	r4, [pc, #52]	@ (80138d4 <__libc_init_array+0x3c>)
 80138a0:	1b64      	subs	r4, r4, r5
 80138a2:	10a4      	asrs	r4, r4, #2
 80138a4:	42a6      	cmp	r6, r4
 80138a6:	d109      	bne.n	80138bc <__libc_init_array+0x24>
 80138a8:	4d0b      	ldr	r5, [pc, #44]	@ (80138d8 <__libc_init_array+0x40>)
 80138aa:	2600      	movs	r6, #0
 80138ac:	4c0b      	ldr	r4, [pc, #44]	@ (80138dc <__libc_init_array+0x44>)
 80138ae:	f001 f847 	bl	8014940 <_init>
 80138b2:	1b64      	subs	r4, r4, r5
 80138b4:	10a4      	asrs	r4, r4, #2
 80138b6:	42a6      	cmp	r6, r4
 80138b8:	d105      	bne.n	80138c6 <__libc_init_array+0x2e>
 80138ba:	bd70      	pop	{r4, r5, r6, pc}
 80138bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80138c0:	3601      	adds	r6, #1
 80138c2:	4798      	blx	r3
 80138c4:	e7ee      	b.n	80138a4 <__libc_init_array+0xc>
 80138c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80138ca:	3601      	adds	r6, #1
 80138cc:	4798      	blx	r3
 80138ce:	e7f2      	b.n	80138b6 <__libc_init_array+0x1e>
 80138d0:	08014aa4 	.word	0x08014aa4
 80138d4:	08014aa4 	.word	0x08014aa4
 80138d8:	08014aa4 	.word	0x08014aa4
 80138dc:	08014aa8 	.word	0x08014aa8

080138e0 <__retarget_lock_acquire_recursive>:
 80138e0:	4770      	bx	lr

080138e2 <__retarget_lock_release_recursive>:
 80138e2:	4770      	bx	lr

080138e4 <strcpy>:
 80138e4:	4603      	mov	r3, r0
 80138e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80138ea:	f803 2b01 	strb.w	r2, [r3], #1
 80138ee:	2a00      	cmp	r2, #0
 80138f0:	d1f9      	bne.n	80138e6 <strcpy+0x2>
 80138f2:	4770      	bx	lr

080138f4 <_free_r>:
 80138f4:	b538      	push	{r3, r4, r5, lr}
 80138f6:	4605      	mov	r5, r0
 80138f8:	2900      	cmp	r1, #0
 80138fa:	d041      	beq.n	8013980 <_free_r+0x8c>
 80138fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013900:	1f0c      	subs	r4, r1, #4
 8013902:	2b00      	cmp	r3, #0
 8013904:	bfb8      	it	lt
 8013906:	18e4      	addlt	r4, r4, r3
 8013908:	f000 f8e0 	bl	8013acc <__malloc_lock>
 801390c:	4a1d      	ldr	r2, [pc, #116]	@ (8013984 <_free_r+0x90>)
 801390e:	6813      	ldr	r3, [r2, #0]
 8013910:	b933      	cbnz	r3, 8013920 <_free_r+0x2c>
 8013912:	6063      	str	r3, [r4, #4]
 8013914:	6014      	str	r4, [r2, #0]
 8013916:	4628      	mov	r0, r5
 8013918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801391c:	f000 b8dc 	b.w	8013ad8 <__malloc_unlock>
 8013920:	42a3      	cmp	r3, r4
 8013922:	d908      	bls.n	8013936 <_free_r+0x42>
 8013924:	6820      	ldr	r0, [r4, #0]
 8013926:	1821      	adds	r1, r4, r0
 8013928:	428b      	cmp	r3, r1
 801392a:	bf01      	itttt	eq
 801392c:	6819      	ldreq	r1, [r3, #0]
 801392e:	685b      	ldreq	r3, [r3, #4]
 8013930:	1809      	addeq	r1, r1, r0
 8013932:	6021      	streq	r1, [r4, #0]
 8013934:	e7ed      	b.n	8013912 <_free_r+0x1e>
 8013936:	461a      	mov	r2, r3
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	b10b      	cbz	r3, 8013940 <_free_r+0x4c>
 801393c:	42a3      	cmp	r3, r4
 801393e:	d9fa      	bls.n	8013936 <_free_r+0x42>
 8013940:	6811      	ldr	r1, [r2, #0]
 8013942:	1850      	adds	r0, r2, r1
 8013944:	42a0      	cmp	r0, r4
 8013946:	d10b      	bne.n	8013960 <_free_r+0x6c>
 8013948:	6820      	ldr	r0, [r4, #0]
 801394a:	4401      	add	r1, r0
 801394c:	1850      	adds	r0, r2, r1
 801394e:	6011      	str	r1, [r2, #0]
 8013950:	4283      	cmp	r3, r0
 8013952:	d1e0      	bne.n	8013916 <_free_r+0x22>
 8013954:	6818      	ldr	r0, [r3, #0]
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	4408      	add	r0, r1
 801395a:	6053      	str	r3, [r2, #4]
 801395c:	6010      	str	r0, [r2, #0]
 801395e:	e7da      	b.n	8013916 <_free_r+0x22>
 8013960:	d902      	bls.n	8013968 <_free_r+0x74>
 8013962:	230c      	movs	r3, #12
 8013964:	602b      	str	r3, [r5, #0]
 8013966:	e7d6      	b.n	8013916 <_free_r+0x22>
 8013968:	6820      	ldr	r0, [r4, #0]
 801396a:	1821      	adds	r1, r4, r0
 801396c:	428b      	cmp	r3, r1
 801396e:	bf02      	ittt	eq
 8013970:	6819      	ldreq	r1, [r3, #0]
 8013972:	685b      	ldreq	r3, [r3, #4]
 8013974:	1809      	addeq	r1, r1, r0
 8013976:	6063      	str	r3, [r4, #4]
 8013978:	bf08      	it	eq
 801397a:	6021      	streq	r1, [r4, #0]
 801397c:	6054      	str	r4, [r2, #4]
 801397e:	e7ca      	b.n	8013916 <_free_r+0x22>
 8013980:	bd38      	pop	{r3, r4, r5, pc}
 8013982:	bf00      	nop
 8013984:	200073e4 	.word	0x200073e4

08013988 <sbrk_aligned>:
 8013988:	b570      	push	{r4, r5, r6, lr}
 801398a:	4e0f      	ldr	r6, [pc, #60]	@ (80139c8 <sbrk_aligned+0x40>)
 801398c:	460c      	mov	r4, r1
 801398e:	4605      	mov	r5, r0
 8013990:	6831      	ldr	r1, [r6, #0]
 8013992:	b911      	cbnz	r1, 801399a <sbrk_aligned+0x12>
 8013994:	f000 fba8 	bl	80140e8 <_sbrk_r>
 8013998:	6030      	str	r0, [r6, #0]
 801399a:	4621      	mov	r1, r4
 801399c:	4628      	mov	r0, r5
 801399e:	f000 fba3 	bl	80140e8 <_sbrk_r>
 80139a2:	1c43      	adds	r3, r0, #1
 80139a4:	d103      	bne.n	80139ae <sbrk_aligned+0x26>
 80139a6:	f04f 34ff 	mov.w	r4, #4294967295
 80139aa:	4620      	mov	r0, r4
 80139ac:	bd70      	pop	{r4, r5, r6, pc}
 80139ae:	1cc4      	adds	r4, r0, #3
 80139b0:	f024 0403 	bic.w	r4, r4, #3
 80139b4:	42a0      	cmp	r0, r4
 80139b6:	d0f8      	beq.n	80139aa <sbrk_aligned+0x22>
 80139b8:	1a21      	subs	r1, r4, r0
 80139ba:	4628      	mov	r0, r5
 80139bc:	f000 fb94 	bl	80140e8 <_sbrk_r>
 80139c0:	3001      	adds	r0, #1
 80139c2:	d1f2      	bne.n	80139aa <sbrk_aligned+0x22>
 80139c4:	e7ef      	b.n	80139a6 <sbrk_aligned+0x1e>
 80139c6:	bf00      	nop
 80139c8:	200073e0 	.word	0x200073e0

080139cc <_malloc_r>:
 80139cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139d0:	1ccd      	adds	r5, r1, #3
 80139d2:	4606      	mov	r6, r0
 80139d4:	f025 0503 	bic.w	r5, r5, #3
 80139d8:	3508      	adds	r5, #8
 80139da:	2d0c      	cmp	r5, #12
 80139dc:	bf38      	it	cc
 80139de:	250c      	movcc	r5, #12
 80139e0:	2d00      	cmp	r5, #0
 80139e2:	db01      	blt.n	80139e8 <_malloc_r+0x1c>
 80139e4:	42a9      	cmp	r1, r5
 80139e6:	d904      	bls.n	80139f2 <_malloc_r+0x26>
 80139e8:	230c      	movs	r3, #12
 80139ea:	6033      	str	r3, [r6, #0]
 80139ec:	2000      	movs	r0, #0
 80139ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013ac8 <_malloc_r+0xfc>
 80139f6:	f000 f869 	bl	8013acc <__malloc_lock>
 80139fa:	f8d8 3000 	ldr.w	r3, [r8]
 80139fe:	461c      	mov	r4, r3
 8013a00:	bb44      	cbnz	r4, 8013a54 <_malloc_r+0x88>
 8013a02:	4629      	mov	r1, r5
 8013a04:	4630      	mov	r0, r6
 8013a06:	f7ff ffbf 	bl	8013988 <sbrk_aligned>
 8013a0a:	1c43      	adds	r3, r0, #1
 8013a0c:	4604      	mov	r4, r0
 8013a0e:	d158      	bne.n	8013ac2 <_malloc_r+0xf6>
 8013a10:	f8d8 4000 	ldr.w	r4, [r8]
 8013a14:	4627      	mov	r7, r4
 8013a16:	2f00      	cmp	r7, #0
 8013a18:	d143      	bne.n	8013aa2 <_malloc_r+0xd6>
 8013a1a:	2c00      	cmp	r4, #0
 8013a1c:	d04b      	beq.n	8013ab6 <_malloc_r+0xea>
 8013a1e:	6823      	ldr	r3, [r4, #0]
 8013a20:	4639      	mov	r1, r7
 8013a22:	4630      	mov	r0, r6
 8013a24:	eb04 0903 	add.w	r9, r4, r3
 8013a28:	f000 fb5e 	bl	80140e8 <_sbrk_r>
 8013a2c:	4581      	cmp	r9, r0
 8013a2e:	d142      	bne.n	8013ab6 <_malloc_r+0xea>
 8013a30:	6821      	ldr	r1, [r4, #0]
 8013a32:	4630      	mov	r0, r6
 8013a34:	1a6d      	subs	r5, r5, r1
 8013a36:	4629      	mov	r1, r5
 8013a38:	f7ff ffa6 	bl	8013988 <sbrk_aligned>
 8013a3c:	3001      	adds	r0, #1
 8013a3e:	d03a      	beq.n	8013ab6 <_malloc_r+0xea>
 8013a40:	6823      	ldr	r3, [r4, #0]
 8013a42:	442b      	add	r3, r5
 8013a44:	6023      	str	r3, [r4, #0]
 8013a46:	f8d8 3000 	ldr.w	r3, [r8]
 8013a4a:	685a      	ldr	r2, [r3, #4]
 8013a4c:	bb62      	cbnz	r2, 8013aa8 <_malloc_r+0xdc>
 8013a4e:	f8c8 7000 	str.w	r7, [r8]
 8013a52:	e00f      	b.n	8013a74 <_malloc_r+0xa8>
 8013a54:	6822      	ldr	r2, [r4, #0]
 8013a56:	1b52      	subs	r2, r2, r5
 8013a58:	d420      	bmi.n	8013a9c <_malloc_r+0xd0>
 8013a5a:	2a0b      	cmp	r2, #11
 8013a5c:	d917      	bls.n	8013a8e <_malloc_r+0xc2>
 8013a5e:	1961      	adds	r1, r4, r5
 8013a60:	42a3      	cmp	r3, r4
 8013a62:	6025      	str	r5, [r4, #0]
 8013a64:	bf18      	it	ne
 8013a66:	6059      	strne	r1, [r3, #4]
 8013a68:	6863      	ldr	r3, [r4, #4]
 8013a6a:	bf08      	it	eq
 8013a6c:	f8c8 1000 	streq.w	r1, [r8]
 8013a70:	5162      	str	r2, [r4, r5]
 8013a72:	604b      	str	r3, [r1, #4]
 8013a74:	4630      	mov	r0, r6
 8013a76:	f000 f82f 	bl	8013ad8 <__malloc_unlock>
 8013a7a:	f104 000b 	add.w	r0, r4, #11
 8013a7e:	1d23      	adds	r3, r4, #4
 8013a80:	f020 0007 	bic.w	r0, r0, #7
 8013a84:	1ac2      	subs	r2, r0, r3
 8013a86:	bf1c      	itt	ne
 8013a88:	1a1b      	subne	r3, r3, r0
 8013a8a:	50a3      	strne	r3, [r4, r2]
 8013a8c:	e7af      	b.n	80139ee <_malloc_r+0x22>
 8013a8e:	6862      	ldr	r2, [r4, #4]
 8013a90:	42a3      	cmp	r3, r4
 8013a92:	bf0c      	ite	eq
 8013a94:	f8c8 2000 	streq.w	r2, [r8]
 8013a98:	605a      	strne	r2, [r3, #4]
 8013a9a:	e7eb      	b.n	8013a74 <_malloc_r+0xa8>
 8013a9c:	4623      	mov	r3, r4
 8013a9e:	6864      	ldr	r4, [r4, #4]
 8013aa0:	e7ae      	b.n	8013a00 <_malloc_r+0x34>
 8013aa2:	463c      	mov	r4, r7
 8013aa4:	687f      	ldr	r7, [r7, #4]
 8013aa6:	e7b6      	b.n	8013a16 <_malloc_r+0x4a>
 8013aa8:	461a      	mov	r2, r3
 8013aaa:	685b      	ldr	r3, [r3, #4]
 8013aac:	42a3      	cmp	r3, r4
 8013aae:	d1fb      	bne.n	8013aa8 <_malloc_r+0xdc>
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	6053      	str	r3, [r2, #4]
 8013ab4:	e7de      	b.n	8013a74 <_malloc_r+0xa8>
 8013ab6:	230c      	movs	r3, #12
 8013ab8:	4630      	mov	r0, r6
 8013aba:	6033      	str	r3, [r6, #0]
 8013abc:	f000 f80c 	bl	8013ad8 <__malloc_unlock>
 8013ac0:	e794      	b.n	80139ec <_malloc_r+0x20>
 8013ac2:	6005      	str	r5, [r0, #0]
 8013ac4:	e7d6      	b.n	8013a74 <_malloc_r+0xa8>
 8013ac6:	bf00      	nop
 8013ac8:	200073e4 	.word	0x200073e4

08013acc <__malloc_lock>:
 8013acc:	4801      	ldr	r0, [pc, #4]	@ (8013ad4 <__malloc_lock+0x8>)
 8013ace:	f7ff bf07 	b.w	80138e0 <__retarget_lock_acquire_recursive>
 8013ad2:	bf00      	nop
 8013ad4:	200073dc 	.word	0x200073dc

08013ad8 <__malloc_unlock>:
 8013ad8:	4801      	ldr	r0, [pc, #4]	@ (8013ae0 <__malloc_unlock+0x8>)
 8013ada:	f7ff bf02 	b.w	80138e2 <__retarget_lock_release_recursive>
 8013ade:	bf00      	nop
 8013ae0:	200073dc 	.word	0x200073dc

08013ae4 <__ssputs_r>:
 8013ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ae8:	461f      	mov	r7, r3
 8013aea:	688e      	ldr	r6, [r1, #8]
 8013aec:	4682      	mov	sl, r0
 8013aee:	460c      	mov	r4, r1
 8013af0:	42be      	cmp	r6, r7
 8013af2:	4690      	mov	r8, r2
 8013af4:	680b      	ldr	r3, [r1, #0]
 8013af6:	d82d      	bhi.n	8013b54 <__ssputs_r+0x70>
 8013af8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013afc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013b00:	d026      	beq.n	8013b50 <__ssputs_r+0x6c>
 8013b02:	6965      	ldr	r5, [r4, #20]
 8013b04:	6909      	ldr	r1, [r1, #16]
 8013b06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013b0a:	eba3 0901 	sub.w	r9, r3, r1
 8013b0e:	1c7b      	adds	r3, r7, #1
 8013b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013b14:	444b      	add	r3, r9
 8013b16:	106d      	asrs	r5, r5, #1
 8013b18:	429d      	cmp	r5, r3
 8013b1a:	bf38      	it	cc
 8013b1c:	461d      	movcc	r5, r3
 8013b1e:	0553      	lsls	r3, r2, #21
 8013b20:	d527      	bpl.n	8013b72 <__ssputs_r+0x8e>
 8013b22:	4629      	mov	r1, r5
 8013b24:	f7ff ff52 	bl	80139cc <_malloc_r>
 8013b28:	4606      	mov	r6, r0
 8013b2a:	b360      	cbz	r0, 8013b86 <__ssputs_r+0xa2>
 8013b2c:	464a      	mov	r2, r9
 8013b2e:	6921      	ldr	r1, [r4, #16]
 8013b30:	f000 faf8 	bl	8014124 <memcpy>
 8013b34:	89a3      	ldrh	r3, [r4, #12]
 8013b36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013b3e:	81a3      	strh	r3, [r4, #12]
 8013b40:	6126      	str	r6, [r4, #16]
 8013b42:	444e      	add	r6, r9
 8013b44:	6165      	str	r5, [r4, #20]
 8013b46:	eba5 0509 	sub.w	r5, r5, r9
 8013b4a:	6026      	str	r6, [r4, #0]
 8013b4c:	463e      	mov	r6, r7
 8013b4e:	60a5      	str	r5, [r4, #8]
 8013b50:	42be      	cmp	r6, r7
 8013b52:	d900      	bls.n	8013b56 <__ssputs_r+0x72>
 8013b54:	463e      	mov	r6, r7
 8013b56:	4632      	mov	r2, r6
 8013b58:	4641      	mov	r1, r8
 8013b5a:	6820      	ldr	r0, [r4, #0]
 8013b5c:	f000 faaa 	bl	80140b4 <memmove>
 8013b60:	68a3      	ldr	r3, [r4, #8]
 8013b62:	2000      	movs	r0, #0
 8013b64:	1b9b      	subs	r3, r3, r6
 8013b66:	60a3      	str	r3, [r4, #8]
 8013b68:	6823      	ldr	r3, [r4, #0]
 8013b6a:	4433      	add	r3, r6
 8013b6c:	6023      	str	r3, [r4, #0]
 8013b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b72:	462a      	mov	r2, r5
 8013b74:	f000 fae3 	bl	801413e <_realloc_r>
 8013b78:	4606      	mov	r6, r0
 8013b7a:	2800      	cmp	r0, #0
 8013b7c:	d1e0      	bne.n	8013b40 <__ssputs_r+0x5c>
 8013b7e:	6921      	ldr	r1, [r4, #16]
 8013b80:	4650      	mov	r0, sl
 8013b82:	f7ff feb7 	bl	80138f4 <_free_r>
 8013b86:	230c      	movs	r3, #12
 8013b88:	f04f 30ff 	mov.w	r0, #4294967295
 8013b8c:	f8ca 3000 	str.w	r3, [sl]
 8013b90:	89a3      	ldrh	r3, [r4, #12]
 8013b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b96:	81a3      	strh	r3, [r4, #12]
 8013b98:	e7e9      	b.n	8013b6e <__ssputs_r+0x8a>
	...

08013b9c <_svfiprintf_r>:
 8013b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba0:	4698      	mov	r8, r3
 8013ba2:	898b      	ldrh	r3, [r1, #12]
 8013ba4:	b09d      	sub	sp, #116	@ 0x74
 8013ba6:	4607      	mov	r7, r0
 8013ba8:	061b      	lsls	r3, r3, #24
 8013baa:	460d      	mov	r5, r1
 8013bac:	4614      	mov	r4, r2
 8013bae:	d510      	bpl.n	8013bd2 <_svfiprintf_r+0x36>
 8013bb0:	690b      	ldr	r3, [r1, #16]
 8013bb2:	b973      	cbnz	r3, 8013bd2 <_svfiprintf_r+0x36>
 8013bb4:	2140      	movs	r1, #64	@ 0x40
 8013bb6:	f7ff ff09 	bl	80139cc <_malloc_r>
 8013bba:	6028      	str	r0, [r5, #0]
 8013bbc:	6128      	str	r0, [r5, #16]
 8013bbe:	b930      	cbnz	r0, 8013bce <_svfiprintf_r+0x32>
 8013bc0:	230c      	movs	r3, #12
 8013bc2:	603b      	str	r3, [r7, #0]
 8013bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8013bc8:	b01d      	add	sp, #116	@ 0x74
 8013bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bce:	2340      	movs	r3, #64	@ 0x40
 8013bd0:	616b      	str	r3, [r5, #20]
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013bd8:	f04f 0901 	mov.w	r9, #1
 8013bdc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8013d80 <_svfiprintf_r+0x1e4>
 8013be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8013be2:	2320      	movs	r3, #32
 8013be4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013be8:	2330      	movs	r3, #48	@ 0x30
 8013bea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013bee:	4623      	mov	r3, r4
 8013bf0:	469a      	mov	sl, r3
 8013bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013bf6:	b10a      	cbz	r2, 8013bfc <_svfiprintf_r+0x60>
 8013bf8:	2a25      	cmp	r2, #37	@ 0x25
 8013bfa:	d1f9      	bne.n	8013bf0 <_svfiprintf_r+0x54>
 8013bfc:	ebba 0b04 	subs.w	fp, sl, r4
 8013c00:	d00b      	beq.n	8013c1a <_svfiprintf_r+0x7e>
 8013c02:	465b      	mov	r3, fp
 8013c04:	4622      	mov	r2, r4
 8013c06:	4629      	mov	r1, r5
 8013c08:	4638      	mov	r0, r7
 8013c0a:	f7ff ff6b 	bl	8013ae4 <__ssputs_r>
 8013c0e:	3001      	adds	r0, #1
 8013c10:	f000 80a7 	beq.w	8013d62 <_svfiprintf_r+0x1c6>
 8013c14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c16:	445a      	add	r2, fp
 8013c18:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	f000 809f 	beq.w	8013d62 <_svfiprintf_r+0x1c6>
 8013c24:	2300      	movs	r3, #0
 8013c26:	f04f 32ff 	mov.w	r2, #4294967295
 8013c2a:	f10a 0a01 	add.w	sl, sl, #1
 8013c2e:	9304      	str	r3, [sp, #16]
 8013c30:	9307      	str	r3, [sp, #28]
 8013c32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013c36:	931a      	str	r3, [sp, #104]	@ 0x68
 8013c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c3c:	4654      	mov	r4, sl
 8013c3e:	2205      	movs	r2, #5
 8013c40:	484f      	ldr	r0, [pc, #316]	@ (8013d80 <_svfiprintf_r+0x1e4>)
 8013c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c46:	f000 fa5f 	bl	8014108 <memchr>
 8013c4a:	9a04      	ldr	r2, [sp, #16]
 8013c4c:	b9d8      	cbnz	r0, 8013c86 <_svfiprintf_r+0xea>
 8013c4e:	06d0      	lsls	r0, r2, #27
 8013c50:	bf44      	itt	mi
 8013c52:	2320      	movmi	r3, #32
 8013c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c58:	0711      	lsls	r1, r2, #28
 8013c5a:	bf44      	itt	mi
 8013c5c:	232b      	movmi	r3, #43	@ 0x2b
 8013c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c62:	f89a 3000 	ldrb.w	r3, [sl]
 8013c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c68:	d015      	beq.n	8013c96 <_svfiprintf_r+0xfa>
 8013c6a:	9a07      	ldr	r2, [sp, #28]
 8013c6c:	4654      	mov	r4, sl
 8013c6e:	2000      	movs	r0, #0
 8013c70:	f04f 0c0a 	mov.w	ip, #10
 8013c74:	4621      	mov	r1, r4
 8013c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c7a:	3b30      	subs	r3, #48	@ 0x30
 8013c7c:	2b09      	cmp	r3, #9
 8013c7e:	d94b      	bls.n	8013d18 <_svfiprintf_r+0x17c>
 8013c80:	b1b0      	cbz	r0, 8013cb0 <_svfiprintf_r+0x114>
 8013c82:	9207      	str	r2, [sp, #28]
 8013c84:	e014      	b.n	8013cb0 <_svfiprintf_r+0x114>
 8013c86:	eba0 0308 	sub.w	r3, r0, r8
 8013c8a:	46a2      	mov	sl, r4
 8013c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8013c90:	4313      	orrs	r3, r2
 8013c92:	9304      	str	r3, [sp, #16]
 8013c94:	e7d2      	b.n	8013c3c <_svfiprintf_r+0xa0>
 8013c96:	9b03      	ldr	r3, [sp, #12]
 8013c98:	1d19      	adds	r1, r3, #4
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	9103      	str	r1, [sp, #12]
 8013ca0:	bfbb      	ittet	lt
 8013ca2:	425b      	neglt	r3, r3
 8013ca4:	f042 0202 	orrlt.w	r2, r2, #2
 8013ca8:	9307      	strge	r3, [sp, #28]
 8013caa:	9307      	strlt	r3, [sp, #28]
 8013cac:	bfb8      	it	lt
 8013cae:	9204      	strlt	r2, [sp, #16]
 8013cb0:	7823      	ldrb	r3, [r4, #0]
 8013cb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8013cb4:	d10a      	bne.n	8013ccc <_svfiprintf_r+0x130>
 8013cb6:	7863      	ldrb	r3, [r4, #1]
 8013cb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8013cba:	d132      	bne.n	8013d22 <_svfiprintf_r+0x186>
 8013cbc:	9b03      	ldr	r3, [sp, #12]
 8013cbe:	3402      	adds	r4, #2
 8013cc0:	1d1a      	adds	r2, r3, #4
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013cc8:	9203      	str	r2, [sp, #12]
 8013cca:	9305      	str	r3, [sp, #20]
 8013ccc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013d90 <_svfiprintf_r+0x1f4>
 8013cd0:	2203      	movs	r2, #3
 8013cd2:	7821      	ldrb	r1, [r4, #0]
 8013cd4:	4650      	mov	r0, sl
 8013cd6:	f000 fa17 	bl	8014108 <memchr>
 8013cda:	b138      	cbz	r0, 8013cec <_svfiprintf_r+0x150>
 8013cdc:	eba0 000a 	sub.w	r0, r0, sl
 8013ce0:	2240      	movs	r2, #64	@ 0x40
 8013ce2:	9b04      	ldr	r3, [sp, #16]
 8013ce4:	3401      	adds	r4, #1
 8013ce6:	4082      	lsls	r2, r0
 8013ce8:	4313      	orrs	r3, r2
 8013cea:	9304      	str	r3, [sp, #16]
 8013cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cf0:	2206      	movs	r2, #6
 8013cf2:	4824      	ldr	r0, [pc, #144]	@ (8013d84 <_svfiprintf_r+0x1e8>)
 8013cf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013cf8:	f000 fa06 	bl	8014108 <memchr>
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	d036      	beq.n	8013d6e <_svfiprintf_r+0x1d2>
 8013d00:	4b21      	ldr	r3, [pc, #132]	@ (8013d88 <_svfiprintf_r+0x1ec>)
 8013d02:	bb1b      	cbnz	r3, 8013d4c <_svfiprintf_r+0x1b0>
 8013d04:	9b03      	ldr	r3, [sp, #12]
 8013d06:	3307      	adds	r3, #7
 8013d08:	f023 0307 	bic.w	r3, r3, #7
 8013d0c:	3308      	adds	r3, #8
 8013d0e:	9303      	str	r3, [sp, #12]
 8013d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d12:	4433      	add	r3, r6
 8013d14:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d16:	e76a      	b.n	8013bee <_svfiprintf_r+0x52>
 8013d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d1c:	460c      	mov	r4, r1
 8013d1e:	2001      	movs	r0, #1
 8013d20:	e7a8      	b.n	8013c74 <_svfiprintf_r+0xd8>
 8013d22:	2300      	movs	r3, #0
 8013d24:	3401      	adds	r4, #1
 8013d26:	f04f 0c0a 	mov.w	ip, #10
 8013d2a:	4619      	mov	r1, r3
 8013d2c:	9305      	str	r3, [sp, #20]
 8013d2e:	4620      	mov	r0, r4
 8013d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d34:	3a30      	subs	r2, #48	@ 0x30
 8013d36:	2a09      	cmp	r2, #9
 8013d38:	d903      	bls.n	8013d42 <_svfiprintf_r+0x1a6>
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d0c6      	beq.n	8013ccc <_svfiprintf_r+0x130>
 8013d3e:	9105      	str	r1, [sp, #20]
 8013d40:	e7c4      	b.n	8013ccc <_svfiprintf_r+0x130>
 8013d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d46:	4604      	mov	r4, r0
 8013d48:	2301      	movs	r3, #1
 8013d4a:	e7f0      	b.n	8013d2e <_svfiprintf_r+0x192>
 8013d4c:	ab03      	add	r3, sp, #12
 8013d4e:	462a      	mov	r2, r5
 8013d50:	a904      	add	r1, sp, #16
 8013d52:	4638      	mov	r0, r7
 8013d54:	9300      	str	r3, [sp, #0]
 8013d56:	4b0d      	ldr	r3, [pc, #52]	@ (8013d8c <_svfiprintf_r+0x1f0>)
 8013d58:	f3af 8000 	nop.w
 8013d5c:	1c42      	adds	r2, r0, #1
 8013d5e:	4606      	mov	r6, r0
 8013d60:	d1d6      	bne.n	8013d10 <_svfiprintf_r+0x174>
 8013d62:	89ab      	ldrh	r3, [r5, #12]
 8013d64:	065b      	lsls	r3, r3, #25
 8013d66:	f53f af2d 	bmi.w	8013bc4 <_svfiprintf_r+0x28>
 8013d6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d6c:	e72c      	b.n	8013bc8 <_svfiprintf_r+0x2c>
 8013d6e:	ab03      	add	r3, sp, #12
 8013d70:	462a      	mov	r2, r5
 8013d72:	a904      	add	r1, sp, #16
 8013d74:	4638      	mov	r0, r7
 8013d76:	9300      	str	r3, [sp, #0]
 8013d78:	4b04      	ldr	r3, [pc, #16]	@ (8013d8c <_svfiprintf_r+0x1f0>)
 8013d7a:	f000 f87d 	bl	8013e78 <_printf_i>
 8013d7e:	e7ed      	b.n	8013d5c <_svfiprintf_r+0x1c0>
 8013d80:	08014a50 	.word	0x08014a50
 8013d84:	08014a5a 	.word	0x08014a5a
 8013d88:	00000000 	.word	0x00000000
 8013d8c:	08013ae5 	.word	0x08013ae5
 8013d90:	08014a56 	.word	0x08014a56

08013d94 <_printf_common>:
 8013d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d98:	4616      	mov	r6, r2
 8013d9a:	4698      	mov	r8, r3
 8013d9c:	688a      	ldr	r2, [r1, #8]
 8013d9e:	4607      	mov	r7, r0
 8013da0:	690b      	ldr	r3, [r1, #16]
 8013da2:	460c      	mov	r4, r1
 8013da4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013da8:	4293      	cmp	r3, r2
 8013daa:	bfb8      	it	lt
 8013dac:	4613      	movlt	r3, r2
 8013dae:	6033      	str	r3, [r6, #0]
 8013db0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013db4:	b10a      	cbz	r2, 8013dba <_printf_common+0x26>
 8013db6:	3301      	adds	r3, #1
 8013db8:	6033      	str	r3, [r6, #0]
 8013dba:	6823      	ldr	r3, [r4, #0]
 8013dbc:	0699      	lsls	r1, r3, #26
 8013dbe:	bf42      	ittt	mi
 8013dc0:	6833      	ldrmi	r3, [r6, #0]
 8013dc2:	3302      	addmi	r3, #2
 8013dc4:	6033      	strmi	r3, [r6, #0]
 8013dc6:	6825      	ldr	r5, [r4, #0]
 8013dc8:	f015 0506 	ands.w	r5, r5, #6
 8013dcc:	d106      	bne.n	8013ddc <_printf_common+0x48>
 8013dce:	f104 0a19 	add.w	sl, r4, #25
 8013dd2:	68e3      	ldr	r3, [r4, #12]
 8013dd4:	6832      	ldr	r2, [r6, #0]
 8013dd6:	1a9b      	subs	r3, r3, r2
 8013dd8:	42ab      	cmp	r3, r5
 8013dda:	dc2b      	bgt.n	8013e34 <_printf_common+0xa0>
 8013ddc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013de0:	6822      	ldr	r2, [r4, #0]
 8013de2:	3b00      	subs	r3, #0
 8013de4:	bf18      	it	ne
 8013de6:	2301      	movne	r3, #1
 8013de8:	0692      	lsls	r2, r2, #26
 8013dea:	d430      	bmi.n	8013e4e <_printf_common+0xba>
 8013dec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013df0:	4641      	mov	r1, r8
 8013df2:	4638      	mov	r0, r7
 8013df4:	47c8      	blx	r9
 8013df6:	3001      	adds	r0, #1
 8013df8:	d023      	beq.n	8013e42 <_printf_common+0xae>
 8013dfa:	6823      	ldr	r3, [r4, #0]
 8013dfc:	341a      	adds	r4, #26
 8013dfe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8013e02:	f003 0306 	and.w	r3, r3, #6
 8013e06:	2b04      	cmp	r3, #4
 8013e08:	bf0a      	itet	eq
 8013e0a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8013e0e:	2500      	movne	r5, #0
 8013e10:	6833      	ldreq	r3, [r6, #0]
 8013e12:	f04f 0600 	mov.w	r6, #0
 8013e16:	bf08      	it	eq
 8013e18:	1aed      	subeq	r5, r5, r3
 8013e1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8013e1e:	bf08      	it	eq
 8013e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013e24:	4293      	cmp	r3, r2
 8013e26:	bfc4      	itt	gt
 8013e28:	1a9b      	subgt	r3, r3, r2
 8013e2a:	18ed      	addgt	r5, r5, r3
 8013e2c:	42b5      	cmp	r5, r6
 8013e2e:	d11a      	bne.n	8013e66 <_printf_common+0xd2>
 8013e30:	2000      	movs	r0, #0
 8013e32:	e008      	b.n	8013e46 <_printf_common+0xb2>
 8013e34:	2301      	movs	r3, #1
 8013e36:	4652      	mov	r2, sl
 8013e38:	4641      	mov	r1, r8
 8013e3a:	4638      	mov	r0, r7
 8013e3c:	47c8      	blx	r9
 8013e3e:	3001      	adds	r0, #1
 8013e40:	d103      	bne.n	8013e4a <_printf_common+0xb6>
 8013e42:	f04f 30ff 	mov.w	r0, #4294967295
 8013e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e4a:	3501      	adds	r5, #1
 8013e4c:	e7c1      	b.n	8013dd2 <_printf_common+0x3e>
 8013e4e:	18e1      	adds	r1, r4, r3
 8013e50:	1c5a      	adds	r2, r3, #1
 8013e52:	2030      	movs	r0, #48	@ 0x30
 8013e54:	3302      	adds	r3, #2
 8013e56:	4422      	add	r2, r4
 8013e58:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013e60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013e64:	e7c2      	b.n	8013dec <_printf_common+0x58>
 8013e66:	2301      	movs	r3, #1
 8013e68:	4622      	mov	r2, r4
 8013e6a:	4641      	mov	r1, r8
 8013e6c:	4638      	mov	r0, r7
 8013e6e:	47c8      	blx	r9
 8013e70:	3001      	adds	r0, #1
 8013e72:	d0e6      	beq.n	8013e42 <_printf_common+0xae>
 8013e74:	3601      	adds	r6, #1
 8013e76:	e7d9      	b.n	8013e2c <_printf_common+0x98>

08013e78 <_printf_i>:
 8013e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e7c:	7e0f      	ldrb	r7, [r1, #24]
 8013e7e:	4691      	mov	r9, r2
 8013e80:	4680      	mov	r8, r0
 8013e82:	460c      	mov	r4, r1
 8013e84:	2f78      	cmp	r7, #120	@ 0x78
 8013e86:	469a      	mov	sl, r3
 8013e88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013e8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013e8e:	d807      	bhi.n	8013ea0 <_printf_i+0x28>
 8013e90:	2f62      	cmp	r7, #98	@ 0x62
 8013e92:	d80a      	bhi.n	8013eaa <_printf_i+0x32>
 8013e94:	2f00      	cmp	r7, #0
 8013e96:	f000 80d1 	beq.w	801403c <_printf_i+0x1c4>
 8013e9a:	2f58      	cmp	r7, #88	@ 0x58
 8013e9c:	f000 80b8 	beq.w	8014010 <_printf_i+0x198>
 8013ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013ea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013ea8:	e03a      	b.n	8013f20 <_printf_i+0xa8>
 8013eaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013eae:	2b15      	cmp	r3, #21
 8013eb0:	d8f6      	bhi.n	8013ea0 <_printf_i+0x28>
 8013eb2:	a101      	add	r1, pc, #4	@ (adr r1, 8013eb8 <_printf_i+0x40>)
 8013eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013eb8:	08013f11 	.word	0x08013f11
 8013ebc:	08013f25 	.word	0x08013f25
 8013ec0:	08013ea1 	.word	0x08013ea1
 8013ec4:	08013ea1 	.word	0x08013ea1
 8013ec8:	08013ea1 	.word	0x08013ea1
 8013ecc:	08013ea1 	.word	0x08013ea1
 8013ed0:	08013f25 	.word	0x08013f25
 8013ed4:	08013ea1 	.word	0x08013ea1
 8013ed8:	08013ea1 	.word	0x08013ea1
 8013edc:	08013ea1 	.word	0x08013ea1
 8013ee0:	08013ea1 	.word	0x08013ea1
 8013ee4:	08014023 	.word	0x08014023
 8013ee8:	08013f4f 	.word	0x08013f4f
 8013eec:	08013fdd 	.word	0x08013fdd
 8013ef0:	08013ea1 	.word	0x08013ea1
 8013ef4:	08013ea1 	.word	0x08013ea1
 8013ef8:	08014045 	.word	0x08014045
 8013efc:	08013ea1 	.word	0x08013ea1
 8013f00:	08013f4f 	.word	0x08013f4f
 8013f04:	08013ea1 	.word	0x08013ea1
 8013f08:	08013ea1 	.word	0x08013ea1
 8013f0c:	08013fe5 	.word	0x08013fe5
 8013f10:	6833      	ldr	r3, [r6, #0]
 8013f12:	1d1a      	adds	r2, r3, #4
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	6032      	str	r2, [r6, #0]
 8013f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013f1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013f20:	2301      	movs	r3, #1
 8013f22:	e09c      	b.n	801405e <_printf_i+0x1e6>
 8013f24:	6833      	ldr	r3, [r6, #0]
 8013f26:	6820      	ldr	r0, [r4, #0]
 8013f28:	1d19      	adds	r1, r3, #4
 8013f2a:	6031      	str	r1, [r6, #0]
 8013f2c:	0606      	lsls	r6, r0, #24
 8013f2e:	d501      	bpl.n	8013f34 <_printf_i+0xbc>
 8013f30:	681d      	ldr	r5, [r3, #0]
 8013f32:	e003      	b.n	8013f3c <_printf_i+0xc4>
 8013f34:	0645      	lsls	r5, r0, #25
 8013f36:	d5fb      	bpl.n	8013f30 <_printf_i+0xb8>
 8013f38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013f3c:	2d00      	cmp	r5, #0
 8013f3e:	da03      	bge.n	8013f48 <_printf_i+0xd0>
 8013f40:	232d      	movs	r3, #45	@ 0x2d
 8013f42:	426d      	negs	r5, r5
 8013f44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013f48:	4858      	ldr	r0, [pc, #352]	@ (80140ac <_printf_i+0x234>)
 8013f4a:	230a      	movs	r3, #10
 8013f4c:	e011      	b.n	8013f72 <_printf_i+0xfa>
 8013f4e:	6821      	ldr	r1, [r4, #0]
 8013f50:	6833      	ldr	r3, [r6, #0]
 8013f52:	0608      	lsls	r0, r1, #24
 8013f54:	f853 5b04 	ldr.w	r5, [r3], #4
 8013f58:	d402      	bmi.n	8013f60 <_printf_i+0xe8>
 8013f5a:	0649      	lsls	r1, r1, #25
 8013f5c:	bf48      	it	mi
 8013f5e:	b2ad      	uxthmi	r5, r5
 8013f60:	2f6f      	cmp	r7, #111	@ 0x6f
 8013f62:	6033      	str	r3, [r6, #0]
 8013f64:	4851      	ldr	r0, [pc, #324]	@ (80140ac <_printf_i+0x234>)
 8013f66:	bf14      	ite	ne
 8013f68:	230a      	movne	r3, #10
 8013f6a:	2308      	moveq	r3, #8
 8013f6c:	2100      	movs	r1, #0
 8013f6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013f72:	6866      	ldr	r6, [r4, #4]
 8013f74:	2e00      	cmp	r6, #0
 8013f76:	60a6      	str	r6, [r4, #8]
 8013f78:	db05      	blt.n	8013f86 <_printf_i+0x10e>
 8013f7a:	6821      	ldr	r1, [r4, #0]
 8013f7c:	432e      	orrs	r6, r5
 8013f7e:	f021 0104 	bic.w	r1, r1, #4
 8013f82:	6021      	str	r1, [r4, #0]
 8013f84:	d04b      	beq.n	801401e <_printf_i+0x1a6>
 8013f86:	4616      	mov	r6, r2
 8013f88:	fbb5 f1f3 	udiv	r1, r5, r3
 8013f8c:	fb03 5711 	mls	r7, r3, r1, r5
 8013f90:	5dc7      	ldrb	r7, [r0, r7]
 8013f92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013f96:	462f      	mov	r7, r5
 8013f98:	460d      	mov	r5, r1
 8013f9a:	42bb      	cmp	r3, r7
 8013f9c:	d9f4      	bls.n	8013f88 <_printf_i+0x110>
 8013f9e:	2b08      	cmp	r3, #8
 8013fa0:	d10b      	bne.n	8013fba <_printf_i+0x142>
 8013fa2:	6823      	ldr	r3, [r4, #0]
 8013fa4:	07df      	lsls	r7, r3, #31
 8013fa6:	d508      	bpl.n	8013fba <_printf_i+0x142>
 8013fa8:	6923      	ldr	r3, [r4, #16]
 8013faa:	6861      	ldr	r1, [r4, #4]
 8013fac:	4299      	cmp	r1, r3
 8013fae:	bfde      	ittt	le
 8013fb0:	2330      	movle	r3, #48	@ 0x30
 8013fb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013fb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013fba:	1b92      	subs	r2, r2, r6
 8013fbc:	6122      	str	r2, [r4, #16]
 8013fbe:	464b      	mov	r3, r9
 8013fc0:	aa03      	add	r2, sp, #12
 8013fc2:	4621      	mov	r1, r4
 8013fc4:	4640      	mov	r0, r8
 8013fc6:	f8cd a000 	str.w	sl, [sp]
 8013fca:	f7ff fee3 	bl	8013d94 <_printf_common>
 8013fce:	3001      	adds	r0, #1
 8013fd0:	d14a      	bne.n	8014068 <_printf_i+0x1f0>
 8013fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8013fd6:	b004      	add	sp, #16
 8013fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fdc:	6823      	ldr	r3, [r4, #0]
 8013fde:	f043 0320 	orr.w	r3, r3, #32
 8013fe2:	6023      	str	r3, [r4, #0]
 8013fe4:	2778      	movs	r7, #120	@ 0x78
 8013fe6:	4832      	ldr	r0, [pc, #200]	@ (80140b0 <_printf_i+0x238>)
 8013fe8:	6823      	ldr	r3, [r4, #0]
 8013fea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013fee:	061f      	lsls	r7, r3, #24
 8013ff0:	6831      	ldr	r1, [r6, #0]
 8013ff2:	f851 5b04 	ldr.w	r5, [r1], #4
 8013ff6:	d402      	bmi.n	8013ffe <_printf_i+0x186>
 8013ff8:	065f      	lsls	r7, r3, #25
 8013ffa:	bf48      	it	mi
 8013ffc:	b2ad      	uxthmi	r5, r5
 8013ffe:	6031      	str	r1, [r6, #0]
 8014000:	07d9      	lsls	r1, r3, #31
 8014002:	bf44      	itt	mi
 8014004:	f043 0320 	orrmi.w	r3, r3, #32
 8014008:	6023      	strmi	r3, [r4, #0]
 801400a:	b11d      	cbz	r5, 8014014 <_printf_i+0x19c>
 801400c:	2310      	movs	r3, #16
 801400e:	e7ad      	b.n	8013f6c <_printf_i+0xf4>
 8014010:	4826      	ldr	r0, [pc, #152]	@ (80140ac <_printf_i+0x234>)
 8014012:	e7e9      	b.n	8013fe8 <_printf_i+0x170>
 8014014:	6823      	ldr	r3, [r4, #0]
 8014016:	f023 0320 	bic.w	r3, r3, #32
 801401a:	6023      	str	r3, [r4, #0]
 801401c:	e7f6      	b.n	801400c <_printf_i+0x194>
 801401e:	4616      	mov	r6, r2
 8014020:	e7bd      	b.n	8013f9e <_printf_i+0x126>
 8014022:	6833      	ldr	r3, [r6, #0]
 8014024:	6825      	ldr	r5, [r4, #0]
 8014026:	1d18      	adds	r0, r3, #4
 8014028:	6961      	ldr	r1, [r4, #20]
 801402a:	6030      	str	r0, [r6, #0]
 801402c:	062e      	lsls	r6, r5, #24
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	d501      	bpl.n	8014036 <_printf_i+0x1be>
 8014032:	6019      	str	r1, [r3, #0]
 8014034:	e002      	b.n	801403c <_printf_i+0x1c4>
 8014036:	0668      	lsls	r0, r5, #25
 8014038:	d5fb      	bpl.n	8014032 <_printf_i+0x1ba>
 801403a:	8019      	strh	r1, [r3, #0]
 801403c:	2300      	movs	r3, #0
 801403e:	4616      	mov	r6, r2
 8014040:	6123      	str	r3, [r4, #16]
 8014042:	e7bc      	b.n	8013fbe <_printf_i+0x146>
 8014044:	6833      	ldr	r3, [r6, #0]
 8014046:	2100      	movs	r1, #0
 8014048:	1d1a      	adds	r2, r3, #4
 801404a:	6032      	str	r2, [r6, #0]
 801404c:	681e      	ldr	r6, [r3, #0]
 801404e:	6862      	ldr	r2, [r4, #4]
 8014050:	4630      	mov	r0, r6
 8014052:	f000 f859 	bl	8014108 <memchr>
 8014056:	b108      	cbz	r0, 801405c <_printf_i+0x1e4>
 8014058:	1b80      	subs	r0, r0, r6
 801405a:	6060      	str	r0, [r4, #4]
 801405c:	6863      	ldr	r3, [r4, #4]
 801405e:	6123      	str	r3, [r4, #16]
 8014060:	2300      	movs	r3, #0
 8014062:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014066:	e7aa      	b.n	8013fbe <_printf_i+0x146>
 8014068:	6923      	ldr	r3, [r4, #16]
 801406a:	4632      	mov	r2, r6
 801406c:	4649      	mov	r1, r9
 801406e:	4640      	mov	r0, r8
 8014070:	47d0      	blx	sl
 8014072:	3001      	adds	r0, #1
 8014074:	d0ad      	beq.n	8013fd2 <_printf_i+0x15a>
 8014076:	6823      	ldr	r3, [r4, #0]
 8014078:	079b      	lsls	r3, r3, #30
 801407a:	d413      	bmi.n	80140a4 <_printf_i+0x22c>
 801407c:	68e0      	ldr	r0, [r4, #12]
 801407e:	9b03      	ldr	r3, [sp, #12]
 8014080:	4298      	cmp	r0, r3
 8014082:	bfb8      	it	lt
 8014084:	4618      	movlt	r0, r3
 8014086:	e7a6      	b.n	8013fd6 <_printf_i+0x15e>
 8014088:	2301      	movs	r3, #1
 801408a:	4632      	mov	r2, r6
 801408c:	4649      	mov	r1, r9
 801408e:	4640      	mov	r0, r8
 8014090:	47d0      	blx	sl
 8014092:	3001      	adds	r0, #1
 8014094:	d09d      	beq.n	8013fd2 <_printf_i+0x15a>
 8014096:	3501      	adds	r5, #1
 8014098:	68e3      	ldr	r3, [r4, #12]
 801409a:	9903      	ldr	r1, [sp, #12]
 801409c:	1a5b      	subs	r3, r3, r1
 801409e:	42ab      	cmp	r3, r5
 80140a0:	dcf2      	bgt.n	8014088 <_printf_i+0x210>
 80140a2:	e7eb      	b.n	801407c <_printf_i+0x204>
 80140a4:	2500      	movs	r5, #0
 80140a6:	f104 0619 	add.w	r6, r4, #25
 80140aa:	e7f5      	b.n	8014098 <_printf_i+0x220>
 80140ac:	08014a61 	.word	0x08014a61
 80140b0:	08014a72 	.word	0x08014a72

080140b4 <memmove>:
 80140b4:	4288      	cmp	r0, r1
 80140b6:	b510      	push	{r4, lr}
 80140b8:	eb01 0402 	add.w	r4, r1, r2
 80140bc:	d902      	bls.n	80140c4 <memmove+0x10>
 80140be:	4284      	cmp	r4, r0
 80140c0:	4623      	mov	r3, r4
 80140c2:	d807      	bhi.n	80140d4 <memmove+0x20>
 80140c4:	1e43      	subs	r3, r0, #1
 80140c6:	42a1      	cmp	r1, r4
 80140c8:	d008      	beq.n	80140dc <memmove+0x28>
 80140ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80140ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80140d2:	e7f8      	b.n	80140c6 <memmove+0x12>
 80140d4:	4402      	add	r2, r0
 80140d6:	4601      	mov	r1, r0
 80140d8:	428a      	cmp	r2, r1
 80140da:	d100      	bne.n	80140de <memmove+0x2a>
 80140dc:	bd10      	pop	{r4, pc}
 80140de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80140e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80140e6:	e7f7      	b.n	80140d8 <memmove+0x24>

080140e8 <_sbrk_r>:
 80140e8:	b538      	push	{r3, r4, r5, lr}
 80140ea:	2300      	movs	r3, #0
 80140ec:	4d05      	ldr	r5, [pc, #20]	@ (8014104 <_sbrk_r+0x1c>)
 80140ee:	4604      	mov	r4, r0
 80140f0:	4608      	mov	r0, r1
 80140f2:	602b      	str	r3, [r5, #0]
 80140f4:	f7ef fd3e 	bl	8003b74 <_sbrk>
 80140f8:	1c43      	adds	r3, r0, #1
 80140fa:	d102      	bne.n	8014102 <_sbrk_r+0x1a>
 80140fc:	682b      	ldr	r3, [r5, #0]
 80140fe:	b103      	cbz	r3, 8014102 <_sbrk_r+0x1a>
 8014100:	6023      	str	r3, [r4, #0]
 8014102:	bd38      	pop	{r3, r4, r5, pc}
 8014104:	200073d8 	.word	0x200073d8

08014108 <memchr>:
 8014108:	b2c9      	uxtb	r1, r1
 801410a:	4603      	mov	r3, r0
 801410c:	4402      	add	r2, r0
 801410e:	b510      	push	{r4, lr}
 8014110:	4293      	cmp	r3, r2
 8014112:	4618      	mov	r0, r3
 8014114:	d101      	bne.n	801411a <memchr+0x12>
 8014116:	2000      	movs	r0, #0
 8014118:	e003      	b.n	8014122 <memchr+0x1a>
 801411a:	7804      	ldrb	r4, [r0, #0]
 801411c:	3301      	adds	r3, #1
 801411e:	428c      	cmp	r4, r1
 8014120:	d1f6      	bne.n	8014110 <memchr+0x8>
 8014122:	bd10      	pop	{r4, pc}

08014124 <memcpy>:
 8014124:	440a      	add	r2, r1
 8014126:	1e43      	subs	r3, r0, #1
 8014128:	4291      	cmp	r1, r2
 801412a:	d100      	bne.n	801412e <memcpy+0xa>
 801412c:	4770      	bx	lr
 801412e:	b510      	push	{r4, lr}
 8014130:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014134:	4291      	cmp	r1, r2
 8014136:	f803 4f01 	strb.w	r4, [r3, #1]!
 801413a:	d1f9      	bne.n	8014130 <memcpy+0xc>
 801413c:	bd10      	pop	{r4, pc}

0801413e <_realloc_r>:
 801413e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014142:	4607      	mov	r7, r0
 8014144:	4614      	mov	r4, r2
 8014146:	460d      	mov	r5, r1
 8014148:	b921      	cbnz	r1, 8014154 <_realloc_r+0x16>
 801414a:	4611      	mov	r1, r2
 801414c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014150:	f7ff bc3c 	b.w	80139cc <_malloc_r>
 8014154:	b92a      	cbnz	r2, 8014162 <_realloc_r+0x24>
 8014156:	4625      	mov	r5, r4
 8014158:	f7ff fbcc 	bl	80138f4 <_free_r>
 801415c:	4628      	mov	r0, r5
 801415e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014162:	f000 f81a 	bl	801419a <_malloc_usable_size_r>
 8014166:	4284      	cmp	r4, r0
 8014168:	4606      	mov	r6, r0
 801416a:	d802      	bhi.n	8014172 <_realloc_r+0x34>
 801416c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014170:	d8f4      	bhi.n	801415c <_realloc_r+0x1e>
 8014172:	4621      	mov	r1, r4
 8014174:	4638      	mov	r0, r7
 8014176:	f7ff fc29 	bl	80139cc <_malloc_r>
 801417a:	4680      	mov	r8, r0
 801417c:	b908      	cbnz	r0, 8014182 <_realloc_r+0x44>
 801417e:	4645      	mov	r5, r8
 8014180:	e7ec      	b.n	801415c <_realloc_r+0x1e>
 8014182:	42b4      	cmp	r4, r6
 8014184:	4622      	mov	r2, r4
 8014186:	4629      	mov	r1, r5
 8014188:	bf28      	it	cs
 801418a:	4632      	movcs	r2, r6
 801418c:	f7ff ffca 	bl	8014124 <memcpy>
 8014190:	4629      	mov	r1, r5
 8014192:	4638      	mov	r0, r7
 8014194:	f7ff fbae 	bl	80138f4 <_free_r>
 8014198:	e7f1      	b.n	801417e <_realloc_r+0x40>

0801419a <_malloc_usable_size_r>:
 801419a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801419e:	1f18      	subs	r0, r3, #4
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	bfbc      	itt	lt
 80141a4:	580b      	ldrlt	r3, [r1, r0]
 80141a6:	18c0      	addlt	r0, r0, r3
 80141a8:	4770      	bx	lr

080141aa <powf>:
 80141aa:	b508      	push	{r3, lr}
 80141ac:	ed2d 8b04 	vpush	{d8-d9}
 80141b0:	eeb0 8a60 	vmov.f32	s16, s1
 80141b4:	eeb0 9a40 	vmov.f32	s18, s0
 80141b8:	f000 f85c 	bl	8014274 <__ieee754_powf>
 80141bc:	eef0 8a40 	vmov.f32	s17, s0
 80141c0:	eeb4 8a48 	vcmp.f32	s16, s16
 80141c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c8:	d63e      	bvs.n	8014248 <powf+0x9e>
 80141ca:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80141ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d2:	d112      	bne.n	80141fa <powf+0x50>
 80141d4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80141d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141dc:	d039      	beq.n	8014252 <powf+0xa8>
 80141de:	eeb0 0a48 	vmov.f32	s0, s16
 80141e2:	f000 f839 	bl	8014258 <finitef>
 80141e6:	b378      	cbz	r0, 8014248 <powf+0x9e>
 80141e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80141ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f0:	d52a      	bpl.n	8014248 <powf+0x9e>
 80141f2:	f7ff fb4b 	bl	801388c <__errno>
 80141f6:	2322      	movs	r3, #34	@ 0x22
 80141f8:	e014      	b.n	8014224 <powf+0x7a>
 80141fa:	f000 f82d 	bl	8014258 <finitef>
 80141fe:	b998      	cbnz	r0, 8014228 <powf+0x7e>
 8014200:	eeb0 0a49 	vmov.f32	s0, s18
 8014204:	f000 f828 	bl	8014258 <finitef>
 8014208:	b170      	cbz	r0, 8014228 <powf+0x7e>
 801420a:	eeb0 0a48 	vmov.f32	s0, s16
 801420e:	f000 f823 	bl	8014258 <finitef>
 8014212:	b148      	cbz	r0, 8014228 <powf+0x7e>
 8014214:	eef4 8a68 	vcmp.f32	s17, s17
 8014218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801421c:	d7e9      	bvc.n	80141f2 <powf+0x48>
 801421e:	f7ff fb35 	bl	801388c <__errno>
 8014222:	2321      	movs	r3, #33	@ 0x21
 8014224:	6003      	str	r3, [r0, #0]
 8014226:	e00f      	b.n	8014248 <powf+0x9e>
 8014228:	eef5 8a40 	vcmp.f32	s17, #0.0
 801422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014230:	d10a      	bne.n	8014248 <powf+0x9e>
 8014232:	eeb0 0a49 	vmov.f32	s0, s18
 8014236:	f000 f80f 	bl	8014258 <finitef>
 801423a:	b128      	cbz	r0, 8014248 <powf+0x9e>
 801423c:	eeb0 0a48 	vmov.f32	s0, s16
 8014240:	f000 f80a 	bl	8014258 <finitef>
 8014244:	2800      	cmp	r0, #0
 8014246:	d1d4      	bne.n	80141f2 <powf+0x48>
 8014248:	eeb0 0a68 	vmov.f32	s0, s17
 801424c:	ecbd 8b04 	vpop	{d8-d9}
 8014250:	bd08      	pop	{r3, pc}
 8014252:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8014256:	e7f7      	b.n	8014248 <powf+0x9e>

08014258 <finitef>:
 8014258:	ee10 3a10 	vmov	r3, s0
 801425c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8014260:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8014264:	bfac      	ite	ge
 8014266:	2000      	movge	r0, #0
 8014268:	2001      	movlt	r0, #1
 801426a:	4770      	bx	lr

0801426c <roundf>:
 801426c:	feb8 0a40 	vrinta.f32	s0, s0
 8014270:	4770      	bx	lr
	...

08014274 <__ieee754_powf>:
 8014274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014278:	ee10 4a90 	vmov	r4, s1
 801427c:	ee10 6a10 	vmov	r6, s0
 8014280:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8014284:	ed2d 8b02 	vpush	{d8}
 8014288:	eeb0 8a40 	vmov.f32	s16, s0
 801428c:	eef0 8a60 	vmov.f32	s17, s1
 8014290:	d10c      	bne.n	80142ac <__ieee754_powf+0x38>
 8014292:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8014296:	0076      	lsls	r6, r6, #1
 8014298:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801429c:	f240 8275 	bls.w	801478a <__ieee754_powf+0x516>
 80142a0:	ee38 0a28 	vadd.f32	s0, s16, s17
 80142a4:	ecbd 8b02 	vpop	{d8}
 80142a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142ac:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80142b0:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80142b4:	d802      	bhi.n	80142bc <__ieee754_powf+0x48>
 80142b6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80142ba:	d908      	bls.n	80142ce <__ieee754_powf+0x5a>
 80142bc:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80142c0:	d1ee      	bne.n	80142a0 <__ieee754_powf+0x2c>
 80142c2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80142c6:	0064      	lsls	r4, r4, #1
 80142c8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80142cc:	e7e6      	b.n	801429c <__ieee754_powf+0x28>
 80142ce:	2e00      	cmp	r6, #0
 80142d0:	da1f      	bge.n	8014312 <__ieee754_powf+0x9e>
 80142d2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80142d6:	f080 8261 	bcs.w	801479c <__ieee754_powf+0x528>
 80142da:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80142de:	d32e      	bcc.n	801433e <__ieee754_powf+0xca>
 80142e0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80142e4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80142e8:	fa49 f503 	asr.w	r5, r9, r3
 80142ec:	fa05 f303 	lsl.w	r3, r5, r3
 80142f0:	454b      	cmp	r3, r9
 80142f2:	d122      	bne.n	801433a <__ieee754_powf+0xc6>
 80142f4:	f005 0501 	and.w	r5, r5, #1
 80142f8:	f1c5 0502 	rsb	r5, r5, #2
 80142fc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8014300:	d11e      	bne.n	8014340 <__ieee754_powf+0xcc>
 8014302:	2c00      	cmp	r4, #0
 8014304:	f280 8247 	bge.w	8014796 <__ieee754_powf+0x522>
 8014308:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801430c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8014310:	e7c8      	b.n	80142a4 <__ieee754_powf+0x30>
 8014312:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8014316:	d110      	bne.n	801433a <__ieee754_powf+0xc6>
 8014318:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801431c:	f000 8235 	beq.w	801478a <__ieee754_powf+0x516>
 8014320:	d905      	bls.n	801432e <__ieee754_powf+0xba>
 8014322:	2c00      	cmp	r4, #0
 8014324:	ed9f 0ac2 	vldr	s0, [pc, #776]	@ 8014630 <__ieee754_powf+0x3bc>
 8014328:	fe28 0a80 	vselge.f32	s0, s17, s0
 801432c:	e7ba      	b.n	80142a4 <__ieee754_powf+0x30>
 801432e:	2c00      	cmp	r4, #0
 8014330:	f280 822e 	bge.w	8014790 <__ieee754_powf+0x51c>
 8014334:	eeb1 0a68 	vneg.f32	s0, s17
 8014338:	e7b4      	b.n	80142a4 <__ieee754_powf+0x30>
 801433a:	2500      	movs	r5, #0
 801433c:	e7de      	b.n	80142fc <__ieee754_powf+0x88>
 801433e:	2500      	movs	r5, #0
 8014340:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014344:	d102      	bne.n	801434c <__ieee754_powf+0xd8>
 8014346:	ee28 0a08 	vmul.f32	s0, s16, s16
 801434a:	e7ab      	b.n	80142a4 <__ieee754_powf+0x30>
 801434c:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8014350:	f040 8229 	bne.w	80147a6 <__ieee754_powf+0x532>
 8014354:	2e00      	cmp	r6, #0
 8014356:	f2c0 8226 	blt.w	80147a6 <__ieee754_powf+0x532>
 801435a:	eeb0 0a48 	vmov.f32	s0, s16
 801435e:	ecbd 8b02 	vpop	{d8}
 8014362:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014366:	f000 bae7 	b.w	8014938 <__ieee754_sqrtf>
 801436a:	2d01      	cmp	r5, #1
 801436c:	d19a      	bne.n	80142a4 <__ieee754_powf+0x30>
 801436e:	eeb1 0a40 	vneg.f32	s0, s0
 8014372:	e797      	b.n	80142a4 <__ieee754_powf+0x30>
 8014374:	0ff0      	lsrs	r0, r6, #31
 8014376:	3801      	subs	r0, #1
 8014378:	ea55 0300 	orrs.w	r3, r5, r0
 801437c:	d104      	bne.n	8014388 <__ieee754_powf+0x114>
 801437e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8014382:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014386:	e78d      	b.n	80142a4 <__ieee754_powf+0x30>
 8014388:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801438c:	d96c      	bls.n	8014468 <__ieee754_powf+0x1f4>
 801438e:	4ba9      	ldr	r3, [pc, #676]	@ (8014634 <__ieee754_powf+0x3c0>)
 8014390:	4598      	cmp	r8, r3
 8014392:	d808      	bhi.n	80143a6 <__ieee754_powf+0x132>
 8014394:	2c00      	cmp	r4, #0
 8014396:	da0b      	bge.n	80143b0 <__ieee754_powf+0x13c>
 8014398:	2000      	movs	r0, #0
 801439a:	ecbd 8b02 	vpop	{d8}
 801439e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143a2:	f000 bac3 	b.w	801492c <__math_oflowf>
 80143a6:	4ba4      	ldr	r3, [pc, #656]	@ (8014638 <__ieee754_powf+0x3c4>)
 80143a8:	4598      	cmp	r8, r3
 80143aa:	d908      	bls.n	80143be <__ieee754_powf+0x14a>
 80143ac:	2c00      	cmp	r4, #0
 80143ae:	dcf3      	bgt.n	8014398 <__ieee754_powf+0x124>
 80143b0:	2000      	movs	r0, #0
 80143b2:	ecbd 8b02 	vpop	{d8}
 80143b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143ba:	f000 bab1 	b.w	8014920 <__math_uflowf>
 80143be:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80143c2:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 801463c <__ieee754_powf+0x3c8>
 80143c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80143ca:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80143ce:	ee20 7a00 	vmul.f32	s14, s0, s0
 80143d2:	eee0 6a67 	vfms.f32	s13, s0, s15
 80143d6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80143da:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80143de:	eddf 6a98 	vldr	s13, [pc, #608]	@ 8014640 <__ieee754_powf+0x3cc>
 80143e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80143e6:	eddf 7a97 	vldr	s15, [pc, #604]	@ 8014644 <__ieee754_powf+0x3d0>
 80143ea:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80143ee:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8014648 <__ieee754_powf+0x3d4>
 80143f2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80143f6:	eeb0 7a67 	vmov.f32	s14, s15
 80143fa:	eea0 7a26 	vfma.f32	s14, s0, s13
 80143fe:	ee17 3a10 	vmov	r3, s14
 8014402:	f36f 030b 	bfc	r3, #0, #12
 8014406:	ee07 3a10 	vmov	s14, r3
 801440a:	eeb0 6a47 	vmov.f32	s12, s14
 801440e:	eea0 6a66 	vfms.f32	s12, s0, s13
 8014412:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014416:	3d01      	subs	r5, #1
 8014418:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801441c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8014420:	f36f 040b 	bfc	r4, #0, #12
 8014424:	4305      	orrs	r5, r0
 8014426:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801442a:	fe08 8a26 	vseleq.f32	s16, s16, s13
 801442e:	ee06 4a90 	vmov	s13, r4
 8014432:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8014436:	ee67 7a26 	vmul.f32	s15, s14, s13
 801443a:	eee6 0a07 	vfma.f32	s1, s12, s14
 801443e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8014442:	ee17 1a10 	vmov	r1, s14
 8014446:	2900      	cmp	r1, #0
 8014448:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801444c:	f340 80dc 	ble.w	8014608 <__ieee754_powf+0x394>
 8014450:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8014454:	f240 80c9 	bls.w	80145ea <__ieee754_powf+0x376>
 8014458:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801445c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014460:	bf4c      	ite	mi
 8014462:	2001      	movmi	r0, #1
 8014464:	2000      	movpl	r0, #0
 8014466:	e798      	b.n	801439a <__ieee754_powf+0x126>
 8014468:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801446c:	bf05      	ittet	eq
 801446e:	eddf 7a77 	vldreq	s15, [pc, #476]	@ 801464c <__ieee754_powf+0x3d8>
 8014472:	f06f 0317 	mvneq.w	r3, #23
 8014476:	2300      	movne	r3, #0
 8014478:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801447c:	bf08      	it	eq
 801447e:	ee17 7a90 	vmoveq	r7, s15
 8014482:	15fa      	asrs	r2, r7, #23
 8014484:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8014488:	3a7f      	subs	r2, #127	@ 0x7f
 801448a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801448e:	441a      	add	r2, r3
 8014490:	4b6f      	ldr	r3, [pc, #444]	@ (8014650 <__ieee754_powf+0x3dc>)
 8014492:	429f      	cmp	r7, r3
 8014494:	dd06      	ble.n	80144a4 <__ieee754_powf+0x230>
 8014496:	4b6f      	ldr	r3, [pc, #444]	@ (8014654 <__ieee754_powf+0x3e0>)
 8014498:	429f      	cmp	r7, r3
 801449a:	f340 80a4 	ble.w	80145e6 <__ieee754_powf+0x372>
 801449e:	3201      	adds	r2, #1
 80144a0:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80144a4:	2600      	movs	r6, #0
 80144a6:	4b6c      	ldr	r3, [pc, #432]	@ (8014658 <__ieee754_powf+0x3e4>)
 80144a8:	ee07 1a10 	vmov	s14, r1
 80144ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80144b0:	1049      	asrs	r1, r1, #1
 80144b2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80144b6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80144ba:	edd3 5a00 	vldr	s11, [r3]
 80144be:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80144c2:	4b66      	ldr	r3, [pc, #408]	@ (801465c <__ieee754_powf+0x3e8>)
 80144c4:	ee75 7a87 	vadd.f32	s15, s11, s14
 80144c8:	ee37 6a65 	vsub.f32	s12, s14, s11
 80144cc:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80144d0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80144d4:	ee07 1a90 	vmov	s15, r1
 80144d8:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80144dc:	ee37 7a65 	vsub.f32	s14, s14, s11
 80144e0:	eddf 5a5f 	vldr	s11, [pc, #380]	@ 8014660 <__ieee754_powf+0x3ec>
 80144e4:	ee26 5a24 	vmul.f32	s10, s12, s9
 80144e8:	ee15 7a10 	vmov	r7, s10
 80144ec:	401f      	ands	r7, r3
 80144ee:	ee06 7a90 	vmov	s13, r7
 80144f2:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80144f6:	ee65 7a05 	vmul.f32	s15, s10, s10
 80144fa:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80144fe:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8014664 <__ieee754_powf+0x3f0>
 8014502:	eee7 5a87 	vfma.f32	s11, s15, s14
 8014506:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8014668 <__ieee754_powf+0x3f4>
 801450a:	ee26 6a24 	vmul.f32	s12, s12, s9
 801450e:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8014512:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014516:	eddf 5a49 	vldr	s11, [pc, #292]	@ 801463c <__ieee754_powf+0x3c8>
 801451a:	eee7 5a27 	vfma.f32	s11, s14, s15
 801451e:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 801466c <__ieee754_powf+0x3f8>
 8014522:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014526:	eddf 5a52 	vldr	s11, [pc, #328]	@ 8014670 <__ieee754_powf+0x3fc>
 801452a:	eee7 5a27 	vfma.f32	s11, s14, s15
 801452e:	ee35 7a26 	vadd.f32	s14, s10, s13
 8014532:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8014536:	ee27 7a06 	vmul.f32	s14, s14, s12
 801453a:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801453e:	eef0 5a67 	vmov.f32	s11, s15
 8014542:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8014546:	ee75 5a87 	vadd.f32	s11, s11, s14
 801454a:	ee15 1a90 	vmov	r1, s11
 801454e:	4019      	ands	r1, r3
 8014550:	ee05 1a90 	vmov	s11, r1
 8014554:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8014558:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801455c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014560:	ee67 7a85 	vmul.f32	s15, s15, s10
 8014564:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014568:	eeb0 6a67 	vmov.f32	s12, s15
 801456c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014570:	ee16 1a10 	vmov	r1, s12
 8014574:	4019      	ands	r1, r3
 8014576:	ee06 1a10 	vmov	s12, r1
 801457a:	493e      	ldr	r1, [pc, #248]	@ (8014674 <__ieee754_powf+0x400>)
 801457c:	eeb0 7a46 	vmov.f32	s14, s12
 8014580:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8014584:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8014588:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8014678 <__ieee754_powf+0x404>
 801458c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014590:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801467c <__ieee754_powf+0x408>
 8014594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014598:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8014680 <__ieee754_powf+0x40c>
 801459c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80145a0:	ed91 7a00 	vldr	s14, [r1]
 80145a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80145a8:	ee07 2a10 	vmov	s14, r2
 80145ac:	4a35      	ldr	r2, [pc, #212]	@ (8014684 <__ieee754_powf+0x410>)
 80145ae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80145b2:	eeb0 7a67 	vmov.f32	s14, s15
 80145b6:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80145ba:	ed92 5a00 	vldr	s10, [r2]
 80145be:	eea6 7a25 	vfma.f32	s14, s12, s11
 80145c2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80145c6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80145ca:	ee17 2a10 	vmov	r2, s14
 80145ce:	401a      	ands	r2, r3
 80145d0:	ee07 2a10 	vmov	s14, r2
 80145d4:	ee77 6a66 	vsub.f32	s13, s14, s13
 80145d8:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80145dc:	eee6 6a65 	vfms.f32	s13, s12, s11
 80145e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80145e4:	e717      	b.n	8014416 <__ieee754_powf+0x1a2>
 80145e6:	2601      	movs	r6, #1
 80145e8:	e75d      	b.n	80144a6 <__ieee754_powf+0x232>
 80145ea:	d151      	bne.n	8014690 <__ieee754_powf+0x41c>
 80145ec:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8014688 <__ieee754_powf+0x414>
 80145f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80145f4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80145f8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80145fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014600:	f73f af2a 	bgt.w	8014458 <__ieee754_powf+0x1e4>
 8014604:	2386      	movs	r3, #134	@ 0x86
 8014606:	e047      	b.n	8014698 <__ieee754_powf+0x424>
 8014608:	4a20      	ldr	r2, [pc, #128]	@ (801468c <__ieee754_powf+0x418>)
 801460a:	4293      	cmp	r3, r2
 801460c:	d907      	bls.n	801461e <__ieee754_powf+0x3aa>
 801460e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014616:	bf4c      	ite	mi
 8014618:	2001      	movmi	r0, #1
 801461a:	2000      	movpl	r0, #0
 801461c:	e6c9      	b.n	80143b2 <__ieee754_powf+0x13e>
 801461e:	d137      	bne.n	8014690 <__ieee754_powf+0x41c>
 8014620:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014624:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801462c:	dbea      	blt.n	8014604 <__ieee754_powf+0x390>
 801462e:	e7ee      	b.n	801460e <__ieee754_powf+0x39a>
 8014630:	00000000 	.word	0x00000000
 8014634:	3f7ffff3 	.word	0x3f7ffff3
 8014638:	3f800007 	.word	0x3f800007
 801463c:	3eaaaaab 	.word	0x3eaaaaab
 8014640:	3fb8aa00 	.word	0x3fb8aa00
 8014644:	3fb8aa3b 	.word	0x3fb8aa3b
 8014648:	36eca570 	.word	0x36eca570
 801464c:	4b800000 	.word	0x4b800000
 8014650:	001cc471 	.word	0x001cc471
 8014654:	005db3d6 	.word	0x005db3d6
 8014658:	08014a94 	.word	0x08014a94
 801465c:	fffff000 	.word	0xfffff000
 8014660:	3e6c3255 	.word	0x3e6c3255
 8014664:	3e53f142 	.word	0x3e53f142
 8014668:	3e8ba305 	.word	0x3e8ba305
 801466c:	3edb6db7 	.word	0x3edb6db7
 8014670:	3f19999a 	.word	0x3f19999a
 8014674:	08014a84 	.word	0x08014a84
 8014678:	3f763800 	.word	0x3f763800
 801467c:	3f76384f 	.word	0x3f76384f
 8014680:	369dc3a0 	.word	0x369dc3a0
 8014684:	08014a8c 	.word	0x08014a8c
 8014688:	3338aa3c 	.word	0x3338aa3c
 801468c:	43160000 	.word	0x43160000
 8014690:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8014694:	d974      	bls.n	8014780 <__ieee754_powf+0x50c>
 8014696:	15db      	asrs	r3, r3, #23
 8014698:	3b7e      	subs	r3, #126	@ 0x7e
 801469a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801469e:	4a53      	ldr	r2, [pc, #332]	@ (80147ec <__ieee754_powf+0x578>)
 80146a0:	2900      	cmp	r1, #0
 80146a2:	fa40 f003 	asr.w	r0, r0, r3
 80146a6:	4408      	add	r0, r1
 80146a8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80146ac:	f1a3 037f 	sub.w	r3, r3, #127	@ 0x7f
 80146b0:	fa42 f203 	asr.w	r2, r2, r3
 80146b4:	f1c3 0317 	rsb	r3, r3, #23
 80146b8:	ea02 0200 	and.w	r2, r2, r0
 80146bc:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80146c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80146c4:	ee07 2a10 	vmov	s14, r2
 80146c8:	fa40 f003 	asr.w	r0, r0, r3
 80146cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80146d0:	bfb8      	it	lt
 80146d2:	4240      	neglt	r0, r0
 80146d4:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80146d8:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80147f0 <__ieee754_powf+0x57c>
 80146dc:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80147f4 <__ieee754_powf+0x580>
 80146e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80146e4:	ee16 3a90 	vmov	r3, s13
 80146e8:	f36f 030b 	bfc	r3, #0, #12
 80146ec:	ee06 3a90 	vmov	s13, r3
 80146f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80146f4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80146f8:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80147f8 <__ieee754_powf+0x584>
 80146fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014700:	eee0 7a87 	vfma.f32	s15, s1, s14
 8014704:	eeb0 7a67 	vmov.f32	s14, s15
 8014708:	eea6 7a86 	vfma.f32	s14, s13, s12
 801470c:	eef0 5a47 	vmov.f32	s11, s14
 8014710:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8014714:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 80147fc <__ieee754_powf+0x588>
 8014718:	ee67 6a07 	vmul.f32	s13, s14, s14
 801471c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014720:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8014800 <__ieee754_powf+0x58c>
 8014724:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014728:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8014804 <__ieee754_powf+0x590>
 801472c:	eee7 7a27 	vfma.f32	s15, s14, s15
 8014730:	eee6 5a26 	vfma.f32	s11, s12, s13
 8014734:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 8014808 <__ieee754_powf+0x594>
 8014738:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801473c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801480c <__ieee754_powf+0x598>
 8014740:	eee6 5a26 	vfma.f32	s11, s12, s13
 8014744:	eeb0 6a47 	vmov.f32	s12, s14
 8014748:	eea5 6ae6 	vfms.f32	s12, s11, s13
 801474c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8014750:	ee67 5a06 	vmul.f32	s11, s14, s12
 8014754:	ee36 6a66 	vsub.f32	s12, s12, s13
 8014758:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801475c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014760:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014764:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014768:	ee10 3a10 	vmov	r3, s0
 801476c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014770:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8014774:	da06      	bge.n	8014784 <__ieee754_powf+0x510>
 8014776:	f000 f855 	bl	8014824 <scalbnf>
 801477a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801477e:	e591      	b.n	80142a4 <__ieee754_powf+0x30>
 8014780:	2000      	movs	r0, #0
 8014782:	e7a7      	b.n	80146d4 <__ieee754_powf+0x460>
 8014784:	ee00 3a10 	vmov	s0, r3
 8014788:	e7f7      	b.n	801477a <__ieee754_powf+0x506>
 801478a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801478e:	e589      	b.n	80142a4 <__ieee754_powf+0x30>
 8014790:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8014810 <__ieee754_powf+0x59c>
 8014794:	e586      	b.n	80142a4 <__ieee754_powf+0x30>
 8014796:	eeb0 0a48 	vmov.f32	s0, s16
 801479a:	e583      	b.n	80142a4 <__ieee754_powf+0x30>
 801479c:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80147a0:	f43f adba 	beq.w	8014318 <__ieee754_powf+0xa4>
 80147a4:	2502      	movs	r5, #2
 80147a6:	eeb0 0a48 	vmov.f32	s0, s16
 80147aa:	4647      	mov	r7, r8
 80147ac:	f000 f832 	bl	8014814 <fabsf>
 80147b0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80147b4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80147b8:	d003      	beq.n	80147c2 <__ieee754_powf+0x54e>
 80147ba:	f1b8 0f00 	cmp.w	r8, #0
 80147be:	f47f add9 	bne.w	8014374 <__ieee754_powf+0x100>
 80147c2:	2c00      	cmp	r4, #0
 80147c4:	bfbc      	itt	lt
 80147c6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80147ca:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80147ce:	2e00      	cmp	r6, #0
 80147d0:	f6bf ad68 	bge.w	80142a4 <__ieee754_powf+0x30>
 80147d4:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80147d8:	ea58 0805 	orrs.w	r8, r8, r5
 80147dc:	f47f adc5 	bne.w	801436a <__ieee754_powf+0xf6>
 80147e0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80147e4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80147e8:	e55c      	b.n	80142a4 <__ieee754_powf+0x30>
 80147ea:	bf00      	nop
 80147ec:	ff800000 	.word	0xff800000
 80147f0:	3f317218 	.word	0x3f317218
 80147f4:	3f317200 	.word	0x3f317200
 80147f8:	35bfbe8c 	.word	0x35bfbe8c
 80147fc:	b5ddea0e 	.word	0xb5ddea0e
 8014800:	3331bb4c 	.word	0x3331bb4c
 8014804:	388ab355 	.word	0x388ab355
 8014808:	bb360b61 	.word	0xbb360b61
 801480c:	3e2aaaab 	.word	0x3e2aaaab
 8014810:	00000000 	.word	0x00000000

08014814 <fabsf>:
 8014814:	ee10 3a10 	vmov	r3, s0
 8014818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801481c:	ee00 3a10 	vmov	s0, r3
 8014820:	4770      	bx	lr
	...

08014824 <scalbnf>:
 8014824:	ee10 3a10 	vmov	r3, s0
 8014828:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801482c:	d02a      	beq.n	8014884 <scalbnf+0x60>
 801482e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014832:	d302      	bcc.n	801483a <scalbnf+0x16>
 8014834:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014838:	4770      	bx	lr
 801483a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801483e:	d122      	bne.n	8014886 <scalbnf+0x62>
 8014840:	4b23      	ldr	r3, [pc, #140]	@ (80148d0 <scalbnf+0xac>)
 8014842:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80148d4 <scalbnf+0xb0>
 8014846:	4298      	cmp	r0, r3
 8014848:	ee20 0a27 	vmul.f32	s0, s0, s15
 801484c:	db16      	blt.n	801487c <scalbnf+0x58>
 801484e:	ee10 3a10 	vmov	r3, s0
 8014852:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014856:	3a19      	subs	r2, #25
 8014858:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801485c:	4288      	cmp	r0, r1
 801485e:	dd14      	ble.n	801488a <scalbnf+0x66>
 8014860:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 80148d8 <scalbnf+0xb4>
 8014864:	ee10 3a10 	vmov	r3, s0
 8014868:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80148dc <scalbnf+0xb8>
 801486c:	eeb0 7a67 	vmov.f32	s14, s15
 8014870:	2b00      	cmp	r3, #0
 8014872:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8014876:	ee27 0a87 	vmul.f32	s0, s15, s14
 801487a:	4770      	bx	lr
 801487c:	eddf 7a18 	vldr	s15, [pc, #96]	@ 80148e0 <scalbnf+0xbc>
 8014880:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014884:	4770      	bx	lr
 8014886:	0dd2      	lsrs	r2, r2, #23
 8014888:	e7e6      	b.n	8014858 <scalbnf+0x34>
 801488a:	4410      	add	r0, r2
 801488c:	28fe      	cmp	r0, #254	@ 0xfe
 801488e:	dce7      	bgt.n	8014860 <scalbnf+0x3c>
 8014890:	2800      	cmp	r0, #0
 8014892:	dd06      	ble.n	80148a2 <scalbnf+0x7e>
 8014894:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014898:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801489c:	ee00 3a10 	vmov	s0, r3
 80148a0:	4770      	bx	lr
 80148a2:	f110 0f16 	cmn.w	r0, #22
 80148a6:	da09      	bge.n	80148bc <scalbnf+0x98>
 80148a8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80148e0 <scalbnf+0xbc>
 80148ac:	ee10 3a10 	vmov	r3, s0
 80148b0:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80148e4 <scalbnf+0xc0>
 80148b4:	eeb0 7a67 	vmov.f32	s14, s15
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	e7da      	b.n	8014872 <scalbnf+0x4e>
 80148bc:	3019      	adds	r0, #25
 80148be:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80148c2:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80148e8 <scalbnf+0xc4>
 80148c6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80148ca:	ee07 3a90 	vmov	s15, r3
 80148ce:	e7d7      	b.n	8014880 <scalbnf+0x5c>
 80148d0:	ffff3cb0 	.word	0xffff3cb0
 80148d4:	4c000000 	.word	0x4c000000
 80148d8:	7149f2ca 	.word	0x7149f2ca
 80148dc:	f149f2ca 	.word	0xf149f2ca
 80148e0:	0da24260 	.word	0x0da24260
 80148e4:	8da24260 	.word	0x8da24260
 80148e8:	33000000 	.word	0x33000000

080148ec <with_errnof>:
 80148ec:	b510      	push	{r4, lr}
 80148ee:	ed2d 8b02 	vpush	{d8}
 80148f2:	eeb0 8a40 	vmov.f32	s16, s0
 80148f6:	4604      	mov	r4, r0
 80148f8:	f7fe ffc8 	bl	801388c <__errno>
 80148fc:	6004      	str	r4, [r0, #0]
 80148fe:	eeb0 0a48 	vmov.f32	s0, s16
 8014902:	ecbd 8b02 	vpop	{d8}
 8014906:	bd10      	pop	{r4, pc}

08014908 <xflowf>:
 8014908:	b130      	cbz	r0, 8014918 <xflowf+0x10>
 801490a:	eef1 7a40 	vneg.f32	s15, s0
 801490e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014912:	2022      	movs	r0, #34	@ 0x22
 8014914:	f7ff bfea 	b.w	80148ec <with_errnof>
 8014918:	eef0 7a40 	vmov.f32	s15, s0
 801491c:	e7f7      	b.n	801490e <xflowf+0x6>
	...

08014920 <__math_uflowf>:
 8014920:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014928 <__math_uflowf+0x8>
 8014924:	f7ff bff0 	b.w	8014908 <xflowf>
 8014928:	10000000 	.word	0x10000000

0801492c <__math_oflowf>:
 801492c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014934 <__math_oflowf+0x8>
 8014930:	f7ff bfea 	b.w	8014908 <xflowf>
 8014934:	70000000 	.word	0x70000000

08014938 <__ieee754_sqrtf>:
 8014938:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801493c:	4770      	bx	lr
	...

08014940 <_init>:
 8014940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014942:	bf00      	nop
 8014944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014946:	bc08      	pop	{r3}
 8014948:	469e      	mov	lr, r3
 801494a:	4770      	bx	lr

0801494c <_fini>:
 801494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801494e:	bf00      	nop
 8014950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014952:	bc08      	pop	{r3}
 8014954:	469e      	mov	lr, r3
 8014956:	4770      	bx	lr
